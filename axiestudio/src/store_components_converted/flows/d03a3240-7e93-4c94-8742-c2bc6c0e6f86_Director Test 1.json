{
  "id": "d03a3240-7e93-4c94-8742-c2bc6c0e6f86",
  "name": "Director Test (1)",
  "description": "Your Hub for Text Generation. (Converted from Langflow Store for AxieStudio compatibility)",
  "type": "FLOW",
  "is_component": false,
  "author": {
    "username": "erandror",
    "first_name": "Eran",
    "last_name": "Dror",
    "id": "ff1e4ad9-5617-460d-9ddb-1b9d874698d0",
    "full_name": "Eran Dror"
  },
  "store_url": "https://www.langflow.store/store/component/d03a3240-7e93-4c94-8742-c2bc6c0e6f86",
  "stats": {
    "downloads": 0,
    "likes": 0
  },
  "dates": {
    "created": "2024-07-10T21:33:19.480Z",
    "updated": "2024-07-10T21:33:19.557Z",
    "downloaded": "2025-08-19T17:50:05.876Z"
  },
  "tags": [],
  "technical": {
    "last_tested_version": "1.0.0a53",
    "private": false,
    "status": "Public"
  },
  "data": {
    "nodes": [
      {
        "id": "Prompt-XLyGX",
        "type": "genericNode",
        "position": {
          "x": 667.0531293298402,
          "y": -1008.6155758445934
        },
        "data": {
          "type": "Prompt",
          "node": {
            "template": {
              "code": {
                "type": "code",
                "required": true,
                "placeholder": "",
                "list": false,
                "show": true,
                "multiline": true,
                "value": "from langchain_core.prompts import PromptTemplate\n\nfrom axiestudio.custom import CustomComponent\nfrom axiestudio.field_typing import Prompt, TemplateField, Text\n\n\nclass PromptComponent(CustomComponent):\n    display_name: str = \"Prompt\"\n    description: str = \"Create a prompt template with dynamic variables.\"\n    icon = \"prompts\"\n\n    def build_config(self):\n        return {\n            \"template\": TemplateField(display_name=\"Template\"),\n            \"code\": TemplateField(advanced=True),\n        }\n\n    def build(\n        self,\n        template: Prompt,\n        **kwargs,\n    ) -> Text:\n        from axiestudio.base.prompts.utils import dict_values_to_string\n\n        prompt_template = PromptTemplate.from_template(Text(template))\n        kwargs = dict_values_to_string(kwargs)\n        kwargs = {k: \"\\n\".join(v) if isinstance(v, list) else v for k, v in kwargs.items()}\n        try:\n            formated_prompt = prompt_template.format(**kwargs)\n        except Exception as exc:\n            raise ValueError(f\"Error formatting prompt: {exc}\") from exc\n        self.status = f'Prompt:\\n\"{formated_prompt}\"'\n        return formated_prompt\n",
                "fileTypes": [],
                "file_path": "",
                "password": false,
                "name": "code",
                "advanced": true,
                "dynamic": true,
                "info": "",
                "load_from_db": false,
                "title_case": false
              },
              "template": {
                "type": "prompt",
                "required": false,
                "placeholder": "",
                "list": false,
                "show": true,
                "multiline": false,
                "value": "System: \n\"\"\"You are an attentive and empathetic AI user research director, overseeing real-time user research projects. Youâ€™ll receive real time transcripts of user and stakeholder interviews. Your goal is to create a comprehensive and complete research summary of the conversation.\"\"\"\n\n---\n\nPROJECT DETAILS\nProject Name: {project-name}\nProject Description: {project-description}\nMethod: {research-method}\nPrimary Goal: {research-goal}\nOther Business Goals: {business-goals}\n\n---\n\nYOUR RESPONSE\nFor every chunk of transcript, please answer these questions briefly:\n\n1. Is an interviewee speaking in this chunk, or only the facilitators?\n2. Is a new interviewee introduced in this new chunk or have I seen this interviewee before?\n3. Do any of the interviewees reveal new facts about their background or situation? (As opposed to talking concretely about the product or features.)\n4. Do any interviewees say something that seems like an especially eye opening, important, or revealing quote about how they think about their role, needs, or problem?\n5. Does the quote seem complete, or should we wait to the next chunk to complete it?\n6. Do any interviewees express a need, desire, pain-point, complaint, or provide information as to what needs to be in the product?\n7. Do any interviewees bring up any problems they have that may be related to the product?\n8. Do any interviewees answer one or more of the facilitator's question?\n\n\n---\n\nHere's the session history: {history}\n\n--\n\nHere's the latest message: {new-chunk} ",
                "fileTypes": [],
                "file_path": "",
                "password": false,
                "name": "template",
                "display_name": "Template",
                "advanced": false,
                "input_types": [
                  "Text"
                ],
                "dynamic": false,
                "info": "",
                "load_from_db": false,
                "title_case": false
              },
              "_type": "CustomComponent",
              "history": {
                "field_type": "str",
                "required": false,
                "placeholder": "",
                "list": false,
                "show": true,
                "multiline": true,
                "value": "",
                "fileTypes": [],
                "file_path": "",
                "password": false,
                "name": "history",
                "display_name": "history",
                "advanced": false,
                "input_types": [
                  "Document",
                  "Message",
                  "Record",
                  "Text"
                ],
                "dynamic": false,
                "info": "",
                "load_from_db": false,
                "title_case": false,
                "type": "str"
              },
              "new-chunk": {
                "field_type": "str",
                "required": false,
                "placeholder": "",
                "list": false,
                "show": true,
                "multiline": true,
                "value": "",
                "fileTypes": [],
                "file_path": "",
                "password": false,
                "name": "new-chunk",
                "display_name": "new-chunk",
                "advanced": false,
                "input_types": [
                  "Document",
                  "Message",
                  "Record",
                  "Text"
                ],
                "dynamic": false,
                "info": "",
                "load_from_db": false,
                "title_case": false,
                "type": "str"
              },
              "project-name": {
                "field_type": "str",
                "required": false,
                "placeholder": "",
                "list": false,
                "show": true,
                "multiline": true,
                "value": "",
                "fileTypes": [],
                "file_path": "",
                "password": false,
                "name": "project-name",
                "display_name": "project-name",
                "advanced": false,
                "input_types": [
                  "Document",
                  "Message",
                  "Record",
                  "Text"
                ],
                "dynamic": false,
                "info": "",
                "load_from_db": false,
                "title_case": false,
                "type": "str"
              },
              "project-description": {
                "field_type": "str",
                "required": false,
                "placeholder": "",
                "list": false,
                "show": true,
                "multiline": true,
                "value": "",
                "fileTypes": [],
                "file_path": "",
                "password": false,
                "name": "project-description",
                "display_name": "project-description",
                "advanced": false,
                "input_types": [
                  "Document",
                  "Message",
                  "Record",
                  "Text"
                ],
                "dynamic": false,
                "info": "",
                "load_from_db": false,
                "title_case": false,
                "type": "str"
              },
              "research-method": {
                "field_type": "str",
                "required": false,
                "placeholder": "",
                "list": false,
                "show": true,
                "multiline": true,
                "value": "",
                "fileTypes": [],
                "file_path": "",
                "password": false,
                "name": "research-method",
                "display_name": "research-method",
                "advanced": false,
                "input_types": [
                  "Document",
                  "Message",
                  "Record",
                  "Text"
                ],
                "dynamic": false,
                "info": "",
                "load_from_db": false,
                "title_case": false,
                "type": "str"
              },
              "research-goal": {
                "field_type": "str",
                "required": false,
                "placeholder": "",
                "list": false,
                "show": true,
                "multiline": true,
                "value": "",
                "fileTypes": [],
                "file_path": "",
                "password": false,
                "name": "research-goal",
                "display_name": "research-goal",
                "advanced": false,
                "input_types": [
                  "Document",
                  "Message",
                  "Record",
                  "Text"
                ],
                "dynamic": false,
                "info": "",
                "load_from_db": false,
                "title_case": false,
                "type": "str"
              },
              "business-goals": {
                "field_type": "str",
                "required": false,
                "placeholder": "",
                "list": false,
                "show": true,
                "multiline": true,
                "value": "",
                "fileTypes": [],
                "file_path": "",
                "password": false,
                "name": "business-goals",
                "display_name": "business-goals",
                "advanced": false,
                "input_types": [
                  "Document",
                  "Message",
                  "Record",
                  "Text"
                ],
                "dynamic": false,
                "info": "",
                "load_from_db": false,
                "title_case": false,
                "type": "str"
              }
            },
            "description": "Create a prompt template with dynamic variables.",
            "icon": "prompts",
            "is_input": null,
            "is_output": null,
            "is_composition": null,
            "base_classes": [
              "object",
              "str",
              "Text"
            ],
            "name": "",
            "display_name": "Prompt",
            "documentation": "",
            "custom_fields": {
              "template": [
                "project-name",
                "project-description",
                "research-method",
                "research-goal",
                "business-goals",
                "history",
                "new-chunk"
              ]
            },
            "output_types": [
              "Text"
            ],
            "full_path": null,
            "field_formatters": {},
            "frozen": false,
            "field_order": [],
            "beta": false,
            "error": null
          },
          "id": "Prompt-XLyGX",
          "description": "Create a prompt template with dynamic variables.",
          "display_name": "Prompt"
        },
        "selected": false,
        "width": 384,
        "height": 983,
        "positionAbsolute": {
          "x": 667.0531293298402,
          "y": -1008.6155758445934
        },
        "dragging": false
      },
      {
        "id": "OpenAIModel-uB4K9",
        "type": "genericNode",
        "position": {
          "x": 1459.0207807967663,
          "y": -561.2413834694103
        },
        "data": {
          "type": "OpenAIModel",
          "node": {
            "template": {
              "input_value": {
                "type": "str",
                "required": true,
                "placeholder": "",
                "list": false,
                "show": true,
                "multiline": false,
                "fileTypes": [],
                "file_path": "",
                "password": false,
                "name": "input_value",
                "display_name": "Input",
                "advanced": false,
                "input_types": [
                  "Text",
                  "Record",
                  "Prompt"
                ],
                "dynamic": false,
                "info": "",
                "load_from_db": false,
                "title_case": false
              },
              "code": {
                "type": "code",
                "required": true,
                "placeholder": "",
                "list": false,
                "show": true,
                "multiline": true,
                "value": "from typing import Optional\n\nfrom langchain_openai import ChatOpenAI\nfrom pydantic.v1 import SecretStr\n\nfrom axiestudio.base.constants import STREAM_INFO_TEXT\nfrom axiestudio.base.models.model import LCModelComponent\nfrom axiestudio.base.models.openai_constants import MODEL_NAMES\nfrom axiestudio.field_typing import NestedDict, Text\n\n\nclass OpenAIModelComponent(LCModelComponent):\n    display_name = \"OpenAI\"\n    description = \"Generates text using OpenAI LLMs.\"\n    icon = \"OpenAI\"\n\n    field_order = [\n        \"max_tokens\",\n        \"model_kwargs\",\n        \"model_name\",\n        \"openai_api_base\",\n        \"openai_api_key\",\n        \"temperature\",\n        \"input_value\",\n        \"system_message\",\n        \"stream\",\n    ]\n\n    def build_config(self):\n        return {\n            \"input_value\": {\"display_name\": \"Input\", \"input_types\": [\"Text\", \"Record\", \"Prompt\"]},\n            \"max_tokens\": {\n                \"display_name\": \"Max Tokens\",\n                \"advanced\": True,\n                \"info\": \"The maximum number of tokens to generate. Set to 0 for unlimited tokens.\",\n            },\n            \"model_kwargs\": {\n                \"display_name\": \"Model Kwargs\",\n                \"advanced\": True,\n            },\n            \"model_name\": {\n                \"display_name\": \"Model Name\",\n                \"advanced\": False,\n                \"options\": MODEL_NAMES,\n            },\n            \"openai_api_base\": {\n                \"display_name\": \"OpenAI API Base\",\n                \"advanced\": True,\n                \"info\": (\n                    \"The base URL of the OpenAI API. Defaults to https://api.openai.com/v1.\\n\\n\"\n                    \"You can change this to use other APIs like JinaChat, LocalAI and Prem.\"\n                ),\n            },\n            \"openai_api_key\": {\n                \"display_name\": \"OpenAI API Key\",\n                \"info\": \"The OpenAI API Key to use for the OpenAI model.\",\n                \"advanced\": False,\n                \"password\": True,\n            },\n            \"temperature\": {\n                \"display_name\": \"Temperature\",\n                \"advanced\": False,\n                \"value\": 0.1,\n            },\n            \"stream\": {\n                \"display_name\": \"Stream\",\n                \"info\": STREAM_INFO_TEXT,\n                \"advanced\": True,\n            },\n            \"system_message\": {\n                \"display_name\": \"System Message\",\n                \"info\": \"System message to pass to the model.\",\n                \"advanced\": True,\n            },\n        }\n\n    def build(\n        self,\n        input_value: Text,\n        openai_api_key: str,\n        temperature: float = 0.1,\n        model_name: str = \"gpt-3.5-turbo\",\n        max_tokens: Optional[int] = 256,\n        model_kwargs: NestedDict = {},\n        openai_api_base: Optional[str] = None,\n        stream: bool = False,\n        system_message: Optional[str] = None,\n    ) -> Text:\n        if not openai_api_base:\n            openai_api_base = \"https://api.openai.com/v1\"\n        if openai_api_key:\n            api_key = SecretStr(openai_api_key)\n        else:\n            api_key = None\n\n        output = ChatOpenAI(\n            max_tokens=max_tokens or None,\n            model_kwargs=model_kwargs,\n            model=model_name,\n            base_url=openai_api_base,\n            api_key=api_key,\n            temperature=temperature,\n        )\n\n        return self.get_chat_result(output, stream, input_value, system_message)\n",
                "fileTypes": [],
                "file_path": "",
                "password": false,
                "name": "code",
                "advanced": true,
                "dynamic": true,
                "info": "",
                "load_from_db": false,
                "title_case": false
              },
              "max_tokens": {
                "type": "int",
                "required": false,
                "placeholder": "",
                "list": false,
                "show": true,
                "multiline": false,
                "value": "0",
                "fileTypes": [],
                "file_path": "",
                "password": false,
                "name": "max_tokens",
                "display_name": "Max Tokens",
                "advanced": true,
                "dynamic": false,
                "info": "The maximum number of tokens to generate. Set to 0 for unlimited tokens.",
                "load_from_db": false,
                "title_case": false
              },
              "model_kwargs": {
                "type": "NestedDict",
                "required": false,
                "placeholder": "",
                "list": false,
                "show": true,
                "multiline": false,
                "value": {},
                "fileTypes": [],
                "file_path": "",
                "password": false,
                "name": "model_kwargs",
                "display_name": "Model Kwargs",
                "advanced": true,
                "dynamic": false,
                "info": "",
                "load_from_db": false,
                "title_case": false
              },
              "model_name": {
                "type": "str",
                "required": false,
                "placeholder": "",
                "list": true,
                "show": true,
                "multiline": false,
                "value": "gpt-4o",
                "fileTypes": [],
                "file_path": "",
                "password": false,
                "options": [
                  "gpt-4o",
                  "gpt-4-turbo",
                  "gpt-4-turbo-preview",
                  "gpt-3.5-turbo",
                  "gpt-3.5-turbo-0125"
                ],
                "name": "model_name",
                "display_name": "Model Name",
                "advanced": false,
                "dynamic": false,
                "info": "",
                "load_from_db": false,
                "title_case": false,
                "input_types": [
                  "Text"
                ]
              },
              "openai_api_base": {
                "type": "str",
                "required": false,
                "placeholder": "",
                "list": false,
                "show": true,
                "multiline": false,
                "fileTypes": [],
                "file_path": "",
                "password": false,
                "name": "openai_api_base",
                "display_name": "OpenAI API Base",
                "advanced": true,
                "dynamic": false,
                "info": "The base URL of the OpenAI API. Defaults to https://api.openai.com/v1.\n\nYou can change this to use other APIs like JinaChat, LocalAI and Prem.",
                "load_from_db": false,
                "title_case": false,
                "input_types": [
                  "Text"
                ]
              },
              "openai_api_key": {
                "type": "str",
                "required": true,
                "placeholder": "",
                "list": false,
                "show": true,
                "multiline": false,
                "fileTypes": [],
                "file_path": "",
                "password": true,
                "name": "openai_api_key",
                "display_name": "OpenAI API Key",
                "advanced": false,
                "dynamic": false,
                "info": "The OpenAI API Key to use for the OpenAI model.",
                "load_from_db": false,
                "title_case": false,
                "input_types": [
                  "Text"
                ],
                "value": ""
              },
              "stream": {
                "type": "bool",
                "required": false,
                "placeholder": "",
                "list": false,
                "show": true,
                "multiline": false,
                "value": false,
                "fileTypes": [],
                "file_path": "",
                "password": false,
                "name": "stream",
                "display_name": "Stream",
                "advanced": true,
                "dynamic": false,
                "info": "Stream the response from the model. Streaming works only in Chat.",
                "load_from_db": false,
                "title_case": false
              },
              "system_message": {
                "type": "str",
                "required": false,
                "placeholder": "",
                "list": false,
                "show": true,
                "multiline": false,
                "fileTypes": [],
                "file_path": "",
                "password": false,
                "name": "system_message",
                "display_name": "System Message",
                "advanced": false,
                "dynamic": false,
                "info": "System message to pass to the model.",
                "load_from_db": false,
                "title_case": false,
                "input_types": [
                  "Text"
                ],
                "value": ""
              },
              "temperature": {
                "type": "float",
                "required": false,
                "placeholder": "",
                "list": false,
                "show": true,
                "multiline": false,
                "value": "0.4",
                "fileTypes": [],
                "file_path": "",
                "password": false,
                "name": "temperature",
                "display_name": "Temperature",
                "advanced": false,
                "dynamic": false,
                "info": "",
                "rangeSpec": {
                  "step_type": "float",
                  "min": -1,
                  "max": 1,
                  "step": 0.1
                },
                "load_from_db": false,
                "title_case": false
              },
              "_type": "CustomComponent"
            },
            "description": "Generates text using OpenAI LLMs.",
            "icon": "OpenAI",
            "base_classes": [
              "object",
              "str",
              "Text"
            ],
            "display_name": "Director (OpenAI)",
            "documentation": "",
            "custom_fields": {
              "input_value": null,
              "openai_api_key": null,
              "temperature": null,
              "model_name": null,
              "max_tokens": null,
              "model_kwargs": null,
              "openai_api_base": null,
              "stream": null,
              "system_message": null
            },
            "output_types": [
              "Text"
            ],
            "field_formatters": {},
            "frozen": false,
            "field_order": [
              "max_tokens",
              "model_kwargs",
              "model_name",
              "openai_api_base",
              "openai_api_key",
              "temperature",
              "input_value",
              "system_message",
              "stream"
            ],
            "beta": false,
            "edited": true
          },
          "id": "OpenAIModel-uB4K9",
          "description": "Generates text using OpenAI LLMs.",
          "display_name": "Director (OpenAI)",
          "edited": false
        },
        "selected": false,
        "width": 384,
        "height": 665,
        "positionAbsolute": {
          "x": 1459.0207807967663,
          "y": -561.2413834694103
        },
        "dragging": false
      },
      {
        "id": "MemoryComponent-hc44i",
        "type": "genericNode",
        "position": {
          "x": 577.3711139406862,
          "y": 674.7328488992783
        },
        "data": {
          "type": "MemoryComponent",
          "node": {
            "template": {
              "code": {
                "type": "code",
                "required": true,
                "placeholder": "",
                "list": false,
                "show": true,
                "multiline": true,
                "value": "from typing import Optional\n\nfrom axiestudio.base.memory.memory import BaseMemoryComponent\nfrom axiestudio.field_typing import Text\nfrom axiestudio.helpers.record import messages_to_text\nfrom axiestudio.memory import get_messages\nfrom axiestudio.schema.message import Message\n\n\nclass MemoryComponent(BaseMemoryComponent):\n    display_name = \"Chat Memory\"\n    description = \"Retrieves stored chat messages given a specific Session ID.\"\n    beta: bool = True\n    icon = \"history\"\n\n    def build_config(self):\n        return {\n            \"sender\": {\n                \"options\": [\"Machine\", \"User\", \"Machine and User\"],\n                \"display_name\": \"Sender Type\",\n            },\n            \"sender_name\": {\"display_name\": \"Sender Name\", \"advanced\": True},\n            \"n_messages\": {\n                \"display_name\": \"Number of Messages\",\n                \"info\": \"Number of messages to retrieve.\",\n            },\n            \"session_id\": {\n                \"display_name\": \"Session ID\",\n                \"info\": \"Session ID of the chat history.\",\n                \"input_types\": [\"Text\"],\n            },\n            \"order\": {\n                \"options\": [\"Ascending\", \"Descending\"],\n                \"display_name\": \"Order\",\n                \"info\": \"Order of the messages.\",\n                \"advanced\": True,\n            },\n            \"record_template\": {\n                \"display_name\": \"Record Template\",\n                \"multiline\": True,\n                \"info\": \"Template to convert Record to Text. If left empty, it will be dynamically set to the Record's text key.\",\n                \"advanced\": True,\n            },\n        }\n\n    def get_messages(self, **kwargs) -> list[Message]:\n        # Validate kwargs by checking if it contains the correct keys\n        if \"sender\" not in kwargs:\n            kwargs[\"sender\"] = None\n        if \"sender_name\" not in kwargs:\n            kwargs[\"sender_name\"] = None\n        if \"session_id\" not in kwargs:\n            kwargs[\"session_id\"] = None\n        if \"limit\" not in kwargs:\n            kwargs[\"limit\"] = 5\n        if \"order\" not in kwargs:\n            kwargs[\"order\"] = \"Descending\"\n\n        kwargs[\"order\"] = \"DESC\" if kwargs[\"order\"] == \"Descending\" else \"ASC\"\n        if kwargs[\"sender\"] == \"Machine and User\":\n            kwargs[\"sender\"] = None\n        return get_messages(**kwargs)\n\n    def build(\n        self,\n        sender: Optional[str] = \"Machine and User\",\n        sender_name: Optional[str] = None,\n        session_id: Optional[str] = None,\n        n_messages: int = 5,\n        order: Optional[str] = \"Descending\",\n        record_template: Optional[str] = \"{sender_name}: {text}\",\n    ) -> Text:\n        messages = self.get_messages(\n            sender=sender,\n            sender_name=sender_name,\n            session_id=session_id,\n            limit=n_messages,\n            order=order,\n        )\n        messages_str = messages_to_text(template=record_template or \"\", messages=messages)\n        self.status = messages_str\n        return messages_str\n",
                "fileTypes": [],
                "file_path": "",
                "password": false,
                "name": "code",
                "advanced": true,
                "dynamic": true,
                "info": "",
                "load_from_db": false,
                "title_case": false
              },
              "n_messages": {
                "type": "int",
                "required": false,
                "placeholder": "",
                "list": false,
                "show": true,
                "multiline": false,
                "value": "30",
                "fileTypes": [],
                "file_path": "",
                "password": false,
                "name": "n_messages",
                "display_name": "Number of Messages",
                "advanced": false,
                "dynamic": false,
                "info": "Number of messages to retrieve.",
                "load_from_db": false,
                "title_case": false
              },
              "order": {
                "type": "str",
                "required": false,
                "placeholder": "",
                "list": true,
                "show": true,
                "multiline": false,
                "value": "Descending",
                "fileTypes": [],
                "file_path": "",
                "password": false,
                "options": [
                  "Ascending",
                  "Descending"
                ],
                "name": "order",
                "display_name": "Order",
                "advanced": true,
                "dynamic": false,
                "info": "Order of the messages.",
                "load_from_db": false,
                "title_case": false,
                "input_types": [
                  "Text"
                ]
              },
              "record_template": {
                "type": "str",
                "required": false,
                "placeholder": "",
                "list": false,
                "show": true,
                "multiline": true,
                "value": "{sender_name}: {text}",
                "fileTypes": [],
                "file_path": "",
                "password": false,
                "name": "record_template",
                "display_name": "Record Template",
                "advanced": true,
                "dynamic": false,
                "info": "Template to convert Record to Text. If left empty, it will be dynamically set to the Record's text key.",
                "load_from_db": false,
                "title_case": false,
                "input_types": [
                  "Text"
                ]
              },
              "sender": {
                "type": "str",
                "required": false,
                "placeholder": "",
                "list": true,
                "show": true,
                "multiline": false,
                "value": "Machine and User",
                "fileTypes": [],
                "file_path": "",
                "password": false,
                "options": [
                  "Machine",
                  "User",
                  "Machine and User"
                ],
                "name": "sender",
                "display_name": "Sender Type",
                "advanced": false,
                "dynamic": false,
                "info": "",
                "load_from_db": false,
                "title_case": false,
                "input_types": [
                  "Text"
                ]
              },
              "sender_name": {
                "type": "str",
                "required": false,
                "placeholder": "",
                "list": false,
                "show": true,
                "multiline": false,
                "fileTypes": [],
                "file_path": "",
                "password": false,
                "name": "sender_name",
                "display_name": "Sender Name",
                "advanced": true,
                "dynamic": false,
                "info": "",
                "load_from_db": false,
                "title_case": false,
                "input_types": [
                  "Text"
                ]
              },
              "session_id": {
                "type": "str",
                "required": false,
                "placeholder": "",
                "list": false,
                "show": true,
                "multiline": false,
                "fileTypes": [],
                "file_path": "",
                "password": false,
                "name": "session_id",
                "display_name": "Session ID",
                "advanced": false,
                "input_types": [
                  "Text"
                ],
                "dynamic": false,
                "info": "Session ID of the chat history.",
                "load_from_db": false,
                "title_case": false
              },
              "_type": "CustomComponent"
            },
            "description": "Retrieves stored chat messages given a specific Session ID.",
            "icon": "history",
            "base_classes": [
              "object",
              "str",
              "Text"
            ],
            "display_name": "Chat Memory",
            "documentation": "",
            "custom_fields": {
              "sender": null,
              "sender_name": null,
              "session_id": null,
              "n_messages": null,
              "order": null,
              "record_template": null
            },
            "output_types": [
              "Text"
            ],
            "field_formatters": {},
            "frozen": false,
            "field_order": [],
            "beta": true,
            "edited": true
          },
          "id": "MemoryComponent-hc44i",
          "description": "Retrieves stored chat messages given a specific Session ID.",
          "display_name": "Chat Memory",
          "edited": false
        },
        "selected": false,
        "width": 384,
        "height": 505,
        "positionAbsolute": {
          "x": 577.3711139406862,
          "y": 674.7328488992783
        },
        "dragging": false
      },
      {
        "id": "IDGenerator-cOHvw",
        "type": "genericNode",
        "position": {
          "x": -710.4294587165252,
          "y": 956.0723593118729
        },
        "data": {
          "type": "IDGenerator",
          "node": {
            "template": {
              "code": {
                "type": "code",
                "required": true,
                "placeholder": "",
                "list": false,
                "show": true,
                "multiline": true,
                "value": "import uuid\nfrom typing import Any, Optional\n\nfrom axiestudio.custom import CustomComponent\n\n\nclass UUIDGeneratorComponent(CustomComponent):\n    documentation: str = \"http://docs.axiestudio.org/components/custom\"\n    display_name = \"ID Generator\"\n    description = \"Generates a unique ID.\"\n\n    def update_build_config(\n        self,\n        build_config: dict,\n        field_value: Any,\n        field_name: Optional[str] = None,\n    ):\n        if field_name == \"unique_id\":\n            build_config[field_name][\"value\"] = str(uuid.uuid4())\n        return build_config\n\n    def build_config(self):\n        return {\n            \"unique_id\": {\n                \"display_name\": \"Value\",\n                \"refresh_button\": True,\n            }\n        }\n\n    def build(self, unique_id: str) -> str:\n        return unique_id\n",
                "fileTypes": [],
                "file_path": "",
                "password": false,
                "name": "code",
                "advanced": true,
                "dynamic": true,
                "info": "",
                "load_from_db": false,
                "title_case": false
              },
              "unique_id": {
                "type": "str",
                "required": true,
                "placeholder": "",
                "list": false,
                "show": true,
                "multiline": false,
                "fileTypes": [],
                "file_path": "",
                "password": false,
                "name": "unique_id",
                "display_name": "Value",
                "advanced": false,
                "dynamic": false,
                "info": "",
                "refresh_button": true,
                "load_from_db": false,
                "title_case": false,
                "input_types": [
                  "Text"
                ],
                "value": "94c16347-0fd3-41ed-b680-5dba58aa8041"
              },
              "_type": "CustomComponent"
            },
            "description": "Generates a unique ID.",
            "base_classes": [
              "object",
              "str",
              "Text"
            ],
            "display_name": "ID Generator",
            "documentation": "http://docs.axiestudio.org/components/custom",
            "custom_fields": {
              "unique_id": null
            },
            "output_types": [
              "Text"
            ],
            "field_formatters": {},
            "frozen": false,
            "field_order": [],
            "beta": false
          },
          "id": "IDGenerator-cOHvw"
        },
        "selected": false,
        "width": 384,
        "height": 303,
        "positionAbsolute": {
          "x": -710.4294587165252,
          "y": 956.0723593118729
        },
        "dragging": false
      },
      {
        "id": "TextInput-jc0vl",
        "type": "genericNode",
        "position": {
          "x": -681.7743433908953,
          "y": -152.28687490783423
        },
        "data": {
          "type": "TextInput",
          "node": {
            "template": {
              "input_value": {
                "type": "str",
                "required": false,
                "placeholder": "",
                "list": false,
                "show": true,
                "multiline": false,
                "value": "User Interviews",
                "fileTypes": [],
                "file_path": "",
                "password": false,
                "name": "input_value",
                "display_name": "Text",
                "advanced": false,
                "input_types": [
                  "Record",
                  "Text"
                ],
                "dynamic": false,
                "info": "Text or Record to be passed as input.",
                "load_from_db": false,
                "title_case": false
              },
              "code": {
                "type": "code",
                "required": true,
                "placeholder": "",
                "list": false,
                "show": true,
                "multiline": true,
                "value": "from typing import Optional\n\nfrom axiestudio.base.io.text import TextComponent\nfrom axiestudio.field_typing import Text\n\n\nclass TextInput(TextComponent):\n    display_name = \"Text Input\"\n    description = \"Get text inputs from the Playground.\"\n    icon = \"type\"\n\n    def build_config(self):\n        return {\n            \"input_value\": {\n                \"display_name\": \"Text\",\n                \"input_types\": [\"Record\", \"Text\"],\n                \"info\": \"Text or Record to be passed as input.\",\n            },\n            \"record_template\": {\n                \"display_name\": \"Record Template\",\n                \"multiline\": True,\n                \"info\": \"Template to convert Record to Text. If left empty, it will be dynamically set to the Record's text key.\",\n                \"advanced\": True,\n            },\n        }\n\n    def build(\n        self,\n        input_value: Optional[Text] = \"\",\n        record_template: Optional[str] = \"\",\n    ) -> Text:\n        return super().build(input_value=input_value, record_template=record_template)\n",
                "fileTypes": [],
                "file_path": "",
                "password": false,
                "name": "code",
                "advanced": true,
                "dynamic": true,
                "info": "",
                "load_from_db": false,
                "title_case": false
              },
              "record_template": {
                "type": "str",
                "required": false,
                "placeholder": "",
                "list": false,
                "show": true,
                "multiline": true,
                "value": "",
                "fileTypes": [],
                "file_path": "",
                "password": false,
                "name": "record_template",
                "display_name": "Record Template",
                "advanced": true,
                "dynamic": false,
                "info": "Template to convert Record to Text. If left empty, it will be dynamically set to the Record's text key.",
                "load_from_db": false,
                "title_case": false,
                "input_types": [
                  "Text"
                ]
              },
              "_type": "CustomComponent"
            },
            "description": "Get text inputs from the Playground.",
            "icon": "type",
            "base_classes": [
              "object",
              "str",
              "Text"
            ],
            "display_name": "Research Method",
            "documentation": "",
            "custom_fields": {
              "input_value": null,
              "record_template": null
            },
            "output_types": [
              "Text"
            ],
            "field_formatters": {},
            "frozen": false,
            "field_order": [],
            "beta": false
          },
          "id": "TextInput-jc0vl"
        },
        "selected": false,
        "width": 384,
        "height": 297,
        "dragging": false,
        "positionAbsolute": {
          "x": -681.7743433908953,
          "y": -152.28687490783423
        }
      },
      {
        "id": "TextInput-iHjL1",
        "type": "genericNode",
        "position": {
          "x": -696.5276754312958,
          "y": 216.082970324043
        },
        "data": {
          "type": "TextInput",
          "node": {
            "template": {
              "input_value": {
                "type": "str",
                "required": false,
                "placeholder": "",
                "list": false,
                "show": true,
                "multiline": false,
                "value": "Prototype Review",
                "fileTypes": [],
                "file_path": "",
                "password": false,
                "name": "input_value",
                "display_name": "Text",
                "advanced": false,
                "input_types": [
                  "Record",
                  "Text"
                ],
                "dynamic": false,
                "info": "Text or Record to be passed as input.",
                "load_from_db": false,
                "title_case": false
              },
              "code": {
                "type": "code",
                "required": true,
                "placeholder": "",
                "list": false,
                "show": true,
                "multiline": true,
                "value": "from typing import Optional\n\nfrom axiestudio.base.io.text import TextComponent\nfrom axiestudio.field_typing import Text\n\n\nclass TextInput(TextComponent):\n    display_name = \"Text Input\"\n    description = \"Get text inputs from the Playground.\"\n    icon = \"type\"\n\n    def build_config(self):\n        return {\n            \"input_value\": {\n                \"display_name\": \"Text\",\n                \"input_types\": [\"Record\", \"Text\"],\n                \"info\": \"Text or Record to be passed as input.\",\n            },\n            \"record_template\": {\n                \"display_name\": \"Record Template\",\n                \"multiline\": True,\n                \"info\": \"Template to convert Record to Text. If left empty, it will be dynamically set to the Record's text key.\",\n                \"advanced\": True,\n            },\n        }\n\n    def build(\n        self,\n        input_value: Optional[Text] = \"\",\n        record_template: Optional[str] = \"\",\n    ) -> Text:\n        return super().build(input_value=input_value, record_template=record_template)\n",
                "fileTypes": [],
                "file_path": "",
                "password": false,
                "name": "code",
                "advanced": true,
                "dynamic": true,
                "info": "",
                "load_from_db": false,
                "title_case": false
              },
              "record_template": {
                "type": "str",
                "required": false,
                "placeholder": "",
                "list": false,
                "show": true,
                "multiline": true,
                "value": "",
                "fileTypes": [],
                "file_path": "",
                "password": false,
                "name": "record_template",
                "display_name": "Record Template",
                "advanced": true,
                "dynamic": false,
                "info": "Template to convert Record to Text. If left empty, it will be dynamically set to the Record's text key.",
                "load_from_db": false,
                "title_case": false,
                "input_types": [
                  "Text"
                ]
              },
              "_type": "CustomComponent"
            },
            "description": "Get text inputs from the Playground.",
            "icon": "type",
            "base_classes": [
              "object",
              "str",
              "Text"
            ],
            "display_name": "Research Goal",
            "documentation": "",
            "custom_fields": {
              "input_value": null,
              "record_template": null
            },
            "output_types": [
              "Text"
            ],
            "field_formatters": {},
            "frozen": false,
            "field_order": [],
            "beta": false
          },
          "id": "TextInput-iHjL1"
        },
        "selected": false,
        "width": 384,
        "height": 297,
        "positionAbsolute": {
          "x": -696.5276754312958,
          "y": 216.082970324043
        },
        "dragging": false
      },
      {
        "id": "TextInput-at7vy",
        "type": "genericNode",
        "position": {
          "x": -690.5260193087944,
          "y": 601.2512785668918
        },
        "data": {
          "type": "TextInput",
          "node": {
            "template": {
              "input_value": {
                "type": "str",
                "required": false,
                "placeholder": "",
                "list": false,
                "show": true,
                "multiline": false,
                "value": "Validate Ideas, MVP Plan",
                "fileTypes": [],
                "file_path": "",
                "password": false,
                "name": "input_value",
                "display_name": "Text",
                "advanced": false,
                "input_types": [
                  "Record",
                  "Text"
                ],
                "dynamic": false,
                "info": "Text or Record to be passed as input.",
                "load_from_db": false,
                "title_case": false
              },
              "code": {
                "type": "code",
                "required": true,
                "placeholder": "",
                "list": false,
                "show": true,
                "multiline": true,
                "value": "from typing import Optional\n\nfrom axiestudio.base.io.text import TextComponent\nfrom axiestudio.field_typing import Text\n\n\nclass TextInput(TextComponent):\n    display_name = \"Text Input\"\n    description = \"Get text inputs from the Playground.\"\n    icon = \"type\"\n\n    def build_config(self):\n        return {\n            \"input_value\": {\n                \"display_name\": \"Text\",\n                \"input_types\": [\"Record\", \"Text\"],\n                \"info\": \"Text or Record to be passed as input.\",\n            },\n            \"record_template\": {\n                \"display_name\": \"Record Template\",\n                \"multiline\": True,\n                \"info\": \"Template to convert Record to Text. If left empty, it will be dynamically set to the Record's text key.\",\n                \"advanced\": True,\n            },\n        }\n\n    def build(\n        self,\n        input_value: Optional[Text] = \"\",\n        record_template: Optional[str] = \"\",\n    ) -> Text:\n        return super().build(input_value=input_value, record_template=record_template)\n",
                "fileTypes": [],
                "file_path": "",
                "password": false,
                "name": "code",
                "advanced": true,
                "dynamic": true,
                "info": "",
                "load_from_db": false,
                "title_case": false
              },
              "record_template": {
                "type": "str",
                "required": false,
                "placeholder": "",
                "list": false,
                "show": true,
                "multiline": true,
                "value": "",
                "fileTypes": [],
                "file_path": "",
                "password": false,
                "name": "record_template",
                "display_name": "Record Template",
                "advanced": true,
                "dynamic": false,
                "info": "Template to convert Record to Text. If left empty, it will be dynamically set to the Record's text key.",
                "load_from_db": false,
                "title_case": false,
                "input_types": [
                  "Text"
                ]
              },
              "_type": "CustomComponent"
            },
            "description": "Get text inputs from the Playground.",
            "icon": "type",
            "base_classes": [
              "object",
              "str",
              "Text"
            ],
            "display_name": "Business Goals",
            "documentation": "",
            "custom_fields": {
              "input_value": null,
              "record_template": null
            },
            "output_types": [
              "Text"
            ],
            "field_formatters": {},
            "frozen": false,
            "field_order": [],
            "beta": false
          },
          "id": "TextInput-at7vy"
        },
        "selected": false,
        "width": 384,
        "height": 297,
        "positionAbsolute": {
          "x": -690.5260193087944,
          "y": 601.2512785668918
        },
        "dragging": false
      },
      {
        "id": "TextInput-WNMz5",
        "type": "genericNode",
        "position": {
          "x": -701.4745320093606,
          "y": -511.51013356833926
        },
        "data": {
          "type": "TextInput",
          "node": {
            "template": {
              "input_value": {
                "type": "str",
                "required": false,
                "placeholder": "",
                "list": false,
                "show": true,
                "multiline": false,
                "value": "An AI user researcher SaaS app.",
                "fileTypes": [],
                "file_path": "",
                "password": false,
                "name": "input_value",
                "display_name": "Text",
                "advanced": false,
                "input_types": [
                  "Record",
                  "Text"
                ],
                "dynamic": false,
                "info": "Text or Record to be passed as input.",
                "load_from_db": false,
                "title_case": false
              },
              "code": {
                "type": "code",
                "required": true,
                "placeholder": "",
                "list": false,
                "show": true,
                "multiline": true,
                "value": "from typing import Optional\n\nfrom axiestudio.base.io.text import TextComponent\nfrom axiestudio.field_typing import Text\n\n\nclass TextInput(TextComponent):\n    display_name = \"Text Input\"\n    description = \"Get text inputs from the Playground.\"\n    icon = \"type\"\n\n    def build_config(self):\n        return {\n            \"input_value\": {\n                \"display_name\": \"Text\",\n                \"input_types\": [\"Record\", \"Text\"],\n                \"info\": \"Text or Record to be passed as input.\",\n            },\n            \"record_template\": {\n                \"display_name\": \"Record Template\",\n                \"multiline\": True,\n                \"info\": \"Template to convert Record to Text. If left empty, it will be dynamically set to the Record's text key.\",\n                \"advanced\": True,\n            },\n        }\n\n    def build(\n        self,\n        input_value: Optional[Text] = \"\",\n        record_template: Optional[str] = \"\",\n    ) -> Text:\n        return super().build(input_value=input_value, record_template=record_template)\n",
                "fileTypes": [],
                "file_path": "",
                "password": false,
                "name": "code",
                "advanced": true,
                "dynamic": true,
                "info": "",
                "load_from_db": false,
                "title_case": false
              },
              "record_template": {
                "type": "str",
                "required": false,
                "placeholder": "",
                "list": false,
                "show": true,
                "multiline": true,
                "value": "",
                "fileTypes": [],
                "file_path": "",
                "password": false,
                "name": "record_template",
                "display_name": "Record Template",
                "advanced": true,
                "dynamic": false,
                "info": "Template to convert Record to Text. If left empty, it will be dynamically set to the Record's text key.",
                "load_from_db": false,
                "title_case": false,
                "input_types": [
                  "Text"
                ]
              },
              "_type": "CustomComponent"
            },
            "description": "Get text inputs from the Playground.",
            "icon": "type",
            "base_classes": [
              "object",
              "str",
              "Text"
            ],
            "display_name": "Project Description",
            "documentation": "",
            "custom_fields": {
              "input_value": null,
              "record_template": null
            },
            "output_types": [
              "Text"
            ],
            "field_formatters": {},
            "frozen": false,
            "field_order": [],
            "beta": false
          },
          "id": "TextInput-WNMz5"
        },
        "selected": false,
        "width": 384,
        "height": 297,
        "dragging": false,
        "positionAbsolute": {
          "x": -701.4745320093606,
          "y": -511.51013356833926
        }
      },
      {
        "id": "TextInput-h5qwa",
        "type": "genericNode",
        "position": {
          "x": -715.7998913502216,
          "y": -869.0987880368224
        },
        "data": {
          "type": "TextInput",
          "node": {
            "template": {
              "input_value": {
                "type": "str",
                "required": false,
                "placeholder": "",
                "list": false,
                "show": true,
                "multiline": false,
                "value": "Usermuse",
                "fileTypes": [],
                "file_path": "",
                "password": false,
                "name": "input_value",
                "display_name": "Text",
                "advanced": false,
                "input_types": [
                  "Record",
                  "Text"
                ],
                "dynamic": false,
                "info": "Text or Record to be passed as input.",
                "load_from_db": false,
                "title_case": false
              },
              "code": {
                "type": "code",
                "required": true,
                "placeholder": "",
                "list": false,
                "show": true,
                "multiline": true,
                "value": "from typing import Optional\n\nfrom axiestudio.base.io.text import TextComponent\nfrom axiestudio.field_typing import Text\n\n\nclass TextInput(TextComponent):\n    display_name = \"Text Input\"\n    description = \"Get text inputs from the Playground.\"\n    icon = \"type\"\n\n    def build_config(self):\n        return {\n            \"input_value\": {\n                \"display_name\": \"Text\",\n                \"input_types\": [\"Record\", \"Text\"],\n                \"info\": \"Text or Record to be passed as input.\",\n            },\n            \"record_template\": {\n                \"display_name\": \"Record Template\",\n                \"multiline\": True,\n                \"info\": \"Template to convert Record to Text. If left empty, it will be dynamically set to the Record's text key.\",\n                \"advanced\": True,\n            },\n        }\n\n    def build(\n        self,\n        input_value: Optional[Text] = \"\",\n        record_template: Optional[str] = \"\",\n    ) -> Text:\n        return super().build(input_value=input_value, record_template=record_template)\n",
                "fileTypes": [],
                "file_path": "",
                "password": false,
                "name": "code",
                "advanced": true,
                "dynamic": true,
                "info": "",
                "load_from_db": false,
                "title_case": false
              },
              "record_template": {
                "type": "str",
                "required": false,
                "placeholder": "",
                "list": false,
                "show": true,
                "multiline": true,
                "value": "",
                "fileTypes": [],
                "file_path": "",
                "password": false,
                "name": "record_template",
                "display_name": "Record Template",
                "advanced": true,
                "dynamic": false,
                "info": "Template to convert Record to Text. If left empty, it will be dynamically set to the Record's text key.",
                "load_from_db": false,
                "title_case": false,
                "input_types": [
                  "Text"
                ]
              },
              "_type": "CustomComponent"
            },
            "description": "Get text inputs from the Playground.",
            "icon": "type",
            "base_classes": [
              "object",
              "str",
              "Text"
            ],
            "display_name": "Project Name",
            "documentation": "",
            "custom_fields": {
              "input_value": null,
              "record_template": null
            },
            "output_types": [
              "Text"
            ],
            "field_formatters": {},
            "frozen": false,
            "field_order": [],
            "beta": false
          },
          "id": "TextInput-h5qwa"
        },
        "selected": false,
        "width": 384,
        "height": 297,
        "positionAbsolute": {
          "x": -715.7998913502216,
          "y": -869.0987880368224
        },
        "dragging": false
      },
      {
        "id": "ChatInput-k2Pvk",
        "type": "genericNode",
        "position": {
          "x": -52.58021636927742,
          "y": -762.6357108177694
        },
        "data": {
          "type": "ChatInput",
          "node": {
            "template": {
              "files": {
                "type": "file",
                "required": false,
                "placeholder": "",
                "list": false,
                "show": true,
                "multiline": false,
                "fileTypes": [
                  ".txt",
                  ".md",
                  ".mdx",
                  ".csv",
                  ".json",
                  ".yaml",
                  ".yml",
                  ".xml",
                  ".html",
                  ".htm",
                  ".pdf",
                  ".docx",
                  ".py",
                  ".sh",
                  ".sql",
                  ".js",
                  ".ts",
                  ".tsx",
                  ".jpg",
                  ".jpeg",
                  ".png",
                  ".bmp"
                ],
                "file_path": "",
                "password": false,
                "name": "files",
                "display_name": "Files",
                "advanced": true,
                "dynamic": false,
                "info": "Files to be sent with the message.",
                "load_from_db": false,
                "title_case": false,
                "value": ""
              },
              "code": {
                "type": "code",
                "required": true,
                "placeholder": "",
                "list": false,
                "show": true,
                "multiline": true,
                "value": "from typing import Optional\n\nfrom axiestudio.base.io.chat import ChatComponent\nfrom axiestudio.schema.message import Message\nfrom axiestudio.field_typing import Text\nfrom typing import Union\n\n\nclass ChatInput(ChatComponent):\n    display_name = \"Chat Input\"\n    description = \"Get chat inputs from the Playground.\"\n    icon = \"ChatInput\"\n\n    def build_config(self):\n        build_config = super().build_config()\n        build_config[\"input_value\"] = {\n            \"input_types\": [],\n            \"display_name\": \"Text\",\n            \"multiline\": True,\n        }\n\n        return build_config\n\n    def build(\n        self,\n        sender: Optional[str] = \"User\",\n        sender_name: Optional[str] = \"User\",\n        input_value: Optional[str] = None,\n        files: Optional[list[str]] = None,\n        session_id: Optional[str] = None,\n        return_message: Optional[bool] = False,\n    ) -> Union[Message, Text]:\n        return super().build_with_record(\n            sender=sender,\n            sender_name=sender_name,\n            input_value=input_value,\n            files=files,\n            session_id=session_id,\n            return_message=return_message,\n        )\n",
                "fileTypes": [],
                "file_path": "",
                "password": false,
                "name": "code",
                "advanced": true,
                "dynamic": true,
                "info": "",
                "load_from_db": false,
                "title_case": false
              },
              "input_value": {
                "type": "str",
                "required": false,
                "placeholder": "",
                "list": false,
                "show": true,
                "multiline": true,
                "fileTypes": [],
                "file_path": "",
                "password": false,
                "name": "input_value",
                "display_name": "Text",
                "advanced": false,
                "input_types": [],
                "dynamic": false,
                "info": "",
                "load_from_db": false,
                "title_case": false,
                "value": "Eran Dror [122.79]We can talk about poetry and all that stuff, but. [126.9]We actually have kind of a limited time, so I want to use it well. [134.69]Maybe if you can get us started, just talk about your role and responsibilities and give me a. [140.65]Little bit of background. [142.9]How it works where you are.\nAbigail Browning (she/her) [145.27]Yeah. [145.71]So? Red hat has 20,000 employees. [152.54]And maturity model for product development is a little bit ahead of digital development, and I'm on the digital side. [160.9]So where marketing used to be, all billboards and brochures. [165.43]It's now a key player in the ecommerce low touch, no touch space, right? Because you actually sell your product on digital, you're not selling it through sales as much. [174.35]Or people don't want to be talking to sales. [176.23]Right, right. [180.08]For example, the product space products and engineering. [186.31]Has. [186.64]20 person research team and people develop to each product safe. [192.97]But the digital space has been more of a grassroots effort to now. [200]And I was hired in as kind of the first full time. [204.83]Professional, skilled professional. [207.31]Up to that point, they had. [210.08]Sort of invested amateurs doing the work. [214.73]So I was hired in as part of a push for digital transformation. [219.88]And. [222.39]So. [226.5]I. [228.53]Tried to. [228.69]My biggest focus on scaling is figuring out.\nAbigail Browning (she/her) [234]Governance and standards for the company. [237.44]So that's one area since I'm a single. [239.92]Researcher in digital UX research. [243.75]I rely on a lot of other volunteers or people like you who are going to do some research for me or with me, but maybe. [252.12]Don't have the methodological rigor, so I'm consulting on that. [257.21]So by helping establish a user research council. [261.6]We can start having. [264.59]The same. [265.54]Basic foundations. [268.11]So that anybody picking up the strategies or methods, or at least starting from. [274.8]More rigor than just let's ask them some questions on a survey. [280.47]Thumbs up there and can ask any questions.\n"
              },
              "return_message": {
                "type": "bool",
                "required": false,
                "placeholder": "",
                "list": false,
                "show": true,
                "multiline": false,
                "value": false,
                "fileTypes": [],
                "file_path": "",
                "password": false,
                "name": "return_message",
                "display_name": "Return Message",
                "advanced": true,
                "dynamic": false,
                "info": "Return the message as a Message containing the sender, sender_name, and session_id.",
                "load_from_db": false,
                "title_case": false
              },
              "sender": {
                "type": "str",
                "required": false,
                "placeholder": "",
                "list": true,
                "show": true,
                "multiline": false,
                "value": "User",
                "fileTypes": [],
                "file_path": "",
                "password": false,
                "options": [
                  "Machine",
                  "User"
                ],
                "name": "sender",
                "display_name": "Sender Type",
                "advanced": true,
                "dynamic": false,
                "info": "",
                "load_from_db": false,
                "title_case": false,
                "input_types": [
                  "Text"
                ]
              },
              "sender_name": {
                "type": "str",
                "required": false,
                "placeholder": "",
                "list": false,
                "show": true,
                "multiline": false,
                "value": "User",
                "fileTypes": [],
                "file_path": "",
                "password": false,
                "name": "sender_name",
                "display_name": "Sender Name",
                "advanced": true,
                "dynamic": false,
                "info": "",
                "load_from_db": false,
                "title_case": false,
                "input_types": [
                  "Text"
                ]
              },
              "session_id": {
                "type": "str",
                "required": false,
                "placeholder": "",
                "list": false,
                "show": true,
                "multiline": false,
                "fileTypes": [],
                "file_path": "",
                "password": false,
                "name": "session_id",
                "display_name": "Session ID",
                "advanced": true,
                "dynamic": false,
                "info": "If provided, the message will be stored in the memory.",
                "load_from_db": false,
                "title_case": false,
                "input_types": [
                  "Text"
                ]
              },
              "_type": "CustomComponent"
            },
            "description": "Get chat inputs from the Playground.",
            "icon": "ChatInput",
            "base_classes": [
              "Message",
              "object",
              "str",
              "Text"
            ],
            "display_name": "Chat Input",
            "documentation": "",
            "custom_fields": {
              "sender": null,
              "sender_name": null,
              "input_value": null,
              "files": null,
              "session_id": null,
              "return_message": null
            },
            "output_types": [
              "Message",
              "Text"
            ],
            "field_formatters": {},
            "frozen": false,
            "field_order": [],
            "beta": false
          },
          "id": "ChatInput-k2Pvk"
        },
        "selected": false,
        "width": 384,
        "height": 289,
        "positionAbsolute": {
          "x": -52.58021636927742,
          "y": -762.6357108177694
        },
        "dragging": false
      },
      {
        "id": "ChatOutput-xPd0d",
        "type": "genericNode",
        "position": {
          "x": 3635.4431580553633,
          "y": -204.1554546591363
        },
        "data": {
          "type": "ChatOutput",
          "node": {
            "template": {
              "files": {
                "type": "file",
                "required": false,
                "placeholder": "",
                "list": false,
                "show": true,
                "multiline": false,
                "fileTypes": [
                  ".txt",
                  ".md",
                  ".mdx",
                  ".csv",
                  ".json",
                  ".yaml",
                  ".yml",
                  ".xml",
                  ".html",
                  ".htm",
                  ".pdf",
                  ".docx",
                  ".py",
                  ".sh",
                  ".sql",
                  ".js",
                  ".ts",
                  ".tsx",
                  ".jpg",
                  ".jpeg",
                  ".png",
                  ".bmp"
                ],
                "file_path": "",
                "password": false,
                "name": "files",
                "display_name": "Files",
                "advanced": true,
                "dynamic": false,
                "info": "Files to be sent with the message.",
                "load_from_db": false,
                "title_case": false,
                "value": ""
              },
              "code": {
                "type": "code",
                "required": true,
                "placeholder": "",
                "list": false,
                "show": true,
                "multiline": true,
                "value": "from typing import Optional, Union\n\nfrom axiestudio.base.io.chat import ChatComponent\nfrom axiestudio.field_typing import Text\nfrom axiestudio.schema.message import Message\n\n\nclass ChatOutput(ChatComponent):\n    display_name = \"Chat Output\"\n    description = \"Display a chat message in the Playground.\"\n    icon = \"ChatOutput\"\n\n    def build(\n        self,\n        sender: Optional[str] = \"Machine\",\n        sender_name: Optional[str] = \"AI\",\n        input_value: Optional[str] = None,\n        session_id: Optional[str] = None,\n        files: Optional[list[str]] = None,\n        return_message: Optional[bool] = False,\n    ) -> Union[Message, Text]:\n        return super().build_with_record(\n            sender=sender,\n            sender_name=sender_name,\n            input_value=input_value,\n            session_id=session_id,\n            files=files,\n            return_message=return_message,\n        )\n",
                "fileTypes": [],
                "file_path": "",
                "password": false,
                "name": "code",
                "advanced": true,
                "dynamic": true,
                "info": "",
                "load_from_db": false,
                "title_case": false
              },
              "input_value": {
                "type": "str",
                "required": false,
                "placeholder": "",
                "list": false,
                "show": true,
                "multiline": true,
                "fileTypes": [],
                "file_path": "",
                "password": false,
                "name": "input_value",
                "display_name": "Text",
                "advanced": false,
                "input_types": [
                  "Text"
                ],
                "dynamic": false,
                "info": "",
                "load_from_db": false,
                "title_case": false
              },
              "return_message": {
                "type": "bool",
                "required": false,
                "placeholder": "",
                "list": false,
                "show": true,
                "multiline": false,
                "value": false,
                "fileTypes": [],
                "file_path": "",
                "password": false,
                "name": "return_message",
                "display_name": "Return Message",
                "advanced": true,
                "dynamic": false,
                "info": "Return the message as a Message containing the sender, sender_name, and session_id.",
                "load_from_db": false,
                "title_case": false
              },
              "sender": {
                "type": "str",
                "required": false,
                "placeholder": "",
                "list": true,
                "show": true,
                "multiline": false,
                "value": "Machine",
                "fileTypes": [],
                "file_path": "",
                "password": false,
                "options": [
                  "Machine",
                  "User"
                ],
                "name": "sender",
                "display_name": "Sender Type",
                "advanced": true,
                "dynamic": false,
                "info": "",
                "load_from_db": false,
                "title_case": false,
                "input_types": [
                  "Text"
                ]
              },
              "sender_name": {
                "type": "str",
                "required": false,
                "placeholder": "",
                "list": false,
                "show": true,
                "multiline": false,
                "value": "AI",
                "fileTypes": [],
                "file_path": "",
                "password": false,
                "name": "sender_name",
                "display_name": "Sender Name",
                "advanced": true,
                "dynamic": false,
                "info": "",
                "load_from_db": false,
                "title_case": false,
                "input_types": [
                  "Text"
                ]
              },
              "session_id": {
                "type": "str",
                "required": false,
                "placeholder": "",
                "list": false,
                "show": true,
                "multiline": false,
                "fileTypes": [],
                "file_path": "",
                "password": false,
                "name": "session_id",
                "display_name": "Session ID",
                "advanced": true,
                "dynamic": false,
                "info": "If provided, the message will be stored in the memory.",
                "load_from_db": false,
                "title_case": false,
                "input_types": [
                  "Text"
                ]
              },
              "_type": "CustomComponent"
            },
            "description": "Display a chat message in the Playground.",
            "icon": "ChatOutput",
            "base_classes": [
              "Message",
              "object",
              "str",
              "Text"
            ],
            "display_name": "Chat Output",
            "documentation": "",
            "custom_fields": {
              "sender": null,
              "sender_name": null,
              "input_value": null,
              "session_id": null,
              "files": null,
              "return_message": null
            },
            "output_types": [
              "Message",
              "Text"
            ],
            "field_formatters": {},
            "frozen": false,
            "field_order": [],
            "beta": false
          },
          "id": "ChatOutput-xPd0d"
        },
        "selected": false,
        "width": 384,
        "height": 297,
        "positionAbsolute": {
          "x": 3635.4431580553633,
          "y": -204.1554546591363
        },
        "dragging": false
      },
      {
        "id": "TextInput-zZ8kv",
        "type": "genericNode",
        "position": {
          "x": -736.554245218776,
          "y": -1237.696555064012
        },
        "data": {
          "type": "TextInput",
          "node": {
            "template": {
              "input_value": {
                "type": "str",
                "required": false,
                "placeholder": "",
                "list": false,
                "show": true,
                "multiline": false,
                "value": "Eran Dror",
                "fileTypes": [],
                "file_path": "",
                "password": false,
                "name": "input_value",
                "display_name": "Text",
                "advanced": false,
                "input_types": [
                  "Record",
                  "Text"
                ],
                "dynamic": false,
                "info": "Text or Record to be passed as input.",
                "load_from_db": false,
                "title_case": false
              },
              "code": {
                "type": "code",
                "required": true,
                "placeholder": "",
                "list": false,
                "show": true,
                "multiline": true,
                "value": "from typing import Optional\n\nfrom axiestudio.base.io.text import TextComponent\nfrom axiestudio.field_typing import Text\n\n\nclass TextInput(TextComponent):\n    display_name = \"Text Input\"\n    description = \"Get text inputs from the Playground.\"\n    icon = \"type\"\n\n    def build_config(self):\n        return {\n            \"input_value\": {\n                \"display_name\": \"Text\",\n                \"input_types\": [\"Record\", \"Text\"],\n                \"info\": \"Text or Record to be passed as input.\",\n            },\n            \"record_template\": {\n                \"display_name\": \"Record Template\",\n                \"multiline\": True,\n                \"info\": \"Template to convert Record to Text. If left empty, it will be dynamically set to the Record's text key.\",\n                \"advanced\": True,\n            },\n        }\n\n    def build(\n        self,\n        input_value: Optional[Text] = \"\",\n        record_template: Optional[str] = \"\",\n    ) -> Text:\n        return super().build(input_value=input_value, record_template=record_template)\n",
                "fileTypes": [],
                "file_path": "",
                "password": false,
                "name": "code",
                "advanced": true,
                "dynamic": true,
                "info": "",
                "load_from_db": false,
                "title_case": false
              },
              "record_template": {
                "type": "str",
                "required": false,
                "placeholder": "",
                "list": false,
                "show": true,
                "multiline": true,
                "value": "",
                "fileTypes": [],
                "file_path": "",
                "password": false,
                "name": "record_template",
                "display_name": "Record Template",
                "advanced": true,
                "dynamic": false,
                "info": "Template to convert Record to Text. If left empty, it will be dynamically set to the Record's text key.",
                "load_from_db": false,
                "title_case": false,
                "input_types": [
                  "Text"
                ]
              },
              "_type": "CustomComponent"
            },
            "description": "Get text inputs from the Playground.",
            "icon": "type",
            "base_classes": [
              "object",
              "str",
              "Text"
            ],
            "display_name": "Facilitators Names",
            "documentation": "",
            "custom_fields": {
              "input_value": null,
              "record_template": null
            },
            "output_types": [
              "Text"
            ],
            "field_formatters": {},
            "frozen": false,
            "field_order": [],
            "beta": false
          },
          "id": "TextInput-zZ8kv"
        },
        "selected": false,
        "width": 384,
        "height": 297,
        "positionAbsolute": {
          "x": -736.554245218776,
          "y": -1237.696555064012
        },
        "dragging": false
      },
      {
        "id": "OpenAIModel-xlcLT",
        "type": "genericNode",
        "position": {
          "x": 2923.567147121073,
          "y": -595.2153250022242
        },
        "data": {
          "type": "OpenAIModel",
          "node": {
            "template": {
              "input_value": {
                "type": "str",
                "required": true,
                "placeholder": "",
                "list": false,
                "show": true,
                "multiline": false,
                "fileTypes": [],
                "file_path": "",
                "password": false,
                "name": "input_value",
                "display_name": "Input",
                "advanced": false,
                "input_types": [
                  "Text",
                  "Record",
                  "Prompt"
                ],
                "dynamic": false,
                "info": "",
                "load_from_db": false,
                "title_case": false
              },
              "code": {
                "type": "code",
                "required": true,
                "placeholder": "",
                "list": false,
                "show": true,
                "multiline": true,
                "value": "from typing import Optional\n\nfrom langchain_openai import ChatOpenAI\nfrom pydantic.v1 import SecretStr\n\nfrom axiestudio.base.constants import STREAM_INFO_TEXT\nfrom axiestudio.base.models.model import LCModelComponent\nfrom axiestudio.base.models.openai_constants import MODEL_NAMES\nfrom axiestudio.field_typing import NestedDict, Text\n\n\nclass OpenAIModelComponent(LCModelComponent):\n    display_name = \"OpenAI\"\n    description = \"Generates text using OpenAI LLMs.\"\n    icon = \"OpenAI\"\n\n    field_order = [\n        \"max_tokens\",\n        \"model_kwargs\",\n        \"model_name\",\n        \"openai_api_base\",\n        \"openai_api_key\",\n        \"temperature\",\n        \"input_value\",\n        \"system_message\",\n        \"stream\",\n    ]\n\n    def build_config(self):\n        return {\n            \"input_value\": {\"display_name\": \"Input\", \"input_types\": [\"Text\", \"Record\", \"Prompt\"]},\n            \"max_tokens\": {\n                \"display_name\": \"Max Tokens\",\n                \"advanced\": True,\n                \"info\": \"The maximum number of tokens to generate. Set to 0 for unlimited tokens.\",\n            },\n            \"model_kwargs\": {\n                \"display_name\": \"Model Kwargs\",\n                \"advanced\": True,\n            },\n            \"model_name\": {\n                \"display_name\": \"Model Name\",\n                \"advanced\": False,\n                \"options\": MODEL_NAMES,\n            },\n            \"openai_api_base\": {\n                \"display_name\": \"OpenAI API Base\",\n                \"advanced\": True,\n                \"info\": (\n                    \"The base URL of the OpenAI API. Defaults to https://api.openai.com/v1.\\n\\n\"\n                    \"You can change this to use other APIs like JinaChat, LocalAI and Prem.\"\n                ),\n            },\n            \"openai_api_key\": {\n                \"display_name\": \"OpenAI API Key\",\n                \"info\": \"The OpenAI API Key to use for the OpenAI model.\",\n                \"advanced\": False,\n                \"password\": True,\n            },\n            \"temperature\": {\n                \"display_name\": \"Temperature\",\n                \"advanced\": False,\n                \"value\": 0.1,\n            },\n            \"stream\": {\n                \"display_name\": \"Stream\",\n                \"info\": STREAM_INFO_TEXT,\n                \"advanced\": True,\n            },\n            \"system_message\": {\n                \"display_name\": \"System Message\",\n                \"info\": \"System message to pass to the model.\",\n                \"advanced\": True,\n            },\n        }\n\n    def build(\n        self,\n        input_value: Text,\n        openai_api_key: str,\n        temperature: float = 0.1,\n        model_name: str = \"gpt-3.5-turbo\",\n        max_tokens: Optional[int] = 256,\n        model_kwargs: NestedDict = {},\n        openai_api_base: Optional[str] = None,\n        stream: bool = False,\n        system_message: Optional[str] = None,\n    ) -> Text:\n        if not openai_api_base:\n            openai_api_base = \"https://api.openai.com/v1\"\n        if openai_api_key:\n            api_key = SecretStr(openai_api_key)\n        else:\n            api_key = None\n\n        output = ChatOpenAI(\n            max_tokens=max_tokens or None,\n            model_kwargs=model_kwargs,\n            model=model_name,\n            base_url=openai_api_base,\n            api_key=api_key,\n            temperature=temperature,\n        )\n\n        return self.get_chat_result(output, stream, input_value, system_message)\n",
                "fileTypes": [],
                "file_path": "",
                "password": false,
                "name": "code",
                "advanced": true,
                "dynamic": true,
                "info": "",
                "load_from_db": false,
                "title_case": false
              },
              "max_tokens": {
                "type": "int",
                "required": false,
                "placeholder": "",
                "list": false,
                "show": true,
                "multiline": false,
                "value": "0",
                "fileTypes": [],
                "file_path": "",
                "password": false,
                "name": "max_tokens",
                "display_name": "Max Tokens",
                "advanced": true,
                "dynamic": false,
                "info": "The maximum number of tokens to generate. Set to 0 for unlimited tokens.",
                "load_from_db": false,
                "title_case": false
              },
              "model_kwargs": {
                "type": "NestedDict",
                "required": false,
                "placeholder": "",
                "list": false,
                "show": true,
                "multiline": false,
                "value": {},
                "fileTypes": [],
                "file_path": "",
                "password": false,
                "name": "model_kwargs",
                "display_name": "Model Kwargs",
                "advanced": true,
                "dynamic": false,
                "info": "",
                "load_from_db": false,
                "title_case": false
              },
              "model_name": {
                "type": "str",
                "required": false,
                "placeholder": "",
                "list": true,
                "show": true,
                "multiline": false,
                "value": "gpt-4o",
                "fileTypes": [],
                "file_path": "",
                "password": false,
                "options": [
                  "gpt-4o",
                  "gpt-4-turbo",
                  "gpt-4-turbo-preview",
                  "gpt-3.5-turbo",
                  "gpt-3.5-turbo-0125"
                ],
                "name": "model_name",
                "display_name": "Model Name",
                "advanced": false,
                "dynamic": false,
                "info": "",
                "load_from_db": false,
                "title_case": false,
                "input_types": [
                  "Text"
                ]
              },
              "openai_api_base": {
                "type": "str",
                "required": false,
                "placeholder": "",
                "list": false,
                "show": true,
                "multiline": false,
                "fileTypes": [],
                "file_path": "",
                "password": false,
                "name": "openai_api_base",
                "display_name": "OpenAI API Base",
                "advanced": true,
                "dynamic": false,
                "info": "The base URL of the OpenAI API. Defaults to https://api.openai.com/v1.\n\nYou can change this to use other APIs like JinaChat, LocalAI and Prem.",
                "load_from_db": false,
                "title_case": false,
                "input_types": [
                  "Text"
                ]
              },
              "openai_api_key": {
                "type": "str",
                "required": true,
                "placeholder": "",
                "list": false,
                "show": true,
                "multiline": false,
                "fileTypes": [],
                "file_path": "",
                "password": true,
                "name": "openai_api_key",
                "display_name": "OpenAI API Key",
                "advanced": false,
                "dynamic": false,
                "info": "The OpenAI API Key to use for the OpenAI model.",
                "load_from_db": false,
                "title_case": false,
                "input_types": [
                  "Text"
                ],
                "value": ""
              },
              "stream": {
                "type": "bool",
                "required": false,
                "placeholder": "",
                "list": false,
                "show": true,
                "multiline": false,
                "value": false,
                "fileTypes": [],
                "file_path": "",
                "password": false,
                "name": "stream",
                "display_name": "Stream",
                "advanced": true,
                "dynamic": false,
                "info": "Stream the response from the model. Streaming works only in Chat.",
                "load_from_db": false,
                "title_case": false
              },
              "system_message": {
                "type": "str",
                "required": false,
                "placeholder": "",
                "list": false,
                "show": true,
                "multiline": false,
                "fileTypes": [],
                "file_path": "",
                "password": false,
                "name": "system_message",
                "display_name": "System Message",
                "advanced": false,
                "dynamic": false,
                "info": "System message to pass to the model.",
                "load_from_db": false,
                "title_case": false,
                "input_types": [
                  "Text"
                ],
                "value": ""
              },
              "temperature": {
                "type": "float",
                "required": false,
                "placeholder": "",
                "list": false,
                "show": true,
                "multiline": false,
                "value": "0.4",
                "fileTypes": [],
                "file_path": "",
                "password": false,
                "name": "temperature",
                "display_name": "Temperature",
                "advanced": false,
                "dynamic": false,
                "info": "",
                "rangeSpec": {
                  "step_type": "float",
                  "min": -1,
                  "max": 1,
                  "step": 0.1
                },
                "load_from_db": false,
                "title_case": false
              },
              "_type": "CustomComponent"
            },
            "description": "Generates text using OpenAI LLMs.",
            "icon": "OpenAI",
            "base_classes": [
              "object",
              "str",
              "Text"
            ],
            "display_name": "Director (OpenAI)",
            "documentation": "",
            "custom_fields": {
              "input_value": null,
              "openai_api_key": null,
              "temperature": null,
              "model_name": null,
              "max_tokens": null,
              "model_kwargs": null,
              "openai_api_base": null,
              "stream": null,
              "system_message": null
            },
            "output_types": [
              "Text"
            ],
            "field_formatters": {},
            "frozen": false,
            "field_order": [
              "max_tokens",
              "model_kwargs",
              "model_name",
              "openai_api_base",
              "openai_api_key",
              "temperature",
              "input_value",
              "system_message",
              "stream"
            ],
            "beta": false,
            "edited": true
          },
          "id": "OpenAIModel-xlcLT",
          "description": "Generates text using OpenAI LLMs.",
          "display_name": "Director (OpenAI)",
          "edited": false
        },
        "selected": false,
        "width": 384,
        "height": 665,
        "positionAbsolute": {
          "x": 2923.567147121073,
          "y": -595.2153250022242
        },
        "dragging": false
      },
      {
        "id": "Prompt-EONAA",
        "type": "genericNode",
        "position": {
          "x": 2182.4201193782737,
          "y": -980.0397118430179
        },
        "data": {
          "type": "Prompt",
          "node": {
            "template": {
              "code": {
                "type": "code",
                "required": true,
                "placeholder": "",
                "list": false,
                "show": true,
                "multiline": true,
                "value": "from langchain_core.prompts import PromptTemplate\n\nfrom axiestudio.custom import CustomComponent\nfrom axiestudio.field_typing import Prompt, TemplateField, Text\n\n\nclass PromptComponent(CustomComponent):\n    display_name: str = \"Prompt\"\n    description: str = \"Create a prompt template with dynamic variables.\"\n    icon = \"prompts\"\n\n    def build_config(self):\n        return {\n            \"template\": TemplateField(display_name=\"Template\"),\n            \"code\": TemplateField(advanced=True),\n        }\n\n    def build(\n        self,\n        template: Prompt,\n        **kwargs,\n    ) -> Text:\n        from axiestudio.base.prompts.utils import dict_values_to_string\n\n        prompt_template = PromptTemplate.from_template(Text(template))\n        kwargs = dict_values_to_string(kwargs)\n        kwargs = {k: \"\\n\".join(v) if isinstance(v, list) else v for k, v in kwargs.items()}\n        try:\n            formated_prompt = prompt_template.format(**kwargs)\n        except Exception as exc:\n            raise ValueError(f\"Error formatting prompt: {exc}\") from exc\n        self.status = f'Prompt:\\n\"{formated_prompt}\"'\n        return formated_prompt\n",
                "fileTypes": [],
                "file_path": "",
                "password": false,
                "name": "code",
                "advanced": true,
                "dynamic": true,
                "info": "",
                "load_from_db": false,
                "title_case": false
              },
              "template": {
                "type": "prompt",
                "required": false,
                "placeholder": "",
                "list": false,
                "show": true,
                "multiline": false,
                "value": "System: \n\"\"\"You are an attentive and empathetic AI user research director, overseeing real-time user research projects. Youâ€™ll receive real time transcripts and pass orders to your research team of specialized AI bots. Your goal is to create a comprehensive and complete research summary of the conversation by employing your AI team.\"\"\"\n\n---\n\nPROJECT DETAILS\nProject Name: {project-name}\nProject Description: {project-description}\nMethod: {research-method}\nPrimary Goal: {research-goal}\nOther Business Goals: {business-goals}\n\n---\n\nYOUR TEAM\nYour team consists of the following bots:\n* @Interviewees: a bot that records the names of the people who are being interviewed by the facilitator.\n* @Background - a bot that is collecting facts about the interviewee background, their demographics, interests, role, situation, work environment, etc. Please don't call it for statements the facilitator makes, only background from the interviewees. \n* @Quotes - a bot that collects meaningful and eye opening quotes from the interviewees.\n* @Needs - a bot that convert any need, pain point, or desire, expressed by the interviewee into an HMW question.\n* @Problems - a bot that collects a list of problems mentioned by the interviewee about the product or feature discussed.\n* @Q&A - A bot that collects any question from the facilitator along with interviewee's answer.\n\nPlease note: the facilitator/s of this session are: {facilitators}. \nIt's important that you don't engage your team to record any of the things they say, but only the *other* participants, since facilitators are not the people being interviewed.\n\n---\n\nHere's the session history: {history}\n\n--\n\nHere's the latest message: {new-chunk} \n\n--\n\nYour thoughts: {thoughts}\n\n---\n\nYOUR RESPONSE\nFor every chunk of transcript, please return a CSV with your instructions to the bots. The columns are:\n* Bot Name\n* Speaker Name\n* Start Time\n* End Time\n* Note Content\n\nHere's an example:\n\n@Background, Peter Marks, 6.94, 21.47, \"John works as the Head of Product for Widgets.com.\"\n@Needs, Olivia Davis, 19.67, 53.41, \"HMW help users of Widgets.com sign up and start using the product without handholding?\"\n@Quotes, Nataly Eliyahu, 34.23, 72.55, \"The way I see it, the main job of a product manager is to be a translator between the business folks and the designers and engineers. So anything that can help me get everyone to see the full picture is a win.\"\n\nYou may engage as many bots as are needed based on your answers, but no need to engage any that are not needed.\nIf none of the bots need to be engaged, simply return <PASS>. Otherwise, please start your reply with @\n",
                "fileTypes": [],
                "file_path": "",
                "password": false,
                "name": "template",
                "display_name": "Template",
                "advanced": false,
                "input_types": [
                  "Text"
                ],
                "dynamic": false,
                "info": "",
                "load_from_db": false,
                "title_case": false
              },
              "_type": "CustomComponent",
              "history": {
                "field_type": "str",
                "required": false,
                "placeholder": "",
                "list": false,
                "show": true,
                "multiline": true,
                "value": "",
                "fileTypes": [],
                "file_path": "",
                "password": false,
                "name": "history",
                "display_name": "history",
                "advanced": false,
                "input_types": [
                  "Document",
                  "Message",
                  "Record",
                  "Text"
                ],
                "dynamic": false,
                "info": "",
                "load_from_db": false,
                "title_case": false,
                "type": "str"
              },
              "new-chunk": {
                "field_type": "str",
                "required": false,
                "placeholder": "",
                "list": false,
                "show": true,
                "multiline": true,
                "value": "",
                "fileTypes": [],
                "file_path": "",
                "password": false,
                "name": "new-chunk",
                "display_name": "new-chunk",
                "advanced": false,
                "input_types": [
                  "Document",
                  "Message",
                  "Record",
                  "Text"
                ],
                "dynamic": false,
                "info": "",
                "load_from_db": false,
                "title_case": false,
                "type": "str"
              },
              "project-name": {
                "field_type": "str",
                "required": false,
                "placeholder": "",
                "list": false,
                "show": true,
                "multiline": true,
                "value": "",
                "fileTypes": [],
                "file_path": "",
                "password": false,
                "name": "project-name",
                "display_name": "project-name",
                "advanced": false,
                "input_types": [
                  "Document",
                  "Message",
                  "Record",
                  "Text"
                ],
                "dynamic": false,
                "info": "",
                "load_from_db": false,
                "title_case": false,
                "type": "str"
              },
              "project-description": {
                "field_type": "str",
                "required": false,
                "placeholder": "",
                "list": false,
                "show": true,
                "multiline": true,
                "value": "",
                "fileTypes": [],
                "file_path": "",
                "password": false,
                "name": "project-description",
                "display_name": "project-description",
                "advanced": false,
                "input_types": [
                  "Document",
                  "Message",
                  "Record",
                  "Text"
                ],
                "dynamic": false,
                "info": "",
                "load_from_db": false,
                "title_case": false,
                "type": "str"
              },
              "research-method": {
                "field_type": "str",
                "required": false,
                "placeholder": "",
                "list": false,
                "show": true,
                "multiline": true,
                "value": "",
                "fileTypes": [],
                "file_path": "",
                "password": false,
                "name": "research-method",
                "display_name": "research-method",
                "advanced": false,
                "input_types": [
                  "Document",
                  "Message",
                  "Record",
                  "Text"
                ],
                "dynamic": false,
                "info": "",
                "load_from_db": false,
                "title_case": false,
                "type": "str"
              },
              "research-goal": {
                "field_type": "str",
                "required": false,
                "placeholder": "",
                "list": false,
                "show": true,
                "multiline": true,
                "value": "",
                "fileTypes": [],
                "file_path": "",
                "password": false,
                "name": "research-goal",
                "display_name": "research-goal",
                "advanced": false,
                "input_types": [
                  "Document",
                  "Message",
                  "Record",
                  "Text"
                ],
                "dynamic": false,
                "info": "",
                "load_from_db": false,
                "title_case": false,
                "type": "str"
              },
              "business-goals": {
                "field_type": "str",
                "required": false,
                "placeholder": "",
                "list": false,
                "show": true,
                "multiline": true,
                "value": "",
                "fileTypes": [],
                "file_path": "",
                "password": false,
                "name": "business-goals",
                "display_name": "business-goals",
                "advanced": false,
                "input_types": [
                  "Document",
                  "Message",
                  "Record",
                  "Text"
                ],
                "dynamic": false,
                "info": "",
                "load_from_db": false,
                "title_case": false,
                "type": "str"
              },
              "facilitators": {
                "field_type": "str",
                "required": false,
                "placeholder": "",
                "list": false,
                "show": true,
                "multiline": true,
                "value": "",
                "fileTypes": [],
                "file_path": "",
                "password": false,
                "name": "facilitators",
                "display_name": "facilitators",
                "advanced": false,
                "input_types": [
                  "Document",
                  "Message",
                  "Record",
                  "Text"
                ],
                "dynamic": false,
                "info": "",
                "load_from_db": false,
                "title_case": false,
                "type": "str"
              },
              "thoughts": {
                "field_type": "str",
                "required": false,
                "placeholder": "",
                "list": false,
                "show": true,
                "multiline": true,
                "value": "",
                "fileTypes": [],
                "file_path": "",
                "password": false,
                "name": "thoughts",
                "display_name": "thoughts",
                "advanced": false,
                "input_types": [
                  "Document",
                  "Message",
                  "Record",
                  "Text"
                ],
                "dynamic": false,
                "info": "",
                "load_from_db": false,
                "title_case": false,
                "type": "str"
              }
            },
            "description": "Create a prompt template with dynamic variables.",
            "icon": "prompts",
            "is_input": null,
            "is_output": null,
            "is_composition": null,
            "base_classes": [
              "object",
              "str",
              "Text"
            ],
            "name": "",
            "display_name": "Prompt",
            "documentation": "",
            "custom_fields": {
              "template": [
                "project-name",
                "project-description",
                "research-method",
                "research-goal",
                "business-goals",
                "facilitators",
                "history",
                "new-chunk",
                "thoughts"
              ]
            },
            "output_types": [
              "Text"
            ],
            "full_path": null,
            "field_formatters": {},
            "frozen": false,
            "field_order": [],
            "beta": false,
            "error": null
          },
          "id": "Prompt-EONAA",
          "description": "Create a prompt template with dynamic variables.",
          "display_name": "Prompt"
        },
        "selected": true,
        "width": 384,
        "height": 1171,
        "positionAbsolute": {
          "x": 2182.4201193782737,
          "y": -980.0397118430179
        },
        "dragging": false
      },
      {
        "id": "MemoryComponent-x8jW3",
        "type": "genericNode",
        "position": {
          "x": 2121.169523061734,
          "y": 363.94248022221814
        },
        "data": {
          "type": "MemoryComponent",
          "node": {
            "template": {
              "code": {
                "type": "code",
                "required": true,
                "placeholder": "",
                "list": false,
                "show": true,
                "multiline": true,
                "value": "from typing import Optional\n\nfrom axiestudio.base.memory.memory import BaseMemoryComponent\nfrom axiestudio.field_typing import Text\nfrom axiestudio.helpers.record import messages_to_text\nfrom axiestudio.memory import get_messages\nfrom axiestudio.schema.message import Message\n\n\nclass MemoryComponent(BaseMemoryComponent):\n    display_name = \"Chat Memory\"\n    description = \"Retrieves stored chat messages given a specific Session ID.\"\n    beta: bool = True\n    icon = \"history\"\n\n    def build_config(self):\n        return {\n            \"sender\": {\n                \"options\": [\"Machine\", \"User\", \"Machine and User\"],\n                \"display_name\": \"Sender Type\",\n            },\n            \"sender_name\": {\"display_name\": \"Sender Name\", \"advanced\": True},\n            \"n_messages\": {\n                \"display_name\": \"Number of Messages\",\n                \"info\": \"Number of messages to retrieve.\",\n            },\n            \"session_id\": {\n                \"display_name\": \"Session ID\",\n                \"info\": \"Session ID of the chat history.\",\n                \"input_types\": [\"Text\"],\n            },\n            \"order\": {\n                \"options\": [\"Ascending\", \"Descending\"],\n                \"display_name\": \"Order\",\n                \"info\": \"Order of the messages.\",\n                \"advanced\": True,\n            },\n            \"record_template\": {\n                \"display_name\": \"Record Template\",\n                \"multiline\": True,\n                \"info\": \"Template to convert Record to Text. If left empty, it will be dynamically set to the Record's text key.\",\n                \"advanced\": True,\n            },\n        }\n\n    def get_messages(self, **kwargs) -> list[Message]:\n        # Validate kwargs by checking if it contains the correct keys\n        if \"sender\" not in kwargs:\n            kwargs[\"sender\"] = None\n        if \"sender_name\" not in kwargs:\n            kwargs[\"sender_name\"] = None\n        if \"session_id\" not in kwargs:\n            kwargs[\"session_id\"] = None\n        if \"limit\" not in kwargs:\n            kwargs[\"limit\"] = 5\n        if \"order\" not in kwargs:\n            kwargs[\"order\"] = \"Descending\"\n\n        kwargs[\"order\"] = \"DESC\" if kwargs[\"order\"] == \"Descending\" else \"ASC\"\n        if kwargs[\"sender\"] == \"Machine and User\":\n            kwargs[\"sender\"] = None\n        return get_messages(**kwargs)\n\n    def build(\n        self,\n        sender: Optional[str] = \"Machine and User\",\n        sender_name: Optional[str] = None,\n        session_id: Optional[str] = None,\n        n_messages: int = 5,\n        order: Optional[str] = \"Descending\",\n        record_template: Optional[str] = \"{sender_name}: {text}\",\n    ) -> Text:\n        messages = self.get_messages(\n            sender=sender,\n            sender_name=sender_name,\n            session_id=session_id,\n            limit=n_messages,\n            order=order,\n        )\n        messages_str = messages_to_text(template=record_template or \"\", messages=messages)\n        self.status = messages_str\n        return messages_str\n",
                "fileTypes": [],
                "file_path": "",
                "password": false,
                "name": "code",
                "advanced": true,
                "dynamic": true,
                "info": "",
                "load_from_db": false,
                "title_case": false
              },
              "n_messages": {
                "type": "int",
                "required": false,
                "placeholder": "",
                "list": false,
                "show": true,
                "multiline": false,
                "value": "10",
                "fileTypes": [],
                "file_path": "",
                "password": false,
                "name": "n_messages",
                "display_name": "Number of Messages",
                "advanced": false,
                "dynamic": false,
                "info": "Number of messages to retrieve.",
                "load_from_db": false,
                "title_case": false
              },
              "order": {
                "type": "str",
                "required": false,
                "placeholder": "",
                "list": true,
                "show": true,
                "multiline": false,
                "value": "Descending",
                "fileTypes": [],
                "file_path": "",
                "password": false,
                "options": [
                  "Ascending",
                  "Descending"
                ],
                "name": "order",
                "display_name": "Order",
                "advanced": true,
                "dynamic": false,
                "info": "Order of the messages.",
                "load_from_db": false,
                "title_case": false,
                "input_types": [
                  "Text"
                ]
              },
              "record_template": {
                "type": "str",
                "required": false,
                "placeholder": "",
                "list": false,
                "show": true,
                "multiline": true,
                "value": "{sender_name}: {text}",
                "fileTypes": [],
                "file_path": "",
                "password": false,
                "name": "record_template",
                "display_name": "Record Template",
                "advanced": true,
                "dynamic": false,
                "info": "Template to convert Record to Text. If left empty, it will be dynamically set to the Record's text key.",
                "load_from_db": false,
                "title_case": false,
                "input_types": [
                  "Text"
                ]
              },
              "sender": {
                "type": "str",
                "required": false,
                "placeholder": "",
                "list": true,
                "show": true,
                "multiline": false,
                "value": "User",
                "fileTypes": [],
                "file_path": "",
                "password": false,
                "options": [
                  "Machine",
                  "User",
                  "Machine and User"
                ],
                "name": "sender",
                "display_name": "Sender Type",
                "advanced": false,
                "dynamic": false,
                "info": "",
                "load_from_db": false,
                "title_case": false,
                "input_types": [
                  "Text"
                ]
              },
              "sender_name": {
                "type": "str",
                "required": false,
                "placeholder": "",
                "list": false,
                "show": true,
                "multiline": false,
                "fileTypes": [],
                "file_path": "",
                "password": false,
                "name": "sender_name",
                "display_name": "Sender Name",
                "advanced": true,
                "dynamic": false,
                "info": "",
                "load_from_db": false,
                "title_case": false,
                "input_types": [
                  "Text"
                ]
              },
              "session_id": {
                "type": "str",
                "required": false,
                "placeholder": "",
                "list": false,
                "show": true,
                "multiline": false,
                "fileTypes": [],
                "file_path": "",
                "password": false,
                "name": "session_id",
                "display_name": "Session ID",
                "advanced": false,
                "input_types": [
                  "Text"
                ],
                "dynamic": false,
                "info": "Session ID of the chat history.",
                "load_from_db": false,
                "title_case": false
              },
              "_type": "CustomComponent"
            },
            "description": "Retrieves stored chat messages given a specific Session ID.",
            "icon": "history",
            "base_classes": [
              "object",
              "str",
              "Text"
            ],
            "display_name": "Short Chat Memory",
            "documentation": "",
            "custom_fields": {
              "sender": null,
              "sender_name": null,
              "session_id": null,
              "n_messages": null,
              "order": null,
              "record_template": null
            },
            "output_types": [
              "Text"
            ],
            "field_formatters": {},
            "frozen": false,
            "field_order": [],
            "beta": true
          },
          "id": "MemoryComponent-x8jW3"
        },
        "selected": false,
        "width": 384,
        "height": 505,
        "positionAbsolute": {
          "x": 2121.169523061734,
          "y": 363.94248022221814
        },
        "dragging": false
      }
    ],
    "edges": [
      {
        "source": "IDGenerator-cOHvw",
        "sourceHandle": "{Å“baseClassesÅ“:[Å“objectÅ“,Å“strÅ“,Å“TextÅ“],Å“dataTypeÅ“:Å“IDGeneratorÅ“,Å“idÅ“:Å“IDGenerator-cOHvwÅ“}",
        "target": "MemoryComponent-hc44i",
        "targetHandle": "{Å“fieldNameÅ“:Å“session_idÅ“,Å“idÅ“:Å“MemoryComponent-hc44iÅ“,Å“inputTypesÅ“:[Å“TextÅ“],Å“typeÅ“:Å“strÅ“}",
        "data": {
          "targetHandle": {
            "fieldName": "session_id",
            "id": "MemoryComponent-hc44i",
            "inputTypes": [
              "Text"
            ],
            "type": "str"
          },
          "sourceHandle": {
            "baseClasses": [
              "object",
              "str",
              "Text"
            ],
            "dataType": "IDGenerator",
            "id": "IDGenerator-cOHvw"
          }
        },
        "style": {
          "stroke": "#555"
        },
        "className": "",
        "id": "reactflow__edge-IDGenerator-cOHvw{Å“baseClassesÅ“:[Å“objectÅ“,Å“strÅ“,Å“TextÅ“],Å“dataTypeÅ“:Å“IDGeneratorÅ“,Å“idÅ“:Å“IDGenerator-cOHvwÅ“}-MemoryComponent-hc44i{Å“fieldNameÅ“:Å“session_idÅ“,Å“idÅ“:Å“MemoryComponent-hc44iÅ“,Å“inputTypesÅ“:[Å“TextÅ“],Å“typeÅ“:Å“strÅ“}",
        "selected": false
      },
      {
        "source": "MemoryComponent-hc44i",
        "sourceHandle": "{Å“baseClassesÅ“:[Å“objectÅ“,Å“strÅ“,Å“TextÅ“],Å“dataTypeÅ“:Å“MemoryComponentÅ“,Å“idÅ“:Å“MemoryComponent-hc44iÅ“}",
        "target": "Prompt-XLyGX",
        "targetHandle": "{Å“fieldNameÅ“:Å“historyÅ“,Å“idÅ“:Å“Prompt-XLyGXÅ“,Å“inputTypesÅ“:[Å“DocumentÅ“,Å“MessageÅ“,Å“RecordÅ“,Å“TextÅ“],Å“typeÅ“:Å“strÅ“}",
        "data": {
          "targetHandle": {
            "fieldName": "history",
            "id": "Prompt-XLyGX",
            "inputTypes": [
              "Document",
              "Message",
              "Record",
              "Text"
            ],
            "type": "str"
          },
          "sourceHandle": {
            "baseClasses": [
              "object",
              "str",
              "Text"
            ],
            "dataType": "MemoryComponent",
            "id": "MemoryComponent-hc44i"
          }
        },
        "id": "reactflow__edge-MemoryComponent-hc44i{Å“baseClassesÅ“:[Å“objectÅ“,Å“strÅ“,Å“TextÅ“],Å“dataTypeÅ“:Å“MemoryComponentÅ“,Å“idÅ“:Å“MemoryComponent-hc44iÅ“}-Prompt-XLyGX{Å“fieldNameÅ“:Å“historyÅ“,Å“idÅ“:Å“Prompt-XLyGXÅ“,Å“inputTypesÅ“:[Å“DocumentÅ“,Å“MessageÅ“,Å“RecordÅ“,Å“TextÅ“],Å“typeÅ“:Å“strÅ“}",
        "className": ""
      },
      {
        "source": "TextInput-at7vy",
        "sourceHandle": "{Å“baseClassesÅ“:[Å“objectÅ“,Å“strÅ“,Å“TextÅ“],Å“dataTypeÅ“:Å“TextInputÅ“,Å“idÅ“:Å“TextInput-at7vyÅ“}",
        "target": "Prompt-XLyGX",
        "targetHandle": "{Å“fieldNameÅ“:Å“business-goalsÅ“,Å“idÅ“:Å“Prompt-XLyGXÅ“,Å“inputTypesÅ“:[Å“DocumentÅ“,Å“MessageÅ“,Å“RecordÅ“,Å“TextÅ“],Å“typeÅ“:Å“strÅ“}",
        "data": {
          "targetHandle": {
            "fieldName": "business-goals",
            "id": "Prompt-XLyGX",
            "inputTypes": [
              "Document",
              "Message",
              "Record",
              "Text"
            ],
            "type": "str"
          },
          "sourceHandle": {
            "baseClasses": [
              "object",
              "str",
              "Text"
            ],
            "dataType": "TextInput",
            "id": "TextInput-at7vy"
          }
        },
        "id": "reactflow__edge-TextInput-at7vy{Å“baseClassesÅ“:[Å“objectÅ“,Å“strÅ“,Å“TextÅ“],Å“dataTypeÅ“:Å“TextInputÅ“,Å“idÅ“:Å“TextInput-at7vyÅ“}-Prompt-XLyGX{Å“fieldNameÅ“:Å“business-goalsÅ“,Å“idÅ“:Å“Prompt-XLyGXÅ“,Å“inputTypesÅ“:[Å“DocumentÅ“,Å“MessageÅ“,Å“RecordÅ“,Å“TextÅ“],Å“typeÅ“:Å“strÅ“}",
        "className": ""
      },
      {
        "source": "TextInput-WNMz5",
        "sourceHandle": "{Å“baseClassesÅ“:[Å“objectÅ“,Å“strÅ“,Å“TextÅ“],Å“dataTypeÅ“:Å“TextInputÅ“,Å“idÅ“:Å“TextInput-WNMz5Å“}",
        "target": "Prompt-XLyGX",
        "targetHandle": "{Å“fieldNameÅ“:Å“project-descriptionÅ“,Å“idÅ“:Å“Prompt-XLyGXÅ“,Å“inputTypesÅ“:[Å“DocumentÅ“,Å“MessageÅ“,Å“RecordÅ“,Å“TextÅ“],Å“typeÅ“:Å“strÅ“}",
        "data": {
          "targetHandle": {
            "fieldName": "project-description",
            "id": "Prompt-XLyGX",
            "inputTypes": [
              "Document",
              "Message",
              "Record",
              "Text"
            ],
            "type": "str"
          },
          "sourceHandle": {
            "baseClasses": [
              "object",
              "str",
              "Text"
            ],
            "dataType": "TextInput",
            "id": "TextInput-WNMz5"
          }
        },
        "id": "reactflow__edge-TextInput-WNMz5{Å“baseClassesÅ“:[Å“objectÅ“,Å“strÅ“,Å“TextÅ“],Å“dataTypeÅ“:Å“TextInputÅ“,Å“idÅ“:Å“TextInput-WNMz5Å“}-Prompt-XLyGX{Å“fieldNameÅ“:Å“project-descriptionÅ“,Å“idÅ“:Å“Prompt-XLyGXÅ“,Å“inputTypesÅ“:[Å“DocumentÅ“,Å“MessageÅ“,Å“RecordÅ“,Å“TextÅ“],Å“typeÅ“:Å“strÅ“}",
        "className": ""
      },
      {
        "source": "TextInput-h5qwa",
        "sourceHandle": "{Å“baseClassesÅ“:[Å“objectÅ“,Å“strÅ“,Å“TextÅ“],Å“dataTypeÅ“:Å“TextInputÅ“,Å“idÅ“:Å“TextInput-h5qwaÅ“}",
        "target": "Prompt-XLyGX",
        "targetHandle": "{Å“fieldNameÅ“:Å“project-nameÅ“,Å“idÅ“:Å“Prompt-XLyGXÅ“,Å“inputTypesÅ“:[Å“DocumentÅ“,Å“MessageÅ“,Å“RecordÅ“,Å“TextÅ“],Å“typeÅ“:Å“strÅ“}",
        "data": {
          "targetHandle": {
            "fieldName": "project-name",
            "id": "Prompt-XLyGX",
            "inputTypes": [
              "Document",
              "Message",
              "Record",
              "Text"
            ],
            "type": "str"
          },
          "sourceHandle": {
            "baseClasses": [
              "object",
              "str",
              "Text"
            ],
            "dataType": "TextInput",
            "id": "TextInput-h5qwa"
          }
        },
        "id": "reactflow__edge-TextInput-h5qwa{Å“baseClassesÅ“:[Å“objectÅ“,Å“strÅ“,Å“TextÅ“],Å“dataTypeÅ“:Å“TextInputÅ“,Å“idÅ“:Å“TextInput-h5qwaÅ“}-Prompt-XLyGX{Å“fieldNameÅ“:Å“project-nameÅ“,Å“idÅ“:Å“Prompt-XLyGXÅ“,Å“inputTypesÅ“:[Å“DocumentÅ“,Å“MessageÅ“,Å“RecordÅ“,Å“TextÅ“],Å“typeÅ“:Å“strÅ“}",
        "className": ""
      },
      {
        "source": "TextInput-iHjL1",
        "sourceHandle": "{Å“baseClassesÅ“:[Å“objectÅ“,Å“strÅ“,Å“TextÅ“],Å“dataTypeÅ“:Å“TextInputÅ“,Å“idÅ“:Å“TextInput-iHjL1Å“}",
        "target": "Prompt-XLyGX",
        "targetHandle": "{Å“fieldNameÅ“:Å“research-goalÅ“,Å“idÅ“:Å“Prompt-XLyGXÅ“,Å“inputTypesÅ“:[Å“DocumentÅ“,Å“MessageÅ“,Å“RecordÅ“,Å“TextÅ“],Å“typeÅ“:Å“strÅ“}",
        "data": {
          "targetHandle": {
            "fieldName": "research-goal",
            "id": "Prompt-XLyGX",
            "inputTypes": [
              "Document",
              "Message",
              "Record",
              "Text"
            ],
            "type": "str"
          },
          "sourceHandle": {
            "baseClasses": [
              "object",
              "str",
              "Text"
            ],
            "dataType": "TextInput",
            "id": "TextInput-iHjL1"
          }
        },
        "id": "reactflow__edge-TextInput-iHjL1{Å“baseClassesÅ“:[Å“objectÅ“,Å“strÅ“,Å“TextÅ“],Å“dataTypeÅ“:Å“TextInputÅ“,Å“idÅ“:Å“TextInput-iHjL1Å“}-Prompt-XLyGX{Å“fieldNameÅ“:Å“research-goalÅ“,Å“idÅ“:Å“Prompt-XLyGXÅ“,Å“inputTypesÅ“:[Å“DocumentÅ“,Å“MessageÅ“,Å“RecordÅ“,Å“TextÅ“],Å“typeÅ“:Å“strÅ“}",
        "className": ""
      },
      {
        "source": "TextInput-jc0vl",
        "sourceHandle": "{Å“baseClassesÅ“:[Å“objectÅ“,Å“strÅ“,Å“TextÅ“],Å“dataTypeÅ“:Å“TextInputÅ“,Å“idÅ“:Å“TextInput-jc0vlÅ“}",
        "target": "Prompt-XLyGX",
        "targetHandle": "{Å“fieldNameÅ“:Å“research-methodÅ“,Å“idÅ“:Å“Prompt-XLyGXÅ“,Å“inputTypesÅ“:[Å“DocumentÅ“,Å“MessageÅ“,Å“RecordÅ“,Å“TextÅ“],Å“typeÅ“:Å“strÅ“}",
        "data": {
          "targetHandle": {
            "fieldName": "research-method",
            "id": "Prompt-XLyGX",
            "inputTypes": [
              "Document",
              "Message",
              "Record",
              "Text"
            ],
            "type": "str"
          },
          "sourceHandle": {
            "baseClasses": [
              "object",
              "str",
              "Text"
            ],
            "dataType": "TextInput",
            "id": "TextInput-jc0vl"
          }
        },
        "id": "reactflow__edge-TextInput-jc0vl{Å“baseClassesÅ“:[Å“objectÅ“,Å“strÅ“,Å“TextÅ“],Å“dataTypeÅ“:Å“TextInputÅ“,Å“idÅ“:Å“TextInput-jc0vlÅ“}-Prompt-XLyGX{Å“fieldNameÅ“:Å“research-methodÅ“,Å“idÅ“:Å“Prompt-XLyGXÅ“,Å“inputTypesÅ“:[Å“DocumentÅ“,Å“MessageÅ“,Å“RecordÅ“,Å“TextÅ“],Å“typeÅ“:Å“strÅ“}",
        "className": ""
      },
      {
        "source": "ChatInput-k2Pvk",
        "sourceHandle": "{Å“baseClassesÅ“:[Å“MessageÅ“,Å“objectÅ“,Å“strÅ“,Å“TextÅ“],Å“dataTypeÅ“:Å“ChatInputÅ“,Å“idÅ“:Å“ChatInput-k2PvkÅ“}",
        "target": "Prompt-XLyGX",
        "targetHandle": "{Å“fieldNameÅ“:Å“new-chunkÅ“,Å“idÅ“:Å“Prompt-XLyGXÅ“,Å“inputTypesÅ“:[Å“DocumentÅ“,Å“MessageÅ“,Å“RecordÅ“,Å“TextÅ“],Å“typeÅ“:Å“strÅ“}",
        "data": {
          "targetHandle": {
            "fieldName": "new-chunk",
            "id": "Prompt-XLyGX",
            "inputTypes": [
              "Document",
              "Message",
              "Record",
              "Text"
            ],
            "type": "str"
          },
          "sourceHandle": {
            "baseClasses": [
              "Message",
              "object",
              "str",
              "Text"
            ],
            "dataType": "ChatInput",
            "id": "ChatInput-k2Pvk"
          }
        },
        "id": "reactflow__edge-ChatInput-k2Pvk{Å“baseClassesÅ“:[Å“MessageÅ“,Å“objectÅ“,Å“strÅ“,Å“TextÅ“],Å“dataTypeÅ“:Å“ChatInputÅ“,Å“idÅ“:Å“ChatInput-k2PvkÅ“}-Prompt-XLyGX{Å“fieldNameÅ“:Å“new-chunkÅ“,Å“idÅ“:Å“Prompt-XLyGXÅ“,Å“inputTypesÅ“:[Å“DocumentÅ“,Å“MessageÅ“,Å“RecordÅ“,Å“TextÅ“],Å“typeÅ“:Å“strÅ“}",
        "className": ""
      },
      {
        "source": "Prompt-XLyGX",
        "sourceHandle": "{Å“baseClassesÅ“:[Å“objectÅ“,Å“strÅ“,Å“TextÅ“],Å“dataTypeÅ“:Å“PromptÅ“,Å“idÅ“:Å“Prompt-XLyGXÅ“}",
        "target": "OpenAIModel-uB4K9",
        "targetHandle": "{Å“fieldNameÅ“:Å“input_valueÅ“,Å“idÅ“:Å“OpenAIModel-uB4K9Å“,Å“inputTypesÅ“:[Å“TextÅ“,Å“RecordÅ“,Å“PromptÅ“],Å“typeÅ“:Å“strÅ“}",
        "data": {
          "targetHandle": {
            "fieldName": "input_value",
            "id": "OpenAIModel-uB4K9",
            "inputTypes": [
              "Text",
              "Record",
              "Prompt"
            ],
            "type": "str"
          },
          "sourceHandle": {
            "baseClasses": [
              "object",
              "str",
              "Text"
            ],
            "dataType": "Prompt",
            "id": "Prompt-XLyGX"
          }
        },
        "id": "reactflow__edge-Prompt-XLyGX{Å“baseClassesÅ“:[Å“objectÅ“,Å“strÅ“,Å“TextÅ“],Å“dataTypeÅ“:Å“PromptÅ“,Å“idÅ“:Å“Prompt-XLyGXÅ“}-OpenAIModel-uB4K9{Å“fieldNameÅ“:Å“input_valueÅ“,Å“idÅ“:Å“OpenAIModel-uB4K9Å“,Å“inputTypesÅ“:[Å“TextÅ“,Å“RecordÅ“,Å“PromptÅ“],Å“typeÅ“:Å“strÅ“}",
        "className": ""
      },
      {
        "source": "TextInput-zZ8kv",
        "sourceHandle": "{Å“baseClassesÅ“:[Å“objectÅ“,Å“strÅ“,Å“TextÅ“],Å“dataTypeÅ“:Å“TextInputÅ“,Å“idÅ“:Å“TextInput-zZ8kvÅ“}",
        "target": "Prompt-EONAA",
        "targetHandle": "{Å“fieldNameÅ“:Å“facilitatorsÅ“,Å“idÅ“:Å“Prompt-EONAAÅ“,Å“inputTypesÅ“:[Å“DocumentÅ“,Å“MessageÅ“,Å“RecordÅ“,Å“TextÅ“],Å“typeÅ“:Å“strÅ“}",
        "data": {
          "targetHandle": {
            "fieldName": "facilitators",
            "id": "Prompt-EONAA",
            "inputTypes": [
              "Document",
              "Message",
              "Record",
              "Text"
            ],
            "type": "str"
          },
          "sourceHandle": {
            "baseClasses": [
              "object",
              "str",
              "Text"
            ],
            "dataType": "TextInput",
            "id": "TextInput-zZ8kv"
          }
        },
        "id": "reactflow__edge-TextInput-zZ8kv{Å“baseClassesÅ“:[Å“objectÅ“,Å“strÅ“,Å“TextÅ“],Å“dataTypeÅ“:Å“TextInputÅ“,Å“idÅ“:Å“TextInput-zZ8kvÅ“}-Prompt-EONAA{Å“fieldNameÅ“:Å“facilitatorsÅ“,Å“idÅ“:Å“Prompt-EONAAÅ“,Å“inputTypesÅ“:[Å“DocumentÅ“,Å“MessageÅ“,Å“RecordÅ“,Å“TextÅ“],Å“typeÅ“:Å“strÅ“}",
        "className": ""
      },
      {
        "source": "TextInput-h5qwa",
        "sourceHandle": "{Å“baseClassesÅ“:[Å“objectÅ“,Å“strÅ“,Å“TextÅ“],Å“dataTypeÅ“:Å“TextInputÅ“,Å“idÅ“:Å“TextInput-h5qwaÅ“}",
        "target": "Prompt-EONAA",
        "targetHandle": "{Å“fieldNameÅ“:Å“project-nameÅ“,Å“idÅ“:Å“Prompt-EONAAÅ“,Å“inputTypesÅ“:[Å“DocumentÅ“,Å“MessageÅ“,Å“RecordÅ“,Å“TextÅ“],Å“typeÅ“:Å“strÅ“}",
        "data": {
          "targetHandle": {
            "fieldName": "project-name",
            "id": "Prompt-EONAA",
            "inputTypes": [
              "Document",
              "Message",
              "Record",
              "Text"
            ],
            "type": "str"
          },
          "sourceHandle": {
            "baseClasses": [
              "object",
              "str",
              "Text"
            ],
            "dataType": "TextInput",
            "id": "TextInput-h5qwa"
          }
        },
        "id": "reactflow__edge-TextInput-h5qwa{Å“baseClassesÅ“:[Å“objectÅ“,Å“strÅ“,Å“TextÅ“],Å“dataTypeÅ“:Å“TextInputÅ“,Å“idÅ“:Å“TextInput-h5qwaÅ“}-Prompt-EONAA{Å“fieldNameÅ“:Å“project-nameÅ“,Å“idÅ“:Å“Prompt-EONAAÅ“,Å“inputTypesÅ“:[Å“DocumentÅ“,Å“MessageÅ“,Å“RecordÅ“,Å“TextÅ“],Å“typeÅ“:Å“strÅ“}",
        "className": ""
      },
      {
        "source": "TextInput-WNMz5",
        "sourceHandle": "{Å“baseClassesÅ“:[Å“objectÅ“,Å“strÅ“,Å“TextÅ“],Å“dataTypeÅ“:Å“TextInputÅ“,Å“idÅ“:Å“TextInput-WNMz5Å“}",
        "target": "Prompt-EONAA",
        "targetHandle": "{Å“fieldNameÅ“:Å“project-descriptionÅ“,Å“idÅ“:Å“Prompt-EONAAÅ“,Å“inputTypesÅ“:[Å“DocumentÅ“,Å“MessageÅ“,Å“RecordÅ“,Å“TextÅ“],Å“typeÅ“:Å“strÅ“}",
        "data": {
          "targetHandle": {
            "fieldName": "project-description",
            "id": "Prompt-EONAA",
            "inputTypes": [
              "Document",
              "Message",
              "Record",
              "Text"
            ],
            "type": "str"
          },
          "sourceHandle": {
            "baseClasses": [
              "object",
              "str",
              "Text"
            ],
            "dataType": "TextInput",
            "id": "TextInput-WNMz5"
          }
        },
        "id": "reactflow__edge-TextInput-WNMz5{Å“baseClassesÅ“:[Å“objectÅ“,Å“strÅ“,Å“TextÅ“],Å“dataTypeÅ“:Å“TextInputÅ“,Å“idÅ“:Å“TextInput-WNMz5Å“}-Prompt-EONAA{Å“fieldNameÅ“:Å“project-descriptionÅ“,Å“idÅ“:Å“Prompt-EONAAÅ“,Å“inputTypesÅ“:[Å“DocumentÅ“,Å“MessageÅ“,Å“RecordÅ“,Å“TextÅ“],Å“typeÅ“:Å“strÅ“}",
        "className": ""
      },
      {
        "source": "ChatInput-k2Pvk",
        "sourceHandle": "{Å“baseClassesÅ“:[Å“MessageÅ“,Å“objectÅ“,Å“strÅ“,Å“TextÅ“],Å“dataTypeÅ“:Å“ChatInputÅ“,Å“idÅ“:Å“ChatInput-k2PvkÅ“}",
        "target": "Prompt-EONAA",
        "targetHandle": "{Å“fieldNameÅ“:Å“new-chunkÅ“,Å“idÅ“:Å“Prompt-EONAAÅ“,Å“inputTypesÅ“:[Å“DocumentÅ“,Å“MessageÅ“,Å“RecordÅ“,Å“TextÅ“],Å“typeÅ“:Å“strÅ“}",
        "data": {
          "targetHandle": {
            "fieldName": "new-chunk",
            "id": "Prompt-EONAA",
            "inputTypes": [
              "Document",
              "Message",
              "Record",
              "Text"
            ],
            "type": "str"
          },
          "sourceHandle": {
            "baseClasses": [
              "Message",
              "object",
              "str",
              "Text"
            ],
            "dataType": "ChatInput",
            "id": "ChatInput-k2Pvk"
          }
        },
        "id": "reactflow__edge-ChatInput-k2Pvk{Å“baseClassesÅ“:[Å“MessageÅ“,Å“objectÅ“,Å“strÅ“,Å“TextÅ“],Å“dataTypeÅ“:Å“ChatInputÅ“,Å“idÅ“:Å“ChatInput-k2PvkÅ“}-Prompt-EONAA{Å“fieldNameÅ“:Å“new-chunkÅ“,Å“idÅ“:Å“Prompt-EONAAÅ“,Å“inputTypesÅ“:[Å“DocumentÅ“,Å“MessageÅ“,Å“RecordÅ“,Å“TextÅ“],Å“typeÅ“:Å“strÅ“}",
        "className": ""
      },
      {
        "source": "IDGenerator-cOHvw",
        "sourceHandle": "{Å“baseClassesÅ“:[Å“objectÅ“,Å“strÅ“,Å“TextÅ“],Å“dataTypeÅ“:Å“IDGeneratorÅ“,Å“idÅ“:Å“IDGenerator-cOHvwÅ“}",
        "target": "MemoryComponent-x8jW3",
        "targetHandle": "{Å“fieldNameÅ“:Å“session_idÅ“,Å“idÅ“:Å“MemoryComponent-x8jW3Å“,Å“inputTypesÅ“:[Å“TextÅ“],Å“typeÅ“:Å“strÅ“}",
        "data": {
          "targetHandle": {
            "fieldName": "session_id",
            "id": "MemoryComponent-x8jW3",
            "inputTypes": [
              "Text"
            ],
            "type": "str"
          },
          "sourceHandle": {
            "baseClasses": [
              "object",
              "str",
              "Text"
            ],
            "dataType": "IDGenerator",
            "id": "IDGenerator-cOHvw"
          }
        },
        "id": "reactflow__edge-IDGenerator-cOHvw{Å“baseClassesÅ“:[Å“objectÅ“,Å“strÅ“,Å“TextÅ“],Å“dataTypeÅ“:Å“IDGeneratorÅ“,Å“idÅ“:Å“IDGenerator-cOHvwÅ“}-MemoryComponent-x8jW3{Å“fieldNameÅ“:Å“session_idÅ“,Å“idÅ“:Å“MemoryComponent-x8jW3Å“,Å“inputTypesÅ“:[Å“TextÅ“],Å“typeÅ“:Å“strÅ“}",
        "className": ""
      },
      {
        "source": "MemoryComponent-x8jW3",
        "sourceHandle": "{Å“baseClassesÅ“:[Å“objectÅ“,Å“strÅ“,Å“TextÅ“],Å“dataTypeÅ“:Å“MemoryComponentÅ“,Å“idÅ“:Å“MemoryComponent-x8jW3Å“}",
        "target": "Prompt-EONAA",
        "targetHandle": "{Å“fieldNameÅ“:Å“historyÅ“,Å“idÅ“:Å“Prompt-EONAAÅ“,Å“inputTypesÅ“:[Å“DocumentÅ“,Å“MessageÅ“,Å“RecordÅ“,Å“TextÅ“],Å“typeÅ“:Å“strÅ“}",
        "data": {
          "targetHandle": {
            "fieldName": "history",
            "id": "Prompt-EONAA",
            "inputTypes": [
              "Document",
              "Message",
              "Record",
              "Text"
            ],
            "type": "str"
          },
          "sourceHandle": {
            "baseClasses": [
              "object",
              "str",
              "Text"
            ],
            "dataType": "MemoryComponent",
            "id": "MemoryComponent-x8jW3"
          }
        },
        "id": "reactflow__edge-MemoryComponent-x8jW3{Å“baseClassesÅ“:[Å“objectÅ“,Å“strÅ“,Å“TextÅ“],Å“dataTypeÅ“:Å“MemoryComponentÅ“,Å“idÅ“:Å“MemoryComponent-x8jW3Å“}-Prompt-EONAA{Å“fieldNameÅ“:Å“historyÅ“,Å“idÅ“:Å“Prompt-EONAAÅ“,Å“inputTypesÅ“:[Å“DocumentÅ“,Å“MessageÅ“,Å“RecordÅ“,Å“TextÅ“],Å“typeÅ“:Å“strÅ“}",
        "className": ""
      },
      {
        "source": "OpenAIModel-uB4K9",
        "sourceHandle": "{Å“baseClassesÅ“:[Å“objectÅ“,Å“strÅ“,Å“TextÅ“],Å“dataTypeÅ“:Å“OpenAIModelÅ“,Å“idÅ“:Å“OpenAIModel-uB4K9Å“}",
        "target": "Prompt-EONAA",
        "targetHandle": "{Å“fieldNameÅ“:Å“thoughtsÅ“,Å“idÅ“:Å“Prompt-EONAAÅ“,Å“inputTypesÅ“:[Å“DocumentÅ“,Å“MessageÅ“,Å“RecordÅ“,Å“TextÅ“],Å“typeÅ“:Å“strÅ“}",
        "data": {
          "targetHandle": {
            "fieldName": "thoughts",
            "id": "Prompt-EONAA",
            "inputTypes": [
              "Document",
              "Message",
              "Record",
              "Text"
            ],
            "type": "str"
          },
          "sourceHandle": {
            "baseClasses": [
              "object",
              "str",
              "Text"
            ],
            "dataType": "OpenAIModel",
            "id": "OpenAIModel-uB4K9"
          }
        },
        "id": "reactflow__edge-OpenAIModel-uB4K9{Å“baseClassesÅ“:[Å“objectÅ“,Å“strÅ“,Å“TextÅ“],Å“dataTypeÅ“:Å“OpenAIModelÅ“,Å“idÅ“:Å“OpenAIModel-uB4K9Å“}-Prompt-EONAA{Å“fieldNameÅ“:Å“thoughtsÅ“,Å“idÅ“:Å“Prompt-EONAAÅ“,Å“inputTypesÅ“:[Å“DocumentÅ“,Å“MessageÅ“,Å“RecordÅ“,Å“TextÅ“],Å“typeÅ“:Å“strÅ“}",
        "className": ""
      },
      {
        "source": "TextInput-iHjL1",
        "sourceHandle": "{Å“baseClassesÅ“:[Å“objectÅ“,Å“strÅ“,Å“TextÅ“],Å“dataTypeÅ“:Å“TextInputÅ“,Å“idÅ“:Å“TextInput-iHjL1Å“}",
        "target": "Prompt-EONAA",
        "targetHandle": "{Å“fieldNameÅ“:Å“research-goalÅ“,Å“idÅ“:Å“Prompt-EONAAÅ“,Å“inputTypesÅ“:[Å“DocumentÅ“,Å“MessageÅ“,Å“RecordÅ“,Å“TextÅ“],Å“typeÅ“:Å“strÅ“}",
        "data": {
          "targetHandle": {
            "fieldName": "research-goal",
            "id": "Prompt-EONAA",
            "inputTypes": [
              "Document",
              "Message",
              "Record",
              "Text"
            ],
            "type": "str"
          },
          "sourceHandle": {
            "baseClasses": [
              "object",
              "str",
              "Text"
            ],
            "dataType": "TextInput",
            "id": "TextInput-iHjL1"
          }
        },
        "id": "reactflow__edge-TextInput-iHjL1{Å“baseClassesÅ“:[Å“objectÅ“,Å“strÅ“,Å“TextÅ“],Å“dataTypeÅ“:Å“TextInputÅ“,Å“idÅ“:Å“TextInput-iHjL1Å“}-Prompt-EONAA{Å“fieldNameÅ“:Å“research-goalÅ“,Å“idÅ“:Å“Prompt-EONAAÅ“,Å“inputTypesÅ“:[Å“DocumentÅ“,Å“MessageÅ“,Å“RecordÅ“,Å“TextÅ“],Å“typeÅ“:Å“strÅ“}",
        "className": ""
      },
      {
        "source": "TextInput-jc0vl",
        "sourceHandle": "{Å“baseClassesÅ“:[Å“objectÅ“,Å“strÅ“,Å“TextÅ“],Å“dataTypeÅ“:Å“TextInputÅ“,Å“idÅ“:Å“TextInput-jc0vlÅ“}",
        "target": "Prompt-EONAA",
        "targetHandle": "{Å“fieldNameÅ“:Å“research-methodÅ“,Å“idÅ“:Å“Prompt-EONAAÅ“,Å“inputTypesÅ“:[Å“DocumentÅ“,Å“MessageÅ“,Å“RecordÅ“,Å“TextÅ“],Å“typeÅ“:Å“strÅ“}",
        "data": {
          "targetHandle": {
            "fieldName": "research-method",
            "id": "Prompt-EONAA",
            "inputTypes": [
              "Document",
              "Message",
              "Record",
              "Text"
            ],
            "type": "str"
          },
          "sourceHandle": {
            "baseClasses": [
              "object",
              "str",
              "Text"
            ],
            "dataType": "TextInput",
            "id": "TextInput-jc0vl"
          }
        },
        "id": "reactflow__edge-TextInput-jc0vl{Å“baseClassesÅ“:[Å“objectÅ“,Å“strÅ“,Å“TextÅ“],Å“dataTypeÅ“:Å“TextInputÅ“,Å“idÅ“:Å“TextInput-jc0vlÅ“}-Prompt-EONAA{Å“fieldNameÅ“:Å“research-methodÅ“,Å“idÅ“:Å“Prompt-EONAAÅ“,Å“inputTypesÅ“:[Å“DocumentÅ“,Å“MessageÅ“,Å“RecordÅ“,Å“TextÅ“],Å“typeÅ“:Å“strÅ“}",
        "className": ""
      },
      {
        "source": "Prompt-EONAA",
        "sourceHandle": "{Å“baseClassesÅ“:[Å“objectÅ“,Å“strÅ“,Å“TextÅ“],Å“dataTypeÅ“:Å“PromptÅ“,Å“idÅ“:Å“Prompt-EONAAÅ“}",
        "target": "OpenAIModel-xlcLT",
        "targetHandle": "{Å“fieldNameÅ“:Å“input_valueÅ“,Å“idÅ“:Å“OpenAIModel-xlcLTÅ“,Å“inputTypesÅ“:[Å“TextÅ“,Å“RecordÅ“,Å“PromptÅ“],Å“typeÅ“:Å“strÅ“}",
        "data": {
          "targetHandle": {
            "fieldName": "input_value",
            "id": "OpenAIModel-xlcLT",
            "inputTypes": [
              "Text",
              "Record",
              "Prompt"
            ],
            "type": "str"
          },
          "sourceHandle": {
            "baseClasses": [
              "object",
              "str",
              "Text"
            ],
            "dataType": "Prompt",
            "id": "Prompt-EONAA"
          }
        },
        "id": "reactflow__edge-Prompt-EONAA{Å“baseClassesÅ“:[Å“objectÅ“,Å“strÅ“,Å“TextÅ“],Å“dataTypeÅ“:Å“PromptÅ“,Å“idÅ“:Å“Prompt-EONAAÅ“}-OpenAIModel-xlcLT{Å“fieldNameÅ“:Å“input_valueÅ“,Å“idÅ“:Å“OpenAIModel-xlcLTÅ“,Å“inputTypesÅ“:[Å“TextÅ“,Å“RecordÅ“,Å“PromptÅ“],Å“typeÅ“:Å“strÅ“}",
        "className": ""
      },
      {
        "source": "OpenAIModel-xlcLT",
        "sourceHandle": "{Å“baseClassesÅ“:[Å“objectÅ“,Å“strÅ“,Å“TextÅ“],Å“dataTypeÅ“:Å“OpenAIModelÅ“,Å“idÅ“:Å“OpenAIModel-xlcLTÅ“}",
        "target": "ChatOutput-xPd0d",
        "targetHandle": "{Å“fieldNameÅ“:Å“input_valueÅ“,Å“idÅ“:Å“ChatOutput-xPd0dÅ“,Å“inputTypesÅ“:[Å“TextÅ“],Å“typeÅ“:Å“strÅ“}",
        "data": {
          "targetHandle": {
            "fieldName": "input_value",
            "id": "ChatOutput-xPd0d",
            "inputTypes": [
              "Text"
            ],
            "type": "str"
          },
          "sourceHandle": {
            "baseClasses": [
              "object",
              "str",
              "Text"
            ],
            "dataType": "OpenAIModel",
            "id": "OpenAIModel-xlcLT"
          }
        },
        "id": "reactflow__edge-OpenAIModel-xlcLT{Å“baseClassesÅ“:[Å“objectÅ“,Å“strÅ“,Å“TextÅ“],Å“dataTypeÅ“:Å“OpenAIModelÅ“,Å“idÅ“:Å“OpenAIModel-xlcLTÅ“}-ChatOutput-xPd0d{Å“fieldNameÅ“:Å“input_valueÅ“,Å“idÅ“:Å“ChatOutput-xPd0dÅ“,Å“inputTypesÅ“:[Å“TextÅ“],Å“typeÅ“:Å“strÅ“}",
        "className": ""
      }
    ],
    "viewport": {
      "x": 291.70364476324295,
      "y": 499.1357543760336,
      "zoom": 0.27266878058916794
    }
  },
  "metadata": {
    "Prompt": {
      "count": 2
    },
    "OpenAIModel": {
      "count": 2
    },
    "MemoryComponent": {
      "count": 2
    },
    "IDGenerator": {
      "count": 1
    },
    "TextInput": {
      "count": 6
    },
    "ChatInput": {
      "count": 1
    },
    "ChatOutput": {
      "count": 1
    },
    "total": 15
  },
  "original": {
    "id": "d03a3240-7e93-4c94-8742-c2bc6c0e6f86",
    "name": "Director Test (1)",
    "description": "Your Hub for Text Generation.",
    "is_component": false,
    "liked_by_count": "0",
    "downloads_count": "5",
    "metadata": {
      "Prompt": {
        "count": 2
      },
      "OpenAIModel": {
        "count": 2
      },
      "MemoryComponent": {
        "count": 2
      },
      "IDGenerator": {
        "count": 1
      },
      "TextInput": {
        "count": 6
      },
      "ChatInput": {
        "count": 1
      },
      "ChatOutput": {
        "count": 1
      },
      "total": 15
    },
    "last_tested_version": "1.0.0a53",
    "private": false,
    "data": {
      "nodes": [
        {
          "id": "Prompt-XLyGX",
          "type": "genericNode",
          "position": {
            "x": 667.0531293298402,
            "y": -1008.6155758445934
          },
          "data": {
            "type": "Prompt",
            "node": {
              "template": {
                "code": {
                  "type": "code",
                  "required": true,
                  "placeholder": "",
                  "list": false,
                  "show": true,
                  "multiline": true,
                  "value": "from langchain_core.prompts import PromptTemplate\n\nfrom axiestudio.custom import CustomComponent\nfrom axiestudio.field_typing import Prompt, TemplateField, Text\n\n\nclass PromptComponent(CustomComponent):\n    display_name: str = \"Prompt\"\n    description: str = \"Create a prompt template with dynamic variables.\"\n    icon = \"prompts\"\n\n    def build_config(self):\n        return {\n            \"template\": TemplateField(display_name=\"Template\"),\n            \"code\": TemplateField(advanced=True),\n        }\n\n    def build(\n        self,\n        template: Prompt,\n        **kwargs,\n    ) -> Text:\n        from axiestudio.base.prompts.utils import dict_values_to_string\n\n        prompt_template = PromptTemplate.from_template(Text(template))\n        kwargs = dict_values_to_string(kwargs)\n        kwargs = {k: \"\\n\".join(v) if isinstance(v, list) else v for k, v in kwargs.items()}\n        try:\n            formated_prompt = prompt_template.format(**kwargs)\n        except Exception as exc:\n            raise ValueError(f\"Error formatting prompt: {exc}\") from exc\n        self.status = f'Prompt:\\n\"{formated_prompt}\"'\n        return formated_prompt\n",
                  "fileTypes": [],
                  "file_path": "",
                  "password": false,
                  "name": "code",
                  "advanced": true,
                  "dynamic": true,
                  "info": "",
                  "load_from_db": false,
                  "title_case": false
                },
                "template": {
                  "type": "prompt",
                  "required": false,
                  "placeholder": "",
                  "list": false,
                  "show": true,
                  "multiline": false,
                  "value": "System: \n\"\"\"You are an attentive and empathetic AI user research director, overseeing real-time user research projects. Youâ€™ll receive real time transcripts of user and stakeholder interviews. Your goal is to create a comprehensive and complete research summary of the conversation.\"\"\"\n\n---\n\nPROJECT DETAILS\nProject Name: {project-name}\nProject Description: {project-description}\nMethod: {research-method}\nPrimary Goal: {research-goal}\nOther Business Goals: {business-goals}\n\n---\n\nYOUR RESPONSE\nFor every chunk of transcript, please answer these questions briefly:\n\n1. Is an interviewee speaking in this chunk, or only the facilitators?\n2. Is a new interviewee introduced in this new chunk or have I seen this interviewee before?\n3. Do any of the interviewees reveal new facts about their background or situation? (As opposed to talking concretely about the product or features.)\n4. Do any interviewees say something that seems like an especially eye opening, important, or revealing quote about how they think about their role, needs, or problem?\n5. Does the quote seem complete, or should we wait to the next chunk to complete it?\n6. Do any interviewees express a need, desire, pain-point, complaint, or provide information as to what needs to be in the product?\n7. Do any interviewees bring up any problems they have that may be related to the product?\n8. Do any interviewees answer one or more of the facilitator's question?\n\n\n---\n\nHere's the session history: {history}\n\n--\n\nHere's the latest message: {new-chunk} ",
                  "fileTypes": [],
                  "file_path": "",
                  "password": false,
                  "name": "template",
                  "display_name": "Template",
                  "advanced": false,
                  "input_types": [
                    "Text"
                  ],
                  "dynamic": false,
                  "info": "",
                  "load_from_db": false,
                  "title_case": false
                },
                "_type": "CustomComponent",
                "history": {
                  "field_type": "str",
                  "required": false,
                  "placeholder": "",
                  "list": false,
                  "show": true,
                  "multiline": true,
                  "value": "",
                  "fileTypes": [],
                  "file_path": "",
                  "password": false,
                  "name": "history",
                  "display_name": "history",
                  "advanced": false,
                  "input_types": [
                    "Document",
                    "Message",
                    "Record",
                    "Text"
                  ],
                  "dynamic": false,
                  "info": "",
                  "load_from_db": false,
                  "title_case": false,
                  "type": "str"
                },
                "new-chunk": {
                  "field_type": "str",
                  "required": false,
                  "placeholder": "",
                  "list": false,
                  "show": true,
                  "multiline": true,
                  "value": "",
                  "fileTypes": [],
                  "file_path": "",
                  "password": false,
                  "name": "new-chunk",
                  "display_name": "new-chunk",
                  "advanced": false,
                  "input_types": [
                    "Document",
                    "Message",
                    "Record",
                    "Text"
                  ],
                  "dynamic": false,
                  "info": "",
                  "load_from_db": false,
                  "title_case": false,
                  "type": "str"
                },
                "project-name": {
                  "field_type": "str",
                  "required": false,
                  "placeholder": "",
                  "list": false,
                  "show": true,
                  "multiline": true,
                  "value": "",
                  "fileTypes": [],
                  "file_path": "",
                  "password": false,
                  "name": "project-name",
                  "display_name": "project-name",
                  "advanced": false,
                  "input_types": [
                    "Document",
                    "Message",
                    "Record",
                    "Text"
                  ],
                  "dynamic": false,
                  "info": "",
                  "load_from_db": false,
                  "title_case": false,
                  "type": "str"
                },
                "project-description": {
                  "field_type": "str",
                  "required": false,
                  "placeholder": "",
                  "list": false,
                  "show": true,
                  "multiline": true,
                  "value": "",
                  "fileTypes": [],
                  "file_path": "",
                  "password": false,
                  "name": "project-description",
                  "display_name": "project-description",
                  "advanced": false,
                  "input_types": [
                    "Document",
                    "Message",
                    "Record",
                    "Text"
                  ],
                  "dynamic": false,
                  "info": "",
                  "load_from_db": false,
                  "title_case": false,
                  "type": "str"
                },
                "research-method": {
                  "field_type": "str",
                  "required": false,
                  "placeholder": "",
                  "list": false,
                  "show": true,
                  "multiline": true,
                  "value": "",
                  "fileTypes": [],
                  "file_path": "",
                  "password": false,
                  "name": "research-method",
                  "display_name": "research-method",
                  "advanced": false,
                  "input_types": [
                    "Document",
                    "Message",
                    "Record",
                    "Text"
                  ],
                  "dynamic": false,
                  "info": "",
                  "load_from_db": false,
                  "title_case": false,
                  "type": "str"
                },
                "research-goal": {
                  "field_type": "str",
                  "required": false,
                  "placeholder": "",
                  "list": false,
                  "show": true,
                  "multiline": true,
                  "value": "",
                  "fileTypes": [],
                  "file_path": "",
                  "password": false,
                  "name": "research-goal",
                  "display_name": "research-goal",
                  "advanced": false,
                  "input_types": [
                    "Document",
                    "Message",
                    "Record",
                    "Text"
                  ],
                  "dynamic": false,
                  "info": "",
                  "load_from_db": false,
                  "title_case": false,
                  "type": "str"
                },
                "business-goals": {
                  "field_type": "str",
                  "required": false,
                  "placeholder": "",
                  "list": false,
                  "show": true,
                  "multiline": true,
                  "value": "",
                  "fileTypes": [],
                  "file_path": "",
                  "password": false,
                  "name": "business-goals",
                  "display_name": "business-goals",
                  "advanced": false,
                  "input_types": [
                    "Document",
                    "Message",
                    "Record",
                    "Text"
                  ],
                  "dynamic": false,
                  "info": "",
                  "load_from_db": false,
                  "title_case": false,
                  "type": "str"
                }
              },
              "description": "Create a prompt template with dynamic variables.",
              "icon": "prompts",
              "is_input": null,
              "is_output": null,
              "is_composition": null,
              "base_classes": [
                "object",
                "str",
                "Text"
              ],
              "name": "",
              "display_name": "Prompt",
              "documentation": "",
              "custom_fields": {
                "template": [
                  "project-name",
                  "project-description",
                  "research-method",
                  "research-goal",
                  "business-goals",
                  "history",
                  "new-chunk"
                ]
              },
              "output_types": [
                "Text"
              ],
              "full_path": null,
              "field_formatters": {},
              "frozen": false,
              "field_order": [],
              "beta": false,
              "error": null
            },
            "id": "Prompt-XLyGX",
            "description": "Create a prompt template with dynamic variables.",
            "display_name": "Prompt"
          },
          "selected": false,
          "width": 384,
          "height": 983,
          "positionAbsolute": {
            "x": 667.0531293298402,
            "y": -1008.6155758445934
          },
          "dragging": false
        },
        {
          "id": "OpenAIModel-uB4K9",
          "type": "genericNode",
          "position": {
            "x": 1459.0207807967663,
            "y": -561.2413834694103
          },
          "data": {
            "type": "OpenAIModel",
            "node": {
              "template": {
                "input_value": {
                  "type": "str",
                  "required": true,
                  "placeholder": "",
                  "list": false,
                  "show": true,
                  "multiline": false,
                  "fileTypes": [],
                  "file_path": "",
                  "password": false,
                  "name": "input_value",
                  "display_name": "Input",
                  "advanced": false,
                  "input_types": [
                    "Text",
                    "Record",
                    "Prompt"
                  ],
                  "dynamic": false,
                  "info": "",
                  "load_from_db": false,
                  "title_case": false
                },
                "code": {
                  "type": "code",
                  "required": true,
                  "placeholder": "",
                  "list": false,
                  "show": true,
                  "multiline": true,
                  "value": "from typing import Optional\n\nfrom langchain_openai import ChatOpenAI\nfrom pydantic.v1 import SecretStr\n\nfrom axiestudio.base.constants import STREAM_INFO_TEXT\nfrom axiestudio.base.models.model import LCModelComponent\nfrom axiestudio.base.models.openai_constants import MODEL_NAMES\nfrom axiestudio.field_typing import NestedDict, Text\n\n\nclass OpenAIModelComponent(LCModelComponent):\n    display_name = \"OpenAI\"\n    description = \"Generates text using OpenAI LLMs.\"\n    icon = \"OpenAI\"\n\n    field_order = [\n        \"max_tokens\",\n        \"model_kwargs\",\n        \"model_name\",\n        \"openai_api_base\",\n        \"openai_api_key\",\n        \"temperature\",\n        \"input_value\",\n        \"system_message\",\n        \"stream\",\n    ]\n\n    def build_config(self):\n        return {\n            \"input_value\": {\"display_name\": \"Input\", \"input_types\": [\"Text\", \"Record\", \"Prompt\"]},\n            \"max_tokens\": {\n                \"display_name\": \"Max Tokens\",\n                \"advanced\": True,\n                \"info\": \"The maximum number of tokens to generate. Set to 0 for unlimited tokens.\",\n            },\n            \"model_kwargs\": {\n                \"display_name\": \"Model Kwargs\",\n                \"advanced\": True,\n            },\n            \"model_name\": {\n                \"display_name\": \"Model Name\",\n                \"advanced\": False,\n                \"options\": MODEL_NAMES,\n            },\n            \"openai_api_base\": {\n                \"display_name\": \"OpenAI API Base\",\n                \"advanced\": True,\n                \"info\": (\n                    \"The base URL of the OpenAI API. Defaults to https://api.openai.com/v1.\\n\\n\"\n                    \"You can change this to use other APIs like JinaChat, LocalAI and Prem.\"\n                ),\n            },\n            \"openai_api_key\": {\n                \"display_name\": \"OpenAI API Key\",\n                \"info\": \"The OpenAI API Key to use for the OpenAI model.\",\n                \"advanced\": False,\n                \"password\": True,\n            },\n            \"temperature\": {\n                \"display_name\": \"Temperature\",\n                \"advanced\": False,\n                \"value\": 0.1,\n            },\n            \"stream\": {\n                \"display_name\": \"Stream\",\n                \"info\": STREAM_INFO_TEXT,\n                \"advanced\": True,\n            },\n            \"system_message\": {\n                \"display_name\": \"System Message\",\n                \"info\": \"System message to pass to the model.\",\n                \"advanced\": True,\n            },\n        }\n\n    def build(\n        self,\n        input_value: Text,\n        openai_api_key: str,\n        temperature: float = 0.1,\n        model_name: str = \"gpt-3.5-turbo\",\n        max_tokens: Optional[int] = 256,\n        model_kwargs: NestedDict = {},\n        openai_api_base: Optional[str] = None,\n        stream: bool = False,\n        system_message: Optional[str] = None,\n    ) -> Text:\n        if not openai_api_base:\n            openai_api_base = \"https://api.openai.com/v1\"\n        if openai_api_key:\n            api_key = SecretStr(openai_api_key)\n        else:\n            api_key = None\n\n        output = ChatOpenAI(\n            max_tokens=max_tokens or None,\n            model_kwargs=model_kwargs,\n            model=model_name,\n            base_url=openai_api_base,\n            api_key=api_key,\n            temperature=temperature,\n        )\n\n        return self.get_chat_result(output, stream, input_value, system_message)\n",
                  "fileTypes": [],
                  "file_path": "",
                  "password": false,
                  "name": "code",
                  "advanced": true,
                  "dynamic": true,
                  "info": "",
                  "load_from_db": false,
                  "title_case": false
                },
                "max_tokens": {
                  "type": "int",
                  "required": false,
                  "placeholder": "",
                  "list": false,
                  "show": true,
                  "multiline": false,
                  "value": "0",
                  "fileTypes": [],
                  "file_path": "",
                  "password": false,
                  "name": "max_tokens",
                  "display_name": "Max Tokens",
                  "advanced": true,
                  "dynamic": false,
                  "info": "The maximum number of tokens to generate. Set to 0 for unlimited tokens.",
                  "load_from_db": false,
                  "title_case": false
                },
                "model_kwargs": {
                  "type": "NestedDict",
                  "required": false,
                  "placeholder": "",
                  "list": false,
                  "show": true,
                  "multiline": false,
                  "value": {},
                  "fileTypes": [],
                  "file_path": "",
                  "password": false,
                  "name": "model_kwargs",
                  "display_name": "Model Kwargs",
                  "advanced": true,
                  "dynamic": false,
                  "info": "",
                  "load_from_db": false,
                  "title_case": false
                },
                "model_name": {
                  "type": "str",
                  "required": false,
                  "placeholder": "",
                  "list": true,
                  "show": true,
                  "multiline": false,
                  "value": "gpt-4o",
                  "fileTypes": [],
                  "file_path": "",
                  "password": false,
                  "options": [
                    "gpt-4o",
                    "gpt-4-turbo",
                    "gpt-4-turbo-preview",
                    "gpt-3.5-turbo",
                    "gpt-3.5-turbo-0125"
                  ],
                  "name": "model_name",
                  "display_name": "Model Name",
                  "advanced": false,
                  "dynamic": false,
                  "info": "",
                  "load_from_db": false,
                  "title_case": false,
                  "input_types": [
                    "Text"
                  ]
                },
                "openai_api_base": {
                  "type": "str",
                  "required": false,
                  "placeholder": "",
                  "list": false,
                  "show": true,
                  "multiline": false,
                  "fileTypes": [],
                  "file_path": "",
                  "password": false,
                  "name": "openai_api_base",
                  "display_name": "OpenAI API Base",
                  "advanced": true,
                  "dynamic": false,
                  "info": "The base URL of the OpenAI API. Defaults to https://api.openai.com/v1.\n\nYou can change this to use other APIs like JinaChat, LocalAI and Prem.",
                  "load_from_db": false,
                  "title_case": false,
                  "input_types": [
                    "Text"
                  ]
                },
                "openai_api_key": {
                  "type": "str",
                  "required": true,
                  "placeholder": "",
                  "list": false,
                  "show": true,
                  "multiline": false,
                  "fileTypes": [],
                  "file_path": "",
                  "password": true,
                  "name": "openai_api_key",
                  "display_name": "OpenAI API Key",
                  "advanced": false,
                  "dynamic": false,
                  "info": "The OpenAI API Key to use for the OpenAI model.",
                  "load_from_db": false,
                  "title_case": false,
                  "input_types": [
                    "Text"
                  ],
                  "value": ""
                },
                "stream": {
                  "type": "bool",
                  "required": false,
                  "placeholder": "",
                  "list": false,
                  "show": true,
                  "multiline": false,
                  "value": false,
                  "fileTypes": [],
                  "file_path": "",
                  "password": false,
                  "name": "stream",
                  "display_name": "Stream",
                  "advanced": true,
                  "dynamic": false,
                  "info": "Stream the response from the model. Streaming works only in Chat.",
                  "load_from_db": false,
                  "title_case": false
                },
                "system_message": {
                  "type": "str",
                  "required": false,
                  "placeholder": "",
                  "list": false,
                  "show": true,
                  "multiline": false,
                  "fileTypes": [],
                  "file_path": "",
                  "password": false,
                  "name": "system_message",
                  "display_name": "System Message",
                  "advanced": false,
                  "dynamic": false,
                  "info": "System message to pass to the model.",
                  "load_from_db": false,
                  "title_case": false,
                  "input_types": [
                    "Text"
                  ],
                  "value": ""
                },
                "temperature": {
                  "type": "float",
                  "required": false,
                  "placeholder": "",
                  "list": false,
                  "show": true,
                  "multiline": false,
                  "value": "0.4",
                  "fileTypes": [],
                  "file_path": "",
                  "password": false,
                  "name": "temperature",
                  "display_name": "Temperature",
                  "advanced": false,
                  "dynamic": false,
                  "info": "",
                  "rangeSpec": {
                    "step_type": "float",
                    "min": -1,
                    "max": 1,
                    "step": 0.1
                  },
                  "load_from_db": false,
                  "title_case": false
                },
                "_type": "CustomComponent"
              },
              "description": "Generates text using OpenAI LLMs.",
              "icon": "OpenAI",
              "base_classes": [
                "object",
                "str",
                "Text"
              ],
              "display_name": "Director (OpenAI)",
              "documentation": "",
              "custom_fields": {
                "input_value": null,
                "openai_api_key": null,
                "temperature": null,
                "model_name": null,
                "max_tokens": null,
                "model_kwargs": null,
                "openai_api_base": null,
                "stream": null,
                "system_message": null
              },
              "output_types": [
                "Text"
              ],
              "field_formatters": {},
              "frozen": false,
              "field_order": [
                "max_tokens",
                "model_kwargs",
                "model_name",
                "openai_api_base",
                "openai_api_key",
                "temperature",
                "input_value",
                "system_message",
                "stream"
              ],
              "beta": false,
              "edited": true
            },
            "id": "OpenAIModel-uB4K9",
            "description": "Generates text using OpenAI LLMs.",
            "display_name": "Director (OpenAI)",
            "edited": false
          },
          "selected": false,
          "width": 384,
          "height": 665,
          "positionAbsolute": {
            "x": 1459.0207807967663,
            "y": -561.2413834694103
          },
          "dragging": false
        },
        {
          "id": "MemoryComponent-hc44i",
          "type": "genericNode",
          "position": {
            "x": 577.3711139406862,
            "y": 674.7328488992783
          },
          "data": {
            "type": "MemoryComponent",
            "node": {
              "template": {
                "code": {
                  "type": "code",
                  "required": true,
                  "placeholder": "",
                  "list": false,
                  "show": true,
                  "multiline": true,
                  "value": "from typing import Optional\n\nfrom axiestudio.base.memory.memory import BaseMemoryComponent\nfrom axiestudio.field_typing import Text\nfrom axiestudio.helpers.record import messages_to_text\nfrom axiestudio.memory import get_messages\nfrom axiestudio.schema.message import Message\n\n\nclass MemoryComponent(BaseMemoryComponent):\n    display_name = \"Chat Memory\"\n    description = \"Retrieves stored chat messages given a specific Session ID.\"\n    beta: bool = True\n    icon = \"history\"\n\n    def build_config(self):\n        return {\n            \"sender\": {\n                \"options\": [\"Machine\", \"User\", \"Machine and User\"],\n                \"display_name\": \"Sender Type\",\n            },\n            \"sender_name\": {\"display_name\": \"Sender Name\", \"advanced\": True},\n            \"n_messages\": {\n                \"display_name\": \"Number of Messages\",\n                \"info\": \"Number of messages to retrieve.\",\n            },\n            \"session_id\": {\n                \"display_name\": \"Session ID\",\n                \"info\": \"Session ID of the chat history.\",\n                \"input_types\": [\"Text\"],\n            },\n            \"order\": {\n                \"options\": [\"Ascending\", \"Descending\"],\n                \"display_name\": \"Order\",\n                \"info\": \"Order of the messages.\",\n                \"advanced\": True,\n            },\n            \"record_template\": {\n                \"display_name\": \"Record Template\",\n                \"multiline\": True,\n                \"info\": \"Template to convert Record to Text. If left empty, it will be dynamically set to the Record's text key.\",\n                \"advanced\": True,\n            },\n        }\n\n    def get_messages(self, **kwargs) -> list[Message]:\n        # Validate kwargs by checking if it contains the correct keys\n        if \"sender\" not in kwargs:\n            kwargs[\"sender\"] = None\n        if \"sender_name\" not in kwargs:\n            kwargs[\"sender_name\"] = None\n        if \"session_id\" not in kwargs:\n            kwargs[\"session_id\"] = None\n        if \"limit\" not in kwargs:\n            kwargs[\"limit\"] = 5\n        if \"order\" not in kwargs:\n            kwargs[\"order\"] = \"Descending\"\n\n        kwargs[\"order\"] = \"DESC\" if kwargs[\"order\"] == \"Descending\" else \"ASC\"\n        if kwargs[\"sender\"] == \"Machine and User\":\n            kwargs[\"sender\"] = None\n        return get_messages(**kwargs)\n\n    def build(\n        self,\n        sender: Optional[str] = \"Machine and User\",\n        sender_name: Optional[str] = None,\n        session_id: Optional[str] = None,\n        n_messages: int = 5,\n        order: Optional[str] = \"Descending\",\n        record_template: Optional[str] = \"{sender_name}: {text}\",\n    ) -> Text:\n        messages = self.get_messages(\n            sender=sender,\n            sender_name=sender_name,\n            session_id=session_id,\n            limit=n_messages,\n            order=order,\n        )\n        messages_str = messages_to_text(template=record_template or \"\", messages=messages)\n        self.status = messages_str\n        return messages_str\n",
                  "fileTypes": [],
                  "file_path": "",
                  "password": false,
                  "name": "code",
                  "advanced": true,
                  "dynamic": true,
                  "info": "",
                  "load_from_db": false,
                  "title_case": false
                },
                "n_messages": {
                  "type": "int",
                  "required": false,
                  "placeholder": "",
                  "list": false,
                  "show": true,
                  "multiline": false,
                  "value": "30",
                  "fileTypes": [],
                  "file_path": "",
                  "password": false,
                  "name": "n_messages",
                  "display_name": "Number of Messages",
                  "advanced": false,
                  "dynamic": false,
                  "info": "Number of messages to retrieve.",
                  "load_from_db": false,
                  "title_case": false
                },
                "order": {
                  "type": "str",
                  "required": false,
                  "placeholder": "",
                  "list": true,
                  "show": true,
                  "multiline": false,
                  "value": "Descending",
                  "fileTypes": [],
                  "file_path": "",
                  "password": false,
                  "options": [
                    "Ascending",
                    "Descending"
                  ],
                  "name": "order",
                  "display_name": "Order",
                  "advanced": true,
                  "dynamic": false,
                  "info": "Order of the messages.",
                  "load_from_db": false,
                  "title_case": false,
                  "input_types": [
                    "Text"
                  ]
                },
                "record_template": {
                  "type": "str",
                  "required": false,
                  "placeholder": "",
                  "list": false,
                  "show": true,
                  "multiline": true,
                  "value": "{sender_name}: {text}",
                  "fileTypes": [],
                  "file_path": "",
                  "password": false,
                  "name": "record_template",
                  "display_name": "Record Template",
                  "advanced": true,
                  "dynamic": false,
                  "info": "Template to convert Record to Text. If left empty, it will be dynamically set to the Record's text key.",
                  "load_from_db": false,
                  "title_case": false,
                  "input_types": [
                    "Text"
                  ]
                },
                "sender": {
                  "type": "str",
                  "required": false,
                  "placeholder": "",
                  "list": true,
                  "show": true,
                  "multiline": false,
                  "value": "Machine and User",
                  "fileTypes": [],
                  "file_path": "",
                  "password": false,
                  "options": [
                    "Machine",
                    "User",
                    "Machine and User"
                  ],
                  "name": "sender",
                  "display_name": "Sender Type",
                  "advanced": false,
                  "dynamic": false,
                  "info": "",
                  "load_from_db": false,
                  "title_case": false,
                  "input_types": [
                    "Text"
                  ]
                },
                "sender_name": {
                  "type": "str",
                  "required": false,
                  "placeholder": "",
                  "list": false,
                  "show": true,
                  "multiline": false,
                  "fileTypes": [],
                  "file_path": "",
                  "password": false,
                  "name": "sender_name",
                  "display_name": "Sender Name",
                  "advanced": true,
                  "dynamic": false,
                  "info": "",
                  "load_from_db": false,
                  "title_case": false,
                  "input_types": [
                    "Text"
                  ]
                },
                "session_id": {
                  "type": "str",
                  "required": false,
                  "placeholder": "",
                  "list": false,
                  "show": true,
                  "multiline": false,
                  "fileTypes": [],
                  "file_path": "",
                  "password": false,
                  "name": "session_id",
                  "display_name": "Session ID",
                  "advanced": false,
                  "input_types": [
                    "Text"
                  ],
                  "dynamic": false,
                  "info": "Session ID of the chat history.",
                  "load_from_db": false,
                  "title_case": false
                },
                "_type": "CustomComponent"
              },
              "description": "Retrieves stored chat messages given a specific Session ID.",
              "icon": "history",
              "base_classes": [
                "object",
                "str",
                "Text"
              ],
              "display_name": "Chat Memory",
              "documentation": "",
              "custom_fields": {
                "sender": null,
                "sender_name": null,
                "session_id": null,
                "n_messages": null,
                "order": null,
                "record_template": null
              },
              "output_types": [
                "Text"
              ],
              "field_formatters": {},
              "frozen": false,
              "field_order": [],
              "beta": true,
              "edited": true
            },
            "id": "MemoryComponent-hc44i",
            "description": "Retrieves stored chat messages given a specific Session ID.",
            "display_name": "Chat Memory",
            "edited": false
          },
          "selected": false,
          "width": 384,
          "height": 505,
          "positionAbsolute": {
            "x": 577.3711139406862,
            "y": 674.7328488992783
          },
          "dragging": false
        },
        {
          "id": "IDGenerator-cOHvw",
          "type": "genericNode",
          "position": {
            "x": -710.4294587165252,
            "y": 956.0723593118729
          },
          "data": {
            "type": "IDGenerator",
            "node": {
              "template": {
                "code": {
                  "type": "code",
                  "required": true,
                  "placeholder": "",
                  "list": false,
                  "show": true,
                  "multiline": true,
                  "value": "import uuid\nfrom typing import Any, Optional\n\nfrom axiestudio.custom import CustomComponent\n\n\nclass UUIDGeneratorComponent(CustomComponent):\n    documentation: str = \"http://docs.axiestudio.org/components/custom\"\n    display_name = \"ID Generator\"\n    description = \"Generates a unique ID.\"\n\n    def update_build_config(\n        self,\n        build_config: dict,\n        field_value: Any,\n        field_name: Optional[str] = None,\n    ):\n        if field_name == \"unique_id\":\n            build_config[field_name][\"value\"] = str(uuid.uuid4())\n        return build_config\n\n    def build_config(self):\n        return {\n            \"unique_id\": {\n                \"display_name\": \"Value\",\n                \"refresh_button\": True,\n            }\n        }\n\n    def build(self, unique_id: str) -> str:\n        return unique_id\n",
                  "fileTypes": [],
                  "file_path": "",
                  "password": false,
                  "name": "code",
                  "advanced": true,
                  "dynamic": true,
                  "info": "",
                  "load_from_db": false,
                  "title_case": false
                },
                "unique_id": {
                  "type": "str",
                  "required": true,
                  "placeholder": "",
                  "list": false,
                  "show": true,
                  "multiline": false,
                  "fileTypes": [],
                  "file_path": "",
                  "password": false,
                  "name": "unique_id",
                  "display_name": "Value",
                  "advanced": false,
                  "dynamic": false,
                  "info": "",
                  "refresh_button": true,
                  "load_from_db": false,
                  "title_case": false,
                  "input_types": [
                    "Text"
                  ],
                  "value": "94c16347-0fd3-41ed-b680-5dba58aa8041"
                },
                "_type": "CustomComponent"
              },
              "description": "Generates a unique ID.",
              "base_classes": [
                "object",
                "str",
                "Text"
              ],
              "display_name": "ID Generator",
              "documentation": "http://docs.axiestudio.org/components/custom",
              "custom_fields": {
                "unique_id": null
              },
              "output_types": [
                "Text"
              ],
              "field_formatters": {},
              "frozen": false,
              "field_order": [],
              "beta": false
            },
            "id": "IDGenerator-cOHvw"
          },
          "selected": false,
          "width": 384,
          "height": 303,
          "positionAbsolute": {
            "x": -710.4294587165252,
            "y": 956.0723593118729
          },
          "dragging": false
        },
        {
          "id": "TextInput-jc0vl",
          "type": "genericNode",
          "position": {
            "x": -681.7743433908953,
            "y": -152.28687490783423
          },
          "data": {
            "type": "TextInput",
            "node": {
              "template": {
                "input_value": {
                  "type": "str",
                  "required": false,
                  "placeholder": "",
                  "list": false,
                  "show": true,
                  "multiline": false,
                  "value": "User Interviews",
                  "fileTypes": [],
                  "file_path": "",
                  "password": false,
                  "name": "input_value",
                  "display_name": "Text",
                  "advanced": false,
                  "input_types": [
                    "Record",
                    "Text"
                  ],
                  "dynamic": false,
                  "info": "Text or Record to be passed as input.",
                  "load_from_db": false,
                  "title_case": false
                },
                "code": {
                  "type": "code",
                  "required": true,
                  "placeholder": "",
                  "list": false,
                  "show": true,
                  "multiline": true,
                  "value": "from typing import Optional\n\nfrom axiestudio.base.io.text import TextComponent\nfrom axiestudio.field_typing import Text\n\n\nclass TextInput(TextComponent):\n    display_name = \"Text Input\"\n    description = \"Get text inputs from the Playground.\"\n    icon = \"type\"\n\n    def build_config(self):\n        return {\n            \"input_value\": {\n                \"display_name\": \"Text\",\n                \"input_types\": [\"Record\", \"Text\"],\n                \"info\": \"Text or Record to be passed as input.\",\n            },\n            \"record_template\": {\n                \"display_name\": \"Record Template\",\n                \"multiline\": True,\n                \"info\": \"Template to convert Record to Text. If left empty, it will be dynamically set to the Record's text key.\",\n                \"advanced\": True,\n            },\n        }\n\n    def build(\n        self,\n        input_value: Optional[Text] = \"\",\n        record_template: Optional[str] = \"\",\n    ) -> Text:\n        return super().build(input_value=input_value, record_template=record_template)\n",
                  "fileTypes": [],
                  "file_path": "",
                  "password": false,
                  "name": "code",
                  "advanced": true,
                  "dynamic": true,
                  "info": "",
                  "load_from_db": false,
                  "title_case": false
                },
                "record_template": {
                  "type": "str",
                  "required": false,
                  "placeholder": "",
                  "list": false,
                  "show": true,
                  "multiline": true,
                  "value": "",
                  "fileTypes": [],
                  "file_path": "",
                  "password": false,
                  "name": "record_template",
                  "display_name": "Record Template",
                  "advanced": true,
                  "dynamic": false,
                  "info": "Template to convert Record to Text. If left empty, it will be dynamically set to the Record's text key.",
                  "load_from_db": false,
                  "title_case": false,
                  "input_types": [
                    "Text"
                  ]
                },
                "_type": "CustomComponent"
              },
              "description": "Get text inputs from the Playground.",
              "icon": "type",
              "base_classes": [
                "object",
                "str",
                "Text"
              ],
              "display_name": "Research Method",
              "documentation": "",
              "custom_fields": {
                "input_value": null,
                "record_template": null
              },
              "output_types": [
                "Text"
              ],
              "field_formatters": {},
              "frozen": false,
              "field_order": [],
              "beta": false
            },
            "id": "TextInput-jc0vl"
          },
          "selected": false,
          "width": 384,
          "height": 297,
          "dragging": false,
          "positionAbsolute": {
            "x": -681.7743433908953,
            "y": -152.28687490783423
          }
        },
        {
          "id": "TextInput-iHjL1",
          "type": "genericNode",
          "position": {
            "x": -696.5276754312958,
            "y": 216.082970324043
          },
          "data": {
            "type": "TextInput",
            "node": {
              "template": {
                "input_value": {
                  "type": "str",
                  "required": false,
                  "placeholder": "",
                  "list": false,
                  "show": true,
                  "multiline": false,
                  "value": "Prototype Review",
                  "fileTypes": [],
                  "file_path": "",
                  "password": false,
                  "name": "input_value",
                  "display_name": "Text",
                  "advanced": false,
                  "input_types": [
                    "Record",
                    "Text"
                  ],
                  "dynamic": false,
                  "info": "Text or Record to be passed as input.",
                  "load_from_db": false,
                  "title_case": false
                },
                "code": {
                  "type": "code",
                  "required": true,
                  "placeholder": "",
                  "list": false,
                  "show": true,
                  "multiline": true,
                  "value": "from typing import Optional\n\nfrom axiestudio.base.io.text import TextComponent\nfrom axiestudio.field_typing import Text\n\n\nclass TextInput(TextComponent):\n    display_name = \"Text Input\"\n    description = \"Get text inputs from the Playground.\"\n    icon = \"type\"\n\n    def build_config(self):\n        return {\n            \"input_value\": {\n                \"display_name\": \"Text\",\n                \"input_types\": [\"Record\", \"Text\"],\n                \"info\": \"Text or Record to be passed as input.\",\n            },\n            \"record_template\": {\n                \"display_name\": \"Record Template\",\n                \"multiline\": True,\n                \"info\": \"Template to convert Record to Text. If left empty, it will be dynamically set to the Record's text key.\",\n                \"advanced\": True,\n            },\n        }\n\n    def build(\n        self,\n        input_value: Optional[Text] = \"\",\n        record_template: Optional[str] = \"\",\n    ) -> Text:\n        return super().build(input_value=input_value, record_template=record_template)\n",
                  "fileTypes": [],
                  "file_path": "",
                  "password": false,
                  "name": "code",
                  "advanced": true,
                  "dynamic": true,
                  "info": "",
                  "load_from_db": false,
                  "title_case": false
                },
                "record_template": {
                  "type": "str",
                  "required": false,
                  "placeholder": "",
                  "list": false,
                  "show": true,
                  "multiline": true,
                  "value": "",
                  "fileTypes": [],
                  "file_path": "",
                  "password": false,
                  "name": "record_template",
                  "display_name": "Record Template",
                  "advanced": true,
                  "dynamic": false,
                  "info": "Template to convert Record to Text. If left empty, it will be dynamically set to the Record's text key.",
                  "load_from_db": false,
                  "title_case": false,
                  "input_types": [
                    "Text"
                  ]
                },
                "_type": "CustomComponent"
              },
              "description": "Get text inputs from the Playground.",
              "icon": "type",
              "base_classes": [
                "object",
                "str",
                "Text"
              ],
              "display_name": "Research Goal",
              "documentation": "",
              "custom_fields": {
                "input_value": null,
                "record_template": null
              },
              "output_types": [
                "Text"
              ],
              "field_formatters": {},
              "frozen": false,
              "field_order": [],
              "beta": false
            },
            "id": "TextInput-iHjL1"
          },
          "selected": false,
          "width": 384,
          "height": 297,
          "positionAbsolute": {
            "x": -696.5276754312958,
            "y": 216.082970324043
          },
          "dragging": false
        },
        {
          "id": "TextInput-at7vy",
          "type": "genericNode",
          "position": {
            "x": -690.5260193087944,
            "y": 601.2512785668918
          },
          "data": {
            "type": "TextInput",
            "node": {
              "template": {
                "input_value": {
                  "type": "str",
                  "required": false,
                  "placeholder": "",
                  "list": false,
                  "show": true,
                  "multiline": false,
                  "value": "Validate Ideas, MVP Plan",
                  "fileTypes": [],
                  "file_path": "",
                  "password": false,
                  "name": "input_value",
                  "display_name": "Text",
                  "advanced": false,
                  "input_types": [
                    "Record",
                    "Text"
                  ],
                  "dynamic": false,
                  "info": "Text or Record to be passed as input.",
                  "load_from_db": false,
                  "title_case": false
                },
                "code": {
                  "type": "code",
                  "required": true,
                  "placeholder": "",
                  "list": false,
                  "show": true,
                  "multiline": true,
                  "value": "from typing import Optional\n\nfrom axiestudio.base.io.text import TextComponent\nfrom axiestudio.field_typing import Text\n\n\nclass TextInput(TextComponent):\n    display_name = \"Text Input\"\n    description = \"Get text inputs from the Playground.\"\n    icon = \"type\"\n\n    def build_config(self):\n        return {\n            \"input_value\": {\n                \"display_name\": \"Text\",\n                \"input_types\": [\"Record\", \"Text\"],\n                \"info\": \"Text or Record to be passed as input.\",\n            },\n            \"record_template\": {\n                \"display_name\": \"Record Template\",\n                \"multiline\": True,\n                \"info\": \"Template to convert Record to Text. If left empty, it will be dynamically set to the Record's text key.\",\n                \"advanced\": True,\n            },\n        }\n\n    def build(\n        self,\n        input_value: Optional[Text] = \"\",\n        record_template: Optional[str] = \"\",\n    ) -> Text:\n        return super().build(input_value=input_value, record_template=record_template)\n",
                  "fileTypes": [],
                  "file_path": "",
                  "password": false,
                  "name": "code",
                  "advanced": true,
                  "dynamic": true,
                  "info": "",
                  "load_from_db": false,
                  "title_case": false
                },
                "record_template": {
                  "type": "str",
                  "required": false,
                  "placeholder": "",
                  "list": false,
                  "show": true,
                  "multiline": true,
                  "value": "",
                  "fileTypes": [],
                  "file_path": "",
                  "password": false,
                  "name": "record_template",
                  "display_name": "Record Template",
                  "advanced": true,
                  "dynamic": false,
                  "info": "Template to convert Record to Text. If left empty, it will be dynamically set to the Record's text key.",
                  "load_from_db": false,
                  "title_case": false,
                  "input_types": [
                    "Text"
                  ]
                },
                "_type": "CustomComponent"
              },
              "description": "Get text inputs from the Playground.",
              "icon": "type",
              "base_classes": [
                "object",
                "str",
                "Text"
              ],
              "display_name": "Business Goals",
              "documentation": "",
              "custom_fields": {
                "input_value": null,
                "record_template": null
              },
              "output_types": [
                "Text"
              ],
              "field_formatters": {},
              "frozen": false,
              "field_order": [],
              "beta": false
            },
            "id": "TextInput-at7vy"
          },
          "selected": false,
          "width": 384,
          "height": 297,
          "positionAbsolute": {
            "x": -690.5260193087944,
            "y": 601.2512785668918
          },
          "dragging": false
        },
        {
          "id": "TextInput-WNMz5",
          "type": "genericNode",
          "position": {
            "x": -701.4745320093606,
            "y": -511.51013356833926
          },
          "data": {
            "type": "TextInput",
            "node": {
              "template": {
                "input_value": {
                  "type": "str",
                  "required": false,
                  "placeholder": "",
                  "list": false,
                  "show": true,
                  "multiline": false,
                  "value": "An AI user researcher SaaS app.",
                  "fileTypes": [],
                  "file_path": "",
                  "password": false,
                  "name": "input_value",
                  "display_name": "Text",
                  "advanced": false,
                  "input_types": [
                    "Record",
                    "Text"
                  ],
                  "dynamic": false,
                  "info": "Text or Record to be passed as input.",
                  "load_from_db": false,
                  "title_case": false
                },
                "code": {
                  "type": "code",
                  "required": true,
                  "placeholder": "",
                  "list": false,
                  "show": true,
                  "multiline": true,
                  "value": "from typing import Optional\n\nfrom axiestudio.base.io.text import TextComponent\nfrom axiestudio.field_typing import Text\n\n\nclass TextInput(TextComponent):\n    display_name = \"Text Input\"\n    description = \"Get text inputs from the Playground.\"\n    icon = \"type\"\n\n    def build_config(self):\n        return {\n            \"input_value\": {\n                \"display_name\": \"Text\",\n                \"input_types\": [\"Record\", \"Text\"],\n                \"info\": \"Text or Record to be passed as input.\",\n            },\n            \"record_template\": {\n                \"display_name\": \"Record Template\",\n                \"multiline\": True,\n                \"info\": \"Template to convert Record to Text. If left empty, it will be dynamically set to the Record's text key.\",\n                \"advanced\": True,\n            },\n        }\n\n    def build(\n        self,\n        input_value: Optional[Text] = \"\",\n        record_template: Optional[str] = \"\",\n    ) -> Text:\n        return super().build(input_value=input_value, record_template=record_template)\n",
                  "fileTypes": [],
                  "file_path": "",
                  "password": false,
                  "name": "code",
                  "advanced": true,
                  "dynamic": true,
                  "info": "",
                  "load_from_db": false,
                  "title_case": false
                },
                "record_template": {
                  "type": "str",
                  "required": false,
                  "placeholder": "",
                  "list": false,
                  "show": true,
                  "multiline": true,
                  "value": "",
                  "fileTypes": [],
                  "file_path": "",
                  "password": false,
                  "name": "record_template",
                  "display_name": "Record Template",
                  "advanced": true,
                  "dynamic": false,
                  "info": "Template to convert Record to Text. If left empty, it will be dynamically set to the Record's text key.",
                  "load_from_db": false,
                  "title_case": false,
                  "input_types": [
                    "Text"
                  ]
                },
                "_type": "CustomComponent"
              },
              "description": "Get text inputs from the Playground.",
              "icon": "type",
              "base_classes": [
                "object",
                "str",
                "Text"
              ],
              "display_name": "Project Description",
              "documentation": "",
              "custom_fields": {
                "input_value": null,
                "record_template": null
              },
              "output_types": [
                "Text"
              ],
              "field_formatters": {},
              "frozen": false,
              "field_order": [],
              "beta": false
            },
            "id": "TextInput-WNMz5"
          },
          "selected": false,
          "width": 384,
          "height": 297,
          "dragging": false,
          "positionAbsolute": {
            "x": -701.4745320093606,
            "y": -511.51013356833926
          }
        },
        {
          "id": "TextInput-h5qwa",
          "type": "genericNode",
          "position": {
            "x": -715.7998913502216,
            "y": -869.0987880368224
          },
          "data": {
            "type": "TextInput",
            "node": {
              "template": {
                "input_value": {
                  "type": "str",
                  "required": false,
                  "placeholder": "",
                  "list": false,
                  "show": true,
                  "multiline": false,
                  "value": "Usermuse",
                  "fileTypes": [],
                  "file_path": "",
                  "password": false,
                  "name": "input_value",
                  "display_name": "Text",
                  "advanced": false,
                  "input_types": [
                    "Record",
                    "Text"
                  ],
                  "dynamic": false,
                  "info": "Text or Record to be passed as input.",
                  "load_from_db": false,
                  "title_case": false
                },
                "code": {
                  "type": "code",
                  "required": true,
                  "placeholder": "",
                  "list": false,
                  "show": true,
                  "multiline": true,
                  "value": "from typing import Optional\n\nfrom axiestudio.base.io.text import TextComponent\nfrom axiestudio.field_typing import Text\n\n\nclass TextInput(TextComponent):\n    display_name = \"Text Input\"\n    description = \"Get text inputs from the Playground.\"\n    icon = \"type\"\n\n    def build_config(self):\n        return {\n            \"input_value\": {\n                \"display_name\": \"Text\",\n                \"input_types\": [\"Record\", \"Text\"],\n                \"info\": \"Text or Record to be passed as input.\",\n            },\n            \"record_template\": {\n                \"display_name\": \"Record Template\",\n                \"multiline\": True,\n                \"info\": \"Template to convert Record to Text. If left empty, it will be dynamically set to the Record's text key.\",\n                \"advanced\": True,\n            },\n        }\n\n    def build(\n        self,\n        input_value: Optional[Text] = \"\",\n        record_template: Optional[str] = \"\",\n    ) -> Text:\n        return super().build(input_value=input_value, record_template=record_template)\n",
                  "fileTypes": [],
                  "file_path": "",
                  "password": false,
                  "name": "code",
                  "advanced": true,
                  "dynamic": true,
                  "info": "",
                  "load_from_db": false,
                  "title_case": false
                },
                "record_template": {
                  "type": "str",
                  "required": false,
                  "placeholder": "",
                  "list": false,
                  "show": true,
                  "multiline": true,
                  "value": "",
                  "fileTypes": [],
                  "file_path": "",
                  "password": false,
                  "name": "record_template",
                  "display_name": "Record Template",
                  "advanced": true,
                  "dynamic": false,
                  "info": "Template to convert Record to Text. If left empty, it will be dynamically set to the Record's text key.",
                  "load_from_db": false,
                  "title_case": false,
                  "input_types": [
                    "Text"
                  ]
                },
                "_type": "CustomComponent"
              },
              "description": "Get text inputs from the Playground.",
              "icon": "type",
              "base_classes": [
                "object",
                "str",
                "Text"
              ],
              "display_name": "Project Name",
              "documentation": "",
              "custom_fields": {
                "input_value": null,
                "record_template": null
              },
              "output_types": [
                "Text"
              ],
              "field_formatters": {},
              "frozen": false,
              "field_order": [],
              "beta": false
            },
            "id": "TextInput-h5qwa"
          },
          "selected": false,
          "width": 384,
          "height": 297,
          "positionAbsolute": {
            "x": -715.7998913502216,
            "y": -869.0987880368224
          },
          "dragging": false
        },
        {
          "id": "ChatInput-k2Pvk",
          "type": "genericNode",
          "position": {
            "x": -52.58021636927742,
            "y": -762.6357108177694
          },
          "data": {
            "type": "ChatInput",
            "node": {
              "template": {
                "files": {
                  "type": "file",
                  "required": false,
                  "placeholder": "",
                  "list": false,
                  "show": true,
                  "multiline": false,
                  "fileTypes": [
                    ".txt",
                    ".md",
                    ".mdx",
                    ".csv",
                    ".json",
                    ".yaml",
                    ".yml",
                    ".xml",
                    ".html",
                    ".htm",
                    ".pdf",
                    ".docx",
                    ".py",
                    ".sh",
                    ".sql",
                    ".js",
                    ".ts",
                    ".tsx",
                    ".jpg",
                    ".jpeg",
                    ".png",
                    ".bmp"
                  ],
                  "file_path": "",
                  "password": false,
                  "name": "files",
                  "display_name": "Files",
                  "advanced": true,
                  "dynamic": false,
                  "info": "Files to be sent with the message.",
                  "load_from_db": false,
                  "title_case": false,
                  "value": ""
                },
                "code": {
                  "type": "code",
                  "required": true,
                  "placeholder": "",
                  "list": false,
                  "show": true,
                  "multiline": true,
                  "value": "from typing import Optional\n\nfrom axiestudio.base.io.chat import ChatComponent\nfrom axiestudio.schema.message import Message\nfrom axiestudio.field_typing import Text\nfrom typing import Union\n\n\nclass ChatInput(ChatComponent):\n    display_name = \"Chat Input\"\n    description = \"Get chat inputs from the Playground.\"\n    icon = \"ChatInput\"\n\n    def build_config(self):\n        build_config = super().build_config()\n        build_config[\"input_value\"] = {\n            \"input_types\": [],\n            \"display_name\": \"Text\",\n            \"multiline\": True,\n        }\n\n        return build_config\n\n    def build(\n        self,\n        sender: Optional[str] = \"User\",\n        sender_name: Optional[str] = \"User\",\n        input_value: Optional[str] = None,\n        files: Optional[list[str]] = None,\n        session_id: Optional[str] = None,\n        return_message: Optional[bool] = False,\n    ) -> Union[Message, Text]:\n        return super().build_with_record(\n            sender=sender,\n            sender_name=sender_name,\n            input_value=input_value,\n            files=files,\n            session_id=session_id,\n            return_message=return_message,\n        )\n",
                  "fileTypes": [],
                  "file_path": "",
                  "password": false,
                  "name": "code",
                  "advanced": true,
                  "dynamic": true,
                  "info": "",
                  "load_from_db": false,
                  "title_case": false
                },
                "input_value": {
                  "type": "str",
                  "required": false,
                  "placeholder": "",
                  "list": false,
                  "show": true,
                  "multiline": true,
                  "fileTypes": [],
                  "file_path": "",
                  "password": false,
                  "name": "input_value",
                  "display_name": "Text",
                  "advanced": false,
                  "input_types": [],
                  "dynamic": false,
                  "info": "",
                  "load_from_db": false,
                  "title_case": false,
                  "value": "Eran Dror [122.79]We can talk about poetry and all that stuff, but. [126.9]We actually have kind of a limited time, so I want to use it well. [134.69]Maybe if you can get us started, just talk about your role and responsibilities and give me a. [140.65]Little bit of background. [142.9]How it works where you are.\nAbigail Browning (she/her) [145.27]Yeah. [145.71]So? Red hat has 20,000 employees. [152.54]And maturity model for product development is a little bit ahead of digital development, and I'm on the digital side. [160.9]So where marketing used to be, all billboards and brochures. [165.43]It's now a key player in the ecommerce low touch, no touch space, right? Because you actually sell your product on digital, you're not selling it through sales as much. [174.35]Or people don't want to be talking to sales. [176.23]Right, right. [180.08]For example, the product space products and engineering. [186.31]Has. [186.64]20 person research team and people develop to each product safe. [192.97]But the digital space has been more of a grassroots effort to now. [200]And I was hired in as kind of the first full time. [204.83]Professional, skilled professional. [207.31]Up to that point, they had. [210.08]Sort of invested amateurs doing the work. [214.73]So I was hired in as part of a push for digital transformation. [219.88]And. [222.39]So. [226.5]I. [228.53]Tried to. [228.69]My biggest focus on scaling is figuring out.\nAbigail Browning (she/her) [234]Governance and standards for the company. [237.44]So that's one area since I'm a single. [239.92]Researcher in digital UX research. [243.75]I rely on a lot of other volunteers or people like you who are going to do some research for me or with me, but maybe. [252.12]Don't have the methodological rigor, so I'm consulting on that. [257.21]So by helping establish a user research council. [261.6]We can start having. [264.59]The same. [265.54]Basic foundations. [268.11]So that anybody picking up the strategies or methods, or at least starting from. [274.8]More rigor than just let's ask them some questions on a survey. [280.47]Thumbs up there and can ask any questions.\n"
                },
                "return_message": {
                  "type": "bool",
                  "required": false,
                  "placeholder": "",
                  "list": false,
                  "show": true,
                  "multiline": false,
                  "value": false,
                  "fileTypes": [],
                  "file_path": "",
                  "password": false,
                  "name": "return_message",
                  "display_name": "Return Message",
                  "advanced": true,
                  "dynamic": false,
                  "info": "Return the message as a Message containing the sender, sender_name, and session_id.",
                  "load_from_db": false,
                  "title_case": false
                },
                "sender": {
                  "type": "str",
                  "required": false,
                  "placeholder": "",
                  "list": true,
                  "show": true,
                  "multiline": false,
                  "value": "User",
                  "fileTypes": [],
                  "file_path": "",
                  "password": false,
                  "options": [
                    "Machine",
                    "User"
                  ],
                  "name": "sender",
                  "display_name": "Sender Type",
                  "advanced": true,
                  "dynamic": false,
                  "info": "",
                  "load_from_db": false,
                  "title_case": false,
                  "input_types": [
                    "Text"
                  ]
                },
                "sender_name": {
                  "type": "str",
                  "required": false,
                  "placeholder": "",
                  "list": false,
                  "show": true,
                  "multiline": false,
                  "value": "User",
                  "fileTypes": [],
                  "file_path": "",
                  "password": false,
                  "name": "sender_name",
                  "display_name": "Sender Name",
                  "advanced": true,
                  "dynamic": false,
                  "info": "",
                  "load_from_db": false,
                  "title_case": false,
                  "input_types": [
                    "Text"
                  ]
                },
                "session_id": {
                  "type": "str",
                  "required": false,
                  "placeholder": "",
                  "list": false,
                  "show": true,
                  "multiline": false,
                  "fileTypes": [],
                  "file_path": "",
                  "password": false,
                  "name": "session_id",
                  "display_name": "Session ID",
                  "advanced": true,
                  "dynamic": false,
                  "info": "If provided, the message will be stored in the memory.",
                  "load_from_db": false,
                  "title_case": false,
                  "input_types": [
                    "Text"
                  ]
                },
                "_type": "CustomComponent"
              },
              "description": "Get chat inputs from the Playground.",
              "icon": "ChatInput",
              "base_classes": [
                "Message",
                "object",
                "str",
                "Text"
              ],
              "display_name": "Chat Input",
              "documentation": "",
              "custom_fields": {
                "sender": null,
                "sender_name": null,
                "input_value": null,
                "files": null,
                "session_id": null,
                "return_message": null
              },
              "output_types": [
                "Message",
                "Text"
              ],
              "field_formatters": {},
              "frozen": false,
              "field_order": [],
              "beta": false
            },
            "id": "ChatInput-k2Pvk"
          },
          "selected": false,
          "width": 384,
          "height": 289,
          "positionAbsolute": {
            "x": -52.58021636927742,
            "y": -762.6357108177694
          },
          "dragging": false
        },
        {
          "id": "ChatOutput-xPd0d",
          "type": "genericNode",
          "position": {
            "x": 3635.4431580553633,
            "y": -204.1554546591363
          },
          "data": {
            "type": "ChatOutput",
            "node": {
              "template": {
                "files": {
                  "type": "file",
                  "required": false,
                  "placeholder": "",
                  "list": false,
                  "show": true,
                  "multiline": false,
                  "fileTypes": [
                    ".txt",
                    ".md",
                    ".mdx",
                    ".csv",
                    ".json",
                    ".yaml",
                    ".yml",
                    ".xml",
                    ".html",
                    ".htm",
                    ".pdf",
                    ".docx",
                    ".py",
                    ".sh",
                    ".sql",
                    ".js",
                    ".ts",
                    ".tsx",
                    ".jpg",
                    ".jpeg",
                    ".png",
                    ".bmp"
                  ],
                  "file_path": "",
                  "password": false,
                  "name": "files",
                  "display_name": "Files",
                  "advanced": true,
                  "dynamic": false,
                  "info": "Files to be sent with the message.",
                  "load_from_db": false,
                  "title_case": false,
                  "value": ""
                },
                "code": {
                  "type": "code",
                  "required": true,
                  "placeholder": "",
                  "list": false,
                  "show": true,
                  "multiline": true,
                  "value": "from typing import Optional, Union\n\nfrom axiestudio.base.io.chat import ChatComponent\nfrom axiestudio.field_typing import Text\nfrom axiestudio.schema.message import Message\n\n\nclass ChatOutput(ChatComponent):\n    display_name = \"Chat Output\"\n    description = \"Display a chat message in the Playground.\"\n    icon = \"ChatOutput\"\n\n    def build(\n        self,\n        sender: Optional[str] = \"Machine\",\n        sender_name: Optional[str] = \"AI\",\n        input_value: Optional[str] = None,\n        session_id: Optional[str] = None,\n        files: Optional[list[str]] = None,\n        return_message: Optional[bool] = False,\n    ) -> Union[Message, Text]:\n        return super().build_with_record(\n            sender=sender,\n            sender_name=sender_name,\n            input_value=input_value,\n            session_id=session_id,\n            files=files,\n            return_message=return_message,\n        )\n",
                  "fileTypes": [],
                  "file_path": "",
                  "password": false,
                  "name": "code",
                  "advanced": true,
                  "dynamic": true,
                  "info": "",
                  "load_from_db": false,
                  "title_case": false
                },
                "input_value": {
                  "type": "str",
                  "required": false,
                  "placeholder": "",
                  "list": false,
                  "show": true,
                  "multiline": true,
                  "fileTypes": [],
                  "file_path": "",
                  "password": false,
                  "name": "input_value",
                  "display_name": "Text",
                  "advanced": false,
                  "input_types": [
                    "Text"
                  ],
                  "dynamic": false,
                  "info": "",
                  "load_from_db": false,
                  "title_case": false
                },
                "return_message": {
                  "type": "bool",
                  "required": false,
                  "placeholder": "",
                  "list": false,
                  "show": true,
                  "multiline": false,
                  "value": false,
                  "fileTypes": [],
                  "file_path": "",
                  "password": false,
                  "name": "return_message",
                  "display_name": "Return Message",
                  "advanced": true,
                  "dynamic": false,
                  "info": "Return the message as a Message containing the sender, sender_name, and session_id.",
                  "load_from_db": false,
                  "title_case": false
                },
                "sender": {
                  "type": "str",
                  "required": false,
                  "placeholder": "",
                  "list": true,
                  "show": true,
                  "multiline": false,
                  "value": "Machine",
                  "fileTypes": [],
                  "file_path": "",
                  "password": false,
                  "options": [
                    "Machine",
                    "User"
                  ],
                  "name": "sender",
                  "display_name": "Sender Type",
                  "advanced": true,
                  "dynamic": false,
                  "info": "",
                  "load_from_db": false,
                  "title_case": false,
                  "input_types": [
                    "Text"
                  ]
                },
                "sender_name": {
                  "type": "str",
                  "required": false,
                  "placeholder": "",
                  "list": false,
                  "show": true,
                  "multiline": false,
                  "value": "AI",
                  "fileTypes": [],
                  "file_path": "",
                  "password": false,
                  "name": "sender_name",
                  "display_name": "Sender Name",
                  "advanced": true,
                  "dynamic": false,
                  "info": "",
                  "load_from_db": false,
                  "title_case": false,
                  "input_types": [
                    "Text"
                  ]
                },
                "session_id": {
                  "type": "str",
                  "required": false,
                  "placeholder": "",
                  "list": false,
                  "show": true,
                  "multiline": false,
                  "fileTypes": [],
                  "file_path": "",
                  "password": false,
                  "name": "session_id",
                  "display_name": "Session ID",
                  "advanced": true,
                  "dynamic": false,
                  "info": "If provided, the message will be stored in the memory.",
                  "load_from_db": false,
                  "title_case": false,
                  "input_types": [
                    "Text"
                  ]
                },
                "_type": "CustomComponent"
              },
              "description": "Display a chat message in the Playground.",
              "icon": "ChatOutput",
              "base_classes": [
                "Message",
                "object",
                "str",
                "Text"
              ],
              "display_name": "Chat Output",
              "documentation": "",
              "custom_fields": {
                "sender": null,
                "sender_name": null,
                "input_value": null,
                "session_id": null,
                "files": null,
                "return_message": null
              },
              "output_types": [
                "Message",
                "Text"
              ],
              "field_formatters": {},
              "frozen": false,
              "field_order": [],
              "beta": false
            },
            "id": "ChatOutput-xPd0d"
          },
          "selected": false,
          "width": 384,
          "height": 297,
          "positionAbsolute": {
            "x": 3635.4431580553633,
            "y": -204.1554546591363
          },
          "dragging": false
        },
        {
          "id": "TextInput-zZ8kv",
          "type": "genericNode",
          "position": {
            "x": -736.554245218776,
            "y": -1237.696555064012
          },
          "data": {
            "type": "TextInput",
            "node": {
              "template": {
                "input_value": {
                  "type": "str",
                  "required": false,
                  "placeholder": "",
                  "list": false,
                  "show": true,
                  "multiline": false,
                  "value": "Eran Dror",
                  "fileTypes": [],
                  "file_path": "",
                  "password": false,
                  "name": "input_value",
                  "display_name": "Text",
                  "advanced": false,
                  "input_types": [
                    "Record",
                    "Text"
                  ],
                  "dynamic": false,
                  "info": "Text or Record to be passed as input.",
                  "load_from_db": false,
                  "title_case": false
                },
                "code": {
                  "type": "code",
                  "required": true,
                  "placeholder": "",
                  "list": false,
                  "show": true,
                  "multiline": true,
                  "value": "from typing import Optional\n\nfrom axiestudio.base.io.text import TextComponent\nfrom axiestudio.field_typing import Text\n\n\nclass TextInput(TextComponent):\n    display_name = \"Text Input\"\n    description = \"Get text inputs from the Playground.\"\n    icon = \"type\"\n\n    def build_config(self):\n        return {\n            \"input_value\": {\n                \"display_name\": \"Text\",\n                \"input_types\": [\"Record\", \"Text\"],\n                \"info\": \"Text or Record to be passed as input.\",\n            },\n            \"record_template\": {\n                \"display_name\": \"Record Template\",\n                \"multiline\": True,\n                \"info\": \"Template to convert Record to Text. If left empty, it will be dynamically set to the Record's text key.\",\n                \"advanced\": True,\n            },\n        }\n\n    def build(\n        self,\n        input_value: Optional[Text] = \"\",\n        record_template: Optional[str] = \"\",\n    ) -> Text:\n        return super().build(input_value=input_value, record_template=record_template)\n",
                  "fileTypes": [],
                  "file_path": "",
                  "password": false,
                  "name": "code",
                  "advanced": true,
                  "dynamic": true,
                  "info": "",
                  "load_from_db": false,
                  "title_case": false
                },
                "record_template": {
                  "type": "str",
                  "required": false,
                  "placeholder": "",
                  "list": false,
                  "show": true,
                  "multiline": true,
                  "value": "",
                  "fileTypes": [],
                  "file_path": "",
                  "password": false,
                  "name": "record_template",
                  "display_name": "Record Template",
                  "advanced": true,
                  "dynamic": false,
                  "info": "Template to convert Record to Text. If left empty, it will be dynamically set to the Record's text key.",
                  "load_from_db": false,
                  "title_case": false,
                  "input_types": [
                    "Text"
                  ]
                },
                "_type": "CustomComponent"
              },
              "description": "Get text inputs from the Playground.",
              "icon": "type",
              "base_classes": [
                "object",
                "str",
                "Text"
              ],
              "display_name": "Facilitators Names",
              "documentation": "",
              "custom_fields": {
                "input_value": null,
                "record_template": null
              },
              "output_types": [
                "Text"
              ],
              "field_formatters": {},
              "frozen": false,
              "field_order": [],
              "beta": false
            },
            "id": "TextInput-zZ8kv"
          },
          "selected": false,
          "width": 384,
          "height": 297,
          "positionAbsolute": {
            "x": -736.554245218776,
            "y": -1237.696555064012
          },
          "dragging": false
        },
        {
          "id": "OpenAIModel-xlcLT",
          "type": "genericNode",
          "position": {
            "x": 2923.567147121073,
            "y": -595.2153250022242
          },
          "data": {
            "type": "OpenAIModel",
            "node": {
              "template": {
                "input_value": {
                  "type": "str",
                  "required": true,
                  "placeholder": "",
                  "list": false,
                  "show": true,
                  "multiline": false,
                  "fileTypes": [],
                  "file_path": "",
                  "password": false,
                  "name": "input_value",
                  "display_name": "Input",
                  "advanced": false,
                  "input_types": [
                    "Text",
                    "Record",
                    "Prompt"
                  ],
                  "dynamic": false,
                  "info": "",
                  "load_from_db": false,
                  "title_case": false
                },
                "code": {
                  "type": "code",
                  "required": true,
                  "placeholder": "",
                  "list": false,
                  "show": true,
                  "multiline": true,
                  "value": "from typing import Optional\n\nfrom langchain_openai import ChatOpenAI\nfrom pydantic.v1 import SecretStr\n\nfrom axiestudio.base.constants import STREAM_INFO_TEXT\nfrom axiestudio.base.models.model import LCModelComponent\nfrom axiestudio.base.models.openai_constants import MODEL_NAMES\nfrom axiestudio.field_typing import NestedDict, Text\n\n\nclass OpenAIModelComponent(LCModelComponent):\n    display_name = \"OpenAI\"\n    description = \"Generates text using OpenAI LLMs.\"\n    icon = \"OpenAI\"\n\n    field_order = [\n        \"max_tokens\",\n        \"model_kwargs\",\n        \"model_name\",\n        \"openai_api_base\",\n        \"openai_api_key\",\n        \"temperature\",\n        \"input_value\",\n        \"system_message\",\n        \"stream\",\n    ]\n\n    def build_config(self):\n        return {\n            \"input_value\": {\"display_name\": \"Input\", \"input_types\": [\"Text\", \"Record\", \"Prompt\"]},\n            \"max_tokens\": {\n                \"display_name\": \"Max Tokens\",\n                \"advanced\": True,\n                \"info\": \"The maximum number of tokens to generate. Set to 0 for unlimited tokens.\",\n            },\n            \"model_kwargs\": {\n                \"display_name\": \"Model Kwargs\",\n                \"advanced\": True,\n            },\n            \"model_name\": {\n                \"display_name\": \"Model Name\",\n                \"advanced\": False,\n                \"options\": MODEL_NAMES,\n            },\n            \"openai_api_base\": {\n                \"display_name\": \"OpenAI API Base\",\n                \"advanced\": True,\n                \"info\": (\n                    \"The base URL of the OpenAI API. Defaults to https://api.openai.com/v1.\\n\\n\"\n                    \"You can change this to use other APIs like JinaChat, LocalAI and Prem.\"\n                ),\n            },\n            \"openai_api_key\": {\n                \"display_name\": \"OpenAI API Key\",\n                \"info\": \"The OpenAI API Key to use for the OpenAI model.\",\n                \"advanced\": False,\n                \"password\": True,\n            },\n            \"temperature\": {\n                \"display_name\": \"Temperature\",\n                \"advanced\": False,\n                \"value\": 0.1,\n            },\n            \"stream\": {\n                \"display_name\": \"Stream\",\n                \"info\": STREAM_INFO_TEXT,\n                \"advanced\": True,\n            },\n            \"system_message\": {\n                \"display_name\": \"System Message\",\n                \"info\": \"System message to pass to the model.\",\n                \"advanced\": True,\n            },\n        }\n\n    def build(\n        self,\n        input_value: Text,\n        openai_api_key: str,\n        temperature: float = 0.1,\n        model_name: str = \"gpt-3.5-turbo\",\n        max_tokens: Optional[int] = 256,\n        model_kwargs: NestedDict = {},\n        openai_api_base: Optional[str] = None,\n        stream: bool = False,\n        system_message: Optional[str] = None,\n    ) -> Text:\n        if not openai_api_base:\n            openai_api_base = \"https://api.openai.com/v1\"\n        if openai_api_key:\n            api_key = SecretStr(openai_api_key)\n        else:\n            api_key = None\n\n        output = ChatOpenAI(\n            max_tokens=max_tokens or None,\n            model_kwargs=model_kwargs,\n            model=model_name,\n            base_url=openai_api_base,\n            api_key=api_key,\n            temperature=temperature,\n        )\n\n        return self.get_chat_result(output, stream, input_value, system_message)\n",
                  "fileTypes": [],
                  "file_path": "",
                  "password": false,
                  "name": "code",
                  "advanced": true,
                  "dynamic": true,
                  "info": "",
                  "load_from_db": false,
                  "title_case": false
                },
                "max_tokens": {
                  "type": "int",
                  "required": false,
                  "placeholder": "",
                  "list": false,
                  "show": true,
                  "multiline": false,
                  "value": "0",
                  "fileTypes": [],
                  "file_path": "",
                  "password": false,
                  "name": "max_tokens",
                  "display_name": "Max Tokens",
                  "advanced": true,
                  "dynamic": false,
                  "info": "The maximum number of tokens to generate. Set to 0 for unlimited tokens.",
                  "load_from_db": false,
                  "title_case": false
                },
                "model_kwargs": {
                  "type": "NestedDict",
                  "required": false,
                  "placeholder": "",
                  "list": false,
                  "show": true,
                  "multiline": false,
                  "value": {},
                  "fileTypes": [],
                  "file_path": "",
                  "password": false,
                  "name": "model_kwargs",
                  "display_name": "Model Kwargs",
                  "advanced": true,
                  "dynamic": false,
                  "info": "",
                  "load_from_db": false,
                  "title_case": false
                },
                "model_name": {
                  "type": "str",
                  "required": false,
                  "placeholder": "",
                  "list": true,
                  "show": true,
                  "multiline": false,
                  "value": "gpt-4o",
                  "fileTypes": [],
                  "file_path": "",
                  "password": false,
                  "options": [
                    "gpt-4o",
                    "gpt-4-turbo",
                    "gpt-4-turbo-preview",
                    "gpt-3.5-turbo",
                    "gpt-3.5-turbo-0125"
                  ],
                  "name": "model_name",
                  "display_name": "Model Name",
                  "advanced": false,
                  "dynamic": false,
                  "info": "",
                  "load_from_db": false,
                  "title_case": false,
                  "input_types": [
                    "Text"
                  ]
                },
                "openai_api_base": {
                  "type": "str",
                  "required": false,
                  "placeholder": "",
                  "list": false,
                  "show": true,
                  "multiline": false,
                  "fileTypes": [],
                  "file_path": "",
                  "password": false,
                  "name": "openai_api_base",
                  "display_name": "OpenAI API Base",
                  "advanced": true,
                  "dynamic": false,
                  "info": "The base URL of the OpenAI API. Defaults to https://api.openai.com/v1.\n\nYou can change this to use other APIs like JinaChat, LocalAI and Prem.",
                  "load_from_db": false,
                  "title_case": false,
                  "input_types": [
                    "Text"
                  ]
                },
                "openai_api_key": {
                  "type": "str",
                  "required": true,
                  "placeholder": "",
                  "list": false,
                  "show": true,
                  "multiline": false,
                  "fileTypes": [],
                  "file_path": "",
                  "password": true,
                  "name": "openai_api_key",
                  "display_name": "OpenAI API Key",
                  "advanced": false,
                  "dynamic": false,
                  "info": "The OpenAI API Key to use for the OpenAI model.",
                  "load_from_db": false,
                  "title_case": false,
                  "input_types": [
                    "Text"
                  ],
                  "value": ""
                },
                "stream": {
                  "type": "bool",
                  "required": false,
                  "placeholder": "",
                  "list": false,
                  "show": true,
                  "multiline": false,
                  "value": false,
                  "fileTypes": [],
                  "file_path": "",
                  "password": false,
                  "name": "stream",
                  "display_name": "Stream",
                  "advanced": true,
                  "dynamic": false,
                  "info": "Stream the response from the model. Streaming works only in Chat.",
                  "load_from_db": false,
                  "title_case": false
                },
                "system_message": {
                  "type": "str",
                  "required": false,
                  "placeholder": "",
                  "list": false,
                  "show": true,
                  "multiline": false,
                  "fileTypes": [],
                  "file_path": "",
                  "password": false,
                  "name": "system_message",
                  "display_name": "System Message",
                  "advanced": false,
                  "dynamic": false,
                  "info": "System message to pass to the model.",
                  "load_from_db": false,
                  "title_case": false,
                  "input_types": [
                    "Text"
                  ],
                  "value": ""
                },
                "temperature": {
                  "type": "float",
                  "required": false,
                  "placeholder": "",
                  "list": false,
                  "show": true,
                  "multiline": false,
                  "value": "0.4",
                  "fileTypes": [],
                  "file_path": "",
                  "password": false,
                  "name": "temperature",
                  "display_name": "Temperature",
                  "advanced": false,
                  "dynamic": false,
                  "info": "",
                  "rangeSpec": {
                    "step_type": "float",
                    "min": -1,
                    "max": 1,
                    "step": 0.1
                  },
                  "load_from_db": false,
                  "title_case": false
                },
                "_type": "CustomComponent"
              },
              "description": "Generates text using OpenAI LLMs.",
              "icon": "OpenAI",
              "base_classes": [
                "object",
                "str",
                "Text"
              ],
              "display_name": "Director (OpenAI)",
              "documentation": "",
              "custom_fields": {
                "input_value": null,
                "openai_api_key": null,
                "temperature": null,
                "model_name": null,
                "max_tokens": null,
                "model_kwargs": null,
                "openai_api_base": null,
                "stream": null,
                "system_message": null
              },
              "output_types": [
                "Text"
              ],
              "field_formatters": {},
              "frozen": false,
              "field_order": [
                "max_tokens",
                "model_kwargs",
                "model_name",
                "openai_api_base",
                "openai_api_key",
                "temperature",
                "input_value",
                "system_message",
                "stream"
              ],
              "beta": false,
              "edited": true
            },
            "id": "OpenAIModel-xlcLT",
            "description": "Generates text using OpenAI LLMs.",
            "display_name": "Director (OpenAI)",
            "edited": false
          },
          "selected": false,
          "width": 384,
          "height": 665,
          "positionAbsolute": {
            "x": 2923.567147121073,
            "y": -595.2153250022242
          },
          "dragging": false
        },
        {
          "id": "Prompt-EONAA",
          "type": "genericNode",
          "position": {
            "x": 2182.4201193782737,
            "y": -980.0397118430179
          },
          "data": {
            "type": "Prompt",
            "node": {
              "template": {
                "code": {
                  "type": "code",
                  "required": true,
                  "placeholder": "",
                  "list": false,
                  "show": true,
                  "multiline": true,
                  "value": "from langchain_core.prompts import PromptTemplate\n\nfrom axiestudio.custom import CustomComponent\nfrom axiestudio.field_typing import Prompt, TemplateField, Text\n\n\nclass PromptComponent(CustomComponent):\n    display_name: str = \"Prompt\"\n    description: str = \"Create a prompt template with dynamic variables.\"\n    icon = \"prompts\"\n\n    def build_config(self):\n        return {\n            \"template\": TemplateField(display_name=\"Template\"),\n            \"code\": TemplateField(advanced=True),\n        }\n\n    def build(\n        self,\n        template: Prompt,\n        **kwargs,\n    ) -> Text:\n        from axiestudio.base.prompts.utils import dict_values_to_string\n\n        prompt_template = PromptTemplate.from_template(Text(template))\n        kwargs = dict_values_to_string(kwargs)\n        kwargs = {k: \"\\n\".join(v) if isinstance(v, list) else v for k, v in kwargs.items()}\n        try:\n            formated_prompt = prompt_template.format(**kwargs)\n        except Exception as exc:\n            raise ValueError(f\"Error formatting prompt: {exc}\") from exc\n        self.status = f'Prompt:\\n\"{formated_prompt}\"'\n        return formated_prompt\n",
                  "fileTypes": [],
                  "file_path": "",
                  "password": false,
                  "name": "code",
                  "advanced": true,
                  "dynamic": true,
                  "info": "",
                  "load_from_db": false,
                  "title_case": false
                },
                "template": {
                  "type": "prompt",
                  "required": false,
                  "placeholder": "",
                  "list": false,
                  "show": true,
                  "multiline": false,
                  "value": "System: \n\"\"\"You are an attentive and empathetic AI user research director, overseeing real-time user research projects. Youâ€™ll receive real time transcripts and pass orders to your research team of specialized AI bots. Your goal is to create a comprehensive and complete research summary of the conversation by employing your AI team.\"\"\"\n\n---\n\nPROJECT DETAILS\nProject Name: {project-name}\nProject Description: {project-description}\nMethod: {research-method}\nPrimary Goal: {research-goal}\nOther Business Goals: {business-goals}\n\n---\n\nYOUR TEAM\nYour team consists of the following bots:\n* @Interviewees: a bot that records the names of the people who are being interviewed by the facilitator.\n* @Background - a bot that is collecting facts about the interviewee background, their demographics, interests, role, situation, work environment, etc. Please don't call it for statements the facilitator makes, only background from the interviewees. \n* @Quotes - a bot that collects meaningful and eye opening quotes from the interviewees.\n* @Needs - a bot that convert any need, pain point, or desire, expressed by the interviewee into an HMW question.\n* @Problems - a bot that collects a list of problems mentioned by the interviewee about the product or feature discussed.\n* @Q&A - A bot that collects any question from the facilitator along with interviewee's answer.\n\nPlease note: the facilitator/s of this session are: {facilitators}. \nIt's important that you don't engage your team to record any of the things they say, but only the *other* participants, since facilitators are not the people being interviewed.\n\n---\n\nHere's the session history: {history}\n\n--\n\nHere's the latest message: {new-chunk} \n\n--\n\nYour thoughts: {thoughts}\n\n---\n\nYOUR RESPONSE\nFor every chunk of transcript, please return a CSV with your instructions to the bots. The columns are:\n* Bot Name\n* Speaker Name\n* Start Time\n* End Time\n* Note Content\n\nHere's an example:\n\n@Background, Peter Marks, 6.94, 21.47, \"John works as the Head of Product for Widgets.com.\"\n@Needs, Olivia Davis, 19.67, 53.41, \"HMW help users of Widgets.com sign up and start using the product without handholding?\"\n@Quotes, Nataly Eliyahu, 34.23, 72.55, \"The way I see it, the main job of a product manager is to be a translator between the business folks and the designers and engineers. So anything that can help me get everyone to see the full picture is a win.\"\n\nYou may engage as many bots as are needed based on your answers, but no need to engage any that are not needed.\nIf none of the bots need to be engaged, simply return <PASS>. Otherwise, please start your reply with @\n",
                  "fileTypes": [],
                  "file_path": "",
                  "password": false,
                  "name": "template",
                  "display_name": "Template",
                  "advanced": false,
                  "input_types": [
                    "Text"
                  ],
                  "dynamic": false,
                  "info": "",
                  "load_from_db": false,
                  "title_case": false
                },
                "_type": "CustomComponent",
                "history": {
                  "field_type": "str",
                  "required": false,
                  "placeholder": "",
                  "list": false,
                  "show": true,
                  "multiline": true,
                  "value": "",
                  "fileTypes": [],
                  "file_path": "",
                  "password": false,
                  "name": "history",
                  "display_name": "history",
                  "advanced": false,
                  "input_types": [
                    "Document",
                    "Message",
                    "Record",
                    "Text"
                  ],
                  "dynamic": false,
                  "info": "",
                  "load_from_db": false,
                  "title_case": false,
                  "type": "str"
                },
                "new-chunk": {
                  "field_type": "str",
                  "required": false,
                  "placeholder": "",
                  "list": false,
                  "show": true,
                  "multiline": true,
                  "value": "",
                  "fileTypes": [],
                  "file_path": "",
                  "password": false,
                  "name": "new-chunk",
                  "display_name": "new-chunk",
                  "advanced": false,
                  "input_types": [
                    "Document",
                    "Message",
                    "Record",
                    "Text"
                  ],
                  "dynamic": false,
                  "info": "",
                  "load_from_db": false,
                  "title_case": false,
                  "type": "str"
                },
                "project-name": {
                  "field_type": "str",
                  "required": false,
                  "placeholder": "",
                  "list": false,
                  "show": true,
                  "multiline": true,
                  "value": "",
                  "fileTypes": [],
                  "file_path": "",
                  "password": false,
                  "name": "project-name",
                  "display_name": "project-name",
                  "advanced": false,
                  "input_types": [
                    "Document",
                    "Message",
                    "Record",
                    "Text"
                  ],
                  "dynamic": false,
                  "info": "",
                  "load_from_db": false,
                  "title_case": false,
                  "type": "str"
                },
                "project-description": {
                  "field_type": "str",
                  "required": false,
                  "placeholder": "",
                  "list": false,
                  "show": true,
                  "multiline": true,
                  "value": "",
                  "fileTypes": [],
                  "file_path": "",
                  "password": false,
                  "name": "project-description",
                  "display_name": "project-description",
                  "advanced": false,
                  "input_types": [
                    "Document",
                    "Message",
                    "Record",
                    "Text"
                  ],
                  "dynamic": false,
                  "info": "",
                  "load_from_db": false,
                  "title_case": false,
                  "type": "str"
                },
                "research-method": {
                  "field_type": "str",
                  "required": false,
                  "placeholder": "",
                  "list": false,
                  "show": true,
                  "multiline": true,
                  "value": "",
                  "fileTypes": [],
                  "file_path": "",
                  "password": false,
                  "name": "research-method",
                  "display_name": "research-method",
                  "advanced": false,
                  "input_types": [
                    "Document",
                    "Message",
                    "Record",
                    "Text"
                  ],
                  "dynamic": false,
                  "info": "",
                  "load_from_db": false,
                  "title_case": false,
                  "type": "str"
                },
                "research-goal": {
                  "field_type": "str",
                  "required": false,
                  "placeholder": "",
                  "list": false,
                  "show": true,
                  "multiline": true,
                  "value": "",
                  "fileTypes": [],
                  "file_path": "",
                  "password": false,
                  "name": "research-goal",
                  "display_name": "research-goal",
                  "advanced": false,
                  "input_types": [
                    "Document",
                    "Message",
                    "Record",
                    "Text"
                  ],
                  "dynamic": false,
                  "info": "",
                  "load_from_db": false,
                  "title_case": false,
                  "type": "str"
                },
                "business-goals": {
                  "field_type": "str",
                  "required": false,
                  "placeholder": "",
                  "list": false,
                  "show": true,
                  "multiline": true,
                  "value": "",
                  "fileTypes": [],
                  "file_path": "",
                  "password": false,
                  "name": "business-goals",
                  "display_name": "business-goals",
                  "advanced": false,
                  "input_types": [
                    "Document",
                    "Message",
                    "Record",
                    "Text"
                  ],
                  "dynamic": false,
                  "info": "",
                  "load_from_db": false,
                  "title_case": false,
                  "type": "str"
                },
                "facilitators": {
                  "field_type": "str",
                  "required": false,
                  "placeholder": "",
                  "list": false,
                  "show": true,
                  "multiline": true,
                  "value": "",
                  "fileTypes": [],
                  "file_path": "",
                  "password": false,
                  "name": "facilitators",
                  "display_name": "facilitators",
                  "advanced": false,
                  "input_types": [
                    "Document",
                    "Message",
                    "Record",
                    "Text"
                  ],
                  "dynamic": false,
                  "info": "",
                  "load_from_db": false,
                  "title_case": false,
                  "type": "str"
                },
                "thoughts": {
                  "field_type": "str",
                  "required": false,
                  "placeholder": "",
                  "list": false,
                  "show": true,
                  "multiline": true,
                  "value": "",
                  "fileTypes": [],
                  "file_path": "",
                  "password": false,
                  "name": "thoughts",
                  "display_name": "thoughts",
                  "advanced": false,
                  "input_types": [
                    "Document",
                    "Message",
                    "Record",
                    "Text"
                  ],
                  "dynamic": false,
                  "info": "",
                  "load_from_db": false,
                  "title_case": false,
                  "type": "str"
                }
              },
              "description": "Create a prompt template with dynamic variables.",
              "icon": "prompts",
              "is_input": null,
              "is_output": null,
              "is_composition": null,
              "base_classes": [
                "object",
                "str",
                "Text"
              ],
              "name": "",
              "display_name": "Prompt",
              "documentation": "",
              "custom_fields": {
                "template": [
                  "project-name",
                  "project-description",
                  "research-method",
                  "research-goal",
                  "business-goals",
                  "facilitators",
                  "history",
                  "new-chunk",
                  "thoughts"
                ]
              },
              "output_types": [
                "Text"
              ],
              "full_path": null,
              "field_formatters": {},
              "frozen": false,
              "field_order": [],
              "beta": false,
              "error": null
            },
            "id": "Prompt-EONAA",
            "description": "Create a prompt template with dynamic variables.",
            "display_name": "Prompt"
          },
          "selected": true,
          "width": 384,
          "height": 1171,
          "positionAbsolute": {
            "x": 2182.4201193782737,
            "y": -980.0397118430179
          },
          "dragging": false
        },
        {
          "id": "MemoryComponent-x8jW3",
          "type": "genericNode",
          "position": {
            "x": 2121.169523061734,
            "y": 363.94248022221814
          },
          "data": {
            "type": "MemoryComponent",
            "node": {
              "template": {
                "code": {
                  "type": "code",
                  "required": true,
                  "placeholder": "",
                  "list": false,
                  "show": true,
                  "multiline": true,
                  "value": "from typing import Optional\n\nfrom axiestudio.base.memory.memory import BaseMemoryComponent\nfrom axiestudio.field_typing import Text\nfrom axiestudio.helpers.record import messages_to_text\nfrom axiestudio.memory import get_messages\nfrom axiestudio.schema.message import Message\n\n\nclass MemoryComponent(BaseMemoryComponent):\n    display_name = \"Chat Memory\"\n    description = \"Retrieves stored chat messages given a specific Session ID.\"\n    beta: bool = True\n    icon = \"history\"\n\n    def build_config(self):\n        return {\n            \"sender\": {\n                \"options\": [\"Machine\", \"User\", \"Machine and User\"],\n                \"display_name\": \"Sender Type\",\n            },\n            \"sender_name\": {\"display_name\": \"Sender Name\", \"advanced\": True},\n            \"n_messages\": {\n                \"display_name\": \"Number of Messages\",\n                \"info\": \"Number of messages to retrieve.\",\n            },\n            \"session_id\": {\n                \"display_name\": \"Session ID\",\n                \"info\": \"Session ID of the chat history.\",\n                \"input_types\": [\"Text\"],\n            },\n            \"order\": {\n                \"options\": [\"Ascending\", \"Descending\"],\n                \"display_name\": \"Order\",\n                \"info\": \"Order of the messages.\",\n                \"advanced\": True,\n            },\n            \"record_template\": {\n                \"display_name\": \"Record Template\",\n                \"multiline\": True,\n                \"info\": \"Template to convert Record to Text. If left empty, it will be dynamically set to the Record's text key.\",\n                \"advanced\": True,\n            },\n        }\n\n    def get_messages(self, **kwargs) -> list[Message]:\n        # Validate kwargs by checking if it contains the correct keys\n        if \"sender\" not in kwargs:\n            kwargs[\"sender\"] = None\n        if \"sender_name\" not in kwargs:\n            kwargs[\"sender_name\"] = None\n        if \"session_id\" not in kwargs:\n            kwargs[\"session_id\"] = None\n        if \"limit\" not in kwargs:\n            kwargs[\"limit\"] = 5\n        if \"order\" not in kwargs:\n            kwargs[\"order\"] = \"Descending\"\n\n        kwargs[\"order\"] = \"DESC\" if kwargs[\"order\"] == \"Descending\" else \"ASC\"\n        if kwargs[\"sender\"] == \"Machine and User\":\n            kwargs[\"sender\"] = None\n        return get_messages(**kwargs)\n\n    def build(\n        self,\n        sender: Optional[str] = \"Machine and User\",\n        sender_name: Optional[str] = None,\n        session_id: Optional[str] = None,\n        n_messages: int = 5,\n        order: Optional[str] = \"Descending\",\n        record_template: Optional[str] = \"{sender_name}: {text}\",\n    ) -> Text:\n        messages = self.get_messages(\n            sender=sender,\n            sender_name=sender_name,\n            session_id=session_id,\n            limit=n_messages,\n            order=order,\n        )\n        messages_str = messages_to_text(template=record_template or \"\", messages=messages)\n        self.status = messages_str\n        return messages_str\n",
                  "fileTypes": [],
                  "file_path": "",
                  "password": false,
                  "name": "code",
                  "advanced": true,
                  "dynamic": true,
                  "info": "",
                  "load_from_db": false,
                  "title_case": false
                },
                "n_messages": {
                  "type": "int",
                  "required": false,
                  "placeholder": "",
                  "list": false,
                  "show": true,
                  "multiline": false,
                  "value": "10",
                  "fileTypes": [],
                  "file_path": "",
                  "password": false,
                  "name": "n_messages",
                  "display_name": "Number of Messages",
                  "advanced": false,
                  "dynamic": false,
                  "info": "Number of messages to retrieve.",
                  "load_from_db": false,
                  "title_case": false
                },
                "order": {
                  "type": "str",
                  "required": false,
                  "placeholder": "",
                  "list": true,
                  "show": true,
                  "multiline": false,
                  "value": "Descending",
                  "fileTypes": [],
                  "file_path": "",
                  "password": false,
                  "options": [
                    "Ascending",
                    "Descending"
                  ],
                  "name": "order",
                  "display_name": "Order",
                  "advanced": true,
                  "dynamic": false,
                  "info": "Order of the messages.",
                  "load_from_db": false,
                  "title_case": false,
                  "input_types": [
                    "Text"
                  ]
                },
                "record_template": {
                  "type": "str",
                  "required": false,
                  "placeholder": "",
                  "list": false,
                  "show": true,
                  "multiline": true,
                  "value": "{sender_name}: {text}",
                  "fileTypes": [],
                  "file_path": "",
                  "password": false,
                  "name": "record_template",
                  "display_name": "Record Template",
                  "advanced": true,
                  "dynamic": false,
                  "info": "Template to convert Record to Text. If left empty, it will be dynamically set to the Record's text key.",
                  "load_from_db": false,
                  "title_case": false,
                  "input_types": [
                    "Text"
                  ]
                },
                "sender": {
                  "type": "str",
                  "required": false,
                  "placeholder": "",
                  "list": true,
                  "show": true,
                  "multiline": false,
                  "value": "User",
                  "fileTypes": [],
                  "file_path": "",
                  "password": false,
                  "options": [
                    "Machine",
                    "User",
                    "Machine and User"
                  ],
                  "name": "sender",
                  "display_name": "Sender Type",
                  "advanced": false,
                  "dynamic": false,
                  "info": "",
                  "load_from_db": false,
                  "title_case": false,
                  "input_types": [
                    "Text"
                  ]
                },
                "sender_name": {
                  "type": "str",
                  "required": false,
                  "placeholder": "",
                  "list": false,
                  "show": true,
                  "multiline": false,
                  "fileTypes": [],
                  "file_path": "",
                  "password": false,
                  "name": "sender_name",
                  "display_name": "Sender Name",
                  "advanced": true,
                  "dynamic": false,
                  "info": "",
                  "load_from_db": false,
                  "title_case": false,
                  "input_types": [
                    "Text"
                  ]
                },
                "session_id": {
                  "type": "str",
                  "required": false,
                  "placeholder": "",
                  "list": false,
                  "show": true,
                  "multiline": false,
                  "fileTypes": [],
                  "file_path": "",
                  "password": false,
                  "name": "session_id",
                  "display_name": "Session ID",
                  "advanced": false,
                  "input_types": [
                    "Text"
                  ],
                  "dynamic": false,
                  "info": "Session ID of the chat history.",
                  "load_from_db": false,
                  "title_case": false
                },
                "_type": "CustomComponent"
              },
              "description": "Retrieves stored chat messages given a specific Session ID.",
              "icon": "history",
              "base_classes": [
                "object",
                "str",
                "Text"
              ],
              "display_name": "Short Chat Memory",
              "documentation": "",
              "custom_fields": {
                "sender": null,
                "sender_name": null,
                "session_id": null,
                "n_messages": null,
                "order": null,
                "record_template": null
              },
              "output_types": [
                "Text"
              ],
              "field_formatters": {},
              "frozen": false,
              "field_order": [],
              "beta": true
            },
            "id": "MemoryComponent-x8jW3"
          },
          "selected": false,
          "width": 384,
          "height": 505,
          "positionAbsolute": {
            "x": 2121.169523061734,
            "y": 363.94248022221814
          },
          "dragging": false
        }
      ],
      "edges": [
        {
          "source": "IDGenerator-cOHvw",
          "sourceHandle": "{Å“baseClassesÅ“:[Å“objectÅ“,Å“strÅ“,Å“TextÅ“],Å“dataTypeÅ“:Å“IDGeneratorÅ“,Å“idÅ“:Å“IDGenerator-cOHvwÅ“}",
          "target": "MemoryComponent-hc44i",
          "targetHandle": "{Å“fieldNameÅ“:Å“session_idÅ“,Å“idÅ“:Å“MemoryComponent-hc44iÅ“,Å“inputTypesÅ“:[Å“TextÅ“],Å“typeÅ“:Å“strÅ“}",
          "data": {
            "targetHandle": {
              "fieldName": "session_id",
              "id": "MemoryComponent-hc44i",
              "inputTypes": [
                "Text"
              ],
              "type": "str"
            },
            "sourceHandle": {
              "baseClasses": [
                "object",
                "str",
                "Text"
              ],
              "dataType": "IDGenerator",
              "id": "IDGenerator-cOHvw"
            }
          },
          "style": {
            "stroke": "#555"
          },
          "className": "",
          "id": "reactflow__edge-IDGenerator-cOHvw{Å“baseClassesÅ“:[Å“objectÅ“,Å“strÅ“,Å“TextÅ“],Å“dataTypeÅ“:Å“IDGeneratorÅ“,Å“idÅ“:Å“IDGenerator-cOHvwÅ“}-MemoryComponent-hc44i{Å“fieldNameÅ“:Å“session_idÅ“,Å“idÅ“:Å“MemoryComponent-hc44iÅ“,Å“inputTypesÅ“:[Å“TextÅ“],Å“typeÅ“:Å“strÅ“}",
          "selected": false
        },
        {
          "source": "MemoryComponent-hc44i",
          "sourceHandle": "{Å“baseClassesÅ“:[Å“objectÅ“,Å“strÅ“,Å“TextÅ“],Å“dataTypeÅ“:Å“MemoryComponentÅ“,Å“idÅ“:Å“MemoryComponent-hc44iÅ“}",
          "target": "Prompt-XLyGX",
          "targetHandle": "{Å“fieldNameÅ“:Å“historyÅ“,Å“idÅ“:Å“Prompt-XLyGXÅ“,Å“inputTypesÅ“:[Å“DocumentÅ“,Å“MessageÅ“,Å“RecordÅ“,Å“TextÅ“],Å“typeÅ“:Å“strÅ“}",
          "data": {
            "targetHandle": {
              "fieldName": "history",
              "id": "Prompt-XLyGX",
              "inputTypes": [
                "Document",
                "Message",
                "Record",
                "Text"
              ],
              "type": "str"
            },
            "sourceHandle": {
              "baseClasses": [
                "object",
                "str",
                "Text"
              ],
              "dataType": "MemoryComponent",
              "id": "MemoryComponent-hc44i"
            }
          },
          "id": "reactflow__edge-MemoryComponent-hc44i{Å“baseClassesÅ“:[Å“objectÅ“,Å“strÅ“,Å“TextÅ“],Å“dataTypeÅ“:Å“MemoryComponentÅ“,Å“idÅ“:Å“MemoryComponent-hc44iÅ“}-Prompt-XLyGX{Å“fieldNameÅ“:Å“historyÅ“,Å“idÅ“:Å“Prompt-XLyGXÅ“,Å“inputTypesÅ“:[Å“DocumentÅ“,Å“MessageÅ“,Å“RecordÅ“,Å“TextÅ“],Å“typeÅ“:Å“strÅ“}",
          "className": ""
        },
        {
          "source": "TextInput-at7vy",
          "sourceHandle": "{Å“baseClassesÅ“:[Å“objectÅ“,Å“strÅ“,Å“TextÅ“],Å“dataTypeÅ“:Å“TextInputÅ“,Å“idÅ“:Å“TextInput-at7vyÅ“}",
          "target": "Prompt-XLyGX",
          "targetHandle": "{Å“fieldNameÅ“:Å“business-goalsÅ“,Å“idÅ“:Å“Prompt-XLyGXÅ“,Å“inputTypesÅ“:[Å“DocumentÅ“,Å“MessageÅ“,Å“RecordÅ“,Å“TextÅ“],Å“typeÅ“:Å“strÅ“}",
          "data": {
            "targetHandle": {
              "fieldName": "business-goals",
              "id": "Prompt-XLyGX",
              "inputTypes": [
                "Document",
                "Message",
                "Record",
                "Text"
              ],
              "type": "str"
            },
            "sourceHandle": {
              "baseClasses": [
                "object",
                "str",
                "Text"
              ],
              "dataType": "TextInput",
              "id": "TextInput-at7vy"
            }
          },
          "id": "reactflow__edge-TextInput-at7vy{Å“baseClassesÅ“:[Å“objectÅ“,Å“strÅ“,Å“TextÅ“],Å“dataTypeÅ“:Å“TextInputÅ“,Å“idÅ“:Å“TextInput-at7vyÅ“}-Prompt-XLyGX{Å“fieldNameÅ“:Å“business-goalsÅ“,Å“idÅ“:Å“Prompt-XLyGXÅ“,Å“inputTypesÅ“:[Å“DocumentÅ“,Å“MessageÅ“,Å“RecordÅ“,Å“TextÅ“],Å“typeÅ“:Å“strÅ“}",
          "className": ""
        },
        {
          "source": "TextInput-WNMz5",
          "sourceHandle": "{Å“baseClassesÅ“:[Å“objectÅ“,Å“strÅ“,Å“TextÅ“],Å“dataTypeÅ“:Å“TextInputÅ“,Å“idÅ“:Å“TextInput-WNMz5Å“}",
          "target": "Prompt-XLyGX",
          "targetHandle": "{Å“fieldNameÅ“:Å“project-descriptionÅ“,Å“idÅ“:Å“Prompt-XLyGXÅ“,Å“inputTypesÅ“:[Å“DocumentÅ“,Å“MessageÅ“,Å“RecordÅ“,Å“TextÅ“],Å“typeÅ“:Å“strÅ“}",
          "data": {
            "targetHandle": {
              "fieldName": "project-description",
              "id": "Prompt-XLyGX",
              "inputTypes": [
                "Document",
                "Message",
                "Record",
                "Text"
              ],
              "type": "str"
            },
            "sourceHandle": {
              "baseClasses": [
                "object",
                "str",
                "Text"
              ],
              "dataType": "TextInput",
              "id": "TextInput-WNMz5"
            }
          },
          "id": "reactflow__edge-TextInput-WNMz5{Å“baseClassesÅ“:[Å“objectÅ“,Å“strÅ“,Å“TextÅ“],Å“dataTypeÅ“:Å“TextInputÅ“,Å“idÅ“:Å“TextInput-WNMz5Å“}-Prompt-XLyGX{Å“fieldNameÅ“:Å“project-descriptionÅ“,Å“idÅ“:Å“Prompt-XLyGXÅ“,Å“inputTypesÅ“:[Å“DocumentÅ“,Å“MessageÅ“,Å“RecordÅ“,Å“TextÅ“],Å“typeÅ“:Å“strÅ“}",
          "className": ""
        },
        {
          "source": "TextInput-h5qwa",
          "sourceHandle": "{Å“baseClassesÅ“:[Å“objectÅ“,Å“strÅ“,Å“TextÅ“],Å“dataTypeÅ“:Å“TextInputÅ“,Å“idÅ“:Å“TextInput-h5qwaÅ“}",
          "target": "Prompt-XLyGX",
          "targetHandle": "{Å“fieldNameÅ“:Å“project-nameÅ“,Å“idÅ“:Å“Prompt-XLyGXÅ“,Å“inputTypesÅ“:[Å“DocumentÅ“,Å“MessageÅ“,Å“RecordÅ“,Å“TextÅ“],Å“typeÅ“:Å“strÅ“}",
          "data": {
            "targetHandle": {
              "fieldName": "project-name",
              "id": "Prompt-XLyGX",
              "inputTypes": [
                "Document",
                "Message",
                "Record",
                "Text"
              ],
              "type": "str"
            },
            "sourceHandle": {
              "baseClasses": [
                "object",
                "str",
                "Text"
              ],
              "dataType": "TextInput",
              "id": "TextInput-h5qwa"
            }
          },
          "id": "reactflow__edge-TextInput-h5qwa{Å“baseClassesÅ“:[Å“objectÅ“,Å“strÅ“,Å“TextÅ“],Å“dataTypeÅ“:Å“TextInputÅ“,Å“idÅ“:Å“TextInput-h5qwaÅ“}-Prompt-XLyGX{Å“fieldNameÅ“:Å“project-nameÅ“,Å“idÅ“:Å“Prompt-XLyGXÅ“,Å“inputTypesÅ“:[Å“DocumentÅ“,Å“MessageÅ“,Å“RecordÅ“,Å“TextÅ“],Å“typeÅ“:Å“strÅ“}",
          "className": ""
        },
        {
          "source": "TextInput-iHjL1",
          "sourceHandle": "{Å“baseClassesÅ“:[Å“objectÅ“,Å“strÅ“,Å“TextÅ“],Å“dataTypeÅ“:Å“TextInputÅ“,Å“idÅ“:Å“TextInput-iHjL1Å“}",
          "target": "Prompt-XLyGX",
          "targetHandle": "{Å“fieldNameÅ“:Å“research-goalÅ“,Å“idÅ“:Å“Prompt-XLyGXÅ“,Å“inputTypesÅ“:[Å“DocumentÅ“,Å“MessageÅ“,Å“RecordÅ“,Å“TextÅ“],Å“typeÅ“:Å“strÅ“}",
          "data": {
            "targetHandle": {
              "fieldName": "research-goal",
              "id": "Prompt-XLyGX",
              "inputTypes": [
                "Document",
                "Message",
                "Record",
                "Text"
              ],
              "type": "str"
            },
            "sourceHandle": {
              "baseClasses": [
                "object",
                "str",
                "Text"
              ],
              "dataType": "TextInput",
              "id": "TextInput-iHjL1"
            }
          },
          "id": "reactflow__edge-TextInput-iHjL1{Å“baseClassesÅ“:[Å“objectÅ“,Å“strÅ“,Å“TextÅ“],Å“dataTypeÅ“:Å“TextInputÅ“,Å“idÅ“:Å“TextInput-iHjL1Å“}-Prompt-XLyGX{Å“fieldNameÅ“:Å“research-goalÅ“,Å“idÅ“:Å“Prompt-XLyGXÅ“,Å“inputTypesÅ“:[Å“DocumentÅ“,Å“MessageÅ“,Å“RecordÅ“,Å“TextÅ“],Å“typeÅ“:Å“strÅ“}",
          "className": ""
        },
        {
          "source": "TextInput-jc0vl",
          "sourceHandle": "{Å“baseClassesÅ“:[Å“objectÅ“,Å“strÅ“,Å“TextÅ“],Å“dataTypeÅ“:Å“TextInputÅ“,Å“idÅ“:Å“TextInput-jc0vlÅ“}",
          "target": "Prompt-XLyGX",
          "targetHandle": "{Å“fieldNameÅ“:Å“research-methodÅ“,Å“idÅ“:Å“Prompt-XLyGXÅ“,Å“inputTypesÅ“:[Å“DocumentÅ“,Å“MessageÅ“,Å“RecordÅ“,Å“TextÅ“],Å“typeÅ“:Å“strÅ“}",
          "data": {
            "targetHandle": {
              "fieldName": "research-method",
              "id": "Prompt-XLyGX",
              "inputTypes": [
                "Document",
                "Message",
                "Record",
                "Text"
              ],
              "type": "str"
            },
            "sourceHandle": {
              "baseClasses": [
                "object",
                "str",
                "Text"
              ],
              "dataType": "TextInput",
              "id": "TextInput-jc0vl"
            }
          },
          "id": "reactflow__edge-TextInput-jc0vl{Å“baseClassesÅ“:[Å“objectÅ“,Å“strÅ“,Å“TextÅ“],Å“dataTypeÅ“:Å“TextInputÅ“,Å“idÅ“:Å“TextInput-jc0vlÅ“}-Prompt-XLyGX{Å“fieldNameÅ“:Å“research-methodÅ“,Å“idÅ“:Å“Prompt-XLyGXÅ“,Å“inputTypesÅ“:[Å“DocumentÅ“,Å“MessageÅ“,Å“RecordÅ“,Å“TextÅ“],Å“typeÅ“:Å“strÅ“}",
          "className": ""
        },
        {
          "source": "ChatInput-k2Pvk",
          "sourceHandle": "{Å“baseClassesÅ“:[Å“MessageÅ“,Å“objectÅ“,Å“strÅ“,Å“TextÅ“],Å“dataTypeÅ“:Å“ChatInputÅ“,Å“idÅ“:Å“ChatInput-k2PvkÅ“}",
          "target": "Prompt-XLyGX",
          "targetHandle": "{Å“fieldNameÅ“:Å“new-chunkÅ“,Å“idÅ“:Å“Prompt-XLyGXÅ“,Å“inputTypesÅ“:[Å“DocumentÅ“,Å“MessageÅ“,Å“RecordÅ“,Å“TextÅ“],Å“typeÅ“:Å“strÅ“}",
          "data": {
            "targetHandle": {
              "fieldName": "new-chunk",
              "id": "Prompt-XLyGX",
              "inputTypes": [
                "Document",
                "Message",
                "Record",
                "Text"
              ],
              "type": "str"
            },
            "sourceHandle": {
              "baseClasses": [
                "Message",
                "object",
                "str",
                "Text"
              ],
              "dataType": "ChatInput",
              "id": "ChatInput-k2Pvk"
            }
          },
          "id": "reactflow__edge-ChatInput-k2Pvk{Å“baseClassesÅ“:[Å“MessageÅ“,Å“objectÅ“,Å“strÅ“,Å“TextÅ“],Å“dataTypeÅ“:Å“ChatInputÅ“,Å“idÅ“:Å“ChatInput-k2PvkÅ“}-Prompt-XLyGX{Å“fieldNameÅ“:Å“new-chunkÅ“,Å“idÅ“:Å“Prompt-XLyGXÅ“,Å“inputTypesÅ“:[Å“DocumentÅ“,Å“MessageÅ“,Å“RecordÅ“,Å“TextÅ“],Å“typeÅ“:Å“strÅ“}",
          "className": ""
        },
        {
          "source": "Prompt-XLyGX",
          "sourceHandle": "{Å“baseClassesÅ“:[Å“objectÅ“,Å“strÅ“,Å“TextÅ“],Å“dataTypeÅ“:Å“PromptÅ“,Å“idÅ“:Å“Prompt-XLyGXÅ“}",
          "target": "OpenAIModel-uB4K9",
          "targetHandle": "{Å“fieldNameÅ“:Å“input_valueÅ“,Å“idÅ“:Å“OpenAIModel-uB4K9Å“,Å“inputTypesÅ“:[Å“TextÅ“,Å“RecordÅ“,Å“PromptÅ“],Å“typeÅ“:Å“strÅ“}",
          "data": {
            "targetHandle": {
              "fieldName": "input_value",
              "id": "OpenAIModel-uB4K9",
              "inputTypes": [
                "Text",
                "Record",
                "Prompt"
              ],
              "type": "str"
            },
            "sourceHandle": {
              "baseClasses": [
                "object",
                "str",
                "Text"
              ],
              "dataType": "Prompt",
              "id": "Prompt-XLyGX"
            }
          },
          "id": "reactflow__edge-Prompt-XLyGX{Å“baseClassesÅ“:[Å“objectÅ“,Å“strÅ“,Å“TextÅ“],Å“dataTypeÅ“:Å“PromptÅ“,Å“idÅ“:Å“Prompt-XLyGXÅ“}-OpenAIModel-uB4K9{Å“fieldNameÅ“:Å“input_valueÅ“,Å“idÅ“:Å“OpenAIModel-uB4K9Å“,Å“inputTypesÅ“:[Å“TextÅ“,Å“RecordÅ“,Å“PromptÅ“],Å“typeÅ“:Å“strÅ“}",
          "className": ""
        },
        {
          "source": "TextInput-zZ8kv",
          "sourceHandle": "{Å“baseClassesÅ“:[Å“objectÅ“,Å“strÅ“,Å“TextÅ“],Å“dataTypeÅ“:Å“TextInputÅ“,Å“idÅ“:Å“TextInput-zZ8kvÅ“}",
          "target": "Prompt-EONAA",
          "targetHandle": "{Å“fieldNameÅ“:Å“facilitatorsÅ“,Å“idÅ“:Å“Prompt-EONAAÅ“,Å“inputTypesÅ“:[Å“DocumentÅ“,Å“MessageÅ“,Å“RecordÅ“,Å“TextÅ“],Å“typeÅ“:Å“strÅ“}",
          "data": {
            "targetHandle": {
              "fieldName": "facilitators",
              "id": "Prompt-EONAA",
              "inputTypes": [
                "Document",
                "Message",
                "Record",
                "Text"
              ],
              "type": "str"
            },
            "sourceHandle": {
              "baseClasses": [
                "object",
                "str",
                "Text"
              ],
              "dataType": "TextInput",
              "id": "TextInput-zZ8kv"
            }
          },
          "id": "reactflow__edge-TextInput-zZ8kv{Å“baseClassesÅ“:[Å“objectÅ“,Å“strÅ“,Å“TextÅ“],Å“dataTypeÅ“:Å“TextInputÅ“,Å“idÅ“:Å“TextInput-zZ8kvÅ“}-Prompt-EONAA{Å“fieldNameÅ“:Å“facilitatorsÅ“,Å“idÅ“:Å“Prompt-EONAAÅ“,Å“inputTypesÅ“:[Å“DocumentÅ“,Å“MessageÅ“,Å“RecordÅ“,Å“TextÅ“],Å“typeÅ“:Å“strÅ“}",
          "className": ""
        },
        {
          "source": "TextInput-h5qwa",
          "sourceHandle": "{Å“baseClassesÅ“:[Å“objectÅ“,Å“strÅ“,Å“TextÅ“],Å“dataTypeÅ“:Å“TextInputÅ“,Å“idÅ“:Å“TextInput-h5qwaÅ“}",
          "target": "Prompt-EONAA",
          "targetHandle": "{Å“fieldNameÅ“:Å“project-nameÅ“,Å“idÅ“:Å“Prompt-EONAAÅ“,Å“inputTypesÅ“:[Å“DocumentÅ“,Å“MessageÅ“,Å“RecordÅ“,Å“TextÅ“],Å“typeÅ“:Å“strÅ“}",
          "data": {
            "targetHandle": {
              "fieldName": "project-name",
              "id": "Prompt-EONAA",
              "inputTypes": [
                "Document",
                "Message",
                "Record",
                "Text"
              ],
              "type": "str"
            },
            "sourceHandle": {
              "baseClasses": [
                "object",
                "str",
                "Text"
              ],
              "dataType": "TextInput",
              "id": "TextInput-h5qwa"
            }
          },
          "id": "reactflow__edge-TextInput-h5qwa{Å“baseClassesÅ“:[Å“objectÅ“,Å“strÅ“,Å“TextÅ“],Å“dataTypeÅ“:Å“TextInputÅ“,Å“idÅ“:Å“TextInput-h5qwaÅ“}-Prompt-EONAA{Å“fieldNameÅ“:Å“project-nameÅ“,Å“idÅ“:Å“Prompt-EONAAÅ“,Å“inputTypesÅ“:[Å“DocumentÅ“,Å“MessageÅ“,Å“RecordÅ“,Å“TextÅ“],Å“typeÅ“:Å“strÅ“}",
          "className": ""
        },
        {
          "source": "TextInput-WNMz5",
          "sourceHandle": "{Å“baseClassesÅ“:[Å“objectÅ“,Å“strÅ“,Å“TextÅ“],Å“dataTypeÅ“:Å“TextInputÅ“,Å“idÅ“:Å“TextInput-WNMz5Å“}",
          "target": "Prompt-EONAA",
          "targetHandle": "{Å“fieldNameÅ“:Å“project-descriptionÅ“,Å“idÅ“:Å“Prompt-EONAAÅ“,Å“inputTypesÅ“:[Å“DocumentÅ“,Å“MessageÅ“,Å“RecordÅ“,Å“TextÅ“],Å“typeÅ“:Å“strÅ“}",
          "data": {
            "targetHandle": {
              "fieldName": "project-description",
              "id": "Prompt-EONAA",
              "inputTypes": [
                "Document",
                "Message",
                "Record",
                "Text"
              ],
              "type": "str"
            },
            "sourceHandle": {
              "baseClasses": [
                "object",
                "str",
                "Text"
              ],
              "dataType": "TextInput",
              "id": "TextInput-WNMz5"
            }
          },
          "id": "reactflow__edge-TextInput-WNMz5{Å“baseClassesÅ“:[Å“objectÅ“,Å“strÅ“,Å“TextÅ“],Å“dataTypeÅ“:Å“TextInputÅ“,Å“idÅ“:Å“TextInput-WNMz5Å“}-Prompt-EONAA{Å“fieldNameÅ“:Å“project-descriptionÅ“,Å“idÅ“:Å“Prompt-EONAAÅ“,Å“inputTypesÅ“:[Å“DocumentÅ“,Å“MessageÅ“,Å“RecordÅ“,Å“TextÅ“],Å“typeÅ“:Å“strÅ“}",
          "className": ""
        },
        {
          "source": "ChatInput-k2Pvk",
          "sourceHandle": "{Å“baseClassesÅ“:[Å“MessageÅ“,Å“objectÅ“,Å“strÅ“,Å“TextÅ“],Å“dataTypeÅ“:Å“ChatInputÅ“,Å“idÅ“:Å“ChatInput-k2PvkÅ“}",
          "target": "Prompt-EONAA",
          "targetHandle": "{Å“fieldNameÅ“:Å“new-chunkÅ“,Å“idÅ“:Å“Prompt-EONAAÅ“,Å“inputTypesÅ“:[Å“DocumentÅ“,Å“MessageÅ“,Å“RecordÅ“,Å“TextÅ“],Å“typeÅ“:Å“strÅ“}",
          "data": {
            "targetHandle": {
              "fieldName": "new-chunk",
              "id": "Prompt-EONAA",
              "inputTypes": [
                "Document",
                "Message",
                "Record",
                "Text"
              ],
              "type": "str"
            },
            "sourceHandle": {
              "baseClasses": [
                "Message",
                "object",
                "str",
                "Text"
              ],
              "dataType": "ChatInput",
              "id": "ChatInput-k2Pvk"
            }
          },
          "id": "reactflow__edge-ChatInput-k2Pvk{Å“baseClassesÅ“:[Å“MessageÅ“,Å“objectÅ“,Å“strÅ“,Å“TextÅ“],Å“dataTypeÅ“:Å“ChatInputÅ“,Å“idÅ“:Å“ChatInput-k2PvkÅ“}-Prompt-EONAA{Å“fieldNameÅ“:Å“new-chunkÅ“,Å“idÅ“:Å“Prompt-EONAAÅ“,Å“inputTypesÅ“:[Å“DocumentÅ“,Å“MessageÅ“,Å“RecordÅ“,Å“TextÅ“],Å“typeÅ“:Å“strÅ“}",
          "className": ""
        },
        {
          "source": "IDGenerator-cOHvw",
          "sourceHandle": "{Å“baseClassesÅ“:[Å“objectÅ“,Å“strÅ“,Å“TextÅ“],Å“dataTypeÅ“:Å“IDGeneratorÅ“,Å“idÅ“:Å“IDGenerator-cOHvwÅ“}",
          "target": "MemoryComponent-x8jW3",
          "targetHandle": "{Å“fieldNameÅ“:Å“session_idÅ“,Å“idÅ“:Å“MemoryComponent-x8jW3Å“,Å“inputTypesÅ“:[Å“TextÅ“],Å“typeÅ“:Å“strÅ“}",
          "data": {
            "targetHandle": {
              "fieldName": "session_id",
              "id": "MemoryComponent-x8jW3",
              "inputTypes": [
                "Text"
              ],
              "type": "str"
            },
            "sourceHandle": {
              "baseClasses": [
                "object",
                "str",
                "Text"
              ],
              "dataType": "IDGenerator",
              "id": "IDGenerator-cOHvw"
            }
          },
          "id": "reactflow__edge-IDGenerator-cOHvw{Å“baseClassesÅ“:[Å“objectÅ“,Å“strÅ“,Å“TextÅ“],Å“dataTypeÅ“:Å“IDGeneratorÅ“,Å“idÅ“:Å“IDGenerator-cOHvwÅ“}-MemoryComponent-x8jW3{Å“fieldNameÅ“:Å“session_idÅ“,Å“idÅ“:Å“MemoryComponent-x8jW3Å“,Å“inputTypesÅ“:[Å“TextÅ“],Å“typeÅ“:Å“strÅ“}",
          "className": ""
        },
        {
          "source": "MemoryComponent-x8jW3",
          "sourceHandle": "{Å“baseClassesÅ“:[Å“objectÅ“,Å“strÅ“,Å“TextÅ“],Å“dataTypeÅ“:Å“MemoryComponentÅ“,Å“idÅ“:Å“MemoryComponent-x8jW3Å“}",
          "target": "Prompt-EONAA",
          "targetHandle": "{Å“fieldNameÅ“:Å“historyÅ“,Å“idÅ“:Å“Prompt-EONAAÅ“,Å“inputTypesÅ“:[Å“DocumentÅ“,Å“MessageÅ“,Å“RecordÅ“,Å“TextÅ“],Å“typeÅ“:Å“strÅ“}",
          "data": {
            "targetHandle": {
              "fieldName": "history",
              "id": "Prompt-EONAA",
              "inputTypes": [
                "Document",
                "Message",
                "Record",
                "Text"
              ],
              "type": "str"
            },
            "sourceHandle": {
              "baseClasses": [
                "object",
                "str",
                "Text"
              ],
              "dataType": "MemoryComponent",
              "id": "MemoryComponent-x8jW3"
            }
          },
          "id": "reactflow__edge-MemoryComponent-x8jW3{Å“baseClassesÅ“:[Å“objectÅ“,Å“strÅ“,Å“TextÅ“],Å“dataTypeÅ“:Å“MemoryComponentÅ“,Å“idÅ“:Å“MemoryComponent-x8jW3Å“}-Prompt-EONAA{Å“fieldNameÅ“:Å“historyÅ“,Å“idÅ“:Å“Prompt-EONAAÅ“,Å“inputTypesÅ“:[Å“DocumentÅ“,Å“MessageÅ“,Å“RecordÅ“,Å“TextÅ“],Å“typeÅ“:Å“strÅ“}",
          "className": ""
        },
        {
          "source": "OpenAIModel-uB4K9",
          "sourceHandle": "{Å“baseClassesÅ“:[Å“objectÅ“,Å“strÅ“,Å“TextÅ“],Å“dataTypeÅ“:Å“OpenAIModelÅ“,Å“idÅ“:Å“OpenAIModel-uB4K9Å“}",
          "target": "Prompt-EONAA",
          "targetHandle": "{Å“fieldNameÅ“:Å“thoughtsÅ“,Å“idÅ“:Å“Prompt-EONAAÅ“,Å“inputTypesÅ“:[Å“DocumentÅ“,Å“MessageÅ“,Å“RecordÅ“,Å“TextÅ“],Å“typeÅ“:Å“strÅ“}",
          "data": {
            "targetHandle": {
              "fieldName": "thoughts",
              "id": "Prompt-EONAA",
              "inputTypes": [
                "Document",
                "Message",
                "Record",
                "Text"
              ],
              "type": "str"
            },
            "sourceHandle": {
              "baseClasses": [
                "object",
                "str",
                "Text"
              ],
              "dataType": "OpenAIModel",
              "id": "OpenAIModel-uB4K9"
            }
          },
          "id": "reactflow__edge-OpenAIModel-uB4K9{Å“baseClassesÅ“:[Å“objectÅ“,Å“strÅ“,Å“TextÅ“],Å“dataTypeÅ“:Å“OpenAIModelÅ“,Å“idÅ“:Å“OpenAIModel-uB4K9Å“}-Prompt-EONAA{Å“fieldNameÅ“:Å“thoughtsÅ“,Å“idÅ“:Å“Prompt-EONAAÅ“,Å“inputTypesÅ“:[Å“DocumentÅ“,Å“MessageÅ“,Å“RecordÅ“,Å“TextÅ“],Å“typeÅ“:Å“strÅ“}",
          "className": ""
        },
        {
          "source": "TextInput-iHjL1",
          "sourceHandle": "{Å“baseClassesÅ“:[Å“objectÅ“,Å“strÅ“,Å“TextÅ“],Å“dataTypeÅ“:Å“TextInputÅ“,Å“idÅ“:Å“TextInput-iHjL1Å“}",
          "target": "Prompt-EONAA",
          "targetHandle": "{Å“fieldNameÅ“:Å“research-goalÅ“,Å“idÅ“:Å“Prompt-EONAAÅ“,Å“inputTypesÅ“:[Å“DocumentÅ“,Å“MessageÅ“,Å“RecordÅ“,Å“TextÅ“],Å“typeÅ“:Å“strÅ“}",
          "data": {
            "targetHandle": {
              "fieldName": "research-goal",
              "id": "Prompt-EONAA",
              "inputTypes": [
                "Document",
                "Message",
                "Record",
                "Text"
              ],
              "type": "str"
            },
            "sourceHandle": {
              "baseClasses": [
                "object",
                "str",
                "Text"
              ],
              "dataType": "TextInput",
              "id": "TextInput-iHjL1"
            }
          },
          "id": "reactflow__edge-TextInput-iHjL1{Å“baseClassesÅ“:[Å“objectÅ“,Å“strÅ“,Å“TextÅ“],Å“dataTypeÅ“:Å“TextInputÅ“,Å“idÅ“:Å“TextInput-iHjL1Å“}-Prompt-EONAA{Å“fieldNameÅ“:Å“research-goalÅ“,Å“idÅ“:Å“Prompt-EONAAÅ“,Å“inputTypesÅ“:[Å“DocumentÅ“,Å“MessageÅ“,Å“RecordÅ“,Å“TextÅ“],Å“typeÅ“:Å“strÅ“}",
          "className": ""
        },
        {
          "source": "TextInput-jc0vl",
          "sourceHandle": "{Å“baseClassesÅ“:[Å“objectÅ“,Å“strÅ“,Å“TextÅ“],Å“dataTypeÅ“:Å“TextInputÅ“,Å“idÅ“:Å“TextInput-jc0vlÅ“}",
          "target": "Prompt-EONAA",
          "targetHandle": "{Å“fieldNameÅ“:Å“research-methodÅ“,Å“idÅ“:Å“Prompt-EONAAÅ“,Å“inputTypesÅ“:[Å“DocumentÅ“,Å“MessageÅ“,Å“RecordÅ“,Å“TextÅ“],Å“typeÅ“:Å“strÅ“}",
          "data": {
            "targetHandle": {
              "fieldName": "research-method",
              "id": "Prompt-EONAA",
              "inputTypes": [
                "Document",
                "Message",
                "Record",
                "Text"
              ],
              "type": "str"
            },
            "sourceHandle": {
              "baseClasses": [
                "object",
                "str",
                "Text"
              ],
              "dataType": "TextInput",
              "id": "TextInput-jc0vl"
            }
          },
          "id": "reactflow__edge-TextInput-jc0vl{Å“baseClassesÅ“:[Å“objectÅ“,Å“strÅ“,Å“TextÅ“],Å“dataTypeÅ“:Å“TextInputÅ“,Å“idÅ“:Å“TextInput-jc0vlÅ“}-Prompt-EONAA{Å“fieldNameÅ“:Å“research-methodÅ“,Å“idÅ“:Å“Prompt-EONAAÅ“,Å“inputTypesÅ“:[Å“DocumentÅ“,Å“MessageÅ“,Å“RecordÅ“,Å“TextÅ“],Å“typeÅ“:Å“strÅ“}",
          "className": ""
        },
        {
          "source": "Prompt-EONAA",
          "sourceHandle": "{Å“baseClassesÅ“:[Å“objectÅ“,Å“strÅ“,Å“TextÅ“],Å“dataTypeÅ“:Å“PromptÅ“,Å“idÅ“:Å“Prompt-EONAAÅ“}",
          "target": "OpenAIModel-xlcLT",
          "targetHandle": "{Å“fieldNameÅ“:Å“input_valueÅ“,Å“idÅ“:Å“OpenAIModel-xlcLTÅ“,Å“inputTypesÅ“:[Å“TextÅ“,Å“RecordÅ“,Å“PromptÅ“],Å“typeÅ“:Å“strÅ“}",
          "data": {
            "targetHandle": {
              "fieldName": "input_value",
              "id": "OpenAIModel-xlcLT",
              "inputTypes": [
                "Text",
                "Record",
                "Prompt"
              ],
              "type": "str"
            },
            "sourceHandle": {
              "baseClasses": [
                "object",
                "str",
                "Text"
              ],
              "dataType": "Prompt",
              "id": "Prompt-EONAA"
            }
          },
          "id": "reactflow__edge-Prompt-EONAA{Å“baseClassesÅ“:[Å“objectÅ“,Å“strÅ“,Å“TextÅ“],Å“dataTypeÅ“:Å“PromptÅ“,Å“idÅ“:Å“Prompt-EONAAÅ“}-OpenAIModel-xlcLT{Å“fieldNameÅ“:Å“input_valueÅ“,Å“idÅ“:Å“OpenAIModel-xlcLTÅ“,Å“inputTypesÅ“:[Å“TextÅ“,Å“RecordÅ“,Å“PromptÅ“],Å“typeÅ“:Å“strÅ“}",
          "className": ""
        },
        {
          "source": "OpenAIModel-xlcLT",
          "sourceHandle": "{Å“baseClassesÅ“:[Å“objectÅ“,Å“strÅ“,Å“TextÅ“],Å“dataTypeÅ“:Å“OpenAIModelÅ“,Å“idÅ“:Å“OpenAIModel-xlcLTÅ“}",
          "target": "ChatOutput-xPd0d",
          "targetHandle": "{Å“fieldNameÅ“:Å“input_valueÅ“,Å“idÅ“:Å“ChatOutput-xPd0dÅ“,Å“inputTypesÅ“:[Å“TextÅ“],Å“typeÅ“:Å“strÅ“}",
          "data": {
            "targetHandle": {
              "fieldName": "input_value",
              "id": "ChatOutput-xPd0d",
              "inputTypes": [
                "Text"
              ],
              "type": "str"
            },
            "sourceHandle": {
              "baseClasses": [
                "object",
                "str",
                "Text"
              ],
              "dataType": "OpenAIModel",
              "id": "OpenAIModel-xlcLT"
            }
          },
          "id": "reactflow__edge-OpenAIModel-xlcLT{Å“baseClassesÅ“:[Å“objectÅ“,Å“strÅ“,Å“TextÅ“],Å“dataTypeÅ“:Å“OpenAIModelÅ“,Å“idÅ“:Å“OpenAIModel-xlcLTÅ“}-ChatOutput-xPd0d{Å“fieldNameÅ“:Å“input_valueÅ“,Å“idÅ“:Å“ChatOutput-xPd0dÅ“,Å“inputTypesÅ“:[Å“TextÅ“],Å“typeÅ“:Å“strÅ“}",
          "className": ""
        }
      ],
      "viewport": {
        "x": 291.70364476324295,
        "y": 499.1357543760336,
        "zoom": 0.27266878058916794
      }
    },
    "date_created": "2024-07-10T21:33:19.480Z",
    "date_updated": "2024-07-10T21:33:19.557Z",
    "status": "Public",
    "sort": null,
    "user_updated": "ff1e4ad9-5617-460d-9ddb-1b9d874698d0",
    "user_created": {
      "username": "erandror",
      "first_name": "Eran",
      "last_name": "Dror",
      "id": "ff1e4ad9-5617-460d-9ddb-1b9d874698d0"
    },
    "tags": []
  },
  "conversion": {
    "converted_at": "2025-08-19T18:09:05.812Z",
    "converted_from": "langflow",
    "converted_to": "axiestudio",
    "conversions_made": 90,
    "converter_version": "1.0.0"
  }
}