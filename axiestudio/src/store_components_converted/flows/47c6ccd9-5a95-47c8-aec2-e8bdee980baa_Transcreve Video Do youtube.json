{
  "id": "47c6ccd9-5a95-47c8-aec2-e8bdee980baa",
  "name": "Transcreve Video Do youtube",
  "description": "Driving Innovation in Business Communication. (Converted from Langflow Store for AxieStudio compatibility)",
  "type": "FLOW",
  "is_component": false,
  "author": {
    "username": "teste1234321",
    "first_name": "Alexandre Baroni",
    "last_name": "Baroni",
    "id": "6c18a623-937c-4e5a-979c-4660e98c238f",
    "full_name": "Alexandre Baroni Baroni"
  },
  "store_url": "https://www.langflow.store/store/component/47c6ccd9-5a95-47c8-aec2-e8bdee980baa",
  "stats": {
    "downloads": 0,
    "likes": 0
  },
  "dates": {
    "created": "2024-09-11T16:28:28.728Z",
    "updated": "2024-09-11T16:28:28.781Z",
    "downloaded": "2025-08-19T17:50:06.934Z"
  },
  "tags": [],
  "technical": {
    "last_tested_version": "1.0.17",
    "private": false,
    "status": "Public"
  },
  "data": {
    "nodes": [
      {
        "id": "ChatInput-KG0hZ",
        "type": "genericNode",
        "position": {
          "x": -861.498127726757,
          "y": 385.27883678116
        },
        "data": {
          "type": "ChatInput",
          "node": {
            "template": {
              "_type": "Component",
              "files": {
                "trace_as_metadata": true,
                "file_path": "",
                "fileTypes": [
                  "txt",
                  "md",
                  "mdx",
                  "csv",
                  "json",
                  "yaml",
                  "yml",
                  "xml",
                  "html",
                  "htm",
                  "pdf",
                  "docx",
                  "py",
                  "sh",
                  "sql",
                  "js",
                  "ts",
                  "tsx",
                  "jpg",
                  "jpeg",
                  "png",
                  "bmp",
                  "image"
                ],
                "list": true,
                "required": false,
                "placeholder": "",
                "show": true,
                "name": "files",
                "value": "",
                "display_name": "Files",
                "advanced": true,
                "dynamic": false,
                "info": "Files to be sent with the message.",
                "title_case": false,
                "type": "file",
                "_input_type": "FileInput"
              },
              "code": {
                "type": "code",
                "required": true,
                "placeholder": "",
                "list": false,
                "show": true,
                "multiline": true,
                "value": "from axiestudio.base.data.utils import IMG_FILE_TYPES, TEXT_FILE_TYPES\nfrom axiestudio.base.io.chat import ChatComponent\nfrom axiestudio.inputs import BoolInput\nfrom axiestudio.io import DropdownInput, FileInput, MessageTextInput, MultilineInput, Output\nfrom axiestudio.memory import store_message\nfrom axiestudio.schema.message import Message\nfrom axiestudio.utils.constants import MESSAGE_SENDER_AI, MESSAGE_SENDER_USER, MESSAGE_SENDER_NAME_USER\n\n\nclass ChatInput(ChatComponent):\n    display_name = \"Chat Input\"\n    description = \"Get chat inputs from the Playground.\"\n    icon = \"ChatInput\"\n    name = \"ChatInput\"\n\n    inputs = [\n        MultilineInput(\n            name=\"input_value\",\n            display_name=\"Text\",\n            value=\"\",\n            info=\"Message to be passed as input.\",\n        ),\n        BoolInput(\n            name=\"should_store_message\",\n            display_name=\"Store Messages\",\n            info=\"Store the message in the history.\",\n            value=True,\n            advanced=True,\n        ),\n        DropdownInput(\n            name=\"sender\",\n            display_name=\"Sender Type\",\n            options=[MESSAGE_SENDER_AI, MESSAGE_SENDER_USER],\n            value=MESSAGE_SENDER_USER,\n            info=\"Type of sender.\",\n            advanced=True,\n        ),\n        MessageTextInput(\n            name=\"sender_name\",\n            display_name=\"Sender Name\",\n            info=\"Name of the sender.\",\n            value=MESSAGE_SENDER_NAME_USER,\n            advanced=True,\n        ),\n        MessageTextInput(\n            name=\"session_id\",\n            display_name=\"Session ID\",\n            info=\"The session ID of the chat. If empty, the current session ID parameter will be used.\",\n            advanced=True,\n        ),\n        FileInput(\n            name=\"files\",\n            display_name=\"Files\",\n            file_types=TEXT_FILE_TYPES + IMG_FILE_TYPES,\n            info=\"Files to be sent with the message.\",\n            advanced=True,\n            is_list=True,\n        ),\n    ]\n    outputs = [\n        Output(display_name=\"Message\", name=\"message\", method=\"message_response\"),\n    ]\n\n    def message_response(self) -> Message:\n        message = Message(\n            text=self.input_value,\n            sender=self.sender,\n            sender_name=self.sender_name,\n            session_id=self.session_id,\n            files=self.files,\n        )\n\n        if (\n            self.session_id\n            and isinstance(message, Message)\n            and isinstance(message.text, str)\n            and self.should_store_message\n        ):\n            store_message(\n                message,\n                flow_id=self.graph.flow_id,\n            )\n            self.message.value = message\n\n        self.status = message\n        return message\n",
                "fileTypes": [],
                "file_path": "",
                "password": false,
                "name": "code",
                "advanced": true,
                "dynamic": true,
                "info": "",
                "load_from_db": false,
                "title_case": false
              },
              "input_value": {
                "trace_as_input": true,
                "multiline": true,
                "trace_as_metadata": true,
                "load_from_db": false,
                "list": false,
                "required": false,
                "placeholder": "",
                "show": true,
                "name": "input_value",
                "value": "https://www.youtube.com/watch?v=pXz68mA_9iQ",
                "display_name": "Text",
                "advanced": false,
                "input_types": [
                  "Message"
                ],
                "dynamic": false,
                "info": "Message to be passed as input.",
                "title_case": false,
                "type": "str",
                "_input_type": "MultilineInput"
              },
              "sender": {
                "trace_as_metadata": true,
                "options": [
                  "Machine",
                  "User"
                ],
                "combobox": false,
                "required": false,
                "placeholder": "",
                "show": true,
                "name": "sender",
                "value": "User",
                "display_name": "Sender Type",
                "advanced": true,
                "dynamic": false,
                "info": "Type of sender.",
                "title_case": false,
                "type": "str",
                "_input_type": "DropdownInput"
              },
              "sender_name": {
                "trace_as_input": true,
                "trace_as_metadata": true,
                "load_from_db": false,
                "list": false,
                "required": false,
                "placeholder": "",
                "show": true,
                "name": "sender_name",
                "value": "User",
                "display_name": "Sender Name",
                "advanced": true,
                "input_types": [
                  "Message"
                ],
                "dynamic": false,
                "info": "Name of the sender.",
                "title_case": false,
                "type": "str",
                "_input_type": "MessageTextInput"
              },
              "session_id": {
                "trace_as_input": true,
                "trace_as_metadata": true,
                "load_from_db": false,
                "list": false,
                "required": false,
                "placeholder": "",
                "show": true,
                "name": "session_id",
                "value": "",
                "display_name": "Session ID",
                "advanced": true,
                "input_types": [
                  "Message"
                ],
                "dynamic": false,
                "info": "The session ID of the chat. If empty, the current session ID parameter will be used.",
                "title_case": false,
                "type": "str",
                "_input_type": "MessageTextInput"
              },
              "should_store_message": {
                "trace_as_metadata": true,
                "list": false,
                "required": false,
                "placeholder": "",
                "show": true,
                "name": "should_store_message",
                "value": true,
                "display_name": "Store Messages",
                "advanced": true,
                "dynamic": false,
                "info": "Store the message in the history.",
                "title_case": false,
                "type": "bool",
                "_input_type": "BoolInput"
              }
            },
            "description": "Get chat inputs from the Playground.",
            "icon": "ChatInput",
            "base_classes": [
              "Message"
            ],
            "display_name": "Chat Input",
            "documentation": "",
            "custom_fields": {},
            "output_types": [],
            "pinned": false,
            "conditional_paths": [],
            "frozen": false,
            "outputs": [
              {
                "types": [
                  "Message"
                ],
                "selected": "Message",
                "name": "message",
                "display_name": "Message",
                "method": "message_response",
                "value": "__UNDEFINED__",
                "cache": true
              }
            ],
            "field_order": [
              "input_value",
              "should_store_message",
              "sender",
              "sender_name",
              "session_id",
              "files"
            ],
            "beta": false,
            "edited": false,
            "lf_version": "1.0.17"
          },
          "id": "ChatInput-KG0hZ"
        },
        "selected": false,
        "width": 384,
        "height": 298,
        "positionAbsolute": {
          "x": -861.498127726757,
          "y": 385.27883678116
        },
        "dragging": false
      },
      {
        "id": "WhisperTranscriptionComponent-1uVoa",
        "type": "genericNode",
        "position": {
          "x": 966.2568856241794,
          "y": 355.4632309893873
        },
        "data": {
          "type": "WhisperTranscriptionComponent",
          "node": {
            "template": {
              "_type": "Component",
              "audio_file_path": {
                "trace_as_input": true,
                "trace_as_metadata": true,
                "load_from_db": false,
                "list": false,
                "required": false,
                "placeholder": "",
                "show": true,
                "name": "audio_file_path",
                "value": "",
                "display_name": "Audio File Path",
                "advanced": false,
                "input_types": [
                  "Message"
                ],
                "dynamic": false,
                "info": "",
                "title_case": false,
                "type": "str",
                "_input_type": "MessageTextInput"
              },
              "code": {
                "type": "code",
                "required": true,
                "placeholder": "",
                "list": false,
                "show": true,
                "multiline": true,
                "value": "from axiestudio.custom import Component\r\nfrom axiestudio.io import DropdownInput, MessageTextInput, Output\r\nfrom axiestudio.schema import Data\r\nfrom axiestudio.schema.message import Message\r\nimport whisper\r\nimport os\r\n\r\nclass WhisperTranscriptionComponent(Component):\r\n    display_name = \"Whisper Audio Transcription\"\r\n    description = \"Transcribes an audio file using Whisper and saves the transcription to a subtitle file in SRT format.\"\r\n    documentation: str = \"https://openai.com/research/whisper\"\r\n    icon = \"custom_components\"\r\n    name = \"WhisperTranscriptionComponent\"\r\n\r\n    inputs = [\r\n        MessageTextInput(name=\"audio_file_path\", display_name=\"Audio File Path\", value=\"path/to/audio/file.wav\"),\r\n        MessageTextInput(name=\"srt_file_path\", display_name=\"SRT File Path (optional)\", value=\"transcription.srt\"),\r\n        DropdownInput(\r\n            name=\"model\",\r\n            display_name=\"Whisper Model\",\r\n            info=\"Select the Whisper model to use for transcription.\",\r\n            options=[\"base\", \"small\", \"medium\", \"large\"],  # Modelos disponíveis\r\n            value=\"base\",  # Valor padrão\r\n        ),\r\n    ]\r\n\r\n    outputs = [\r\n        Output(display_name=\"Transcription Output\", name=\"transcription\", method=\"transcription_message\"),\r\n        Output(display_name=\"Transcription Text\", name=\"transcription_text\", method=\"transcription_text_message\"),\r\n    ]\r\n\r\n    def transcribe_audio(self) -> str:\r\n        # Obter o caminho do arquivo de áudio diretamente\r\n        audio_file_path = self.audio_file_path\r\n        srt_file_path = self.srt_file_path\r\n        model_name = self.model  # Obter o modelo selecionado\r\n\r\n        # Usa o nome padrão se o caminho do arquivo de legendas não for fornecido\r\n        if not srt_file_path:\r\n            srt_file_path = \"transcription.srt\"\r\n\r\n        # Verifica se o arquivo de áudio existe\r\n        if not os.path.isfile(audio_file_path):\r\n            error_message = f\"Audio file not found: {audio_file_path}\"\r\n            self.status = error_message\r\n            return error_message\r\n\r\n        # Carrega o modelo Whisper com base na seleção do usuário\r\n        model = whisper.load_model(model_name)\r\n\r\n        # Transcreve o áudio\r\n        result = model.transcribe(audio_file_path, verbose=False)\r\n        self.transcription_text = \"\"  # Inicializa o atributo de texto da transcrição\r\n\r\n        # Salva a transcrição em um arquivo SRT e acumula o texto da transcrição\r\n        try:\r\n            with open(srt_file_path, \"w\") as srt_file:\r\n                for idx, segment in enumerate(result[\"segments\"], start=1):\r\n                    start_time = segment[\"start\"]\r\n                    end_time = segment[\"end\"]\r\n                    text = segment[\"text\"]\r\n\r\n                    # Formata os tempos no estilo SRT\r\n                    start_time_str = self.format_time(start_time)\r\n                    end_time_str = self.format_time(end_time)\r\n\r\n                    # Acumula o conteúdo completo no formato SRT em uma string\r\n                    self.transcription_text += f\"{idx}\\n{start_time_str} --> {end_time_str}\\n{text}\\n\\n\"\r\n\r\n                    # Escreve no arquivo SRT\r\n                    srt_file.write(f\"{idx}\\n\")\r\n                    srt_file.write(f\"{start_time_str} --> {end_time_str}\\n\")\r\n                    srt_file.write(f\"{text}\\n\\n\")\r\n\r\n            # Retorna o caminho do arquivo SRT\r\n            return srt_file_path\r\n\r\n        except Exception as e:\r\n            error_message = f\"Error saving transcription: {e}\"\r\n            self.status = error_message\r\n            return error_message\r\n\r\n    def transcription_message(self) -> Message:\r\n        # Cria uma mensagem com o caminho do arquivo SRT\r\n        srt_file_path = self.transcribe_audio()  # Obtém o caminho do arquivo SRT ou mensagem de erro\r\n        message = Message(\r\n            text=srt_file_path,\r\n            sender=\"WhisperTranscriptionComponent\",\r\n            sender_name=\"Whisper Transcription\",\r\n        )\r\n        return message\r\n\r\n    def transcription_text_message(self) -> Message:\r\n        # Cria uma mensagem com o texto da transcrição\r\n        if hasattr(self, 'transcription_text') and self.transcription_text:\r\n            message = Message(\r\n                text=self.transcription_text.strip(),\r\n                sender=\"WhisperTranscriptionComponent\",\r\n                sender_name=\"Whisper Transcription\",\r\n            )\r\n            return message\r\n        else:\r\n            return Message(\r\n                text=\"No transcription available.\",\r\n                sender=\"WhisperTranscriptionComponent\",\r\n                sender_name=\"Whisper Transcription\",\r\n            )\r\n\r\n    def format_time(self, seconds: float) -> str:\r\n        hours = int(seconds // 3600)\r\n        minutes = int((seconds % 3600) // 60)\r\n        seconds = int(seconds % 60)\r\n        milliseconds = int((seconds - int(seconds)) * 1000)\r\n        return f\"{hours:02}:{minutes:02}:{seconds:02},{milliseconds:03}\"",
                "fileTypes": [],
                "file_path": "",
                "password": false,
                "name": "code",
                "advanced": true,
                "dynamic": true,
                "info": "",
                "load_from_db": false,
                "title_case": false
              },
              "model": {
                "trace_as_metadata": true,
                "options": [
                  "base",
                  "small",
                  "medium",
                  "large"
                ],
                "combobox": false,
                "required": false,
                "placeholder": "",
                "show": true,
                "name": "model",
                "value": "medium",
                "display_name": "Whisper Model",
                "advanced": false,
                "dynamic": false,
                "info": "Select the Whisper model to use for transcription.",
                "title_case": false,
                "type": "str",
                "_input_type": "DropdownInput"
              },
              "srt_file_path": {
                "trace_as_input": true,
                "trace_as_metadata": true,
                "load_from_db": false,
                "list": false,
                "required": false,
                "placeholder": "",
                "show": true,
                "name": "srt_file_path",
                "value": "transcription.srt",
                "display_name": "SRT File Path (optional)",
                "advanced": false,
                "input_types": [
                  "Message"
                ],
                "dynamic": false,
                "info": "",
                "title_case": false,
                "type": "str",
                "_input_type": "MessageTextInput"
              }
            },
            "description": "Transcribes an audio file using Whisper and saves the transcription to a subtitle file in SRT format.",
            "icon": "custom_components",
            "base_classes": [
              "Message"
            ],
            "display_name": "Transcreve_Audio2",
            "documentation": "https://openai.com/research/whisper",
            "custom_fields": {},
            "output_types": [],
            "pinned": false,
            "conditional_paths": [],
            "frozen": false,
            "outputs": [
              {
                "types": [
                  "Message"
                ],
                "selected": "Message",
                "name": "transcription",
                "display_name": "Transcription Output",
                "method": "transcription_message",
                "value": "__UNDEFINED__",
                "cache": true
              },
              {
                "types": [
                  "Message"
                ],
                "selected": "Message",
                "name": "transcription_text",
                "display_name": "Transcription Text",
                "method": "transcription_text_message",
                "value": "__UNDEFINED__",
                "cache": true
              }
            ],
            "field_order": [
              "audio_file_path",
              "srt_file_path",
              "model"
            ],
            "beta": false,
            "edited": true,
            "lf_version": "1.0.17"
          },
          "id": "WhisperTranscriptionComponent-1uVoa"
        },
        "selected": true,
        "width": 384,
        "height": 573,
        "positionAbsolute": {
          "x": 966.2568856241794,
          "y": 355.4632309893873
        },
        "dragging": false
      },
      {
        "id": "YouTubeAudioExtractor-ezhzA",
        "type": "genericNode",
        "position": {
          "x": -100.08486655040906,
          "y": 423.2544466948736
        },
        "data": {
          "type": "YouTubeAudioExtractor",
          "node": {
            "template": {
              "_type": "Component",
              "code": {
                "type": "code",
                "required": true,
                "placeholder": "",
                "list": false,
                "show": true,
                "multiline": true,
                "value": "from axiestudio.custom import Component\r\nfrom axiestudio.inputs import MessageTextInput\r\nfrom axiestudio.template import Output\r\nfrom axiestudio.schema.message import Message\r\nimport yt_dlp as youtube_dl\r\nimport os\r\n\r\nclass YouTubeAudioExtractor(Component):\r\n    display_name = \"YouTube Audio Extractor\"\r\n    description = \"Extracts audio from a YouTube video and provides the path to the WAV audio file.\"\r\n    icon = \"youtube\"\r\n\r\n    inputs = [\r\n        MessageTextInput(\r\n            name=\"youtube_link\",\r\n            display_name=\"YouTube Link\",\r\n            value=\"https://www.youtube.com/watch?v=dQw4w9WgXcQ\",\r\n            info=\"Link to the YouTube video from which to extract audio.\",\r\n        ),\r\n        MessageTextInput(\r\n            name=\"ffmpeg_path\",\r\n            display_name=\"FFmpeg Path\",\r\n            value=\"C:\\\\ffmpeg\\\\bin\",\r\n            info=\"Path to the directory where FFmpeg is installed.\",\r\n        ),\r\n    ]\r\n\r\n    outputs = [\r\n        Output(display_name=\"Audio File Path\", name=\"audio_file_path\", method=\"extract_audio\"),\r\n    ]\r\n\r\n    def extract_audio(self) -> Message:\r\n        youtube_link = self.youtube_link\r\n        ffmpeg_path = self.ffmpeg_path\r\n\r\n        if not youtube_link:\r\n            error_message = \"YouTube link is required\"\r\n            self.status = error_message\r\n            return Message(text=error_message)\r\n\r\n        if not ffmpeg_path:\r\n            error_message = \"FFmpeg path is required\"\r\n            self.status = error_message\r\n            return Message(text=error_message)\r\n\r\n        # Define the base name for the output audio file\r\n        base_audio_file_path = \"extracted_audio.wav\"\r\n        audio_file_path = base_audio_file_path\r\n\r\n        # Increment the filename if it already exists\r\n        counter = 1\r\n        while os.path.exists(audio_file_path):\r\n            audio_file_path = f\"extracted_audio_{counter}.wav\"\r\n            counter += 1\r\n\r\n        # Define the options for yt-dlp to download and convert to WAV\r\n        ydl_opts = {\r\n            'format': 'bestaudio/best',\r\n            'outtmpl': 'temp_audio.%(ext)s',  # Save the downloaded file as temp_audio with extension\r\n            'postprocessors': [{\r\n                'key': 'FFmpegExtractAudio',\r\n                'preferredcodec': 'wav',  # Use WAV instead of MP3\r\n            }],\r\n            'ffmpeg_location': ffmpeg_path,  # Specify the path to FFmpeg\r\n        }\r\n\r\n        try:\r\n            # Download the audio from the YouTube video\r\n            with youtube_dl.YoutubeDL(ydl_opts) as ydl:\r\n                ydl.download([youtube_link])\r\n\r\n            # Rename the downloaded file to the desired output path\r\n            temp_file_path = 'temp_audio.wav'\r\n            if os.path.exists(temp_file_path):\r\n                os.rename(temp_file_path, audio_file_path)\r\n            else:\r\n                raise FileNotFoundError(f\"{temp_file_path} was not found after download.\")\r\n\r\n            # Return the path of the extracted audio file as a string\r\n            message = Message(text=audio_file_path)  # Pass the audio file path as a simple string\r\n            self.status = audio_file_path\r\n            return message\r\n\r\n        except Exception as e:\r\n            error_message = f\"Error extracting audio: {e}\"\r\n            self.status = error_message\r\n            return Message(text=error_message)\r\n\r\n# Exemplo de instância e processamento\r\nif __name__ == \"__main__\":\r\n    component = YouTubeAudioExtractor()\r\n    # Defina o link do vídeo do YouTube e o caminho para o FFmpeg\r\n    component.youtube_link = \"https://www.youtube.com/watch?v=dQw4w9WgXcQ\"\r\n    component.ffmpeg_path = \"C:\\\\ffmpeg\\\\bin\"\r\n    output = component.extract_audio()\r\n    print(output.text)  # Exibe o caminho do arquivo de áudio extraído\r\n",
                "fileTypes": [],
                "file_path": "",
                "password": false,
                "name": "code",
                "advanced": true,
                "dynamic": true,
                "info": "",
                "load_from_db": false,
                "title_case": false
              },
              "ffmpeg_path": {
                "trace_as_input": true,
                "trace_as_metadata": true,
                "load_from_db": false,
                "list": false,
                "required": false,
                "placeholder": "",
                "show": true,
                "name": "ffmpeg_path",
                "value": "C:\\ffmpeg\\ffmpeg\\bin",
                "display_name": "FFmpeg Path",
                "advanced": false,
                "input_types": [
                  "Message"
                ],
                "dynamic": false,
                "info": "Path to the directory where FFmpeg is installed.",
                "title_case": false,
                "type": "str",
                "_input_type": "MessageTextInput"
              },
              "youtube_link": {
                "trace_as_input": true,
                "trace_as_metadata": true,
                "load_from_db": false,
                "list": false,
                "required": false,
                "placeholder": "",
                "show": true,
                "name": "youtube_link",
                "value": "",
                "display_name": "YouTube Link",
                "advanced": false,
                "input_types": [
                  "Message"
                ],
                "dynamic": false,
                "info": "Link to the YouTube video from which to extract audio.",
                "title_case": false,
                "type": "str",
                "_input_type": "MessageTextInput"
              }
            },
            "description": "ARQUIVO OFICIAL DE EXTRAÇÃO DE SOM DO YOUTUBE.",
            "icon": "youtube",
            "base_classes": [
              "Message"
            ],
            "display_name": "Extrai_Audio_Youtube (1)",
            "documentation": "",
            "custom_fields": {},
            "output_types": [],
            "pinned": false,
            "conditional_paths": [],
            "frozen": false,
            "outputs": [
              {
                "types": [
                  "Message"
                ],
                "selected": "Message",
                "name": "audio_file_path",
                "display_name": "Audio File Path",
                "method": "extract_audio",
                "value": "__UNDEFINED__",
                "cache": true
              }
            ],
            "field_order": [
              "youtube_link",
              "ffmpeg_path"
            ],
            "beta": false,
            "edited": true,
            "lf_version": "1.0.17",
            "official": false
          },
          "id": "YouTubeAudioExtractor-ezhzA"
        },
        "selected": false,
        "width": 384,
        "height": 412,
        "positionAbsolute": {
          "x": -100.08486655040906,
          "y": 423.2544466948736
        },
        "dragging": false
      },
      {
        "id": "ParseData-Hx3MY",
        "type": "genericNode",
        "position": {
          "x": 426.90107880103744,
          "y": 768.8403842019821
        },
        "data": {
          "type": "ParseData",
          "node": {
            "template": {
              "_type": "Component",
              "data": {
                "trace_as_metadata": true,
                "list": false,
                "trace_as_input": true,
                "required": false,
                "placeholder": "",
                "show": true,
                "name": "data",
                "value": "",
                "display_name": "Data",
                "advanced": false,
                "input_types": [
                  "Data"
                ],
                "dynamic": false,
                "info": "The data to convert to text.",
                "title_case": false,
                "type": "other",
                "_input_type": "DataInput"
              },
              "code": {
                "type": "code",
                "required": true,
                "placeholder": "",
                "list": false,
                "show": true,
                "multiline": true,
                "value": "from axiestudio.custom import Component\nfrom axiestudio.helpers.data import data_to_text\nfrom axiestudio.io import DataInput, MultilineInput, Output, StrInput\nfrom axiestudio.schema.message import Message\n\n\nclass ParseDataComponent(Component):\n    display_name = \"Parse Data\"\n    description = \"Convert Data into plain text following a specified template.\"\n    icon = \"braces\"\n    name = \"ParseData\"\n\n    inputs = [\n        DataInput(name=\"data\", display_name=\"Data\", info=\"The data to convert to text.\"),\n        MultilineInput(\n            name=\"template\",\n            display_name=\"Template\",\n            info=\"The template to use for formatting the data. It can contain the keys {text}, {data} or any other key in the Data.\",\n            value=\"{text}\",\n        ),\n        StrInput(name=\"sep\", display_name=\"Separator\", advanced=True, value=\"\\n\"),\n    ]\n\n    outputs = [\n        Output(display_name=\"Text\", name=\"text\", method=\"parse_data\"),\n    ]\n\n    def parse_data(self) -> Message:\n        data = self.data if isinstance(self.data, list) else [self.data]\n        template = self.template\n\n        result_string = data_to_text(template, data, sep=self.sep)\n        self.status = result_string\n        return Message(text=result_string)\n",
                "fileTypes": [],
                "file_path": "",
                "password": false,
                "name": "code",
                "advanced": true,
                "dynamic": true,
                "info": "",
                "load_from_db": false,
                "title_case": false
              },
              "sep": {
                "trace_as_metadata": true,
                "load_from_db": false,
                "list": false,
                "required": false,
                "placeholder": "",
                "show": true,
                "name": "sep",
                "value": "\n",
                "display_name": "Separator",
                "advanced": true,
                "dynamic": false,
                "info": "",
                "title_case": false,
                "type": "str",
                "_input_type": "StrInput"
              },
              "template": {
                "trace_as_input": true,
                "multiline": true,
                "trace_as_metadata": true,
                "load_from_db": false,
                "list": false,
                "required": false,
                "placeholder": "",
                "show": true,
                "name": "template",
                "value": "",
                "display_name": "Template",
                "advanced": false,
                "input_types": [
                  "Message"
                ],
                "dynamic": false,
                "info": "The template to use for formatting the data. It can contain the keys {text}, {data} or any other key in the Data.",
                "title_case": false,
                "type": "str",
                "_input_type": "MultilineInput"
              }
            },
            "description": "Converta dados em texto simples seguindo um modelo especificado.",
            "icon": "braces",
            "base_classes": [
              "Message"
            ],
            "display_name": "Converte.dataparse",
            "documentation": "",
            "custom_fields": {},
            "output_types": [],
            "pinned": false,
            "conditional_paths": [],
            "frozen": false,
            "outputs": [
              {
                "types": [
                  "Message"
                ],
                "selected": "Message",
                "name": "text",
                "display_name": "Text",
                "method": "parse_data",
                "value": "__UNDEFINED__",
                "cache": true
              }
            ],
            "field_order": [
              "data",
              "template",
              "sep"
            ],
            "beta": false,
            "edited": false,
            "lf_version": "1.0.17",
            "official": false
          },
          "id": "ParseData-Hx3MY"
        },
        "selected": false,
        "width": 384,
        "height": 374,
        "positionAbsolute": {
          "x": 426.90107880103744,
          "y": 768.8403842019821
        },
        "dragging": false
      },
      {
        "id": "FileContentReaderComponent-H3S2x",
        "type": "genericNode",
        "position": {
          "x": 1613.7775680025816,
          "y": 445.45167717783244
        },
        "data": {
          "type": "FileContentReaderComponent",
          "node": {
            "template": {
              "_type": "Component",
              "code": {
                "type": "code",
                "required": true,
                "placeholder": "",
                "list": false,
                "show": true,
                "multiline": true,
                "value": "from axiestudio.custom import Component\r\nfrom axiestudio.io import MessageTextInput, Output\r\nfrom axiestudio.schema import Data\r\nfrom axiestudio.schema.message import Message\r\nimport os\r\n\r\nclass FileContentReaderComponent(Component):\r\n    display_name = \"File Content Reader\"\r\n    description = \"Reads the content of a specified file and returns it.\"\r\n    documentation: str = \"https://example.com/file-content-reader-doc\"\r\n    icon = \"file_content_reader_icon\"\r\n    name = \"FileContentReaderComponent\"\r\n\r\n    inputs = [\r\n        MessageTextInput(name=\"file_directory\", display_name=\"File Directory\", value=\"path/to/file.txt\"),\r\n    ]\r\n\r\n    outputs = [\r\n        Output(display_name=\"File Content\", name=\"file_content\", method=\"read_file_content\"),\r\n    ]\r\n\r\n    def read_file_content(self) -> Message:\r\n        # Obter o caminho do arquivo diretamente\r\n        file_directory = self.file_directory\r\n\r\n        # Verifica se o arquivo existe\r\n        if not os.path.isfile(file_directory):\r\n            error_message = f\"File not found: {file_directory}\"\r\n            self.status = error_message\r\n            return Message(text=error_message)\r\n\r\n        # Lê o conteúdo do arquivo\r\n        try:\r\n            with open(file_directory, \"r\", encoding=\"utf-8\") as file:\r\n                file_content = file.read()\r\n\r\n            # Retorna o conteúdo do arquivo\r\n            return Message(text=file_content)\r\n\r\n        except Exception as e:\r\n            error_message = f\"Error reading file: {e}\"\r\n            self.status = error_message\r\n            return Message(text=error_message)\r\n",
                "fileTypes": [],
                "file_path": "",
                "password": false,
                "name": "code",
                "advanced": true,
                "dynamic": true,
                "info": "",
                "load_from_db": false,
                "title_case": false
              },
              "file_directory": {
                "trace_as_input": true,
                "trace_as_metadata": true,
                "load_from_db": false,
                "list": false,
                "required": false,
                "placeholder": "",
                "show": true,
                "name": "file_directory",
                "value": "",
                "display_name": "File Directory",
                "advanced": false,
                "input_types": [
                  "Message"
                ],
                "dynamic": false,
                "info": "",
                "title_case": false,
                "type": "str",
                "_input_type": "MessageTextInput"
              }
            },
            "description": "Este componente vai ler o arquivo de texto e vai passar como texto",
            "icon": "file_content_reader_icon",
            "base_classes": [
              "Message"
            ],
            "display_name": "Le arquivo texto",
            "documentation": "https://example.com/file-content-reader-doc",
            "custom_fields": {},
            "output_types": [],
            "pinned": false,
            "conditional_paths": [],
            "frozen": false,
            "outputs": [
              {
                "types": [
                  "Message"
                ],
                "selected": "Message",
                "name": "file_content",
                "display_name": "File Content",
                "method": "read_file_content",
                "value": "__UNDEFINED__",
                "cache": true
              }
            ],
            "field_order": [
              "file_directory"
            ],
            "beta": false,
            "edited": true,
            "lf_version": "1.0.17",
            "official": false
          },
          "id": "FileContentReaderComponent-H3S2x"
        },
        "selected": false,
        "width": 384,
        "height": 326,
        "positionAbsolute": {
          "x": 1613.7775680025816,
          "y": 445.45167717783244
        },
        "dragging": false
      },
      {
        "id": "ChatOutput-dHEHu",
        "type": "genericNode",
        "position": {
          "x": 2184.0019534073904,
          "y": 479.46954504527014
        },
        "data": {
          "type": "ChatOutput",
          "node": {
            "template": {
              "_type": "Component",
              "code": {
                "type": "code",
                "required": true,
                "placeholder": "",
                "list": false,
                "show": true,
                "multiline": true,
                "value": "from axiestudio.base.io.chat import ChatComponent\nfrom axiestudio.inputs import BoolInput\nfrom axiestudio.io import DropdownInput, MessageTextInput, Output\nfrom axiestudio.memory import store_message\nfrom axiestudio.schema.message import Message\nfrom axiestudio.utils.constants import MESSAGE_SENDER_NAME_AI, MESSAGE_SENDER_USER, MESSAGE_SENDER_AI\n\n\nclass ChatOutput(ChatComponent):\n    display_name = \"Chat Output\"\n    description = \"Display a chat message in the Playground.\"\n    icon = \"ChatOutput\"\n    name = \"ChatOutput\"\n\n    inputs = [\n        MessageTextInput(\n            name=\"input_value\",\n            display_name=\"Text\",\n            info=\"Message to be passed as output.\",\n        ),\n        BoolInput(\n            name=\"should_store_message\",\n            display_name=\"Store Messages\",\n            info=\"Store the message in the history.\",\n            value=True,\n            advanced=True,\n        ),\n        DropdownInput(\n            name=\"sender\",\n            display_name=\"Sender Type\",\n            options=[MESSAGE_SENDER_AI, MESSAGE_SENDER_USER],\n            value=MESSAGE_SENDER_AI,\n            advanced=True,\n            info=\"Type of sender.\",\n        ),\n        MessageTextInput(\n            name=\"sender_name\",\n            display_name=\"Sender Name\",\n            info=\"Name of the sender.\",\n            value=MESSAGE_SENDER_NAME_AI,\n            advanced=True,\n        ),\n        MessageTextInput(\n            name=\"session_id\",\n            display_name=\"Session ID\",\n            info=\"The session ID of the chat. If empty, the current session ID parameter will be used.\",\n            advanced=True,\n        ),\n        MessageTextInput(\n            name=\"data_template\",\n            display_name=\"Data Template\",\n            value=\"{text}\",\n            advanced=True,\n            info=\"Template to convert Data to Text. If left empty, it will be dynamically set to the Data's text key.\",\n        ),\n    ]\n    outputs = [\n        Output(display_name=\"Message\", name=\"message\", method=\"message_response\"),\n    ]\n\n    def message_response(self) -> Message:\n        message = Message(\n            text=self.input_value,\n            sender=self.sender,\n            sender_name=self.sender_name,\n            session_id=self.session_id,\n        )\n        if (\n            self.session_id\n            and isinstance(message, Message)\n            and isinstance(message.text, str)\n            and self.should_store_message\n        ):\n            store_message(\n                message,\n                flow_id=self.graph.flow_id,\n            )\n            self.message.value = message\n\n        self.status = message\n        return message\n",
                "fileTypes": [],
                "file_path": "",
                "password": false,
                "name": "code",
                "advanced": true,
                "dynamic": true,
                "info": "",
                "load_from_db": false,
                "title_case": false
              },
              "data_template": {
                "trace_as_input": true,
                "trace_as_metadata": true,
                "load_from_db": false,
                "list": false,
                "required": false,
                "placeholder": "",
                "show": true,
                "name": "data_template",
                "value": "{text}",
                "display_name": "Data Template",
                "advanced": true,
                "input_types": [
                  "Message"
                ],
                "dynamic": false,
                "info": "Template to convert Data to Text. If left empty, it will be dynamically set to the Data's text key.",
                "title_case": false,
                "type": "str",
                "_input_type": "MessageTextInput"
              },
              "input_value": {
                "trace_as_input": true,
                "trace_as_metadata": true,
                "load_from_db": false,
                "list": false,
                "required": false,
                "placeholder": "",
                "show": true,
                "name": "input_value",
                "value": "",
                "display_name": "Text",
                "advanced": false,
                "input_types": [
                  "Message"
                ],
                "dynamic": false,
                "info": "Message to be passed as output.",
                "title_case": false,
                "type": "str",
                "_input_type": "MessageTextInput"
              },
              "sender": {
                "trace_as_metadata": true,
                "options": [
                  "Machine",
                  "User"
                ],
                "combobox": false,
                "required": false,
                "placeholder": "",
                "show": true,
                "name": "sender",
                "value": "Machine",
                "display_name": "Sender Type",
                "advanced": true,
                "dynamic": false,
                "info": "Type of sender.",
                "title_case": false,
                "type": "str",
                "_input_type": "DropdownInput"
              },
              "sender_name": {
                "trace_as_input": true,
                "trace_as_metadata": true,
                "load_from_db": false,
                "list": false,
                "required": false,
                "placeholder": "",
                "show": true,
                "name": "sender_name",
                "value": "AI",
                "display_name": "Sender Name",
                "advanced": true,
                "input_types": [
                  "Message"
                ],
                "dynamic": false,
                "info": "Name of the sender.",
                "title_case": false,
                "type": "str",
                "_input_type": "MessageTextInput"
              },
              "session_id": {
                "trace_as_input": true,
                "trace_as_metadata": true,
                "load_from_db": false,
                "list": false,
                "required": false,
                "placeholder": "",
                "show": true,
                "name": "session_id",
                "value": "",
                "display_name": "Session ID",
                "advanced": true,
                "input_types": [
                  "Message"
                ],
                "dynamic": false,
                "info": "The session ID of the chat. If empty, the current session ID parameter will be used.",
                "title_case": false,
                "type": "str",
                "_input_type": "MessageTextInput"
              },
              "should_store_message": {
                "trace_as_metadata": true,
                "list": false,
                "required": false,
                "placeholder": "",
                "show": true,
                "name": "should_store_message",
                "value": true,
                "display_name": "Store Messages",
                "advanced": true,
                "dynamic": false,
                "info": "Store the message in the history.",
                "title_case": false,
                "type": "bool",
                "_input_type": "BoolInput"
              }
            },
            "description": "Display a chat message in the Playground.",
            "icon": "ChatOutput",
            "base_classes": [
              "Message"
            ],
            "display_name": "Chat Output",
            "documentation": "",
            "custom_fields": {},
            "output_types": [],
            "pinned": false,
            "conditional_paths": [],
            "frozen": false,
            "outputs": [
              {
                "types": [
                  "Message"
                ],
                "selected": "Message",
                "name": "message",
                "display_name": "Message",
                "method": "message_response",
                "value": "__UNDEFINED__",
                "cache": true
              }
            ],
            "field_order": [
              "input_value",
              "should_store_message",
              "sender",
              "sender_name",
              "session_id",
              "data_template"
            ],
            "beta": false,
            "edited": false,
            "lf_version": "1.0.17"
          },
          "id": "ChatOutput-dHEHu"
        },
        "selected": false,
        "width": 384,
        "height": 298,
        "positionAbsolute": {
          "x": 2184.0019534073904,
          "y": 479.46954504527014
        },
        "dragging": false
      }
    ],
    "edges": [
      {
        "source": "ChatInput-KG0hZ",
        "sourceHandle": "{œdataTypeœ:œChatInputœ,œidœ:œChatInput-KG0hZœ,œnameœ:œmessageœ,œoutput_typesœ:[œMessageœ]}",
        "target": "YouTubeAudioExtractor-ezhzA",
        "targetHandle": "{œfieldNameœ:œyoutube_linkœ,œidœ:œYouTubeAudioExtractor-ezhzAœ,œinputTypesœ:[œMessageœ],œtypeœ:œstrœ}",
        "data": {
          "targetHandle": {
            "fieldName": "youtube_link",
            "id": "YouTubeAudioExtractor-ezhzA",
            "inputTypes": [
              "Message"
            ],
            "type": "str"
          },
          "sourceHandle": {
            "dataType": "ChatInput",
            "id": "ChatInput-KG0hZ",
            "name": "message",
            "output_types": [
              "Message"
            ]
          }
        },
        "id": "reactflow__edge-ChatInput-KG0hZ{œdataTypeœ:œChatInputœ,œidœ:œChatInput-KG0hZœ,œnameœ:œmessageœ,œoutput_typesœ:[œMessageœ]}-YouTubeAudioExtractor-ezhzA{œfieldNameœ:œyoutube_linkœ,œidœ:œYouTubeAudioExtractor-ezhzAœ,œinputTypesœ:[œMessageœ],œtypeœ:œstrœ}",
        "className": ""
      },
      {
        "source": "YouTubeAudioExtractor-ezhzA",
        "sourceHandle": "{œdataTypeœ:œYouTubeAudioExtractorœ,œidœ:œYouTubeAudioExtractor-ezhzAœ,œnameœ:œaudio_file_pathœ,œoutput_typesœ:[œMessageœ]}",
        "target": "ParseData-Hx3MY",
        "targetHandle": "{œfieldNameœ:œtemplateœ,œidœ:œParseData-Hx3MYœ,œinputTypesœ:[œMessageœ],œtypeœ:œstrœ}",
        "data": {
          "targetHandle": {
            "fieldName": "template",
            "id": "ParseData-Hx3MY",
            "inputTypes": [
              "Message"
            ],
            "type": "str"
          },
          "sourceHandle": {
            "dataType": "YouTubeAudioExtractor",
            "id": "YouTubeAudioExtractor-ezhzA",
            "name": "audio_file_path",
            "output_types": [
              "Message"
            ]
          }
        },
        "id": "reactflow__edge-YouTubeAudioExtractor-ezhzA{œdataTypeœ:œYouTubeAudioExtractorœ,œidœ:œYouTubeAudioExtractor-ezhzAœ,œnameœ:œaudio_file_pathœ,œoutput_typesœ:[œMessageœ]}-ParseData-Hx3MY{œfieldNameœ:œtemplateœ,œidœ:œParseData-Hx3MYœ,œinputTypesœ:[œMessageœ],œtypeœ:œstrœ}",
        "className": ""
      },
      {
        "source": "ParseData-Hx3MY",
        "sourceHandle": "{œdataTypeœ:œParseDataœ,œidœ:œParseData-Hx3MYœ,œnameœ:œtextœ,œoutput_typesœ:[œMessageœ]}",
        "target": "WhisperTranscriptionComponent-1uVoa",
        "targetHandle": "{œfieldNameœ:œaudio_file_pathœ,œidœ:œWhisperTranscriptionComponent-1uVoaœ,œinputTypesœ:[œMessageœ],œtypeœ:œstrœ}",
        "data": {
          "targetHandle": {
            "fieldName": "audio_file_path",
            "id": "WhisperTranscriptionComponent-1uVoa",
            "inputTypes": [
              "Message"
            ],
            "type": "str"
          },
          "sourceHandle": {
            "dataType": "ParseData",
            "id": "ParseData-Hx3MY",
            "name": "text",
            "output_types": [
              "Message"
            ]
          }
        },
        "id": "reactflow__edge-ParseData-Hx3MY{œdataTypeœ:œParseDataœ,œidœ:œParseData-Hx3MYœ,œnameœ:œtextœ,œoutput_typesœ:[œMessageœ]}-WhisperTranscriptionComponent-1uVoa{œfieldNameœ:œaudio_file_pathœ,œidœ:œWhisperTranscriptionComponent-1uVoaœ,œinputTypesœ:[œMessageœ],œtypeœ:œstrœ}",
        "className": ""
      },
      {
        "source": "WhisperTranscriptionComponent-1uVoa",
        "sourceHandle": "{œdataTypeœ:œWhisperTranscriptionComponentœ,œidœ:œWhisperTranscriptionComponent-1uVoaœ,œnameœ:œtranscriptionœ,œoutput_typesœ:[œMessageœ]}",
        "target": "FileContentReaderComponent-H3S2x",
        "targetHandle": "{œfieldNameœ:œfile_directoryœ,œidœ:œFileContentReaderComponent-H3S2xœ,œinputTypesœ:[œMessageœ],œtypeœ:œstrœ}",
        "data": {
          "targetHandle": {
            "fieldName": "file_directory",
            "id": "FileContentReaderComponent-H3S2x",
            "inputTypes": [
              "Message"
            ],
            "type": "str"
          },
          "sourceHandle": {
            "dataType": "WhisperTranscriptionComponent",
            "id": "WhisperTranscriptionComponent-1uVoa",
            "name": "transcription",
            "output_types": [
              "Message"
            ]
          }
        },
        "id": "reactflow__edge-WhisperTranscriptionComponent-1uVoa{œdataTypeœ:œWhisperTranscriptionComponentœ,œidœ:œWhisperTranscriptionComponent-1uVoaœ,œnameœ:œtranscriptionœ,œoutput_typesœ:[œMessageœ]}-FileContentReaderComponent-H3S2x{œfieldNameœ:œfile_directoryœ,œidœ:œFileContentReaderComponent-H3S2xœ,œinputTypesœ:[œMessageœ],œtypeœ:œstrœ}",
        "className": ""
      },
      {
        "source": "FileContentReaderComponent-H3S2x",
        "sourceHandle": "{œdataTypeœ:œFileContentReaderComponentœ,œidœ:œFileContentReaderComponent-H3S2xœ,œnameœ:œfile_contentœ,œoutput_typesœ:[œMessageœ]}",
        "target": "ChatOutput-dHEHu",
        "targetHandle": "{œfieldNameœ:œinput_valueœ,œidœ:œChatOutput-dHEHuœ,œinputTypesœ:[œMessageœ],œtypeœ:œstrœ}",
        "data": {
          "targetHandle": {
            "fieldName": "input_value",
            "id": "ChatOutput-dHEHu",
            "inputTypes": [
              "Message"
            ],
            "type": "str"
          },
          "sourceHandle": {
            "dataType": "FileContentReaderComponent",
            "id": "FileContentReaderComponent-H3S2x",
            "name": "file_content",
            "output_types": [
              "Message"
            ]
          }
        },
        "id": "reactflow__edge-FileContentReaderComponent-H3S2x{œdataTypeœ:œFileContentReaderComponentœ,œidœ:œFileContentReaderComponent-H3S2xœ,œnameœ:œfile_contentœ,œoutput_typesœ:[œMessageœ]}-ChatOutput-dHEHu{œfieldNameœ:œinput_valueœ,œidœ:œChatOutput-dHEHuœ,œinputTypesœ:[œMessageœ],œtypeœ:œstrœ}",
        "className": ""
      }
    ],
    "viewport": {
      "x": 57.23122739456937,
      "y": 76.75365471940154,
      "zoom": 0.5000000211531738
    }
  },
  "metadata": {
    "ChatInput": {
      "count": 1
    },
    "WhisperTranscriptionComponent": {
      "count": 1
    },
    "YouTubeAudioExtractor": {
      "count": 1
    },
    "ParseData": {
      "count": 1
    },
    "FileContentReaderComponent": {
      "count": 1
    },
    "ChatOutput": {
      "count": 1
    },
    "total": 6
  },
  "original": {
    "id": "47c6ccd9-5a95-47c8-aec2-e8bdee980baa",
    "name": "Transcreve Video Do youtube",
    "description": "Driving Innovation in Business Communication.",
    "is_component": false,
    "liked_by_count": "1",
    "downloads_count": "23",
    "metadata": {
      "ChatInput": {
        "count": 1
      },
      "WhisperTranscriptionComponent": {
        "count": 1
      },
      "YouTubeAudioExtractor": {
        "count": 1
      },
      "ParseData": {
        "count": 1
      },
      "FileContentReaderComponent": {
        "count": 1
      },
      "ChatOutput": {
        "count": 1
      },
      "total": 6
    },
    "last_tested_version": "1.0.17",
    "private": false,
    "data": {
      "nodes": [
        {
          "id": "ChatInput-KG0hZ",
          "type": "genericNode",
          "position": {
            "x": -861.498127726757,
            "y": 385.27883678116
          },
          "data": {
            "type": "ChatInput",
            "node": {
              "template": {
                "_type": "Component",
                "files": {
                  "trace_as_metadata": true,
                  "file_path": "",
                  "fileTypes": [
                    "txt",
                    "md",
                    "mdx",
                    "csv",
                    "json",
                    "yaml",
                    "yml",
                    "xml",
                    "html",
                    "htm",
                    "pdf",
                    "docx",
                    "py",
                    "sh",
                    "sql",
                    "js",
                    "ts",
                    "tsx",
                    "jpg",
                    "jpeg",
                    "png",
                    "bmp",
                    "image"
                  ],
                  "list": true,
                  "required": false,
                  "placeholder": "",
                  "show": true,
                  "name": "files",
                  "value": "",
                  "display_name": "Files",
                  "advanced": true,
                  "dynamic": false,
                  "info": "Files to be sent with the message.",
                  "title_case": false,
                  "type": "file",
                  "_input_type": "FileInput"
                },
                "code": {
                  "type": "code",
                  "required": true,
                  "placeholder": "",
                  "list": false,
                  "show": true,
                  "multiline": true,
                  "value": "from axiestudio.base.data.utils import IMG_FILE_TYPES, TEXT_FILE_TYPES\nfrom axiestudio.base.io.chat import ChatComponent\nfrom axiestudio.inputs import BoolInput\nfrom axiestudio.io import DropdownInput, FileInput, MessageTextInput, MultilineInput, Output\nfrom axiestudio.memory import store_message\nfrom axiestudio.schema.message import Message\nfrom axiestudio.utils.constants import MESSAGE_SENDER_AI, MESSAGE_SENDER_USER, MESSAGE_SENDER_NAME_USER\n\n\nclass ChatInput(ChatComponent):\n    display_name = \"Chat Input\"\n    description = \"Get chat inputs from the Playground.\"\n    icon = \"ChatInput\"\n    name = \"ChatInput\"\n\n    inputs = [\n        MultilineInput(\n            name=\"input_value\",\n            display_name=\"Text\",\n            value=\"\",\n            info=\"Message to be passed as input.\",\n        ),\n        BoolInput(\n            name=\"should_store_message\",\n            display_name=\"Store Messages\",\n            info=\"Store the message in the history.\",\n            value=True,\n            advanced=True,\n        ),\n        DropdownInput(\n            name=\"sender\",\n            display_name=\"Sender Type\",\n            options=[MESSAGE_SENDER_AI, MESSAGE_SENDER_USER],\n            value=MESSAGE_SENDER_USER,\n            info=\"Type of sender.\",\n            advanced=True,\n        ),\n        MessageTextInput(\n            name=\"sender_name\",\n            display_name=\"Sender Name\",\n            info=\"Name of the sender.\",\n            value=MESSAGE_SENDER_NAME_USER,\n            advanced=True,\n        ),\n        MessageTextInput(\n            name=\"session_id\",\n            display_name=\"Session ID\",\n            info=\"The session ID of the chat. If empty, the current session ID parameter will be used.\",\n            advanced=True,\n        ),\n        FileInput(\n            name=\"files\",\n            display_name=\"Files\",\n            file_types=TEXT_FILE_TYPES + IMG_FILE_TYPES,\n            info=\"Files to be sent with the message.\",\n            advanced=True,\n            is_list=True,\n        ),\n    ]\n    outputs = [\n        Output(display_name=\"Message\", name=\"message\", method=\"message_response\"),\n    ]\n\n    def message_response(self) -> Message:\n        message = Message(\n            text=self.input_value,\n            sender=self.sender,\n            sender_name=self.sender_name,\n            session_id=self.session_id,\n            files=self.files,\n        )\n\n        if (\n            self.session_id\n            and isinstance(message, Message)\n            and isinstance(message.text, str)\n            and self.should_store_message\n        ):\n            store_message(\n                message,\n                flow_id=self.graph.flow_id,\n            )\n            self.message.value = message\n\n        self.status = message\n        return message\n",
                  "fileTypes": [],
                  "file_path": "",
                  "password": false,
                  "name": "code",
                  "advanced": true,
                  "dynamic": true,
                  "info": "",
                  "load_from_db": false,
                  "title_case": false
                },
                "input_value": {
                  "trace_as_input": true,
                  "multiline": true,
                  "trace_as_metadata": true,
                  "load_from_db": false,
                  "list": false,
                  "required": false,
                  "placeholder": "",
                  "show": true,
                  "name": "input_value",
                  "value": "https://www.youtube.com/watch?v=pXz68mA_9iQ",
                  "display_name": "Text",
                  "advanced": false,
                  "input_types": [
                    "Message"
                  ],
                  "dynamic": false,
                  "info": "Message to be passed as input.",
                  "title_case": false,
                  "type": "str",
                  "_input_type": "MultilineInput"
                },
                "sender": {
                  "trace_as_metadata": true,
                  "options": [
                    "Machine",
                    "User"
                  ],
                  "combobox": false,
                  "required": false,
                  "placeholder": "",
                  "show": true,
                  "name": "sender",
                  "value": "User",
                  "display_name": "Sender Type",
                  "advanced": true,
                  "dynamic": false,
                  "info": "Type of sender.",
                  "title_case": false,
                  "type": "str",
                  "_input_type": "DropdownInput"
                },
                "sender_name": {
                  "trace_as_input": true,
                  "trace_as_metadata": true,
                  "load_from_db": false,
                  "list": false,
                  "required": false,
                  "placeholder": "",
                  "show": true,
                  "name": "sender_name",
                  "value": "User",
                  "display_name": "Sender Name",
                  "advanced": true,
                  "input_types": [
                    "Message"
                  ],
                  "dynamic": false,
                  "info": "Name of the sender.",
                  "title_case": false,
                  "type": "str",
                  "_input_type": "MessageTextInput"
                },
                "session_id": {
                  "trace_as_input": true,
                  "trace_as_metadata": true,
                  "load_from_db": false,
                  "list": false,
                  "required": false,
                  "placeholder": "",
                  "show": true,
                  "name": "session_id",
                  "value": "",
                  "display_name": "Session ID",
                  "advanced": true,
                  "input_types": [
                    "Message"
                  ],
                  "dynamic": false,
                  "info": "The session ID of the chat. If empty, the current session ID parameter will be used.",
                  "title_case": false,
                  "type": "str",
                  "_input_type": "MessageTextInput"
                },
                "should_store_message": {
                  "trace_as_metadata": true,
                  "list": false,
                  "required": false,
                  "placeholder": "",
                  "show": true,
                  "name": "should_store_message",
                  "value": true,
                  "display_name": "Store Messages",
                  "advanced": true,
                  "dynamic": false,
                  "info": "Store the message in the history.",
                  "title_case": false,
                  "type": "bool",
                  "_input_type": "BoolInput"
                }
              },
              "description": "Get chat inputs from the Playground.",
              "icon": "ChatInput",
              "base_classes": [
                "Message"
              ],
              "display_name": "Chat Input",
              "documentation": "",
              "custom_fields": {},
              "output_types": [],
              "pinned": false,
              "conditional_paths": [],
              "frozen": false,
              "outputs": [
                {
                  "types": [
                    "Message"
                  ],
                  "selected": "Message",
                  "name": "message",
                  "display_name": "Message",
                  "method": "message_response",
                  "value": "__UNDEFINED__",
                  "cache": true
                }
              ],
              "field_order": [
                "input_value",
                "should_store_message",
                "sender",
                "sender_name",
                "session_id",
                "files"
              ],
              "beta": false,
              "edited": false,
              "lf_version": "1.0.17"
            },
            "id": "ChatInput-KG0hZ"
          },
          "selected": false,
          "width": 384,
          "height": 298,
          "positionAbsolute": {
            "x": -861.498127726757,
            "y": 385.27883678116
          },
          "dragging": false
        },
        {
          "id": "WhisperTranscriptionComponent-1uVoa",
          "type": "genericNode",
          "position": {
            "x": 966.2568856241794,
            "y": 355.4632309893873
          },
          "data": {
            "type": "WhisperTranscriptionComponent",
            "node": {
              "template": {
                "_type": "Component",
                "audio_file_path": {
                  "trace_as_input": true,
                  "trace_as_metadata": true,
                  "load_from_db": false,
                  "list": false,
                  "required": false,
                  "placeholder": "",
                  "show": true,
                  "name": "audio_file_path",
                  "value": "",
                  "display_name": "Audio File Path",
                  "advanced": false,
                  "input_types": [
                    "Message"
                  ],
                  "dynamic": false,
                  "info": "",
                  "title_case": false,
                  "type": "str",
                  "_input_type": "MessageTextInput"
                },
                "code": {
                  "type": "code",
                  "required": true,
                  "placeholder": "",
                  "list": false,
                  "show": true,
                  "multiline": true,
                  "value": "from axiestudio.custom import Component\r\nfrom axiestudio.io import DropdownInput, MessageTextInput, Output\r\nfrom axiestudio.schema import Data\r\nfrom axiestudio.schema.message import Message\r\nimport whisper\r\nimport os\r\n\r\nclass WhisperTranscriptionComponent(Component):\r\n    display_name = \"Whisper Audio Transcription\"\r\n    description = \"Transcribes an audio file using Whisper and saves the transcription to a subtitle file in SRT format.\"\r\n    documentation: str = \"https://openai.com/research/whisper\"\r\n    icon = \"custom_components\"\r\n    name = \"WhisperTranscriptionComponent\"\r\n\r\n    inputs = [\r\n        MessageTextInput(name=\"audio_file_path\", display_name=\"Audio File Path\", value=\"path/to/audio/file.wav\"),\r\n        MessageTextInput(name=\"srt_file_path\", display_name=\"SRT File Path (optional)\", value=\"transcription.srt\"),\r\n        DropdownInput(\r\n            name=\"model\",\r\n            display_name=\"Whisper Model\",\r\n            info=\"Select the Whisper model to use for transcription.\",\r\n            options=[\"base\", \"small\", \"medium\", \"large\"],  # Modelos disponíveis\r\n            value=\"base\",  # Valor padrão\r\n        ),\r\n    ]\r\n\r\n    outputs = [\r\n        Output(display_name=\"Transcription Output\", name=\"transcription\", method=\"transcription_message\"),\r\n        Output(display_name=\"Transcription Text\", name=\"transcription_text\", method=\"transcription_text_message\"),\r\n    ]\r\n\r\n    def transcribe_audio(self) -> str:\r\n        # Obter o caminho do arquivo de áudio diretamente\r\n        audio_file_path = self.audio_file_path\r\n        srt_file_path = self.srt_file_path\r\n        model_name = self.model  # Obter o modelo selecionado\r\n\r\n        # Usa o nome padrão se o caminho do arquivo de legendas não for fornecido\r\n        if not srt_file_path:\r\n            srt_file_path = \"transcription.srt\"\r\n\r\n        # Verifica se o arquivo de áudio existe\r\n        if not os.path.isfile(audio_file_path):\r\n            error_message = f\"Audio file not found: {audio_file_path}\"\r\n            self.status = error_message\r\n            return error_message\r\n\r\n        # Carrega o modelo Whisper com base na seleção do usuário\r\n        model = whisper.load_model(model_name)\r\n\r\n        # Transcreve o áudio\r\n        result = model.transcribe(audio_file_path, verbose=False)\r\n        self.transcription_text = \"\"  # Inicializa o atributo de texto da transcrição\r\n\r\n        # Salva a transcrição em um arquivo SRT e acumula o texto da transcrição\r\n        try:\r\n            with open(srt_file_path, \"w\") as srt_file:\r\n                for idx, segment in enumerate(result[\"segments\"], start=1):\r\n                    start_time = segment[\"start\"]\r\n                    end_time = segment[\"end\"]\r\n                    text = segment[\"text\"]\r\n\r\n                    # Formata os tempos no estilo SRT\r\n                    start_time_str = self.format_time(start_time)\r\n                    end_time_str = self.format_time(end_time)\r\n\r\n                    # Acumula o conteúdo completo no formato SRT em uma string\r\n                    self.transcription_text += f\"{idx}\\n{start_time_str} --> {end_time_str}\\n{text}\\n\\n\"\r\n\r\n                    # Escreve no arquivo SRT\r\n                    srt_file.write(f\"{idx}\\n\")\r\n                    srt_file.write(f\"{start_time_str} --> {end_time_str}\\n\")\r\n                    srt_file.write(f\"{text}\\n\\n\")\r\n\r\n            # Retorna o caminho do arquivo SRT\r\n            return srt_file_path\r\n\r\n        except Exception as e:\r\n            error_message = f\"Error saving transcription: {e}\"\r\n            self.status = error_message\r\n            return error_message\r\n\r\n    def transcription_message(self) -> Message:\r\n        # Cria uma mensagem com o caminho do arquivo SRT\r\n        srt_file_path = self.transcribe_audio()  # Obtém o caminho do arquivo SRT ou mensagem de erro\r\n        message = Message(\r\n            text=srt_file_path,\r\n            sender=\"WhisperTranscriptionComponent\",\r\n            sender_name=\"Whisper Transcription\",\r\n        )\r\n        return message\r\n\r\n    def transcription_text_message(self) -> Message:\r\n        # Cria uma mensagem com o texto da transcrição\r\n        if hasattr(self, 'transcription_text') and self.transcription_text:\r\n            message = Message(\r\n                text=self.transcription_text.strip(),\r\n                sender=\"WhisperTranscriptionComponent\",\r\n                sender_name=\"Whisper Transcription\",\r\n            )\r\n            return message\r\n        else:\r\n            return Message(\r\n                text=\"No transcription available.\",\r\n                sender=\"WhisperTranscriptionComponent\",\r\n                sender_name=\"Whisper Transcription\",\r\n            )\r\n\r\n    def format_time(self, seconds: float) -> str:\r\n        hours = int(seconds // 3600)\r\n        minutes = int((seconds % 3600) // 60)\r\n        seconds = int(seconds % 60)\r\n        milliseconds = int((seconds - int(seconds)) * 1000)\r\n        return f\"{hours:02}:{minutes:02}:{seconds:02},{milliseconds:03}\"",
                  "fileTypes": [],
                  "file_path": "",
                  "password": false,
                  "name": "code",
                  "advanced": true,
                  "dynamic": true,
                  "info": "",
                  "load_from_db": false,
                  "title_case": false
                },
                "model": {
                  "trace_as_metadata": true,
                  "options": [
                    "base",
                    "small",
                    "medium",
                    "large"
                  ],
                  "combobox": false,
                  "required": false,
                  "placeholder": "",
                  "show": true,
                  "name": "model",
                  "value": "medium",
                  "display_name": "Whisper Model",
                  "advanced": false,
                  "dynamic": false,
                  "info": "Select the Whisper model to use for transcription.",
                  "title_case": false,
                  "type": "str",
                  "_input_type": "DropdownInput"
                },
                "srt_file_path": {
                  "trace_as_input": true,
                  "trace_as_metadata": true,
                  "load_from_db": false,
                  "list": false,
                  "required": false,
                  "placeholder": "",
                  "show": true,
                  "name": "srt_file_path",
                  "value": "transcription.srt",
                  "display_name": "SRT File Path (optional)",
                  "advanced": false,
                  "input_types": [
                    "Message"
                  ],
                  "dynamic": false,
                  "info": "",
                  "title_case": false,
                  "type": "str",
                  "_input_type": "MessageTextInput"
                }
              },
              "description": "Transcribes an audio file using Whisper and saves the transcription to a subtitle file in SRT format.",
              "icon": "custom_components",
              "base_classes": [
                "Message"
              ],
              "display_name": "Transcreve_Audio2",
              "documentation": "https://openai.com/research/whisper",
              "custom_fields": {},
              "output_types": [],
              "pinned": false,
              "conditional_paths": [],
              "frozen": false,
              "outputs": [
                {
                  "types": [
                    "Message"
                  ],
                  "selected": "Message",
                  "name": "transcription",
                  "display_name": "Transcription Output",
                  "method": "transcription_message",
                  "value": "__UNDEFINED__",
                  "cache": true
                },
                {
                  "types": [
                    "Message"
                  ],
                  "selected": "Message",
                  "name": "transcription_text",
                  "display_name": "Transcription Text",
                  "method": "transcription_text_message",
                  "value": "__UNDEFINED__",
                  "cache": true
                }
              ],
              "field_order": [
                "audio_file_path",
                "srt_file_path",
                "model"
              ],
              "beta": false,
              "edited": true,
              "lf_version": "1.0.17"
            },
            "id": "WhisperTranscriptionComponent-1uVoa"
          },
          "selected": true,
          "width": 384,
          "height": 573,
          "positionAbsolute": {
            "x": 966.2568856241794,
            "y": 355.4632309893873
          },
          "dragging": false
        },
        {
          "id": "YouTubeAudioExtractor-ezhzA",
          "type": "genericNode",
          "position": {
            "x": -100.08486655040906,
            "y": 423.2544466948736
          },
          "data": {
            "type": "YouTubeAudioExtractor",
            "node": {
              "template": {
                "_type": "Component",
                "code": {
                  "type": "code",
                  "required": true,
                  "placeholder": "",
                  "list": false,
                  "show": true,
                  "multiline": true,
                  "value": "from axiestudio.custom import Component\r\nfrom axiestudio.inputs import MessageTextInput\r\nfrom axiestudio.template import Output\r\nfrom axiestudio.schema.message import Message\r\nimport yt_dlp as youtube_dl\r\nimport os\r\n\r\nclass YouTubeAudioExtractor(Component):\r\n    display_name = \"YouTube Audio Extractor\"\r\n    description = \"Extracts audio from a YouTube video and provides the path to the WAV audio file.\"\r\n    icon = \"youtube\"\r\n\r\n    inputs = [\r\n        MessageTextInput(\r\n            name=\"youtube_link\",\r\n            display_name=\"YouTube Link\",\r\n            value=\"https://www.youtube.com/watch?v=dQw4w9WgXcQ\",\r\n            info=\"Link to the YouTube video from which to extract audio.\",\r\n        ),\r\n        MessageTextInput(\r\n            name=\"ffmpeg_path\",\r\n            display_name=\"FFmpeg Path\",\r\n            value=\"C:\\\\ffmpeg\\\\bin\",\r\n            info=\"Path to the directory where FFmpeg is installed.\",\r\n        ),\r\n    ]\r\n\r\n    outputs = [\r\n        Output(display_name=\"Audio File Path\", name=\"audio_file_path\", method=\"extract_audio\"),\r\n    ]\r\n\r\n    def extract_audio(self) -> Message:\r\n        youtube_link = self.youtube_link\r\n        ffmpeg_path = self.ffmpeg_path\r\n\r\n        if not youtube_link:\r\n            error_message = \"YouTube link is required\"\r\n            self.status = error_message\r\n            return Message(text=error_message)\r\n\r\n        if not ffmpeg_path:\r\n            error_message = \"FFmpeg path is required\"\r\n            self.status = error_message\r\n            return Message(text=error_message)\r\n\r\n        # Define the base name for the output audio file\r\n        base_audio_file_path = \"extracted_audio.wav\"\r\n        audio_file_path = base_audio_file_path\r\n\r\n        # Increment the filename if it already exists\r\n        counter = 1\r\n        while os.path.exists(audio_file_path):\r\n            audio_file_path = f\"extracted_audio_{counter}.wav\"\r\n            counter += 1\r\n\r\n        # Define the options for yt-dlp to download and convert to WAV\r\n        ydl_opts = {\r\n            'format': 'bestaudio/best',\r\n            'outtmpl': 'temp_audio.%(ext)s',  # Save the downloaded file as temp_audio with extension\r\n            'postprocessors': [{\r\n                'key': 'FFmpegExtractAudio',\r\n                'preferredcodec': 'wav',  # Use WAV instead of MP3\r\n            }],\r\n            'ffmpeg_location': ffmpeg_path,  # Specify the path to FFmpeg\r\n        }\r\n\r\n        try:\r\n            # Download the audio from the YouTube video\r\n            with youtube_dl.YoutubeDL(ydl_opts) as ydl:\r\n                ydl.download([youtube_link])\r\n\r\n            # Rename the downloaded file to the desired output path\r\n            temp_file_path = 'temp_audio.wav'\r\n            if os.path.exists(temp_file_path):\r\n                os.rename(temp_file_path, audio_file_path)\r\n            else:\r\n                raise FileNotFoundError(f\"{temp_file_path} was not found after download.\")\r\n\r\n            # Return the path of the extracted audio file as a string\r\n            message = Message(text=audio_file_path)  # Pass the audio file path as a simple string\r\n            self.status = audio_file_path\r\n            return message\r\n\r\n        except Exception as e:\r\n            error_message = f\"Error extracting audio: {e}\"\r\n            self.status = error_message\r\n            return Message(text=error_message)\r\n\r\n# Exemplo de instância e processamento\r\nif __name__ == \"__main__\":\r\n    component = YouTubeAudioExtractor()\r\n    # Defina o link do vídeo do YouTube e o caminho para o FFmpeg\r\n    component.youtube_link = \"https://www.youtube.com/watch?v=dQw4w9WgXcQ\"\r\n    component.ffmpeg_path = \"C:\\\\ffmpeg\\\\bin\"\r\n    output = component.extract_audio()\r\n    print(output.text)  # Exibe o caminho do arquivo de áudio extraído\r\n",
                  "fileTypes": [],
                  "file_path": "",
                  "password": false,
                  "name": "code",
                  "advanced": true,
                  "dynamic": true,
                  "info": "",
                  "load_from_db": false,
                  "title_case": false
                },
                "ffmpeg_path": {
                  "trace_as_input": true,
                  "trace_as_metadata": true,
                  "load_from_db": false,
                  "list": false,
                  "required": false,
                  "placeholder": "",
                  "show": true,
                  "name": "ffmpeg_path",
                  "value": "C:\\ffmpeg\\ffmpeg\\bin",
                  "display_name": "FFmpeg Path",
                  "advanced": false,
                  "input_types": [
                    "Message"
                  ],
                  "dynamic": false,
                  "info": "Path to the directory where FFmpeg is installed.",
                  "title_case": false,
                  "type": "str",
                  "_input_type": "MessageTextInput"
                },
                "youtube_link": {
                  "trace_as_input": true,
                  "trace_as_metadata": true,
                  "load_from_db": false,
                  "list": false,
                  "required": false,
                  "placeholder": "",
                  "show": true,
                  "name": "youtube_link",
                  "value": "",
                  "display_name": "YouTube Link",
                  "advanced": false,
                  "input_types": [
                    "Message"
                  ],
                  "dynamic": false,
                  "info": "Link to the YouTube video from which to extract audio.",
                  "title_case": false,
                  "type": "str",
                  "_input_type": "MessageTextInput"
                }
              },
              "description": "ARQUIVO OFICIAL DE EXTRAÇÃO DE SOM DO YOUTUBE.",
              "icon": "youtube",
              "base_classes": [
                "Message"
              ],
              "display_name": "Extrai_Audio_Youtube (1)",
              "documentation": "",
              "custom_fields": {},
              "output_types": [],
              "pinned": false,
              "conditional_paths": [],
              "frozen": false,
              "outputs": [
                {
                  "types": [
                    "Message"
                  ],
                  "selected": "Message",
                  "name": "audio_file_path",
                  "display_name": "Audio File Path",
                  "method": "extract_audio",
                  "value": "__UNDEFINED__",
                  "cache": true
                }
              ],
              "field_order": [
                "youtube_link",
                "ffmpeg_path"
              ],
              "beta": false,
              "edited": true,
              "lf_version": "1.0.17",
              "official": false
            },
            "id": "YouTubeAudioExtractor-ezhzA"
          },
          "selected": false,
          "width": 384,
          "height": 412,
          "positionAbsolute": {
            "x": -100.08486655040906,
            "y": 423.2544466948736
          },
          "dragging": false
        },
        {
          "id": "ParseData-Hx3MY",
          "type": "genericNode",
          "position": {
            "x": 426.90107880103744,
            "y": 768.8403842019821
          },
          "data": {
            "type": "ParseData",
            "node": {
              "template": {
                "_type": "Component",
                "data": {
                  "trace_as_metadata": true,
                  "list": false,
                  "trace_as_input": true,
                  "required": false,
                  "placeholder": "",
                  "show": true,
                  "name": "data",
                  "value": "",
                  "display_name": "Data",
                  "advanced": false,
                  "input_types": [
                    "Data"
                  ],
                  "dynamic": false,
                  "info": "The data to convert to text.",
                  "title_case": false,
                  "type": "other",
                  "_input_type": "DataInput"
                },
                "code": {
                  "type": "code",
                  "required": true,
                  "placeholder": "",
                  "list": false,
                  "show": true,
                  "multiline": true,
                  "value": "from axiestudio.custom import Component\nfrom axiestudio.helpers.data import data_to_text\nfrom axiestudio.io import DataInput, MultilineInput, Output, StrInput\nfrom axiestudio.schema.message import Message\n\n\nclass ParseDataComponent(Component):\n    display_name = \"Parse Data\"\n    description = \"Convert Data into plain text following a specified template.\"\n    icon = \"braces\"\n    name = \"ParseData\"\n\n    inputs = [\n        DataInput(name=\"data\", display_name=\"Data\", info=\"The data to convert to text.\"),\n        MultilineInput(\n            name=\"template\",\n            display_name=\"Template\",\n            info=\"The template to use for formatting the data. It can contain the keys {text}, {data} or any other key in the Data.\",\n            value=\"{text}\",\n        ),\n        StrInput(name=\"sep\", display_name=\"Separator\", advanced=True, value=\"\\n\"),\n    ]\n\n    outputs = [\n        Output(display_name=\"Text\", name=\"text\", method=\"parse_data\"),\n    ]\n\n    def parse_data(self) -> Message:\n        data = self.data if isinstance(self.data, list) else [self.data]\n        template = self.template\n\n        result_string = data_to_text(template, data, sep=self.sep)\n        self.status = result_string\n        return Message(text=result_string)\n",
                  "fileTypes": [],
                  "file_path": "",
                  "password": false,
                  "name": "code",
                  "advanced": true,
                  "dynamic": true,
                  "info": "",
                  "load_from_db": false,
                  "title_case": false
                },
                "sep": {
                  "trace_as_metadata": true,
                  "load_from_db": false,
                  "list": false,
                  "required": false,
                  "placeholder": "",
                  "show": true,
                  "name": "sep",
                  "value": "\n",
                  "display_name": "Separator",
                  "advanced": true,
                  "dynamic": false,
                  "info": "",
                  "title_case": false,
                  "type": "str",
                  "_input_type": "StrInput"
                },
                "template": {
                  "trace_as_input": true,
                  "multiline": true,
                  "trace_as_metadata": true,
                  "load_from_db": false,
                  "list": false,
                  "required": false,
                  "placeholder": "",
                  "show": true,
                  "name": "template",
                  "value": "",
                  "display_name": "Template",
                  "advanced": false,
                  "input_types": [
                    "Message"
                  ],
                  "dynamic": false,
                  "info": "The template to use for formatting the data. It can contain the keys {text}, {data} or any other key in the Data.",
                  "title_case": false,
                  "type": "str",
                  "_input_type": "MultilineInput"
                }
              },
              "description": "Converta dados em texto simples seguindo um modelo especificado.",
              "icon": "braces",
              "base_classes": [
                "Message"
              ],
              "display_name": "Converte.dataparse",
              "documentation": "",
              "custom_fields": {},
              "output_types": [],
              "pinned": false,
              "conditional_paths": [],
              "frozen": false,
              "outputs": [
                {
                  "types": [
                    "Message"
                  ],
                  "selected": "Message",
                  "name": "text",
                  "display_name": "Text",
                  "method": "parse_data",
                  "value": "__UNDEFINED__",
                  "cache": true
                }
              ],
              "field_order": [
                "data",
                "template",
                "sep"
              ],
              "beta": false,
              "edited": false,
              "lf_version": "1.0.17",
              "official": false
            },
            "id": "ParseData-Hx3MY"
          },
          "selected": false,
          "width": 384,
          "height": 374,
          "positionAbsolute": {
            "x": 426.90107880103744,
            "y": 768.8403842019821
          },
          "dragging": false
        },
        {
          "id": "FileContentReaderComponent-H3S2x",
          "type": "genericNode",
          "position": {
            "x": 1613.7775680025816,
            "y": 445.45167717783244
          },
          "data": {
            "type": "FileContentReaderComponent",
            "node": {
              "template": {
                "_type": "Component",
                "code": {
                  "type": "code",
                  "required": true,
                  "placeholder": "",
                  "list": false,
                  "show": true,
                  "multiline": true,
                  "value": "from axiestudio.custom import Component\r\nfrom axiestudio.io import MessageTextInput, Output\r\nfrom axiestudio.schema import Data\r\nfrom axiestudio.schema.message import Message\r\nimport os\r\n\r\nclass FileContentReaderComponent(Component):\r\n    display_name = \"File Content Reader\"\r\n    description = \"Reads the content of a specified file and returns it.\"\r\n    documentation: str = \"https://example.com/file-content-reader-doc\"\r\n    icon = \"file_content_reader_icon\"\r\n    name = \"FileContentReaderComponent\"\r\n\r\n    inputs = [\r\n        MessageTextInput(name=\"file_directory\", display_name=\"File Directory\", value=\"path/to/file.txt\"),\r\n    ]\r\n\r\n    outputs = [\r\n        Output(display_name=\"File Content\", name=\"file_content\", method=\"read_file_content\"),\r\n    ]\r\n\r\n    def read_file_content(self) -> Message:\r\n        # Obter o caminho do arquivo diretamente\r\n        file_directory = self.file_directory\r\n\r\n        # Verifica se o arquivo existe\r\n        if not os.path.isfile(file_directory):\r\n            error_message = f\"File not found: {file_directory}\"\r\n            self.status = error_message\r\n            return Message(text=error_message)\r\n\r\n        # Lê o conteúdo do arquivo\r\n        try:\r\n            with open(file_directory, \"r\", encoding=\"utf-8\") as file:\r\n                file_content = file.read()\r\n\r\n            # Retorna o conteúdo do arquivo\r\n            return Message(text=file_content)\r\n\r\n        except Exception as e:\r\n            error_message = f\"Error reading file: {e}\"\r\n            self.status = error_message\r\n            return Message(text=error_message)\r\n",
                  "fileTypes": [],
                  "file_path": "",
                  "password": false,
                  "name": "code",
                  "advanced": true,
                  "dynamic": true,
                  "info": "",
                  "load_from_db": false,
                  "title_case": false
                },
                "file_directory": {
                  "trace_as_input": true,
                  "trace_as_metadata": true,
                  "load_from_db": false,
                  "list": false,
                  "required": false,
                  "placeholder": "",
                  "show": true,
                  "name": "file_directory",
                  "value": "",
                  "display_name": "File Directory",
                  "advanced": false,
                  "input_types": [
                    "Message"
                  ],
                  "dynamic": false,
                  "info": "",
                  "title_case": false,
                  "type": "str",
                  "_input_type": "MessageTextInput"
                }
              },
              "description": "Este componente vai ler o arquivo de texto e vai passar como texto",
              "icon": "file_content_reader_icon",
              "base_classes": [
                "Message"
              ],
              "display_name": "Le arquivo texto",
              "documentation": "https://example.com/file-content-reader-doc",
              "custom_fields": {},
              "output_types": [],
              "pinned": false,
              "conditional_paths": [],
              "frozen": false,
              "outputs": [
                {
                  "types": [
                    "Message"
                  ],
                  "selected": "Message",
                  "name": "file_content",
                  "display_name": "File Content",
                  "method": "read_file_content",
                  "value": "__UNDEFINED__",
                  "cache": true
                }
              ],
              "field_order": [
                "file_directory"
              ],
              "beta": false,
              "edited": true,
              "lf_version": "1.0.17",
              "official": false
            },
            "id": "FileContentReaderComponent-H3S2x"
          },
          "selected": false,
          "width": 384,
          "height": 326,
          "positionAbsolute": {
            "x": 1613.7775680025816,
            "y": 445.45167717783244
          },
          "dragging": false
        },
        {
          "id": "ChatOutput-dHEHu",
          "type": "genericNode",
          "position": {
            "x": 2184.0019534073904,
            "y": 479.46954504527014
          },
          "data": {
            "type": "ChatOutput",
            "node": {
              "template": {
                "_type": "Component",
                "code": {
                  "type": "code",
                  "required": true,
                  "placeholder": "",
                  "list": false,
                  "show": true,
                  "multiline": true,
                  "value": "from axiestudio.base.io.chat import ChatComponent\nfrom axiestudio.inputs import BoolInput\nfrom axiestudio.io import DropdownInput, MessageTextInput, Output\nfrom axiestudio.memory import store_message\nfrom axiestudio.schema.message import Message\nfrom axiestudio.utils.constants import MESSAGE_SENDER_NAME_AI, MESSAGE_SENDER_USER, MESSAGE_SENDER_AI\n\n\nclass ChatOutput(ChatComponent):\n    display_name = \"Chat Output\"\n    description = \"Display a chat message in the Playground.\"\n    icon = \"ChatOutput\"\n    name = \"ChatOutput\"\n\n    inputs = [\n        MessageTextInput(\n            name=\"input_value\",\n            display_name=\"Text\",\n            info=\"Message to be passed as output.\",\n        ),\n        BoolInput(\n            name=\"should_store_message\",\n            display_name=\"Store Messages\",\n            info=\"Store the message in the history.\",\n            value=True,\n            advanced=True,\n        ),\n        DropdownInput(\n            name=\"sender\",\n            display_name=\"Sender Type\",\n            options=[MESSAGE_SENDER_AI, MESSAGE_SENDER_USER],\n            value=MESSAGE_SENDER_AI,\n            advanced=True,\n            info=\"Type of sender.\",\n        ),\n        MessageTextInput(\n            name=\"sender_name\",\n            display_name=\"Sender Name\",\n            info=\"Name of the sender.\",\n            value=MESSAGE_SENDER_NAME_AI,\n            advanced=True,\n        ),\n        MessageTextInput(\n            name=\"session_id\",\n            display_name=\"Session ID\",\n            info=\"The session ID of the chat. If empty, the current session ID parameter will be used.\",\n            advanced=True,\n        ),\n        MessageTextInput(\n            name=\"data_template\",\n            display_name=\"Data Template\",\n            value=\"{text}\",\n            advanced=True,\n            info=\"Template to convert Data to Text. If left empty, it will be dynamically set to the Data's text key.\",\n        ),\n    ]\n    outputs = [\n        Output(display_name=\"Message\", name=\"message\", method=\"message_response\"),\n    ]\n\n    def message_response(self) -> Message:\n        message = Message(\n            text=self.input_value,\n            sender=self.sender,\n            sender_name=self.sender_name,\n            session_id=self.session_id,\n        )\n        if (\n            self.session_id\n            and isinstance(message, Message)\n            and isinstance(message.text, str)\n            and self.should_store_message\n        ):\n            store_message(\n                message,\n                flow_id=self.graph.flow_id,\n            )\n            self.message.value = message\n\n        self.status = message\n        return message\n",
                  "fileTypes": [],
                  "file_path": "",
                  "password": false,
                  "name": "code",
                  "advanced": true,
                  "dynamic": true,
                  "info": "",
                  "load_from_db": false,
                  "title_case": false
                },
                "data_template": {
                  "trace_as_input": true,
                  "trace_as_metadata": true,
                  "load_from_db": false,
                  "list": false,
                  "required": false,
                  "placeholder": "",
                  "show": true,
                  "name": "data_template",
                  "value": "{text}",
                  "display_name": "Data Template",
                  "advanced": true,
                  "input_types": [
                    "Message"
                  ],
                  "dynamic": false,
                  "info": "Template to convert Data to Text. If left empty, it will be dynamically set to the Data's text key.",
                  "title_case": false,
                  "type": "str",
                  "_input_type": "MessageTextInput"
                },
                "input_value": {
                  "trace_as_input": true,
                  "trace_as_metadata": true,
                  "load_from_db": false,
                  "list": false,
                  "required": false,
                  "placeholder": "",
                  "show": true,
                  "name": "input_value",
                  "value": "",
                  "display_name": "Text",
                  "advanced": false,
                  "input_types": [
                    "Message"
                  ],
                  "dynamic": false,
                  "info": "Message to be passed as output.",
                  "title_case": false,
                  "type": "str",
                  "_input_type": "MessageTextInput"
                },
                "sender": {
                  "trace_as_metadata": true,
                  "options": [
                    "Machine",
                    "User"
                  ],
                  "combobox": false,
                  "required": false,
                  "placeholder": "",
                  "show": true,
                  "name": "sender",
                  "value": "Machine",
                  "display_name": "Sender Type",
                  "advanced": true,
                  "dynamic": false,
                  "info": "Type of sender.",
                  "title_case": false,
                  "type": "str",
                  "_input_type": "DropdownInput"
                },
                "sender_name": {
                  "trace_as_input": true,
                  "trace_as_metadata": true,
                  "load_from_db": false,
                  "list": false,
                  "required": false,
                  "placeholder": "",
                  "show": true,
                  "name": "sender_name",
                  "value": "AI",
                  "display_name": "Sender Name",
                  "advanced": true,
                  "input_types": [
                    "Message"
                  ],
                  "dynamic": false,
                  "info": "Name of the sender.",
                  "title_case": false,
                  "type": "str",
                  "_input_type": "MessageTextInput"
                },
                "session_id": {
                  "trace_as_input": true,
                  "trace_as_metadata": true,
                  "load_from_db": false,
                  "list": false,
                  "required": false,
                  "placeholder": "",
                  "show": true,
                  "name": "session_id",
                  "value": "",
                  "display_name": "Session ID",
                  "advanced": true,
                  "input_types": [
                    "Message"
                  ],
                  "dynamic": false,
                  "info": "The session ID of the chat. If empty, the current session ID parameter will be used.",
                  "title_case": false,
                  "type": "str",
                  "_input_type": "MessageTextInput"
                },
                "should_store_message": {
                  "trace_as_metadata": true,
                  "list": false,
                  "required": false,
                  "placeholder": "",
                  "show": true,
                  "name": "should_store_message",
                  "value": true,
                  "display_name": "Store Messages",
                  "advanced": true,
                  "dynamic": false,
                  "info": "Store the message in the history.",
                  "title_case": false,
                  "type": "bool",
                  "_input_type": "BoolInput"
                }
              },
              "description": "Display a chat message in the Playground.",
              "icon": "ChatOutput",
              "base_classes": [
                "Message"
              ],
              "display_name": "Chat Output",
              "documentation": "",
              "custom_fields": {},
              "output_types": [],
              "pinned": false,
              "conditional_paths": [],
              "frozen": false,
              "outputs": [
                {
                  "types": [
                    "Message"
                  ],
                  "selected": "Message",
                  "name": "message",
                  "display_name": "Message",
                  "method": "message_response",
                  "value": "__UNDEFINED__",
                  "cache": true
                }
              ],
              "field_order": [
                "input_value",
                "should_store_message",
                "sender",
                "sender_name",
                "session_id",
                "data_template"
              ],
              "beta": false,
              "edited": false,
              "lf_version": "1.0.17"
            },
            "id": "ChatOutput-dHEHu"
          },
          "selected": false,
          "width": 384,
          "height": 298,
          "positionAbsolute": {
            "x": 2184.0019534073904,
            "y": 479.46954504527014
          },
          "dragging": false
        }
      ],
      "edges": [
        {
          "source": "ChatInput-KG0hZ",
          "sourceHandle": "{œdataTypeœ:œChatInputœ,œidœ:œChatInput-KG0hZœ,œnameœ:œmessageœ,œoutput_typesœ:[œMessageœ]}",
          "target": "YouTubeAudioExtractor-ezhzA",
          "targetHandle": "{œfieldNameœ:œyoutube_linkœ,œidœ:œYouTubeAudioExtractor-ezhzAœ,œinputTypesœ:[œMessageœ],œtypeœ:œstrœ}",
          "data": {
            "targetHandle": {
              "fieldName": "youtube_link",
              "id": "YouTubeAudioExtractor-ezhzA",
              "inputTypes": [
                "Message"
              ],
              "type": "str"
            },
            "sourceHandle": {
              "dataType": "ChatInput",
              "id": "ChatInput-KG0hZ",
              "name": "message",
              "output_types": [
                "Message"
              ]
            }
          },
          "id": "reactflow__edge-ChatInput-KG0hZ{œdataTypeœ:œChatInputœ,œidœ:œChatInput-KG0hZœ,œnameœ:œmessageœ,œoutput_typesœ:[œMessageœ]}-YouTubeAudioExtractor-ezhzA{œfieldNameœ:œyoutube_linkœ,œidœ:œYouTubeAudioExtractor-ezhzAœ,œinputTypesœ:[œMessageœ],œtypeœ:œstrœ}",
          "className": ""
        },
        {
          "source": "YouTubeAudioExtractor-ezhzA",
          "sourceHandle": "{œdataTypeœ:œYouTubeAudioExtractorœ,œidœ:œYouTubeAudioExtractor-ezhzAœ,œnameœ:œaudio_file_pathœ,œoutput_typesœ:[œMessageœ]}",
          "target": "ParseData-Hx3MY",
          "targetHandle": "{œfieldNameœ:œtemplateœ,œidœ:œParseData-Hx3MYœ,œinputTypesœ:[œMessageœ],œtypeœ:œstrœ}",
          "data": {
            "targetHandle": {
              "fieldName": "template",
              "id": "ParseData-Hx3MY",
              "inputTypes": [
                "Message"
              ],
              "type": "str"
            },
            "sourceHandle": {
              "dataType": "YouTubeAudioExtractor",
              "id": "YouTubeAudioExtractor-ezhzA",
              "name": "audio_file_path",
              "output_types": [
                "Message"
              ]
            }
          },
          "id": "reactflow__edge-YouTubeAudioExtractor-ezhzA{œdataTypeœ:œYouTubeAudioExtractorœ,œidœ:œYouTubeAudioExtractor-ezhzAœ,œnameœ:œaudio_file_pathœ,œoutput_typesœ:[œMessageœ]}-ParseData-Hx3MY{œfieldNameœ:œtemplateœ,œidœ:œParseData-Hx3MYœ,œinputTypesœ:[œMessageœ],œtypeœ:œstrœ}",
          "className": ""
        },
        {
          "source": "ParseData-Hx3MY",
          "sourceHandle": "{œdataTypeœ:œParseDataœ,œidœ:œParseData-Hx3MYœ,œnameœ:œtextœ,œoutput_typesœ:[œMessageœ]}",
          "target": "WhisperTranscriptionComponent-1uVoa",
          "targetHandle": "{œfieldNameœ:œaudio_file_pathœ,œidœ:œWhisperTranscriptionComponent-1uVoaœ,œinputTypesœ:[œMessageœ],œtypeœ:œstrœ}",
          "data": {
            "targetHandle": {
              "fieldName": "audio_file_path",
              "id": "WhisperTranscriptionComponent-1uVoa",
              "inputTypes": [
                "Message"
              ],
              "type": "str"
            },
            "sourceHandle": {
              "dataType": "ParseData",
              "id": "ParseData-Hx3MY",
              "name": "text",
              "output_types": [
                "Message"
              ]
            }
          },
          "id": "reactflow__edge-ParseData-Hx3MY{œdataTypeœ:œParseDataœ,œidœ:œParseData-Hx3MYœ,œnameœ:œtextœ,œoutput_typesœ:[œMessageœ]}-WhisperTranscriptionComponent-1uVoa{œfieldNameœ:œaudio_file_pathœ,œidœ:œWhisperTranscriptionComponent-1uVoaœ,œinputTypesœ:[œMessageœ],œtypeœ:œstrœ}",
          "className": ""
        },
        {
          "source": "WhisperTranscriptionComponent-1uVoa",
          "sourceHandle": "{œdataTypeœ:œWhisperTranscriptionComponentœ,œidœ:œWhisperTranscriptionComponent-1uVoaœ,œnameœ:œtranscriptionœ,œoutput_typesœ:[œMessageœ]}",
          "target": "FileContentReaderComponent-H3S2x",
          "targetHandle": "{œfieldNameœ:œfile_directoryœ,œidœ:œFileContentReaderComponent-H3S2xœ,œinputTypesœ:[œMessageœ],œtypeœ:œstrœ}",
          "data": {
            "targetHandle": {
              "fieldName": "file_directory",
              "id": "FileContentReaderComponent-H3S2x",
              "inputTypes": [
                "Message"
              ],
              "type": "str"
            },
            "sourceHandle": {
              "dataType": "WhisperTranscriptionComponent",
              "id": "WhisperTranscriptionComponent-1uVoa",
              "name": "transcription",
              "output_types": [
                "Message"
              ]
            }
          },
          "id": "reactflow__edge-WhisperTranscriptionComponent-1uVoa{œdataTypeœ:œWhisperTranscriptionComponentœ,œidœ:œWhisperTranscriptionComponent-1uVoaœ,œnameœ:œtranscriptionœ,œoutput_typesœ:[œMessageœ]}-FileContentReaderComponent-H3S2x{œfieldNameœ:œfile_directoryœ,œidœ:œFileContentReaderComponent-H3S2xœ,œinputTypesœ:[œMessageœ],œtypeœ:œstrœ}",
          "className": ""
        },
        {
          "source": "FileContentReaderComponent-H3S2x",
          "sourceHandle": "{œdataTypeœ:œFileContentReaderComponentœ,œidœ:œFileContentReaderComponent-H3S2xœ,œnameœ:œfile_contentœ,œoutput_typesœ:[œMessageœ]}",
          "target": "ChatOutput-dHEHu",
          "targetHandle": "{œfieldNameœ:œinput_valueœ,œidœ:œChatOutput-dHEHuœ,œinputTypesœ:[œMessageœ],œtypeœ:œstrœ}",
          "data": {
            "targetHandle": {
              "fieldName": "input_value",
              "id": "ChatOutput-dHEHu",
              "inputTypes": [
                "Message"
              ],
              "type": "str"
            },
            "sourceHandle": {
              "dataType": "FileContentReaderComponent",
              "id": "FileContentReaderComponent-H3S2x",
              "name": "file_content",
              "output_types": [
                "Message"
              ]
            }
          },
          "id": "reactflow__edge-FileContentReaderComponent-H3S2x{œdataTypeœ:œFileContentReaderComponentœ,œidœ:œFileContentReaderComponent-H3S2xœ,œnameœ:œfile_contentœ,œoutput_typesœ:[œMessageœ]}-ChatOutput-dHEHu{œfieldNameœ:œinput_valueœ,œidœ:œChatOutput-dHEHuœ,œinputTypesœ:[œMessageœ],œtypeœ:œstrœ}",
          "className": ""
        }
      ],
      "viewport": {
        "x": 57.23122739456937,
        "y": 76.75365471940154,
        "zoom": 0.5000000211531738
      }
    },
    "date_created": "2024-09-11T16:28:28.728Z",
    "date_updated": "2024-09-11T16:28:28.781Z",
    "status": "Public",
    "sort": null,
    "user_updated": "6c18a623-937c-4e5a-979c-4660e98c238f",
    "user_created": {
      "username": "teste1234321",
      "first_name": "Alexandre Baroni",
      "last_name": "Baroni",
      "id": "6c18a623-937c-4e5a-979c-4660e98c238f"
    },
    "tags": []
  },
  "conversion": {
    "converted_at": "2025-08-19T18:08:57.316Z",
    "converted_from": "langflow",
    "converted_to": "axiestudio",
    "conversions_made": 58,
    "converter_version": "1.0.0"
  }
}