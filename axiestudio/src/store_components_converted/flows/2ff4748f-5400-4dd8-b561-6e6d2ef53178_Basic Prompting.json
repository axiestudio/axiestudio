{
  "id": "2ff4748f-5400-4dd8-b561-6e6d2ef53178",
  "name": "Basic Prompting",
  "description": "This flow will get you experimenting with the basics of the UI, the Chat and the Prompt component.  (Converted from Langflow Store for AxieStudio compatibility)",
  "type": "FLOW",
  "is_component": false,
  "author": {
    "username": "gavinzli",
    "first_name": "Gavin",
    "last_name": "Li",
    "id": "6494a69f-853b-4676-96e7-1c5e1a9617bd",
    "full_name": "Gavin Li"
  },
  "store_url": "https://www.langflow.store/store/component/2ff4748f-5400-4dd8-b561-6e6d2ef53178",
  "stats": {
    "downloads": 0,
    "likes": 0
  },
  "dates": {
    "created": "2024-05-30T10:23:28.085Z",
    "updated": "2024-05-30T10:23:28.133Z",
    "downloaded": "2025-08-19T17:50:05.179Z"
  },
  "tags": [],
  "technical": {
    "last_tested_version": "0.6.15",
    "private": false,
    "status": "Public"
  },
  "data": {
    "nodes": [
      {
        "id": "ChatInput-dykoz",
        "type": "genericNode",
        "position": {
          "x": -1956.3097979527174,
          "y": -93.40421802014129
        },
        "data": {
          "type": "ChatInput",
          "node": {
            "template": {
              "code": {
                "type": "code",
                "required": true,
                "placeholder": "",
                "list": false,
                "show": true,
                "multiline": true,
                "value": "from typing import Optional, Union\n\nfrom axiestudio.base.io.chat import ChatComponent\nfrom axiestudio.field_typing import Text\nfrom axiestudio.schema import Record\n\n\nclass ChatInput(ChatComponent):\n    display_name = \"Chat Input\"\n    description = \"Get chat inputs from the Interaction Panel.\"\n    icon = \"ChatInput\"\n\n    def build_config(self):\n        build_config = super().build_config()\n        build_config[\"input_value\"] = {\n            \"input_types\": [],\n            \"display_name\": \"Message\",\n            \"multiline\": True,\n        }\n\n        return build_config\n\n    def build(\n        self,\n        sender: Optional[str] = \"User\",\n        sender_name: Optional[str] = \"User\",\n        input_value: Optional[str] = None,\n        session_id: Optional[str] = None,\n        return_record: Optional[bool] = False,\n    ) -> Union[Text, Record]:\n        return super().build_no_record(\n            sender=sender,\n            sender_name=sender_name,\n            input_value=input_value,\n            session_id=session_id,\n            return_record=return_record,\n        )\n",
                "fileTypes": [],
                "file_path": "",
                "password": false,
                "name": "code",
                "advanced": true,
                "dynamic": true,
                "info": "",
                "load_from_db": false,
                "title_case": false
              },
              "input_value": {
                "type": "str",
                "required": false,
                "placeholder": "",
                "list": false,
                "show": true,
                "multiline": true,
                "fileTypes": [],
                "file_path": "",
                "password": false,
                "name": "input_value",
                "display_name": "Message",
                "advanced": false,
                "input_types": [],
                "dynamic": false,
                "info": "",
                "load_from_db": false,
                "title_case": false,
                "value": ""
              },
              "return_record": {
                "type": "bool",
                "required": false,
                "placeholder": "",
                "list": false,
                "show": true,
                "multiline": false,
                "value": false,
                "fileTypes": [],
                "file_path": "",
                "password": false,
                "name": "return_record",
                "display_name": "Return Record",
                "advanced": true,
                "dynamic": false,
                "info": "Return the message as a record containing the sender, sender_name, and session_id.",
                "load_from_db": false,
                "title_case": false
              },
              "sender": {
                "type": "str",
                "required": false,
                "placeholder": "",
                "list": true,
                "show": true,
                "multiline": false,
                "value": "User",
                "fileTypes": [],
                "file_path": "",
                "password": false,
                "options": [
                  "Machine",
                  "User"
                ],
                "name": "sender",
                "display_name": "Sender Type",
                "advanced": true,
                "dynamic": false,
                "info": "",
                "load_from_db": false,
                "title_case": false,
                "input_types": [
                  "Text"
                ]
              },
              "sender_name": {
                "type": "str",
                "required": false,
                "placeholder": "",
                "list": false,
                "show": true,
                "multiline": false,
                "value": "User",
                "fileTypes": [],
                "file_path": "",
                "password": false,
                "name": "sender_name",
                "display_name": "Sender Name",
                "advanced": false,
                "dynamic": false,
                "info": "",
                "load_from_db": false,
                "title_case": false,
                "input_types": [
                  "Text"
                ]
              },
              "session_id": {
                "type": "str",
                "required": false,
                "placeholder": "",
                "list": false,
                "show": true,
                "multiline": false,
                "fileTypes": [],
                "file_path": "",
                "password": false,
                "name": "session_id",
                "display_name": "Session ID",
                "advanced": true,
                "dynamic": false,
                "info": "If provided, the message will be stored in the memory.",
                "load_from_db": false,
                "title_case": false,
                "input_types": [
                  "Text"
                ]
              },
              "_type": "CustomComponent"
            },
            "description": "Get chat inputs from the Interaction Panel.",
            "icon": "ChatInput",
            "base_classes": [
              "object",
              "Record",
              "str",
              "Text"
            ],
            "display_name": "Chat Input",
            "documentation": "",
            "custom_fields": {
              "sender": null,
              "sender_name": null,
              "input_value": null,
              "session_id": null,
              "return_record": null
            },
            "output_types": [
              "Text",
              "Record"
            ],
            "field_formatters": {},
            "frozen": false,
            "field_order": [],
            "beta": false
          },
          "id": "ChatInput-dykoz"
        },
        "selected": false,
        "width": 384,
        "height": 375,
        "positionAbsolute": {
          "x": -1956.3097979527174,
          "y": -93.40421802014129
        },
        "dragging": false
      },
      {
        "id": "TextInput-nmGaZ",
        "type": "genericNode",
        "position": {
          "x": -2397.075987604987,
          "y": -202.7673030776446
        },
        "data": {
          "type": "TextInput",
          "node": {
            "template": {
              "input_value": {
                "type": "str",
                "required": false,
                "placeholder": "",
                "list": false,
                "show": true,
                "multiline": false,
                "value": "How hurried or rushed was the pace of the task? (0-100)",
                "fileTypes": [],
                "file_path": "",
                "password": false,
                "name": "input_value",
                "display_name": "Value",
                "advanced": false,
                "input_types": [
                  "Record",
                  "Text"
                ],
                "dynamic": false,
                "info": "Text or Record to be passed as input.",
                "load_from_db": false,
                "title_case": false
              },
              "code": {
                "type": "code",
                "required": true,
                "placeholder": "",
                "list": false,
                "show": true,
                "multiline": true,
                "value": "from typing import Optional\n\nfrom axiestudio.base.io.text import TextComponent\nfrom axiestudio.field_typing import Text\n\n\nclass TextInput(TextComponent):\n    display_name = \"Text Input\"\n    description = \"Get text inputs from the Interaction Panel.\"\n    icon = \"type\"\n\n    def build_config(self):\n        return {\n            \"input_value\": {\n                \"display_name\": \"Value\",\n                \"input_types\": [\"Record\", \"Text\"],\n                \"info\": \"Text or Record to be passed as input.\",\n            },\n            \"record_template\": {\n                \"display_name\": \"Record Template\",\n                \"multiline\": True,\n                \"info\": \"Template to convert Record to Text. If left empty, it will be dynamically set to the Record's text key.\",\n                \"advanced\": True,\n            },\n        }\n\n    def build(\n        self,\n        input_value: Optional[Text] = \"\",\n        record_template: Optional[str] = \"\",\n    ) -> Text:\n        return super().build(input_value=input_value, record_template=record_template)\n",
                "fileTypes": [],
                "file_path": "",
                "password": false,
                "name": "code",
                "advanced": true,
                "dynamic": true,
                "info": "",
                "load_from_db": false,
                "title_case": false
              },
              "record_template": {
                "type": "str",
                "required": false,
                "placeholder": "",
                "list": false,
                "show": true,
                "multiline": true,
                "value": "",
                "fileTypes": [],
                "file_path": "",
                "password": false,
                "name": "record_template",
                "display_name": "Record Template",
                "advanced": true,
                "dynamic": false,
                "info": "Template to convert Record to Text. If left empty, it will be dynamically set to the Record's text key.",
                "load_from_db": false,
                "title_case": false,
                "input_types": [
                  "Text"
                ]
              },
              "_type": "CustomComponent"
            },
            "description": "Get text inputs from the Interaction Panel.",
            "icon": "type",
            "base_classes": [
              "object",
              "str",
              "Text"
            ],
            "display_name": "Text Input",
            "documentation": "",
            "custom_fields": {
              "input_value": null,
              "record_template": null
            },
            "output_types": [
              "Text"
            ],
            "field_formatters": {},
            "frozen": false,
            "field_order": [],
            "beta": false
          },
          "id": "TextInput-nmGaZ"
        },
        "selected": false,
        "width": 384,
        "height": 289,
        "positionAbsolute": {
          "x": -2397.075987604987,
          "y": -202.7673030776446
        },
        "dragging": false
      },
      {
        "id": "Prompt-FqMeL",
        "type": "genericNode",
        "position": {
          "x": -768.8686402796882,
          "y": -664.9822063034544
        },
        "data": {
          "type": "Prompt",
          "node": {
            "template": {
              "code": {
                "type": "code",
                "required": true,
                "placeholder": "",
                "list": false,
                "show": true,
                "multiline": true,
                "value": "from langchain_core.prompts import PromptTemplate\n\nfrom axiestudio.custom import CustomComponent\nfrom axiestudio.field_typing import Prompt, TemplateField, Text\n\n\nclass PromptComponent(CustomComponent):\n    display_name: str = \"Prompt\"\n    description: str = \"Create a prompt template with dynamic variables.\"\n    icon = \"prompts\"\n\n    def build_config(self):\n        return {\n            \"template\": TemplateField(display_name=\"Template\"),\n            \"code\": TemplateField(advanced=True),\n        }\n\n    def build(\n        self,\n        template: Prompt,\n        **kwargs,\n    ) -> Text:\n        from axiestudio.base.prompts.utils import dict_values_to_string\n\n        prompt_template = PromptTemplate.from_template(Text(template))\n        kwargs = dict_values_to_string(kwargs)\n        kwargs = {k: \"\\n\".join(v) if isinstance(v, list) else v for k, v in kwargs.items()}\n        try:\n            formated_prompt = prompt_template.format(**kwargs)\n        except Exception as exc:\n            raise ValueError(f\"Error formatting prompt: {exc}\") from exc\n        self.status = f'Prompt:\\n\"{formated_prompt}\"'\n        return formated_prompt\n",
                "fileTypes": [],
                "file_path": "",
                "password": false,
                "name": "code",
                "advanced": true,
                "dynamic": true,
                "info": "",
                "load_from_db": false,
                "title_case": false
              },
              "template": {
                "type": "prompt",
                "required": false,
                "placeholder": "",
                "list": false,
                "show": true,
                "multiline": false,
                "value": "Calculate the cognitive load with the following context. if you calculate the cognitive load, show it.\n\ncontext: {context}\n\nhistory: {history}",
                "fileTypes": [],
                "file_path": "",
                "password": false,
                "name": "template",
                "display_name": "Template",
                "advanced": false,
                "input_types": [
                  "Text"
                ],
                "dynamic": false,
                "info": "",
                "load_from_db": false,
                "title_case": false
              },
              "_type": "CustomComponent",
              "context": {
                "type": "str",
                "required": false,
                "placeholder": "",
                "list": false,
                "show": true,
                "multiline": true,
                "value": "",
                "fileTypes": [],
                "file_path": "",
                "password": false,
                "name": "context",
                "display_name": "context",
                "advanced": false,
                "input_types": [
                  "Document",
                  "BaseOutputParser"
                ],
                "dynamic": false,
                "info": "",
                "title_case": true
              },
              "history": {
                "type": "str",
                "required": false,
                "placeholder": "",
                "list": false,
                "show": true,
                "multiline": true,
                "value": "",
                "fileTypes": [],
                "file_path": "",
                "password": false,
                "name": "history",
                "display_name": "history",
                "advanced": false,
                "input_types": [
                  "Document",
                  "BaseOutputParser"
                ],
                "dynamic": false,
                "info": "",
                "title_case": true
              }
            },
            "description": "Create a prompt template with dynamic variables.",
            "icon": "prompts",
            "base_classes": [
              "str",
              "Text"
            ],
            "name": "",
            "display_name": "Prompt",
            "documentation": "",
            "custom_fields": {
              "template": [
                "context",
                "history"
              ]
            },
            "output_types": [
              "Text"
            ],
            "full_path": null,
            "field_formatters": {},
            "beta": false,
            "error": null
          },
          "id": "Prompt-FqMeL",
          "description": "Create a prompt template with dynamic variables.",
          "display_name": "Prompt"
        },
        "selected": false,
        "width": 384,
        "height": 477,
        "positionAbsolute": {
          "x": -768.8686402796882,
          "y": -664.9822063034544
        },
        "dragging": false
      },
      {
        "id": "MemoryComponent-PDg8B",
        "type": "genericNode",
        "position": {
          "x": -1317.4923272529059,
          "y": -616.1238175235459
        },
        "data": {
          "type": "MemoryComponent",
          "node": {
            "template": {
              "code": {
                "type": "code",
                "required": true,
                "placeholder": "",
                "list": false,
                "show": true,
                "multiline": true,
                "value": "from typing import Optional\n\nfrom axiestudio.base.memory.memory import BaseMemoryComponent\nfrom axiestudio.field_typing import Text\nfrom axiestudio.helpers.record import records_to_text\nfrom axiestudio.memory import get_messages\nfrom axiestudio.schema.schema import Record\n\n\nclass MemoryComponent(BaseMemoryComponent):\n    display_name = \"Chat Memory\"\n    description = \"Retrieves stored chat messages given a specific Session ID.\"\n    beta: bool = True\n    icon = \"history\"\n\n    def build_config(self):\n        return {\n            \"sender\": {\n                \"options\": [\"Machine\", \"User\", \"Machine and User\"],\n                \"display_name\": \"Sender Type\",\n            },\n            \"sender_name\": {\"display_name\": \"Sender Name\", \"advanced\": True},\n            \"n_messages\": {\n                \"display_name\": \"Number of Messages\",\n                \"info\": \"Number of messages to retrieve.\",\n            },\n            \"session_id\": {\n                \"display_name\": \"Session ID\",\n                \"info\": \"Session ID of the chat history.\",\n                \"input_types\": [\"Text\"],\n            },\n            \"order\": {\n                \"options\": [\"Ascending\", \"Descending\"],\n                \"display_name\": \"Order\",\n                \"info\": \"Order of the messages.\",\n                \"advanced\": True,\n            },\n            \"record_template\": {\n                \"display_name\": \"Record Template\",\n                \"multiline\": True,\n                \"info\": \"Template to convert Record to Text. If left empty, it will be dynamically set to the Record's text key.\",\n                \"advanced\": True,\n            },\n        }\n\n    def get_messages(self, **kwargs) -> list[Record]:\n        # Validate kwargs by checking if it contains the correct keys\n        if \"sender\" not in kwargs:\n            kwargs[\"sender\"] = None\n        if \"sender_name\" not in kwargs:\n            kwargs[\"sender_name\"] = None\n        if \"session_id\" not in kwargs:\n            kwargs[\"session_id\"] = None\n        if \"limit\" not in kwargs:\n            kwargs[\"limit\"] = 5\n        if \"order\" not in kwargs:\n            kwargs[\"order\"] = \"Descending\"\n\n        kwargs[\"order\"] = \"DESC\" if kwargs[\"order\"] == \"Descending\" else \"ASC\"\n        if kwargs[\"sender\"] == \"Machine and User\":\n            kwargs[\"sender\"] = None\n        return get_messages(**kwargs)\n\n    def build(\n        self,\n        sender: Optional[str] = \"Machine and User\",\n        sender_name: Optional[str] = None,\n        session_id: Optional[str] = None,\n        n_messages: int = 5,\n        order: Optional[str] = \"Descending\",\n        record_template: Optional[str] = \"{sender_name}: {text}\",\n    ) -> Text:\n        messages = self.get_messages(\n            sender=sender,\n            sender_name=sender_name,\n            session_id=session_id,\n            limit=n_messages,\n            order=order,\n        )\n        messages_str = records_to_text(template=record_template or \"\", records=messages)\n        self.status = messages_str\n        return messages_str\n",
                "fileTypes": [],
                "file_path": "",
                "password": false,
                "name": "code",
                "advanced": true,
                "dynamic": true,
                "info": "",
                "load_from_db": false,
                "title_case": false
              },
              "n_messages": {
                "type": "int",
                "required": false,
                "placeholder": "",
                "list": false,
                "show": true,
                "multiline": false,
                "value": 5,
                "fileTypes": [],
                "file_path": "",
                "password": false,
                "name": "n_messages",
                "display_name": "Number of Messages",
                "advanced": false,
                "dynamic": false,
                "info": "Number of messages to retrieve.",
                "load_from_db": false,
                "title_case": false
              },
              "order": {
                "type": "str",
                "required": false,
                "placeholder": "",
                "list": true,
                "show": true,
                "multiline": false,
                "value": "Descending",
                "fileTypes": [],
                "file_path": "",
                "password": false,
                "options": [
                  "Ascending",
                  "Descending"
                ],
                "name": "order",
                "display_name": "Order",
                "advanced": true,
                "dynamic": false,
                "info": "Order of the messages.",
                "load_from_db": false,
                "title_case": false,
                "input_types": [
                  "Text"
                ]
              },
              "record_template": {
                "type": "str",
                "required": false,
                "placeholder": "",
                "list": false,
                "show": true,
                "multiline": true,
                "value": "{sender_name}: {text}",
                "fileTypes": [],
                "file_path": "",
                "password": false,
                "name": "record_template",
                "display_name": "Record Template",
                "advanced": true,
                "dynamic": false,
                "info": "Template to convert Record to Text. If left empty, it will be dynamically set to the Record's text key.",
                "load_from_db": false,
                "title_case": false,
                "input_types": [
                  "Text"
                ]
              },
              "sender": {
                "type": "str",
                "required": false,
                "placeholder": "",
                "list": true,
                "show": true,
                "multiline": false,
                "value": "Machine and User",
                "fileTypes": [],
                "file_path": "",
                "password": false,
                "options": [
                  "Machine",
                  "User",
                  "Machine and User"
                ],
                "name": "sender",
                "display_name": "Sender Type",
                "advanced": false,
                "dynamic": false,
                "info": "",
                "load_from_db": false,
                "title_case": false,
                "input_types": [
                  "Text"
                ]
              },
              "sender_name": {
                "type": "str",
                "required": false,
                "placeholder": "",
                "list": false,
                "show": true,
                "multiline": false,
                "fileTypes": [],
                "file_path": "",
                "password": false,
                "name": "sender_name",
                "display_name": "Sender Name",
                "advanced": true,
                "dynamic": false,
                "info": "",
                "load_from_db": false,
                "title_case": false,
                "input_types": [
                  "Text"
                ]
              },
              "session_id": {
                "type": "str",
                "required": false,
                "placeholder": "",
                "list": false,
                "show": true,
                "multiline": false,
                "fileTypes": [],
                "file_path": "",
                "password": false,
                "name": "session_id",
                "display_name": "Session ID",
                "advanced": false,
                "input_types": [
                  "Text"
                ],
                "dynamic": false,
                "info": "Session ID of the chat history.",
                "load_from_db": false,
                "title_case": false
              },
              "_type": "CustomComponent"
            },
            "description": "Retrieves stored chat messages given a specific Session ID.",
            "icon": "history",
            "base_classes": [
              "object",
              "str",
              "Text"
            ],
            "display_name": "Chat Memory",
            "documentation": "",
            "custom_fields": {
              "sender": null,
              "sender_name": null,
              "session_id": null,
              "n_messages": null,
              "order": null,
              "record_template": null
            },
            "output_types": [
              "Text"
            ],
            "field_formatters": {},
            "frozen": false,
            "field_order": [],
            "beta": true
          },
          "id": "MemoryComponent-PDg8B"
        },
        "selected": false,
        "width": 384,
        "height": 501,
        "positionAbsolute": {
          "x": -1317.4923272529059,
          "y": -616.1238175235459
        },
        "dragging": false
      },
      {
        "id": "TextInput-G36IC",
        "type": "genericNode",
        "position": {
          "x": -2388.942409242161,
          "y": -542.3990081461412
        },
        "data": {
          "type": "TextInput",
          "node": {
            "template": {
              "input_value": {
                "type": "str",
                "required": false,
                "placeholder": "",
                "list": false,
                "show": true,
                "multiline": false,
                "value": "How physically demanding was the task? (0-100)",
                "fileTypes": [],
                "file_path": "",
                "password": false,
                "name": "input_value",
                "display_name": "Value",
                "advanced": false,
                "input_types": [
                  "Record",
                  "Text"
                ],
                "dynamic": false,
                "info": "Text or Record to be passed as input.",
                "load_from_db": false,
                "title_case": false
              },
              "code": {
                "type": "code",
                "required": true,
                "placeholder": "",
                "list": false,
                "show": true,
                "multiline": true,
                "value": "from typing import Optional\n\nfrom axiestudio.base.io.text import TextComponent\nfrom axiestudio.field_typing import Text\n\n\nclass TextInput(TextComponent):\n    display_name = \"Text Input\"\n    description = \"Get text inputs from the Interaction Panel.\"\n    icon = \"type\"\n\n    def build_config(self):\n        return {\n            \"input_value\": {\n                \"display_name\": \"Value\",\n                \"input_types\": [\"Record\", \"Text\"],\n                \"info\": \"Text or Record to be passed as input.\",\n            },\n            \"record_template\": {\n                \"display_name\": \"Record Template\",\n                \"multiline\": True,\n                \"info\": \"Template to convert Record to Text. If left empty, it will be dynamically set to the Record's text key.\",\n                \"advanced\": True,\n            },\n        }\n\n    def build(\n        self,\n        input_value: Optional[Text] = \"\",\n        record_template: Optional[str] = \"\",\n    ) -> Text:\n        return super().build(input_value=input_value, record_template=record_template)\n",
                "fileTypes": [],
                "file_path": "",
                "password": false,
                "name": "code",
                "advanced": true,
                "dynamic": true,
                "info": "",
                "load_from_db": false,
                "title_case": false
              },
              "record_template": {
                "type": "str",
                "required": false,
                "placeholder": "",
                "list": false,
                "show": true,
                "multiline": true,
                "value": "",
                "fileTypes": [],
                "file_path": "",
                "password": false,
                "name": "record_template",
                "display_name": "Record Template",
                "advanced": true,
                "dynamic": false,
                "info": "Template to convert Record to Text. If left empty, it will be dynamically set to the Record's text key.",
                "load_from_db": false,
                "title_case": false,
                "input_types": [
                  "Text"
                ]
              },
              "_type": "CustomComponent"
            },
            "description": "Get text inputs from the Interaction Panel.",
            "icon": "type",
            "base_classes": [
              "object",
              "str",
              "Text"
            ],
            "display_name": "Text Input",
            "documentation": "",
            "custom_fields": {
              "input_value": null,
              "record_template": null
            },
            "output_types": [
              "Text"
            ],
            "field_formatters": {},
            "frozen": false,
            "field_order": [],
            "beta": false
          },
          "id": "TextInput-G36IC"
        },
        "selected": false,
        "width": 384,
        "height": 297,
        "positionAbsolute": {
          "x": -2388.942409242161,
          "y": -542.3990081461412
        },
        "dragging": false
      },
      {
        "id": "ChatInput-HuRZp",
        "type": "genericNode",
        "position": {
          "x": -1954.8630045489167,
          "y": -505.7968308620539
        },
        "data": {
          "type": "ChatInput",
          "node": {
            "template": {
              "code": {
                "type": "code",
                "required": true,
                "placeholder": "",
                "list": false,
                "show": true,
                "multiline": true,
                "value": "from typing import Optional, Union\n\nfrom axiestudio.base.io.chat import ChatComponent\nfrom axiestudio.field_typing import Text\nfrom axiestudio.schema import Record\n\n\nclass ChatInput(ChatComponent):\n    display_name = \"Chat Input\"\n    description = \"Get chat inputs from the Interaction Panel.\"\n    icon = \"ChatInput\"\n\n    def build_config(self):\n        build_config = super().build_config()\n        build_config[\"input_value\"] = {\n            \"input_types\": [],\n            \"display_name\": \"Message\",\n            \"multiline\": True,\n        }\n\n        return build_config\n\n    def build(\n        self,\n        sender: Optional[str] = \"User\",\n        sender_name: Optional[str] = \"User\",\n        input_value: Optional[str] = None,\n        session_id: Optional[str] = None,\n        return_record: Optional[bool] = False,\n    ) -> Union[Text, Record]:\n        return super().build_no_record(\n            sender=sender,\n            sender_name=sender_name,\n            input_value=input_value,\n            session_id=session_id,\n            return_record=return_record,\n        )\n",
                "fileTypes": [],
                "file_path": "",
                "password": false,
                "name": "code",
                "advanced": true,
                "dynamic": true,
                "info": "",
                "load_from_db": false,
                "title_case": false
              },
              "input_value": {
                "type": "str",
                "required": false,
                "placeholder": "",
                "list": false,
                "show": true,
                "multiline": true,
                "fileTypes": [],
                "file_path": "",
                "password": false,
                "name": "input_value",
                "display_name": "Message",
                "advanced": false,
                "input_types": [],
                "dynamic": false,
                "info": "",
                "load_from_db": false,
                "title_case": false,
                "value": ""
              },
              "return_record": {
                "type": "bool",
                "required": false,
                "placeholder": "",
                "list": false,
                "show": true,
                "multiline": false,
                "value": false,
                "fileTypes": [],
                "file_path": "",
                "password": false,
                "name": "return_record",
                "display_name": "Return Record",
                "advanced": true,
                "dynamic": false,
                "info": "Return the message as a record containing the sender, sender_name, and session_id.",
                "load_from_db": false,
                "title_case": false
              },
              "sender": {
                "type": "str",
                "required": false,
                "placeholder": "",
                "list": true,
                "show": true,
                "multiline": false,
                "value": "User",
                "fileTypes": [],
                "file_path": "",
                "password": false,
                "options": [
                  "Machine",
                  "User"
                ],
                "name": "sender",
                "display_name": "Sender Type",
                "advanced": true,
                "dynamic": false,
                "info": "",
                "load_from_db": false,
                "title_case": false,
                "input_types": [
                  "Text"
                ]
              },
              "sender_name": {
                "type": "str",
                "required": false,
                "placeholder": "",
                "list": false,
                "show": true,
                "multiline": false,
                "value": "User",
                "fileTypes": [],
                "file_path": "",
                "password": false,
                "name": "sender_name",
                "display_name": "Sender Name",
                "advanced": false,
                "dynamic": false,
                "info": "",
                "load_from_db": false,
                "title_case": false,
                "input_types": [
                  "Text"
                ]
              },
              "session_id": {
                "type": "str",
                "required": false,
                "placeholder": "",
                "list": false,
                "show": true,
                "multiline": false,
                "fileTypes": [],
                "file_path": "",
                "password": false,
                "name": "session_id",
                "display_name": "Session ID",
                "advanced": true,
                "dynamic": false,
                "info": "If provided, the message will be stored in the memory.",
                "load_from_db": false,
                "title_case": false,
                "input_types": [
                  "Text"
                ]
              },
              "_type": "CustomComponent"
            },
            "description": "Get chat inputs from the Interaction Panel.",
            "icon": "ChatInput",
            "base_classes": [
              "object",
              "Record",
              "str",
              "Text"
            ],
            "display_name": "Chat Input",
            "documentation": "",
            "custom_fields": {
              "sender": null,
              "sender_name": null,
              "input_value": null,
              "session_id": null,
              "return_record": null
            },
            "output_types": [
              "Text",
              "Record"
            ],
            "field_formatters": {},
            "frozen": false,
            "field_order": [],
            "beta": false
          },
          "id": "ChatInput-HuRZp"
        },
        "selected": false,
        "width": 384,
        "height": 391,
        "positionAbsolute": {
          "x": -1954.8630045489167,
          "y": -505.7968308620539
        },
        "dragging": false
      },
      {
        "id": "TextInput-jYned",
        "type": "genericNode",
        "position": {
          "x": -2373.798905800174,
          "y": -850.7935047020542
        },
        "data": {
          "type": "TextInput",
          "node": {
            "template": {
              "input_value": {
                "type": "str",
                "required": false,
                "placeholder": "",
                "list": false,
                "show": true,
                "multiline": false,
                "value": "How mentally demanding was the task? (0-100)",
                "fileTypes": [],
                "file_path": "",
                "password": false,
                "name": "input_value",
                "display_name": "Value",
                "advanced": false,
                "input_types": [
                  "Record",
                  "Text"
                ],
                "dynamic": false,
                "info": "Text or Record to be passed as input.",
                "load_from_db": false,
                "title_case": false
              },
              "code": {
                "type": "code",
                "required": true,
                "placeholder": "",
                "list": false,
                "show": true,
                "multiline": true,
                "value": "from typing import Optional\n\nfrom axiestudio.base.io.text import TextComponent\nfrom axiestudio.field_typing import Text\n\n\nclass TextInput(TextComponent):\n    display_name = \"Text Input\"\n    description = \"Get text inputs from the Interaction Panel.\"\n    icon = \"type\"\n\n    def build_config(self):\n        return {\n            \"input_value\": {\n                \"display_name\": \"Value\",\n                \"input_types\": [\"Record\", \"Text\"],\n                \"info\": \"Text or Record to be passed as input.\",\n            },\n            \"record_template\": {\n                \"display_name\": \"Record Template\",\n                \"multiline\": True,\n                \"info\": \"Template to convert Record to Text. If left empty, it will be dynamically set to the Record's text key.\",\n                \"advanced\": True,\n            },\n        }\n\n    def build(\n        self,\n        input_value: Optional[Text] = \"\",\n        record_template: Optional[str] = \"\",\n    ) -> Text:\n        return super().build(input_value=input_value, record_template=record_template)\n",
                "fileTypes": [],
                "file_path": "",
                "password": false,
                "name": "code",
                "advanced": true,
                "dynamic": true,
                "info": "",
                "load_from_db": false,
                "title_case": false
              },
              "record_template": {
                "type": "str",
                "required": false,
                "placeholder": "",
                "list": false,
                "show": true,
                "multiline": true,
                "value": "",
                "fileTypes": [],
                "file_path": "",
                "password": false,
                "name": "record_template",
                "display_name": "Record Template",
                "advanced": true,
                "dynamic": false,
                "info": "Template to convert Record to Text. If left empty, it will be dynamically set to the Record's text key.",
                "load_from_db": false,
                "title_case": false,
                "input_types": [
                  "Text"
                ]
              },
              "_type": "CustomComponent"
            },
            "description": "Get text inputs from the Interaction Panel.",
            "icon": "type",
            "base_classes": [
              "object",
              "str",
              "Text"
            ],
            "display_name": "Text Input",
            "documentation": "",
            "custom_fields": {
              "input_value": null,
              "record_template": null
            },
            "output_types": [
              "Text"
            ],
            "field_formatters": {},
            "frozen": false,
            "field_order": [],
            "beta": false
          },
          "id": "TextInput-jYned"
        },
        "selected": false,
        "width": 384,
        "height": 297,
        "positionAbsolute": {
          "x": -2373.798905800174,
          "y": -850.7935047020542
        },
        "dragging": false
      },
      {
        "id": "ChatInput-KBJEC",
        "type": "genericNode",
        "position": {
          "x": -1736.0887154747422,
          "y": -992.6173318945476
        },
        "data": {
          "type": "ChatInput",
          "node": {
            "template": {
              "code": {
                "type": "code",
                "required": true,
                "placeholder": "",
                "list": false,
                "show": true,
                "multiline": true,
                "value": "from typing import Optional, Union\n\nfrom axiestudio.base.io.chat import ChatComponent\nfrom axiestudio.field_typing import Text\nfrom axiestudio.schema import Record\n\n\nclass ChatInput(ChatComponent):\n    display_name = \"Chat Input\"\n    description = \"Get chat inputs from the Interaction Panel.\"\n    icon = \"ChatInput\"\n\n    def build_config(self):\n        build_config = super().build_config()\n        build_config[\"input_value\"] = {\n            \"input_types\": [],\n            \"display_name\": \"Message\",\n            \"multiline\": True,\n        }\n\n        return build_config\n\n    def build(\n        self,\n        sender: Optional[str] = \"User\",\n        sender_name: Optional[str] = \"User\",\n        input_value: Optional[str] = None,\n        session_id: Optional[str] = None,\n        return_record: Optional[bool] = False,\n    ) -> Union[Text, Record]:\n        return super().build_no_record(\n            sender=sender,\n            sender_name=sender_name,\n            input_value=input_value,\n            session_id=session_id,\n            return_record=return_record,\n        )\n",
                "fileTypes": [],
                "file_path": "",
                "password": false,
                "name": "code",
                "advanced": true,
                "dynamic": true,
                "info": "",
                "load_from_db": false,
                "title_case": false
              },
              "input_value": {
                "type": "str",
                "required": false,
                "placeholder": "",
                "list": false,
                "show": true,
                "multiline": true,
                "fileTypes": [],
                "file_path": "",
                "password": false,
                "name": "input_value",
                "display_name": "Message",
                "advanced": false,
                "input_types": [],
                "dynamic": false,
                "info": "",
                "load_from_db": false,
                "title_case": false,
                "value": ""
              },
              "return_record": {
                "type": "bool",
                "required": false,
                "placeholder": "",
                "list": false,
                "show": true,
                "multiline": false,
                "value": false,
                "fileTypes": [],
                "file_path": "",
                "password": false,
                "name": "return_record",
                "display_name": "Return Record",
                "advanced": true,
                "dynamic": false,
                "info": "Return the message as a record containing the sender, sender_name, and session_id.",
                "load_from_db": false,
                "title_case": false
              },
              "sender": {
                "type": "str",
                "required": false,
                "placeholder": "",
                "list": true,
                "show": true,
                "multiline": false,
                "value": "User",
                "fileTypes": [],
                "file_path": "",
                "password": false,
                "options": [
                  "Machine",
                  "User"
                ],
                "name": "sender",
                "display_name": "Sender Type",
                "advanced": true,
                "dynamic": false,
                "info": "",
                "load_from_db": false,
                "title_case": false,
                "input_types": [
                  "Text"
                ]
              },
              "sender_name": {
                "type": "str",
                "required": false,
                "placeholder": "",
                "list": false,
                "show": true,
                "multiline": false,
                "value": "User",
                "fileTypes": [],
                "file_path": "",
                "password": false,
                "name": "sender_name",
                "display_name": "Sender Name",
                "advanced": false,
                "dynamic": false,
                "info": "",
                "load_from_db": false,
                "title_case": false,
                "input_types": [
                  "Text"
                ]
              },
              "session_id": {
                "type": "str",
                "required": false,
                "placeholder": "",
                "list": false,
                "show": true,
                "multiline": false,
                "fileTypes": [],
                "file_path": "",
                "password": false,
                "name": "session_id",
                "display_name": "Session ID",
                "advanced": true,
                "dynamic": false,
                "info": "If provided, the message will be stored in the memory.",
                "load_from_db": false,
                "title_case": false,
                "input_types": [
                  "Text"
                ]
              },
              "_type": "CustomComponent"
            },
            "description": "Get chat inputs from the Interaction Panel.",
            "icon": "ChatInput",
            "base_classes": [
              "object",
              "Record",
              "str",
              "Text"
            ],
            "display_name": "Chat Input",
            "documentation": "",
            "custom_fields": {
              "sender": null,
              "sender_name": null,
              "input_value": null,
              "session_id": null,
              "return_record": null
            },
            "output_types": [
              "Text",
              "Record"
            ],
            "field_formatters": {},
            "frozen": false,
            "field_order": [],
            "beta": false
          },
          "id": "ChatInput-KBJEC"
        },
        "selected": false,
        "width": 384,
        "height": 391,
        "positionAbsolute": {
          "x": -1736.0887154747422,
          "y": -992.6173318945476
        },
        "dragging": false
      },
      {
        "id": "Calculator-jrRc7",
        "type": "genericNode",
        "position": {
          "x": -747.4997297425699,
          "y": -1571.4094439337557
        },
        "data": {
          "type": "Calculator",
          "node": {
            "template": {
              "llm": {
                "type": "BaseLanguageModel",
                "required": true,
                "placeholder": "",
                "list": false,
                "show": true,
                "multiline": false,
                "value": "",
                "fileTypes": [],
                "file_path": "",
                "password": false,
                "name": "llm",
                "advanced": false,
                "dynamic": false,
                "info": "",
                "title_case": true
              },
              "_type": "Calculator"
            },
            "description": "Useful for when you need to answer questions about math.",
            "base_classes": [
              "Tool",
              "BaseTool"
            ],
            "display_name": "Calculator",
            "documentation": "",
            "custom_fields": {},
            "output_types": [],
            "field_formatters": {},
            "beta": false
          },
          "id": "Calculator-jrRc7"
        },
        "selected": false,
        "width": 384,
        "height": 263,
        "positionAbsolute": {
          "x": -747.4997297425699,
          "y": -1571.4094439337557
        },
        "dragging": false
      },
      {
        "id": "BaseLLM-We2EH",
        "type": "genericNode",
        "position": {
          "x": -1386.530951302448,
          "y": -1591.5469050300042
        },
        "data": {
          "type": "BaseLLM",
          "node": {
            "template": {
              "base_url": {
                "type": "str",
                "required": false,
                "placeholder": "",
                "list": false,
                "show": true,
                "multiline": false,
                "fileTypes": [],
                "file_path": "",
                "password": false,
                "name": "base_url",
                "display_name": "Base URL",
                "advanced": false,
                "dynamic": false,
                "info": "Endpoint of the Ollama API. Defaults to 'http://localhost:11434' if not specified.",
                "title_case": true
              },
              "code": {
                "type": "code",
                "required": true,
                "placeholder": "",
                "list": false,
                "show": true,
                "multiline": true,
                "value": "from typing import List, Optional\n\nfrom langchain.llms.base import BaseLLM\nfrom langchain_community.llms.ollama import Ollama\n\nfrom axiestudio import CustomComponent\n\n\nclass OllamaLLM(CustomComponent):\n    display_name = \"Ollama\"\n    description = \"Local LLM with Ollama.\"\n\n    def build_config(self) -> dict:\n        return {\n            \"base_url\": {\n                \"display_name\": \"Base URL\",\n                \"info\": \"Endpoint of the Ollama API. Defaults to 'http://localhost:11434' if not specified.\",\n            },\n            \"model\": {\n                \"display_name\": \"Model Name\",\n                \"value\": \"llama2\",\n                \"info\": \"Refer to https://ollama.ai/library for more models.\",\n            },\n            \"temperature\": {\n                \"display_name\": \"Temperature\",\n                \"field_type\": \"float\",\n                \"value\": 0.8,\n                \"info\": \"Controls the creativity of model responses.\",\n            },\n            \"mirostat\": {\n                \"display_name\": \"Mirostat\",\n                \"options\": [\"Disabled\", \"Mirostat\", \"Mirostat 2.0\"],\n                \"info\": \"Enable/disable Mirostat sampling for controlling perplexity.\",\n                \"value\": \"Disabled\",\n                \"advanced\": True,\n            },\n            \"mirostat_eta\": {\n                \"display_name\": \"Mirostat Eta\",\n                \"field_type\": \"float\",\n                \"info\": \"Learning rate influencing the algorithm's response to feedback.\",\n                \"advanced\": True,\n            },\n            \"mirostat_tau\": {\n                \"display_name\": \"Mirostat Tau\",\n                \"field_type\": \"float\",\n                \"info\": \"Controls balance between coherence and diversity.\",\n                \"advanced\": True,\n            },\n            \"num_ctx\": {\n                \"display_name\": \"Context Window Size\",\n                \"field_type\": \"int\",\n                \"info\": \"Size of the context window for generating the next token.\",\n                \"advanced\": True,\n            },\n            \"num_gpu\": {\n                \"display_name\": \"Number of GPUs\",\n                \"field_type\": \"int\",\n                \"info\": \"Number of GPUs to use for computation.\",\n                \"advanced\": True,\n            },\n            \"num_thread\": {\n                \"display_name\": \"Number of Threads\",\n                \"field_type\": \"int\",\n                \"info\": \"Number of threads to use during computation.\",\n                \"advanced\": True,\n            },\n            \"repeat_last_n\": {\n                \"display_name\": \"Repeat Last N\",\n                \"field_type\": \"int\",\n                \"info\": \"Sets how far back the model looks to prevent repetition.\",\n                \"advanced\": True,\n            },\n            \"repeat_penalty\": {\n                \"display_name\": \"Repeat Penalty\",\n                \"field_type\": \"float\",\n                \"info\": \"Penalty for repetitions in generated text.\",\n                \"advanced\": True,\n            },\n            \"stop\": {\n                \"display_name\": \"Stop Tokens\",\n                \"info\": \"List of tokens to signal the model to stop generating text.\",\n                \"advanced\": True,\n            },\n            \"tfs_z\": {\n                \"display_name\": \"TFS Z\",\n                \"field_type\": \"float\",\n                \"info\": \"Tail free sampling to reduce impact of less probable tokens.\",\n                \"advanced\": True,\n            },\n            \"top_k\": {\n                \"display_name\": \"Top K\",\n                \"field_type\": \"int\",\n                \"info\": \"Limits token selection to top K for reducing nonsense generation.\",\n                \"advanced\": True,\n            },\n            \"top_p\": {\n                \"display_name\": \"Top P\",\n                \"field_type\": \"int\",\n                \"info\": \"Works with top-k to control diversity of generated text.\",\n                \"advanced\": True,\n            },\n        }\n\n    def build(\n        self,\n        base_url: Optional[str],\n        model: str,\n        temperature: Optional[float],\n        mirostat: Optional[str],\n        mirostat_eta: Optional[float] = None,\n        mirostat_tau: Optional[float] = None,\n        num_ctx: Optional[int] = None,\n        num_gpu: Optional[int] = None,\n        num_thread: Optional[int] = None,\n        repeat_last_n: Optional[int] = None,\n        repeat_penalty: Optional[float] = None,\n        stop: Optional[List[str]] = None,\n        tfs_z: Optional[float] = None,\n        top_k: Optional[int] = None,\n        top_p: Optional[int] = None,\n    ) -> BaseLLM:\n        if not base_url:\n            base_url = \"http://localhost:11434\"\n\n        # Mapping mirostat settings to their corresponding values\n        mirostat_options = {\"Mirostat\": 1, \"Mirostat 2.0\": 2}\n\n        # Default to 0 for 'Disabled'\n        mirostat_value = mirostat_options.get(mirostat, 0)  # type: ignore\n\n        # Set mirostat_eta and mirostat_tau to None if mirostat is disabled\n        if mirostat_value == 0:\n            mirostat_eta = None\n            mirostat_tau = None\n\n        try:\n            llm = Ollama(\n                base_url=base_url,\n                model=model,\n                mirostat=mirostat_value,\n                mirostat_eta=mirostat_eta,\n                mirostat_tau=mirostat_tau,\n                num_ctx=num_ctx,\n                num_gpu=num_gpu,\n                num_thread=num_thread,\n                repeat_last_n=repeat_last_n,\n                repeat_penalty=repeat_penalty,\n                temperature=temperature,\n                stop=stop,\n                tfs_z=tfs_z,\n                top_k=top_k,\n                top_p=top_p,\n            )\n\n        except Exception as e:\n            raise ValueError(\"Could not connect to Ollama.\") from e\n\n        return llm\n",
                "fileTypes": [],
                "file_path": "",
                "password": false,
                "name": "code",
                "advanced": false,
                "dynamic": true,
                "info": "",
                "title_case": true
              },
              "mirostat": {
                "type": "str",
                "required": false,
                "placeholder": "",
                "list": true,
                "show": true,
                "multiline": false,
                "value": "Disabled",
                "fileTypes": [],
                "file_path": "",
                "password": false,
                "options": [
                  "Disabled",
                  "Mirostat",
                  "Mirostat 2.0"
                ],
                "name": "mirostat",
                "display_name": "Mirostat",
                "advanced": true,
                "dynamic": false,
                "info": "Enable/disable Mirostat sampling for controlling perplexity.",
                "title_case": true
              },
              "mirostat_eta": {
                "type": "float",
                "required": false,
                "placeholder": "",
                "list": false,
                "show": true,
                "multiline": false,
                "fileTypes": [],
                "file_path": "",
                "password": false,
                "name": "mirostat_eta",
                "display_name": "Mirostat Eta",
                "advanced": true,
                "dynamic": false,
                "info": "Learning rate influencing the algorithm's response to feedback.",
                "rangeSpec": {
                  "min": -1,
                  "max": 1,
                  "step": 0.1
                },
                "title_case": true
              },
              "mirostat_tau": {
                "type": "float",
                "required": false,
                "placeholder": "",
                "list": false,
                "show": true,
                "multiline": false,
                "fileTypes": [],
                "file_path": "",
                "password": false,
                "name": "mirostat_tau",
                "display_name": "Mirostat Tau",
                "advanced": true,
                "dynamic": false,
                "info": "Controls balance between coherence and diversity.",
                "rangeSpec": {
                  "min": -1,
                  "max": 1,
                  "step": 0.1
                },
                "title_case": true
              },
              "model": {
                "type": "str",
                "required": true,
                "placeholder": "",
                "list": false,
                "show": true,
                "multiline": false,
                "value": "llama2",
                "fileTypes": [],
                "file_path": "",
                "password": false,
                "name": "model",
                "display_name": "Model Name",
                "advanced": false,
                "dynamic": false,
                "info": "Refer to https://ollama.ai/library for more models.",
                "title_case": true
              },
              "num_ctx": {
                "type": "int",
                "required": false,
                "placeholder": "",
                "list": false,
                "show": true,
                "multiline": false,
                "fileTypes": [],
                "file_path": "",
                "password": false,
                "name": "num_ctx",
                "display_name": "Context Window Size",
                "advanced": true,
                "dynamic": false,
                "info": "Size of the context window for generating the next token.",
                "title_case": true
              },
              "num_gpu": {
                "type": "int",
                "required": false,
                "placeholder": "",
                "list": false,
                "show": true,
                "multiline": false,
                "fileTypes": [],
                "file_path": "",
                "password": false,
                "name": "num_gpu",
                "display_name": "Number of GPUs",
                "advanced": true,
                "dynamic": false,
                "info": "Number of GPUs to use for computation.",
                "title_case": true
              },
              "num_thread": {
                "type": "int",
                "required": false,
                "placeholder": "",
                "list": false,
                "show": true,
                "multiline": false,
                "fileTypes": [],
                "file_path": "",
                "password": false,
                "name": "num_thread",
                "display_name": "Number of Threads",
                "advanced": true,
                "dynamic": false,
                "info": "Number of threads to use during computation.",
                "title_case": true
              },
              "repeat_last_n": {
                "type": "int",
                "required": false,
                "placeholder": "",
                "list": false,
                "show": true,
                "multiline": false,
                "fileTypes": [],
                "file_path": "",
                "password": false,
                "name": "repeat_last_n",
                "display_name": "Repeat Last N",
                "advanced": true,
                "dynamic": false,
                "info": "Sets how far back the model looks to prevent repetition.",
                "title_case": true
              },
              "repeat_penalty": {
                "type": "float",
                "required": false,
                "placeholder": "",
                "list": false,
                "show": true,
                "multiline": false,
                "fileTypes": [],
                "file_path": "",
                "password": false,
                "name": "repeat_penalty",
                "display_name": "Repeat Penalty",
                "advanced": true,
                "dynamic": false,
                "info": "Penalty for repetitions in generated text.",
                "rangeSpec": {
                  "min": -1,
                  "max": 1,
                  "step": 0.1
                },
                "title_case": true
              },
              "stop": {
                "type": "str",
                "required": false,
                "placeholder": "",
                "list": true,
                "show": true,
                "multiline": false,
                "fileTypes": [],
                "file_path": "",
                "password": false,
                "name": "stop",
                "display_name": "Stop Tokens",
                "advanced": true,
                "dynamic": false,
                "info": "List of tokens to signal the model to stop generating text.",
                "title_case": true
              },
              "temperature": {
                "type": "float",
                "required": false,
                "placeholder": "",
                "list": false,
                "show": true,
                "multiline": false,
                "value": 0.8,
                "fileTypes": [],
                "file_path": "",
                "password": false,
                "name": "temperature",
                "display_name": "Temperature",
                "advanced": false,
                "dynamic": false,
                "info": "Controls the creativity of model responses.",
                "rangeSpec": {
                  "min": -1,
                  "max": 1,
                  "step": 0.1
                },
                "title_case": true
              },
              "tfs_z": {
                "type": "float",
                "required": false,
                "placeholder": "",
                "list": false,
                "show": true,
                "multiline": false,
                "fileTypes": [],
                "file_path": "",
                "password": false,
                "name": "tfs_z",
                "display_name": "TFS Z",
                "advanced": true,
                "dynamic": false,
                "info": "Tail free sampling to reduce impact of less probable tokens.",
                "rangeSpec": {
                  "min": -1,
                  "max": 1,
                  "step": 0.1
                },
                "title_case": true
              },
              "top_k": {
                "type": "int",
                "required": false,
                "placeholder": "",
                "list": false,
                "show": true,
                "multiline": false,
                "fileTypes": [],
                "file_path": "",
                "password": false,
                "name": "top_k",
                "display_name": "Top K",
                "advanced": true,
                "dynamic": false,
                "info": "Limits token selection to top K for reducing nonsense generation.",
                "title_case": true
              },
              "top_p": {
                "type": "int",
                "required": false,
                "placeholder": "",
                "list": false,
                "show": true,
                "multiline": false,
                "fileTypes": [],
                "file_path": "",
                "password": false,
                "name": "top_p",
                "display_name": "Top P",
                "advanced": true,
                "dynamic": false,
                "info": "Works with top-k to control diversity of generated text.",
                "title_case": true
              },
              "_type": "CustomComponent"
            },
            "description": "Local LLM with Ollama.",
            "base_classes": [
              "BaseLanguageModel",
              "BaseLLM"
            ],
            "display_name": "Ollama",
            "documentation": "",
            "custom_fields": {
              "base_url": null,
              "model": null,
              "temperature": null,
              "mirostat": null,
              "mirostat_eta": null,
              "mirostat_tau": null,
              "num_ctx": null,
              "num_gpu": null,
              "num_thread": null,
              "repeat_last_n": null,
              "repeat_penalty": null,
              "stop": null,
              "tfs_z": null,
              "top_k": null,
              "top_p": null
            },
            "output_types": [
              "BaseLLM"
            ],
            "field_formatters": {},
            "beta": true
          },
          "id": "BaseLLM-We2EH",
          "description": "Local LLM with Ollama.",
          "display_name": "Ollama"
        },
        "selected": false,
        "width": 384,
        "height": 555,
        "positionAbsolute": {
          "x": -1386.530951302448,
          "y": -1591.5469050300042
        },
        "dragging": false
      },
      {
        "id": "AgentInitializer-zE8Xs",
        "type": "genericNode",
        "position": {
          "x": -136.5668351256163,
          "y": -1497.9607914487976
        },
        "data": {
          "type": "AgentInitializer",
          "node": {
            "template": {
              "llm": {
                "type": "BaseLanguageModel",
                "required": true,
                "placeholder": "",
                "list": false,
                "show": true,
                "multiline": false,
                "fileTypes": [],
                "file_path": "",
                "password": false,
                "name": "llm",
                "display_name": "Language Model",
                "advanced": false,
                "dynamic": false,
                "info": "",
                "title_case": true
              },
              "memory": {
                "type": "BaseChatMemory",
                "required": false,
                "placeholder": "",
                "list": false,
                "show": true,
                "multiline": false,
                "fileTypes": [],
                "file_path": "",
                "password": false,
                "name": "memory",
                "display_name": "Memory",
                "advanced": false,
                "dynamic": false,
                "info": "",
                "title_case": true
              },
              "tools": {
                "type": "Tool",
                "required": true,
                "placeholder": "",
                "list": true,
                "show": true,
                "multiline": false,
                "fileTypes": [],
                "file_path": "",
                "password": false,
                "name": "tools",
                "display_name": "Tools",
                "advanced": false,
                "dynamic": false,
                "info": "",
                "title_case": true
              },
              "agent": {
                "type": "str",
                "required": true,
                "placeholder": "",
                "list": true,
                "show": true,
                "multiline": false,
                "value": "zero-shot-react-description",
                "fileTypes": [],
                "file_path": "",
                "password": false,
                "options": [
                  "zero-shot-react-description",
                  "react-docstore",
                  "self-ask-with-search",
                  "conversational-react-description",
                  "chat-zero-shot-react-description",
                  "chat-conversational-react-description",
                  "structured-chat-zero-shot-react-description",
                  "openai-functions",
                  "openai-multi-functions",
                  "JsonAgent",
                  "CSVAgent",
                  "VectorStoreAgent",
                  "VectorStoreRouterAgent",
                  "SQLAgent"
                ],
                "name": "agent",
                "display_name": "Agent Type",
                "advanced": false,
                "dynamic": false,
                "info": "",
                "title_case": true
              },
              "code": {
                "type": "code",
                "required": true,
                "placeholder": "",
                "list": false,
                "show": true,
                "multiline": true,
                "value": "from typing import Callable, List, Optional, Union\n\nfrom langchain.agents import AgentExecutor, AgentType, initialize_agent, types\nfrom axiestudio import CustomComponent\nfrom axiestudio.field_typing import BaseChatMemory, BaseLanguageModel, Tool\n\n\nclass AgentInitializerComponent(CustomComponent):\n    display_name: str = \"Agent Initializer\"\n    description: str = \"Initialize a Langchain Agent.\"\n    documentation: str = \"https://python.langchain.com/docs/modules/agents/agent_types/\"\n\n    def build_config(self):\n        agents = list(types.AGENT_TO_CLASS.keys())\n        # field_type and required are optional\n        return {\n            \"agent\": {\"options\": agents, \"value\": agents[0], \"display_name\": \"Agent Type\"},\n            \"max_iterations\": {\"display_name\": \"Max Iterations\", \"value\": 10},\n            \"memory\": {\"display_name\": \"Memory\"},\n            \"tools\": {\"display_name\": \"Tools\"},\n            \"llm\": {\"display_name\": \"Language Model\"},\n            \"code\": {\"advanced\": True},\n        }\n\n    def build(\n        self,\n        agent: str,\n        llm: BaseLanguageModel,\n        tools: List[Tool],\n        max_iterations: int,\n        memory: Optional[BaseChatMemory] = None,\n    ) -> Union[AgentExecutor, Callable]:\n        agent = AgentType(agent)\n        if memory:\n            return initialize_agent(\n                tools=tools,\n                llm=llm,\n                agent=agent,\n                memory=memory,\n                return_intermediate_steps=True,\n                handle_parsing_errors=True,\n                max_iterations=max_iterations,\n            )\n        return initialize_agent(\n            tools=tools,\n            llm=llm,\n            agent=agent,\n            return_intermediate_steps=True,\n            handle_parsing_errors=True,\n            max_iterations=max_iterations,\n        )\n",
                "fileTypes": [],
                "file_path": "",
                "password": false,
                "name": "code",
                "advanced": true,
                "dynamic": true,
                "info": "",
                "title_case": true
              },
              "max_iterations": {
                "type": "int",
                "required": true,
                "placeholder": "",
                "list": false,
                "show": true,
                "multiline": false,
                "value": 10,
                "fileTypes": [],
                "file_path": "",
                "password": false,
                "name": "max_iterations",
                "display_name": "Max Iterations",
                "advanced": false,
                "dynamic": false,
                "info": "",
                "title_case": true
              },
              "_type": "CustomComponent"
            },
            "description": "Initialize a Langchain Agent.",
            "base_classes": [
              "AgentExecutor",
              "Chain",
              "Callable"
            ],
            "display_name": "Agent Initializer",
            "documentation": "https://python.langchain.com/docs/modules/agents/agent_types/",
            "custom_fields": {
              "agent": null,
              "llm": null,
              "tools": null,
              "max_iterations": null,
              "memory": null
            },
            "output_types": [
              "AgentExecutor",
              "Callable"
            ],
            "field_formatters": {},
            "beta": true
          },
          "id": "AgentInitializer-zE8Xs"
        },
        "selected": false,
        "width": 384,
        "height": 515,
        "positionAbsolute": {
          "x": -136.5668351256163,
          "y": -1497.9607914487976
        },
        "dragging": false
      },
      {
        "id": "Search-vkHaJ",
        "type": "genericNode",
        "position": {
          "x": -736.1842232794054,
          "y": -1190.8776238762402
        },
        "data": {
          "type": "Search",
          "node": {
            "template": {
              "aiosession": {
                "type": "str",
                "required": false,
                "placeholder": "",
                "list": false,
                "show": false,
                "multiline": false,
                "value": "",
                "fileTypes": [],
                "file_path": "",
                "password": false,
                "name": "aiosession",
                "advanced": false,
                "dynamic": false,
                "info": "",
                "title_case": true
              },
              "serpapi_api_key": {
                "type": "str",
                "required": true,
                "placeholder": "",
                "list": false,
                "show": true,
                "multiline": false,
                "value": "",
                "fileTypes": [],
                "file_path": "",
                "password": true,
                "name": "serpapi_api_key",
                "advanced": false,
                "dynamic": false,
                "info": "",
                "title_case": true
              },
              "_type": "Search"
            },
            "description": "A search engine. Useful for when you need to answer questions about current events. Input should be a search query.",
            "base_classes": [
              "Tool",
              "BaseTool"
            ],
            "display_name": "Search",
            "documentation": "",
            "custom_fields": {},
            "output_types": [],
            "field_formatters": {},
            "beta": false
          },
          "id": "Search-vkHaJ"
        },
        "selected": false,
        "width": 384,
        "height": 329,
        "positionAbsolute": {
          "x": -736.1842232794054,
          "y": -1190.8776238762402
        },
        "dragging": false
      },
      {
        "id": "ChatOutput-1U9f5",
        "type": "genericNode",
        "position": {
          "x": -205.95883452621763,
          "y": -608.129386012972
        },
        "data": {
          "type": "ChatOutput",
          "node": {
            "template": {
              "code": {
                "type": "code",
                "required": true,
                "placeholder": "",
                "list": false,
                "show": true,
                "multiline": true,
                "value": "from typing import Optional, Union\n\nfrom axiestudio.base.io.chat import ChatComponent\nfrom axiestudio.field_typing import Text\nfrom axiestudio.schema import Record\n\n\nclass ChatOutput(ChatComponent):\n    display_name = \"Chat Output\"\n    description = \"Display a chat message in the Playground.\"\n    icon = \"ChatOutput\"\n\n    def build(\n        self,\n        sender: Optional[str] = \"Machine\",\n        sender_name: Optional[str] = \"AI\",\n        input_value: Optional[str] = None,\n        session_id: Optional[str] = None,\n        return_record: Optional[bool] = False,\n        record_template: Optional[str] = \"{text}\",\n    ) -> Union[Text, Record]:\n        return super().build_with_record(\n            sender=sender,\n            sender_name=sender_name,\n            input_value=input_value,\n            session_id=session_id,\n            return_record=return_record,\n            record_template=record_template or \"\",\n        )\n",
                "fileTypes": [],
                "file_path": "",
                "password": false,
                "name": "code",
                "advanced": true,
                "dynamic": true,
                "info": "",
                "load_from_db": false,
                "title_case": false
              },
              "input_value": {
                "type": "str",
                "required": false,
                "placeholder": "",
                "list": false,
                "show": true,
                "multiline": true,
                "fileTypes": [],
                "file_path": "",
                "password": false,
                "name": "input_value",
                "display_name": "Message",
                "advanced": false,
                "input_types": [
                  "Text"
                ],
                "dynamic": false,
                "info": "",
                "load_from_db": false,
                "title_case": false
              },
              "record_template": {
                "type": "str",
                "required": false,
                "placeholder": "",
                "list": false,
                "show": true,
                "multiline": true,
                "value": "{text}",
                "fileTypes": [],
                "file_path": "",
                "password": false,
                "name": "record_template",
                "display_name": "Record Template",
                "advanced": true,
                "dynamic": false,
                "info": "In case of Message being a Record, this template will be used to convert it to text.",
                "load_from_db": false,
                "title_case": false,
                "input_types": [
                  "Text"
                ]
              },
              "return_record": {
                "type": "bool",
                "required": false,
                "placeholder": "",
                "list": false,
                "show": true,
                "multiline": false,
                "value": false,
                "fileTypes": [],
                "file_path": "",
                "password": false,
                "name": "return_record",
                "display_name": "Return Record",
                "advanced": true,
                "dynamic": false,
                "info": "Return the message as a record containing the sender, sender_name, and session_id.",
                "load_from_db": false,
                "title_case": false
              },
              "sender": {
                "type": "str",
                "required": false,
                "placeholder": "",
                "list": true,
                "show": true,
                "multiline": false,
                "value": "Machine",
                "fileTypes": [],
                "file_path": "",
                "password": false,
                "options": [
                  "Machine",
                  "User"
                ],
                "name": "sender",
                "display_name": "Sender Type",
                "advanced": true,
                "dynamic": false,
                "info": "",
                "load_from_db": false,
                "title_case": false,
                "input_types": [
                  "Text"
                ]
              },
              "sender_name": {
                "type": "str",
                "required": false,
                "placeholder": "",
                "list": false,
                "show": true,
                "multiline": false,
                "value": "AI",
                "fileTypes": [],
                "file_path": "",
                "password": false,
                "name": "sender_name",
                "display_name": "Sender Name",
                "advanced": false,
                "dynamic": false,
                "info": "",
                "load_from_db": false,
                "title_case": false,
                "input_types": [
                  "Text"
                ]
              },
              "session_id": {
                "type": "str",
                "required": false,
                "placeholder": "",
                "list": false,
                "show": true,
                "multiline": false,
                "fileTypes": [],
                "file_path": "",
                "password": false,
                "name": "session_id",
                "display_name": "Session ID",
                "advanced": true,
                "dynamic": false,
                "info": "If provided, the message will be stored in the memory.",
                "load_from_db": false,
                "title_case": false,
                "input_types": [
                  "Text"
                ]
              },
              "_type": "CustomComponent"
            },
            "description": "Display a chat message in the Playground.",
            "icon": "ChatOutput",
            "base_classes": [
              "object",
              "Record",
              "str",
              "Text"
            ],
            "display_name": "Chat Output",
            "documentation": "",
            "custom_fields": {
              "sender": null,
              "sender_name": null,
              "input_value": null,
              "session_id": null,
              "return_record": null,
              "record_template": null
            },
            "output_types": [
              "Text",
              "Record"
            ],
            "field_formatters": {},
            "frozen": false,
            "field_order": [],
            "beta": false
          },
          "id": "ChatOutput-1U9f5"
        },
        "selected": false,
        "width": 384,
        "height": 391,
        "positionAbsolute": {
          "x": -205.95883452621763,
          "y": -608.129386012972
        },
        "dragging": false
      }
    ],
    "edges": [
      {
        "source": "TextInput-nmGaZ",
        "sourceHandle": "{œbaseClassesœ:[œobjectœ,œstrœ,œTextœ],œdataTypeœ:œTextInputœ,œidœ:œTextInput-nmGaZœ}",
        "target": "ChatInput-dykoz",
        "targetHandle": "{œfieldNameœ:œinput_valueœ,œidœ:œChatInput-dykozœ,œinputTypesœ:[],œtypeœ:œstrœ}",
        "data": {
          "targetHandle": {
            "fieldName": "input_value",
            "id": "ChatInput-dykoz",
            "inputTypes": [],
            "type": "str"
          },
          "sourceHandle": {
            "baseClasses": [
              "object",
              "str",
              "Text"
            ],
            "dataType": "TextInput",
            "id": "TextInput-nmGaZ"
          }
        },
        "style": {
          "stroke": "#555"
        },
        "className": "stroke-foreground  stroke-connection",
        "animated": false,
        "id": "reactflow__edge-TextInput-nmGaZ{œbaseClassesœ:[œobjectœ,œstrœ,œTextœ],œdataTypeœ:œTextInputœ,œidœ:œTextInput-nmGaZœ}-ChatInput-dykoz{œfieldNameœ:œinput_valueœ,œidœ:œChatInput-dykozœ,œinputTypesœ:[],œtypeœ:œstrœ}",
        "selected": false
      },
      {
        "source": "ChatInput-dykoz",
        "sourceHandle": "{œbaseClassesœ:[œobjectœ,œRecordœ,œstrœ,œTextœ],œdataTypeœ:œChatInputœ,œidœ:œChatInput-dykozœ}",
        "target": "MemoryComponent-PDg8B",
        "targetHandle": "{œfieldNameœ:œsenderœ,œidœ:œMemoryComponent-PDg8Bœ,œinputTypesœ:[œTextœ],œtypeœ:œstrœ}",
        "data": {
          "targetHandle": {
            "fieldName": "sender",
            "id": "MemoryComponent-PDg8B",
            "inputTypes": [
              "Text"
            ],
            "type": "str"
          },
          "sourceHandle": {
            "baseClasses": [
              "object",
              "Record",
              "str",
              "Text"
            ],
            "dataType": "ChatInput",
            "id": "ChatInput-dykoz"
          }
        },
        "style": {
          "stroke": "#555"
        },
        "className": "stroke-foreground  stroke-connection",
        "animated": false,
        "id": "reactflow__edge-ChatInput-dykoz{œbaseClassesœ:[œobjectœ,œRecordœ,œstrœ,œTextœ],œdataTypeœ:œChatInputœ,œidœ:œChatInput-dykozœ}-MemoryComponent-PDg8B{œfieldNameœ:œsenderœ,œidœ:œMemoryComponent-PDg8Bœ,œinputTypesœ:[œTextœ],œtypeœ:œstrœ}",
        "selected": false
      },
      {
        "source": "TextInput-G36IC",
        "sourceHandle": "{œbaseClassesœ:[œobjectœ,œstrœ,œTextœ],œdataTypeœ:œTextInputœ,œidœ:œTextInput-G36ICœ}",
        "target": "ChatInput-HuRZp",
        "targetHandle": "{œfieldNameœ:œinput_valueœ,œidœ:œChatInput-HuRZpœ,œinputTypesœ:[],œtypeœ:œstrœ}",
        "data": {
          "targetHandle": {
            "fieldName": "input_value",
            "id": "ChatInput-HuRZp",
            "inputTypes": [],
            "type": "str"
          },
          "sourceHandle": {
            "baseClasses": [
              "object",
              "str",
              "Text"
            ],
            "dataType": "TextInput",
            "id": "TextInput-G36IC"
          }
        },
        "style": {
          "stroke": "#555"
        },
        "className": "stroke-foreground  stroke-connection",
        "animated": false,
        "id": "reactflow__edge-TextInput-G36IC{œbaseClassesœ:[œobjectœ,œstrœ,œTextœ],œdataTypeœ:œTextInputœ,œidœ:œTextInput-G36ICœ}-ChatInput-HuRZp{œfieldNameœ:œinput_valueœ,œidœ:œChatInput-HuRZpœ,œinputTypesœ:[],œtypeœ:œstrœ}",
        "selected": false
      },
      {
        "source": "ChatInput-HuRZp",
        "sourceHandle": "{œbaseClassesœ:[œobjectœ,œRecordœ,œstrœ,œTextœ],œdataTypeœ:œChatInputœ,œidœ:œChatInput-HuRZpœ}",
        "target": "MemoryComponent-PDg8B",
        "targetHandle": "{œfieldNameœ:œsenderœ,œidœ:œMemoryComponent-PDg8Bœ,œinputTypesœ:[œTextœ],œtypeœ:œstrœ}",
        "data": {
          "targetHandle": {
            "fieldName": "sender",
            "id": "MemoryComponent-PDg8B",
            "inputTypes": [
              "Text"
            ],
            "type": "str"
          },
          "sourceHandle": {
            "baseClasses": [
              "object",
              "Record",
              "str",
              "Text"
            ],
            "dataType": "ChatInput",
            "id": "ChatInput-HuRZp"
          }
        },
        "style": {
          "stroke": "#555"
        },
        "className": "stroke-foreground  stroke-connection",
        "animated": false,
        "id": "reactflow__edge-ChatInput-HuRZp{œbaseClassesœ:[œobjectœ,œRecordœ,œstrœ,œTextœ],œdataTypeœ:œChatInputœ,œidœ:œChatInput-HuRZpœ}-MemoryComponent-PDg8B{œfieldNameœ:œsenderœ,œidœ:œMemoryComponent-PDg8Bœ,œinputTypesœ:[œTextœ],œtypeœ:œstrœ}",
        "selected": false
      },
      {
        "source": "TextInput-jYned",
        "sourceHandle": "{œbaseClassesœ:[œobjectœ,œstrœ,œTextœ],œdataTypeœ:œTextInputœ,œidœ:œTextInput-jYnedœ}",
        "target": "ChatInput-KBJEC",
        "targetHandle": "{œfieldNameœ:œinput_valueœ,œidœ:œChatInput-KBJECœ,œinputTypesœ:[],œtypeœ:œstrœ}",
        "data": {
          "targetHandle": {
            "fieldName": "input_value",
            "id": "ChatInput-KBJEC",
            "inputTypes": [],
            "type": "str"
          },
          "sourceHandle": {
            "baseClasses": [
              "object",
              "str",
              "Text"
            ],
            "dataType": "TextInput",
            "id": "TextInput-jYned"
          }
        },
        "style": {
          "stroke": "#555"
        },
        "className": "stroke-foreground  stroke-connection",
        "animated": false,
        "id": "reactflow__edge-TextInput-jYned{œbaseClassesœ:[œobjectœ,œstrœ,œTextœ],œdataTypeœ:œTextInputœ,œidœ:œTextInput-jYnedœ}-ChatInput-KBJEC{œfieldNameœ:œinput_valueœ,œidœ:œChatInput-KBJECœ,œinputTypesœ:[],œtypeœ:œstrœ}",
        "selected": false
      },
      {
        "source": "ChatInput-KBJEC",
        "sourceHandle": "{œbaseClassesœ:[œobjectœ,œRecordœ,œstrœ,œTextœ],œdataTypeœ:œChatInputœ,œidœ:œChatInput-KBJECœ}",
        "target": "MemoryComponent-PDg8B",
        "targetHandle": "{œfieldNameœ:œsenderœ,œidœ:œMemoryComponent-PDg8Bœ,œinputTypesœ:[œTextœ],œtypeœ:œstrœ}",
        "data": {
          "targetHandle": {
            "fieldName": "sender",
            "id": "MemoryComponent-PDg8B",
            "inputTypes": [
              "Text"
            ],
            "type": "str"
          },
          "sourceHandle": {
            "baseClasses": [
              "object",
              "Record",
              "str",
              "Text"
            ],
            "dataType": "ChatInput",
            "id": "ChatInput-KBJEC"
          }
        },
        "style": {
          "stroke": "#555"
        },
        "className": "stroke-foreground  stroke-connection",
        "animated": false,
        "id": "reactflow__edge-ChatInput-KBJEC{œbaseClassesœ:[œobjectœ,œRecordœ,œstrœ,œTextœ],œdataTypeœ:œChatInputœ,œidœ:œChatInput-KBJECœ}-MemoryComponent-PDg8B{œfieldNameœ:œsenderœ,œidœ:œMemoryComponent-PDg8Bœ,œinputTypesœ:[œTextœ],œtypeœ:œstrœ}",
        "selected": false
      },
      {
        "source": "MemoryComponent-PDg8B",
        "sourceHandle": "{œbaseClassesœ:[œobjectœ,œstrœ,œTextœ],œdataTypeœ:œMemoryComponentœ,œidœ:œMemoryComponent-PDg8Bœ}",
        "target": "Prompt-FqMeL",
        "targetHandle": "{œfieldNameœ:œhistoryœ,œidœ:œPrompt-FqMeLœ,œinputTypesœ:[œDocumentœ,œBaseOutputParserœ],œtypeœ:œstrœ}",
        "data": {
          "targetHandle": {
            "fieldName": "history",
            "id": "Prompt-FqMeL",
            "inputTypes": [
              "Document",
              "BaseOutputParser"
            ],
            "type": "str"
          },
          "sourceHandle": {
            "baseClasses": [
              "object",
              "str",
              "Text"
            ],
            "dataType": "MemoryComponent",
            "id": "MemoryComponent-PDg8B"
          }
        },
        "style": {
          "stroke": "#555"
        },
        "className": "stroke-foreground  stroke-connection",
        "animated": false,
        "id": "reactflow__edge-MemoryComponent-PDg8B{œbaseClassesœ:[œobjectœ,œstrœ,œTextœ],œdataTypeœ:œMemoryComponentœ,œidœ:œMemoryComponent-PDg8Bœ}-Prompt-FqMeL{œfieldNameœ:œhistoryœ,œidœ:œPrompt-FqMeLœ,œinputTypesœ:[œDocumentœ,œBaseOutputParserœ],œtypeœ:œstrœ}",
        "selected": false
      },
      {
        "source": "BaseLLM-We2EH",
        "sourceHandle": "{œbaseClassesœ:[œBaseLanguageModelœ,œBaseLLMœ],œdataTypeœ:œBaseLLMœ,œidœ:œBaseLLM-We2EHœ}",
        "target": "Calculator-jrRc7",
        "targetHandle": "{œfieldNameœ:œllmœ,œidœ:œCalculator-jrRc7œ,œinputTypesœ:null,œtypeœ:œBaseLanguageModelœ}",
        "data": {
          "targetHandle": {
            "fieldName": "llm",
            "id": "Calculator-jrRc7",
            "inputTypes": null,
            "type": "BaseLanguageModel"
          },
          "sourceHandle": {
            "baseClasses": [
              "BaseLanguageModel",
              "BaseLLM"
            ],
            "dataType": "BaseLLM",
            "id": "BaseLLM-We2EH"
          }
        },
        "style": {
          "stroke": "#555"
        },
        "className": "stroke-foreground  stroke-connection",
        "animated": false,
        "id": "reactflow__edge-BaseLLM-We2EH{œbaseClassesœ:[œBaseLanguageModelœ,œBaseLLMœ],œdataTypeœ:œBaseLLMœ,œidœ:œBaseLLM-We2EHœ}-Calculator-jrRc7{œfieldNameœ:œllmœ,œidœ:œCalculator-jrRc7œ,œinputTypesœ:null,œtypeœ:œBaseLanguageModelœ}",
        "selected": false
      },
      {
        "source": "Calculator-jrRc7",
        "sourceHandle": "{œbaseClassesœ:[œToolœ,œBaseToolœ],œdataTypeœ:œCalculatorœ,œidœ:œCalculator-jrRc7œ}",
        "target": "AgentInitializer-zE8Xs",
        "targetHandle": "{œfieldNameœ:œtoolsœ,œidœ:œAgentInitializer-zE8Xsœ,œinputTypesœ:null,œtypeœ:œToolœ}",
        "data": {
          "targetHandle": {
            "fieldName": "tools",
            "id": "AgentInitializer-zE8Xs",
            "inputTypes": null,
            "type": "Tool"
          },
          "sourceHandle": {
            "baseClasses": [
              "Tool",
              "BaseTool"
            ],
            "dataType": "Calculator",
            "id": "Calculator-jrRc7"
          }
        },
        "style": {
          "stroke": "#555"
        },
        "className": "stroke-foreground  stroke-connection",
        "animated": false,
        "id": "reactflow__edge-Calculator-jrRc7{œbaseClassesœ:[œToolœ,œBaseToolœ],œdataTypeœ:œCalculatorœ,œidœ:œCalculator-jrRc7œ}-AgentInitializer-zE8Xs{œfieldNameœ:œtoolsœ,œidœ:œAgentInitializer-zE8Xsœ,œinputTypesœ:null,œtypeœ:œToolœ}",
        "selected": false
      },
      {
        "source": "BaseLLM-We2EH",
        "sourceHandle": "{œbaseClassesœ:[œBaseLanguageModelœ,œBaseLLMœ],œdataTypeœ:œBaseLLMœ,œidœ:œBaseLLM-We2EHœ}",
        "target": "AgentInitializer-zE8Xs",
        "targetHandle": "{œfieldNameœ:œllmœ,œidœ:œAgentInitializer-zE8Xsœ,œinputTypesœ:null,œtypeœ:œBaseLanguageModelœ}",
        "data": {
          "targetHandle": {
            "fieldName": "llm",
            "id": "AgentInitializer-zE8Xs",
            "inputTypes": null,
            "type": "BaseLanguageModel"
          },
          "sourceHandle": {
            "baseClasses": [
              "BaseLanguageModel",
              "BaseLLM"
            ],
            "dataType": "BaseLLM",
            "id": "BaseLLM-We2EH"
          }
        },
        "style": {
          "stroke": "#555"
        },
        "className": "stroke-foreground  stroke-connection",
        "animated": false,
        "id": "reactflow__edge-BaseLLM-We2EH{œbaseClassesœ:[œBaseLanguageModelœ,œBaseLLMœ],œdataTypeœ:œBaseLLMœ,œidœ:œBaseLLM-We2EHœ}-AgentInitializer-zE8Xs{œfieldNameœ:œllmœ,œidœ:œAgentInitializer-zE8Xsœ,œinputTypesœ:null,œtypeœ:œBaseLanguageModelœ}",
        "selected": false
      },
      {
        "source": "Search-vkHaJ",
        "sourceHandle": "{œbaseClassesœ:[œToolœ,œBaseToolœ],œdataTypeœ:œSearchœ,œidœ:œSearch-vkHaJœ}",
        "target": "AgentInitializer-zE8Xs",
        "targetHandle": "{œfieldNameœ:œtoolsœ,œidœ:œAgentInitializer-zE8Xsœ,œinputTypesœ:null,œtypeœ:œToolœ}",
        "data": {
          "targetHandle": {
            "fieldName": "tools",
            "id": "AgentInitializer-zE8Xs",
            "inputTypes": null,
            "type": "Tool"
          },
          "sourceHandle": {
            "baseClasses": [
              "Tool",
              "BaseTool"
            ],
            "dataType": "Search",
            "id": "Search-vkHaJ"
          }
        },
        "style": {
          "stroke": "#555"
        },
        "className": "stroke-foreground  stroke-connection",
        "animated": false,
        "id": "reactflow__edge-Search-vkHaJ{œbaseClassesœ:[œToolœ,œBaseToolœ],œdataTypeœ:œSearchœ,œidœ:œSearch-vkHaJœ}-AgentInitializer-zE8Xs{œfieldNameœ:œtoolsœ,œidœ:œAgentInitializer-zE8Xsœ,œinputTypesœ:null,œtypeœ:œToolœ}",
        "selected": false
      },
      {
        "source": "Prompt-FqMeL",
        "sourceHandle": "{œbaseClassesœ:[œstrœ,œTextœ],œdataTypeœ:œPromptœ,œidœ:œPrompt-FqMeLœ}",
        "target": "ChatOutput-1U9f5",
        "targetHandle": "{œfieldNameœ:œinput_valueœ,œidœ:œChatOutput-1U9f5œ,œinputTypesœ:[œTextœ],œtypeœ:œstrœ}",
        "data": {
          "targetHandle": {
            "fieldName": "input_value",
            "id": "ChatOutput-1U9f5",
            "inputTypes": [
              "Text"
            ],
            "type": "str"
          },
          "sourceHandle": {
            "baseClasses": [
              "str",
              "Text"
            ],
            "dataType": "Prompt",
            "id": "Prompt-FqMeL"
          }
        },
        "style": {
          "stroke": "#555"
        },
        "className": "stroke-foreground  stroke-connection",
        "animated": false,
        "id": "reactflow__edge-Prompt-FqMeL{œbaseClassesœ:[œstrœ,œTextœ],œdataTypeœ:œPromptœ,œidœ:œPrompt-FqMeLœ}-ChatOutput-1U9f5{œfieldNameœ:œinput_valueœ,œidœ:œChatOutput-1U9f5œ,œinputTypesœ:[œTextœ],œtypeœ:œstrœ}"
      }
    ],
    "viewport": {
      "x": 1260.6744101493734,
      "y": 846.6088827570151,
      "zoom": 0.48210624798355733
    }
  },
  "metadata": {
    "ChatInput": {
      "count": 3
    },
    "TextInput": {
      "count": 3
    },
    "Prompt": {
      "count": 1
    },
    "MemoryComponent": {
      "count": 1
    },
    "Calculator": {
      "count": 1
    },
    "BaseLLM": {
      "count": 1
    },
    "AgentInitializer": {
      "count": 1
    },
    "Search": {
      "count": 1
    },
    "ChatOutput": {
      "count": 1
    },
    "total": 13
  },
  "original": {
    "id": "2ff4748f-5400-4dd8-b561-6e6d2ef53178",
    "name": "Basic Prompting",
    "description": "This flow will get you experimenting with the basics of the UI, the Chat and the Prompt component. ",
    "is_component": false,
    "liked_by_count": "3",
    "downloads_count": "43",
    "metadata": {
      "ChatInput": {
        "count": 3
      },
      "TextInput": {
        "count": 3
      },
      "Prompt": {
        "count": 1
      },
      "MemoryComponent": {
        "count": 1
      },
      "Calculator": {
        "count": 1
      },
      "BaseLLM": {
        "count": 1
      },
      "AgentInitializer": {
        "count": 1
      },
      "Search": {
        "count": 1
      },
      "ChatOutput": {
        "count": 1
      },
      "total": 13
    },
    "last_tested_version": "0.6.15",
    "private": false,
    "data": {
      "nodes": [
        {
          "id": "ChatInput-dykoz",
          "type": "genericNode",
          "position": {
            "x": -1956.3097979527174,
            "y": -93.40421802014129
          },
          "data": {
            "type": "ChatInput",
            "node": {
              "template": {
                "code": {
                  "type": "code",
                  "required": true,
                  "placeholder": "",
                  "list": false,
                  "show": true,
                  "multiline": true,
                  "value": "from typing import Optional, Union\n\nfrom axiestudio.base.io.chat import ChatComponent\nfrom axiestudio.field_typing import Text\nfrom axiestudio.schema import Record\n\n\nclass ChatInput(ChatComponent):\n    display_name = \"Chat Input\"\n    description = \"Get chat inputs from the Interaction Panel.\"\n    icon = \"ChatInput\"\n\n    def build_config(self):\n        build_config = super().build_config()\n        build_config[\"input_value\"] = {\n            \"input_types\": [],\n            \"display_name\": \"Message\",\n            \"multiline\": True,\n        }\n\n        return build_config\n\n    def build(\n        self,\n        sender: Optional[str] = \"User\",\n        sender_name: Optional[str] = \"User\",\n        input_value: Optional[str] = None,\n        session_id: Optional[str] = None,\n        return_record: Optional[bool] = False,\n    ) -> Union[Text, Record]:\n        return super().build_no_record(\n            sender=sender,\n            sender_name=sender_name,\n            input_value=input_value,\n            session_id=session_id,\n            return_record=return_record,\n        )\n",
                  "fileTypes": [],
                  "file_path": "",
                  "password": false,
                  "name": "code",
                  "advanced": true,
                  "dynamic": true,
                  "info": "",
                  "load_from_db": false,
                  "title_case": false
                },
                "input_value": {
                  "type": "str",
                  "required": false,
                  "placeholder": "",
                  "list": false,
                  "show": true,
                  "multiline": true,
                  "fileTypes": [],
                  "file_path": "",
                  "password": false,
                  "name": "input_value",
                  "display_name": "Message",
                  "advanced": false,
                  "input_types": [],
                  "dynamic": false,
                  "info": "",
                  "load_from_db": false,
                  "title_case": false,
                  "value": ""
                },
                "return_record": {
                  "type": "bool",
                  "required": false,
                  "placeholder": "",
                  "list": false,
                  "show": true,
                  "multiline": false,
                  "value": false,
                  "fileTypes": [],
                  "file_path": "",
                  "password": false,
                  "name": "return_record",
                  "display_name": "Return Record",
                  "advanced": true,
                  "dynamic": false,
                  "info": "Return the message as a record containing the sender, sender_name, and session_id.",
                  "load_from_db": false,
                  "title_case": false
                },
                "sender": {
                  "type": "str",
                  "required": false,
                  "placeholder": "",
                  "list": true,
                  "show": true,
                  "multiline": false,
                  "value": "User",
                  "fileTypes": [],
                  "file_path": "",
                  "password": false,
                  "options": [
                    "Machine",
                    "User"
                  ],
                  "name": "sender",
                  "display_name": "Sender Type",
                  "advanced": true,
                  "dynamic": false,
                  "info": "",
                  "load_from_db": false,
                  "title_case": false,
                  "input_types": [
                    "Text"
                  ]
                },
                "sender_name": {
                  "type": "str",
                  "required": false,
                  "placeholder": "",
                  "list": false,
                  "show": true,
                  "multiline": false,
                  "value": "User",
                  "fileTypes": [],
                  "file_path": "",
                  "password": false,
                  "name": "sender_name",
                  "display_name": "Sender Name",
                  "advanced": false,
                  "dynamic": false,
                  "info": "",
                  "load_from_db": false,
                  "title_case": false,
                  "input_types": [
                    "Text"
                  ]
                },
                "session_id": {
                  "type": "str",
                  "required": false,
                  "placeholder": "",
                  "list": false,
                  "show": true,
                  "multiline": false,
                  "fileTypes": [],
                  "file_path": "",
                  "password": false,
                  "name": "session_id",
                  "display_name": "Session ID",
                  "advanced": true,
                  "dynamic": false,
                  "info": "If provided, the message will be stored in the memory.",
                  "load_from_db": false,
                  "title_case": false,
                  "input_types": [
                    "Text"
                  ]
                },
                "_type": "CustomComponent"
              },
              "description": "Get chat inputs from the Interaction Panel.",
              "icon": "ChatInput",
              "base_classes": [
                "object",
                "Record",
                "str",
                "Text"
              ],
              "display_name": "Chat Input",
              "documentation": "",
              "custom_fields": {
                "sender": null,
                "sender_name": null,
                "input_value": null,
                "session_id": null,
                "return_record": null
              },
              "output_types": [
                "Text",
                "Record"
              ],
              "field_formatters": {},
              "frozen": false,
              "field_order": [],
              "beta": false
            },
            "id": "ChatInput-dykoz"
          },
          "selected": false,
          "width": 384,
          "height": 375,
          "positionAbsolute": {
            "x": -1956.3097979527174,
            "y": -93.40421802014129
          },
          "dragging": false
        },
        {
          "id": "TextInput-nmGaZ",
          "type": "genericNode",
          "position": {
            "x": -2397.075987604987,
            "y": -202.7673030776446
          },
          "data": {
            "type": "TextInput",
            "node": {
              "template": {
                "input_value": {
                  "type": "str",
                  "required": false,
                  "placeholder": "",
                  "list": false,
                  "show": true,
                  "multiline": false,
                  "value": "How hurried or rushed was the pace of the task? (0-100)",
                  "fileTypes": [],
                  "file_path": "",
                  "password": false,
                  "name": "input_value",
                  "display_name": "Value",
                  "advanced": false,
                  "input_types": [
                    "Record",
                    "Text"
                  ],
                  "dynamic": false,
                  "info": "Text or Record to be passed as input.",
                  "load_from_db": false,
                  "title_case": false
                },
                "code": {
                  "type": "code",
                  "required": true,
                  "placeholder": "",
                  "list": false,
                  "show": true,
                  "multiline": true,
                  "value": "from typing import Optional\n\nfrom axiestudio.base.io.text import TextComponent\nfrom axiestudio.field_typing import Text\n\n\nclass TextInput(TextComponent):\n    display_name = \"Text Input\"\n    description = \"Get text inputs from the Interaction Panel.\"\n    icon = \"type\"\n\n    def build_config(self):\n        return {\n            \"input_value\": {\n                \"display_name\": \"Value\",\n                \"input_types\": [\"Record\", \"Text\"],\n                \"info\": \"Text or Record to be passed as input.\",\n            },\n            \"record_template\": {\n                \"display_name\": \"Record Template\",\n                \"multiline\": True,\n                \"info\": \"Template to convert Record to Text. If left empty, it will be dynamically set to the Record's text key.\",\n                \"advanced\": True,\n            },\n        }\n\n    def build(\n        self,\n        input_value: Optional[Text] = \"\",\n        record_template: Optional[str] = \"\",\n    ) -> Text:\n        return super().build(input_value=input_value, record_template=record_template)\n",
                  "fileTypes": [],
                  "file_path": "",
                  "password": false,
                  "name": "code",
                  "advanced": true,
                  "dynamic": true,
                  "info": "",
                  "load_from_db": false,
                  "title_case": false
                },
                "record_template": {
                  "type": "str",
                  "required": false,
                  "placeholder": "",
                  "list": false,
                  "show": true,
                  "multiline": true,
                  "value": "",
                  "fileTypes": [],
                  "file_path": "",
                  "password": false,
                  "name": "record_template",
                  "display_name": "Record Template",
                  "advanced": true,
                  "dynamic": false,
                  "info": "Template to convert Record to Text. If left empty, it will be dynamically set to the Record's text key.",
                  "load_from_db": false,
                  "title_case": false,
                  "input_types": [
                    "Text"
                  ]
                },
                "_type": "CustomComponent"
              },
              "description": "Get text inputs from the Interaction Panel.",
              "icon": "type",
              "base_classes": [
                "object",
                "str",
                "Text"
              ],
              "display_name": "Text Input",
              "documentation": "",
              "custom_fields": {
                "input_value": null,
                "record_template": null
              },
              "output_types": [
                "Text"
              ],
              "field_formatters": {},
              "frozen": false,
              "field_order": [],
              "beta": false
            },
            "id": "TextInput-nmGaZ"
          },
          "selected": false,
          "width": 384,
          "height": 289,
          "positionAbsolute": {
            "x": -2397.075987604987,
            "y": -202.7673030776446
          },
          "dragging": false
        },
        {
          "id": "Prompt-FqMeL",
          "type": "genericNode",
          "position": {
            "x": -768.8686402796882,
            "y": -664.9822063034544
          },
          "data": {
            "type": "Prompt",
            "node": {
              "template": {
                "code": {
                  "type": "code",
                  "required": true,
                  "placeholder": "",
                  "list": false,
                  "show": true,
                  "multiline": true,
                  "value": "from langchain_core.prompts import PromptTemplate\n\nfrom axiestudio.custom import CustomComponent\nfrom axiestudio.field_typing import Prompt, TemplateField, Text\n\n\nclass PromptComponent(CustomComponent):\n    display_name: str = \"Prompt\"\n    description: str = \"Create a prompt template with dynamic variables.\"\n    icon = \"prompts\"\n\n    def build_config(self):\n        return {\n            \"template\": TemplateField(display_name=\"Template\"),\n            \"code\": TemplateField(advanced=True),\n        }\n\n    def build(\n        self,\n        template: Prompt,\n        **kwargs,\n    ) -> Text:\n        from axiestudio.base.prompts.utils import dict_values_to_string\n\n        prompt_template = PromptTemplate.from_template(Text(template))\n        kwargs = dict_values_to_string(kwargs)\n        kwargs = {k: \"\\n\".join(v) if isinstance(v, list) else v for k, v in kwargs.items()}\n        try:\n            formated_prompt = prompt_template.format(**kwargs)\n        except Exception as exc:\n            raise ValueError(f\"Error formatting prompt: {exc}\") from exc\n        self.status = f'Prompt:\\n\"{formated_prompt}\"'\n        return formated_prompt\n",
                  "fileTypes": [],
                  "file_path": "",
                  "password": false,
                  "name": "code",
                  "advanced": true,
                  "dynamic": true,
                  "info": "",
                  "load_from_db": false,
                  "title_case": false
                },
                "template": {
                  "type": "prompt",
                  "required": false,
                  "placeholder": "",
                  "list": false,
                  "show": true,
                  "multiline": false,
                  "value": "Calculate the cognitive load with the following context. if you calculate the cognitive load, show it.\n\ncontext: {context}\n\nhistory: {history}",
                  "fileTypes": [],
                  "file_path": "",
                  "password": false,
                  "name": "template",
                  "display_name": "Template",
                  "advanced": false,
                  "input_types": [
                    "Text"
                  ],
                  "dynamic": false,
                  "info": "",
                  "load_from_db": false,
                  "title_case": false
                },
                "_type": "CustomComponent",
                "context": {
                  "type": "str",
                  "required": false,
                  "placeholder": "",
                  "list": false,
                  "show": true,
                  "multiline": true,
                  "value": "",
                  "fileTypes": [],
                  "file_path": "",
                  "password": false,
                  "name": "context",
                  "display_name": "context",
                  "advanced": false,
                  "input_types": [
                    "Document",
                    "BaseOutputParser"
                  ],
                  "dynamic": false,
                  "info": "",
                  "title_case": true
                },
                "history": {
                  "type": "str",
                  "required": false,
                  "placeholder": "",
                  "list": false,
                  "show": true,
                  "multiline": true,
                  "value": "",
                  "fileTypes": [],
                  "file_path": "",
                  "password": false,
                  "name": "history",
                  "display_name": "history",
                  "advanced": false,
                  "input_types": [
                    "Document",
                    "BaseOutputParser"
                  ],
                  "dynamic": false,
                  "info": "",
                  "title_case": true
                }
              },
              "description": "Create a prompt template with dynamic variables.",
              "icon": "prompts",
              "base_classes": [
                "str",
                "Text"
              ],
              "name": "",
              "display_name": "Prompt",
              "documentation": "",
              "custom_fields": {
                "template": [
                  "context",
                  "history"
                ]
              },
              "output_types": [
                "Text"
              ],
              "full_path": null,
              "field_formatters": {},
              "beta": false,
              "error": null
            },
            "id": "Prompt-FqMeL",
            "description": "Create a prompt template with dynamic variables.",
            "display_name": "Prompt"
          },
          "selected": false,
          "width": 384,
          "height": 477,
          "positionAbsolute": {
            "x": -768.8686402796882,
            "y": -664.9822063034544
          },
          "dragging": false
        },
        {
          "id": "MemoryComponent-PDg8B",
          "type": "genericNode",
          "position": {
            "x": -1317.4923272529059,
            "y": -616.1238175235459
          },
          "data": {
            "type": "MemoryComponent",
            "node": {
              "template": {
                "code": {
                  "type": "code",
                  "required": true,
                  "placeholder": "",
                  "list": false,
                  "show": true,
                  "multiline": true,
                  "value": "from typing import Optional\n\nfrom axiestudio.base.memory.memory import BaseMemoryComponent\nfrom axiestudio.field_typing import Text\nfrom axiestudio.helpers.record import records_to_text\nfrom axiestudio.memory import get_messages\nfrom axiestudio.schema.schema import Record\n\n\nclass MemoryComponent(BaseMemoryComponent):\n    display_name = \"Chat Memory\"\n    description = \"Retrieves stored chat messages given a specific Session ID.\"\n    beta: bool = True\n    icon = \"history\"\n\n    def build_config(self):\n        return {\n            \"sender\": {\n                \"options\": [\"Machine\", \"User\", \"Machine and User\"],\n                \"display_name\": \"Sender Type\",\n            },\n            \"sender_name\": {\"display_name\": \"Sender Name\", \"advanced\": True},\n            \"n_messages\": {\n                \"display_name\": \"Number of Messages\",\n                \"info\": \"Number of messages to retrieve.\",\n            },\n            \"session_id\": {\n                \"display_name\": \"Session ID\",\n                \"info\": \"Session ID of the chat history.\",\n                \"input_types\": [\"Text\"],\n            },\n            \"order\": {\n                \"options\": [\"Ascending\", \"Descending\"],\n                \"display_name\": \"Order\",\n                \"info\": \"Order of the messages.\",\n                \"advanced\": True,\n            },\n            \"record_template\": {\n                \"display_name\": \"Record Template\",\n                \"multiline\": True,\n                \"info\": \"Template to convert Record to Text. If left empty, it will be dynamically set to the Record's text key.\",\n                \"advanced\": True,\n            },\n        }\n\n    def get_messages(self, **kwargs) -> list[Record]:\n        # Validate kwargs by checking if it contains the correct keys\n        if \"sender\" not in kwargs:\n            kwargs[\"sender\"] = None\n        if \"sender_name\" not in kwargs:\n            kwargs[\"sender_name\"] = None\n        if \"session_id\" not in kwargs:\n            kwargs[\"session_id\"] = None\n        if \"limit\" not in kwargs:\n            kwargs[\"limit\"] = 5\n        if \"order\" not in kwargs:\n            kwargs[\"order\"] = \"Descending\"\n\n        kwargs[\"order\"] = \"DESC\" if kwargs[\"order\"] == \"Descending\" else \"ASC\"\n        if kwargs[\"sender\"] == \"Machine and User\":\n            kwargs[\"sender\"] = None\n        return get_messages(**kwargs)\n\n    def build(\n        self,\n        sender: Optional[str] = \"Machine and User\",\n        sender_name: Optional[str] = None,\n        session_id: Optional[str] = None,\n        n_messages: int = 5,\n        order: Optional[str] = \"Descending\",\n        record_template: Optional[str] = \"{sender_name}: {text}\",\n    ) -> Text:\n        messages = self.get_messages(\n            sender=sender,\n            sender_name=sender_name,\n            session_id=session_id,\n            limit=n_messages,\n            order=order,\n        )\n        messages_str = records_to_text(template=record_template or \"\", records=messages)\n        self.status = messages_str\n        return messages_str\n",
                  "fileTypes": [],
                  "file_path": "",
                  "password": false,
                  "name": "code",
                  "advanced": true,
                  "dynamic": true,
                  "info": "",
                  "load_from_db": false,
                  "title_case": false
                },
                "n_messages": {
                  "type": "int",
                  "required": false,
                  "placeholder": "",
                  "list": false,
                  "show": true,
                  "multiline": false,
                  "value": 5,
                  "fileTypes": [],
                  "file_path": "",
                  "password": false,
                  "name": "n_messages",
                  "display_name": "Number of Messages",
                  "advanced": false,
                  "dynamic": false,
                  "info": "Number of messages to retrieve.",
                  "load_from_db": false,
                  "title_case": false
                },
                "order": {
                  "type": "str",
                  "required": false,
                  "placeholder": "",
                  "list": true,
                  "show": true,
                  "multiline": false,
                  "value": "Descending",
                  "fileTypes": [],
                  "file_path": "",
                  "password": false,
                  "options": [
                    "Ascending",
                    "Descending"
                  ],
                  "name": "order",
                  "display_name": "Order",
                  "advanced": true,
                  "dynamic": false,
                  "info": "Order of the messages.",
                  "load_from_db": false,
                  "title_case": false,
                  "input_types": [
                    "Text"
                  ]
                },
                "record_template": {
                  "type": "str",
                  "required": false,
                  "placeholder": "",
                  "list": false,
                  "show": true,
                  "multiline": true,
                  "value": "{sender_name}: {text}",
                  "fileTypes": [],
                  "file_path": "",
                  "password": false,
                  "name": "record_template",
                  "display_name": "Record Template",
                  "advanced": true,
                  "dynamic": false,
                  "info": "Template to convert Record to Text. If left empty, it will be dynamically set to the Record's text key.",
                  "load_from_db": false,
                  "title_case": false,
                  "input_types": [
                    "Text"
                  ]
                },
                "sender": {
                  "type": "str",
                  "required": false,
                  "placeholder": "",
                  "list": true,
                  "show": true,
                  "multiline": false,
                  "value": "Machine and User",
                  "fileTypes": [],
                  "file_path": "",
                  "password": false,
                  "options": [
                    "Machine",
                    "User",
                    "Machine and User"
                  ],
                  "name": "sender",
                  "display_name": "Sender Type",
                  "advanced": false,
                  "dynamic": false,
                  "info": "",
                  "load_from_db": false,
                  "title_case": false,
                  "input_types": [
                    "Text"
                  ]
                },
                "sender_name": {
                  "type": "str",
                  "required": false,
                  "placeholder": "",
                  "list": false,
                  "show": true,
                  "multiline": false,
                  "fileTypes": [],
                  "file_path": "",
                  "password": false,
                  "name": "sender_name",
                  "display_name": "Sender Name",
                  "advanced": true,
                  "dynamic": false,
                  "info": "",
                  "load_from_db": false,
                  "title_case": false,
                  "input_types": [
                    "Text"
                  ]
                },
                "session_id": {
                  "type": "str",
                  "required": false,
                  "placeholder": "",
                  "list": false,
                  "show": true,
                  "multiline": false,
                  "fileTypes": [],
                  "file_path": "",
                  "password": false,
                  "name": "session_id",
                  "display_name": "Session ID",
                  "advanced": false,
                  "input_types": [
                    "Text"
                  ],
                  "dynamic": false,
                  "info": "Session ID of the chat history.",
                  "load_from_db": false,
                  "title_case": false
                },
                "_type": "CustomComponent"
              },
              "description": "Retrieves stored chat messages given a specific Session ID.",
              "icon": "history",
              "base_classes": [
                "object",
                "str",
                "Text"
              ],
              "display_name": "Chat Memory",
              "documentation": "",
              "custom_fields": {
                "sender": null,
                "sender_name": null,
                "session_id": null,
                "n_messages": null,
                "order": null,
                "record_template": null
              },
              "output_types": [
                "Text"
              ],
              "field_formatters": {},
              "frozen": false,
              "field_order": [],
              "beta": true
            },
            "id": "MemoryComponent-PDg8B"
          },
          "selected": false,
          "width": 384,
          "height": 501,
          "positionAbsolute": {
            "x": -1317.4923272529059,
            "y": -616.1238175235459
          },
          "dragging": false
        },
        {
          "id": "TextInput-G36IC",
          "type": "genericNode",
          "position": {
            "x": -2388.942409242161,
            "y": -542.3990081461412
          },
          "data": {
            "type": "TextInput",
            "node": {
              "template": {
                "input_value": {
                  "type": "str",
                  "required": false,
                  "placeholder": "",
                  "list": false,
                  "show": true,
                  "multiline": false,
                  "value": "How physically demanding was the task? (0-100)",
                  "fileTypes": [],
                  "file_path": "",
                  "password": false,
                  "name": "input_value",
                  "display_name": "Value",
                  "advanced": false,
                  "input_types": [
                    "Record",
                    "Text"
                  ],
                  "dynamic": false,
                  "info": "Text or Record to be passed as input.",
                  "load_from_db": false,
                  "title_case": false
                },
                "code": {
                  "type": "code",
                  "required": true,
                  "placeholder": "",
                  "list": false,
                  "show": true,
                  "multiline": true,
                  "value": "from typing import Optional\n\nfrom axiestudio.base.io.text import TextComponent\nfrom axiestudio.field_typing import Text\n\n\nclass TextInput(TextComponent):\n    display_name = \"Text Input\"\n    description = \"Get text inputs from the Interaction Panel.\"\n    icon = \"type\"\n\n    def build_config(self):\n        return {\n            \"input_value\": {\n                \"display_name\": \"Value\",\n                \"input_types\": [\"Record\", \"Text\"],\n                \"info\": \"Text or Record to be passed as input.\",\n            },\n            \"record_template\": {\n                \"display_name\": \"Record Template\",\n                \"multiline\": True,\n                \"info\": \"Template to convert Record to Text. If left empty, it will be dynamically set to the Record's text key.\",\n                \"advanced\": True,\n            },\n        }\n\n    def build(\n        self,\n        input_value: Optional[Text] = \"\",\n        record_template: Optional[str] = \"\",\n    ) -> Text:\n        return super().build(input_value=input_value, record_template=record_template)\n",
                  "fileTypes": [],
                  "file_path": "",
                  "password": false,
                  "name": "code",
                  "advanced": true,
                  "dynamic": true,
                  "info": "",
                  "load_from_db": false,
                  "title_case": false
                },
                "record_template": {
                  "type": "str",
                  "required": false,
                  "placeholder": "",
                  "list": false,
                  "show": true,
                  "multiline": true,
                  "value": "",
                  "fileTypes": [],
                  "file_path": "",
                  "password": false,
                  "name": "record_template",
                  "display_name": "Record Template",
                  "advanced": true,
                  "dynamic": false,
                  "info": "Template to convert Record to Text. If left empty, it will be dynamically set to the Record's text key.",
                  "load_from_db": false,
                  "title_case": false,
                  "input_types": [
                    "Text"
                  ]
                },
                "_type": "CustomComponent"
              },
              "description": "Get text inputs from the Interaction Panel.",
              "icon": "type",
              "base_classes": [
                "object",
                "str",
                "Text"
              ],
              "display_name": "Text Input",
              "documentation": "",
              "custom_fields": {
                "input_value": null,
                "record_template": null
              },
              "output_types": [
                "Text"
              ],
              "field_formatters": {},
              "frozen": false,
              "field_order": [],
              "beta": false
            },
            "id": "TextInput-G36IC"
          },
          "selected": false,
          "width": 384,
          "height": 297,
          "positionAbsolute": {
            "x": -2388.942409242161,
            "y": -542.3990081461412
          },
          "dragging": false
        },
        {
          "id": "ChatInput-HuRZp",
          "type": "genericNode",
          "position": {
            "x": -1954.8630045489167,
            "y": -505.7968308620539
          },
          "data": {
            "type": "ChatInput",
            "node": {
              "template": {
                "code": {
                  "type": "code",
                  "required": true,
                  "placeholder": "",
                  "list": false,
                  "show": true,
                  "multiline": true,
                  "value": "from typing import Optional, Union\n\nfrom axiestudio.base.io.chat import ChatComponent\nfrom axiestudio.field_typing import Text\nfrom axiestudio.schema import Record\n\n\nclass ChatInput(ChatComponent):\n    display_name = \"Chat Input\"\n    description = \"Get chat inputs from the Interaction Panel.\"\n    icon = \"ChatInput\"\n\n    def build_config(self):\n        build_config = super().build_config()\n        build_config[\"input_value\"] = {\n            \"input_types\": [],\n            \"display_name\": \"Message\",\n            \"multiline\": True,\n        }\n\n        return build_config\n\n    def build(\n        self,\n        sender: Optional[str] = \"User\",\n        sender_name: Optional[str] = \"User\",\n        input_value: Optional[str] = None,\n        session_id: Optional[str] = None,\n        return_record: Optional[bool] = False,\n    ) -> Union[Text, Record]:\n        return super().build_no_record(\n            sender=sender,\n            sender_name=sender_name,\n            input_value=input_value,\n            session_id=session_id,\n            return_record=return_record,\n        )\n",
                  "fileTypes": [],
                  "file_path": "",
                  "password": false,
                  "name": "code",
                  "advanced": true,
                  "dynamic": true,
                  "info": "",
                  "load_from_db": false,
                  "title_case": false
                },
                "input_value": {
                  "type": "str",
                  "required": false,
                  "placeholder": "",
                  "list": false,
                  "show": true,
                  "multiline": true,
                  "fileTypes": [],
                  "file_path": "",
                  "password": false,
                  "name": "input_value",
                  "display_name": "Message",
                  "advanced": false,
                  "input_types": [],
                  "dynamic": false,
                  "info": "",
                  "load_from_db": false,
                  "title_case": false,
                  "value": ""
                },
                "return_record": {
                  "type": "bool",
                  "required": false,
                  "placeholder": "",
                  "list": false,
                  "show": true,
                  "multiline": false,
                  "value": false,
                  "fileTypes": [],
                  "file_path": "",
                  "password": false,
                  "name": "return_record",
                  "display_name": "Return Record",
                  "advanced": true,
                  "dynamic": false,
                  "info": "Return the message as a record containing the sender, sender_name, and session_id.",
                  "load_from_db": false,
                  "title_case": false
                },
                "sender": {
                  "type": "str",
                  "required": false,
                  "placeholder": "",
                  "list": true,
                  "show": true,
                  "multiline": false,
                  "value": "User",
                  "fileTypes": [],
                  "file_path": "",
                  "password": false,
                  "options": [
                    "Machine",
                    "User"
                  ],
                  "name": "sender",
                  "display_name": "Sender Type",
                  "advanced": true,
                  "dynamic": false,
                  "info": "",
                  "load_from_db": false,
                  "title_case": false,
                  "input_types": [
                    "Text"
                  ]
                },
                "sender_name": {
                  "type": "str",
                  "required": false,
                  "placeholder": "",
                  "list": false,
                  "show": true,
                  "multiline": false,
                  "value": "User",
                  "fileTypes": [],
                  "file_path": "",
                  "password": false,
                  "name": "sender_name",
                  "display_name": "Sender Name",
                  "advanced": false,
                  "dynamic": false,
                  "info": "",
                  "load_from_db": false,
                  "title_case": false,
                  "input_types": [
                    "Text"
                  ]
                },
                "session_id": {
                  "type": "str",
                  "required": false,
                  "placeholder": "",
                  "list": false,
                  "show": true,
                  "multiline": false,
                  "fileTypes": [],
                  "file_path": "",
                  "password": false,
                  "name": "session_id",
                  "display_name": "Session ID",
                  "advanced": true,
                  "dynamic": false,
                  "info": "If provided, the message will be stored in the memory.",
                  "load_from_db": false,
                  "title_case": false,
                  "input_types": [
                    "Text"
                  ]
                },
                "_type": "CustomComponent"
              },
              "description": "Get chat inputs from the Interaction Panel.",
              "icon": "ChatInput",
              "base_classes": [
                "object",
                "Record",
                "str",
                "Text"
              ],
              "display_name": "Chat Input",
              "documentation": "",
              "custom_fields": {
                "sender": null,
                "sender_name": null,
                "input_value": null,
                "session_id": null,
                "return_record": null
              },
              "output_types": [
                "Text",
                "Record"
              ],
              "field_formatters": {},
              "frozen": false,
              "field_order": [],
              "beta": false
            },
            "id": "ChatInput-HuRZp"
          },
          "selected": false,
          "width": 384,
          "height": 391,
          "positionAbsolute": {
            "x": -1954.8630045489167,
            "y": -505.7968308620539
          },
          "dragging": false
        },
        {
          "id": "TextInput-jYned",
          "type": "genericNode",
          "position": {
            "x": -2373.798905800174,
            "y": -850.7935047020542
          },
          "data": {
            "type": "TextInput",
            "node": {
              "template": {
                "input_value": {
                  "type": "str",
                  "required": false,
                  "placeholder": "",
                  "list": false,
                  "show": true,
                  "multiline": false,
                  "value": "How mentally demanding was the task? (0-100)",
                  "fileTypes": [],
                  "file_path": "",
                  "password": false,
                  "name": "input_value",
                  "display_name": "Value",
                  "advanced": false,
                  "input_types": [
                    "Record",
                    "Text"
                  ],
                  "dynamic": false,
                  "info": "Text or Record to be passed as input.",
                  "load_from_db": false,
                  "title_case": false
                },
                "code": {
                  "type": "code",
                  "required": true,
                  "placeholder": "",
                  "list": false,
                  "show": true,
                  "multiline": true,
                  "value": "from typing import Optional\n\nfrom axiestudio.base.io.text import TextComponent\nfrom axiestudio.field_typing import Text\n\n\nclass TextInput(TextComponent):\n    display_name = \"Text Input\"\n    description = \"Get text inputs from the Interaction Panel.\"\n    icon = \"type\"\n\n    def build_config(self):\n        return {\n            \"input_value\": {\n                \"display_name\": \"Value\",\n                \"input_types\": [\"Record\", \"Text\"],\n                \"info\": \"Text or Record to be passed as input.\",\n            },\n            \"record_template\": {\n                \"display_name\": \"Record Template\",\n                \"multiline\": True,\n                \"info\": \"Template to convert Record to Text. If left empty, it will be dynamically set to the Record's text key.\",\n                \"advanced\": True,\n            },\n        }\n\n    def build(\n        self,\n        input_value: Optional[Text] = \"\",\n        record_template: Optional[str] = \"\",\n    ) -> Text:\n        return super().build(input_value=input_value, record_template=record_template)\n",
                  "fileTypes": [],
                  "file_path": "",
                  "password": false,
                  "name": "code",
                  "advanced": true,
                  "dynamic": true,
                  "info": "",
                  "load_from_db": false,
                  "title_case": false
                },
                "record_template": {
                  "type": "str",
                  "required": false,
                  "placeholder": "",
                  "list": false,
                  "show": true,
                  "multiline": true,
                  "value": "",
                  "fileTypes": [],
                  "file_path": "",
                  "password": false,
                  "name": "record_template",
                  "display_name": "Record Template",
                  "advanced": true,
                  "dynamic": false,
                  "info": "Template to convert Record to Text. If left empty, it will be dynamically set to the Record's text key.",
                  "load_from_db": false,
                  "title_case": false,
                  "input_types": [
                    "Text"
                  ]
                },
                "_type": "CustomComponent"
              },
              "description": "Get text inputs from the Interaction Panel.",
              "icon": "type",
              "base_classes": [
                "object",
                "str",
                "Text"
              ],
              "display_name": "Text Input",
              "documentation": "",
              "custom_fields": {
                "input_value": null,
                "record_template": null
              },
              "output_types": [
                "Text"
              ],
              "field_formatters": {},
              "frozen": false,
              "field_order": [],
              "beta": false
            },
            "id": "TextInput-jYned"
          },
          "selected": false,
          "width": 384,
          "height": 297,
          "positionAbsolute": {
            "x": -2373.798905800174,
            "y": -850.7935047020542
          },
          "dragging": false
        },
        {
          "id": "ChatInput-KBJEC",
          "type": "genericNode",
          "position": {
            "x": -1736.0887154747422,
            "y": -992.6173318945476
          },
          "data": {
            "type": "ChatInput",
            "node": {
              "template": {
                "code": {
                  "type": "code",
                  "required": true,
                  "placeholder": "",
                  "list": false,
                  "show": true,
                  "multiline": true,
                  "value": "from typing import Optional, Union\n\nfrom axiestudio.base.io.chat import ChatComponent\nfrom axiestudio.field_typing import Text\nfrom axiestudio.schema import Record\n\n\nclass ChatInput(ChatComponent):\n    display_name = \"Chat Input\"\n    description = \"Get chat inputs from the Interaction Panel.\"\n    icon = \"ChatInput\"\n\n    def build_config(self):\n        build_config = super().build_config()\n        build_config[\"input_value\"] = {\n            \"input_types\": [],\n            \"display_name\": \"Message\",\n            \"multiline\": True,\n        }\n\n        return build_config\n\n    def build(\n        self,\n        sender: Optional[str] = \"User\",\n        sender_name: Optional[str] = \"User\",\n        input_value: Optional[str] = None,\n        session_id: Optional[str] = None,\n        return_record: Optional[bool] = False,\n    ) -> Union[Text, Record]:\n        return super().build_no_record(\n            sender=sender,\n            sender_name=sender_name,\n            input_value=input_value,\n            session_id=session_id,\n            return_record=return_record,\n        )\n",
                  "fileTypes": [],
                  "file_path": "",
                  "password": false,
                  "name": "code",
                  "advanced": true,
                  "dynamic": true,
                  "info": "",
                  "load_from_db": false,
                  "title_case": false
                },
                "input_value": {
                  "type": "str",
                  "required": false,
                  "placeholder": "",
                  "list": false,
                  "show": true,
                  "multiline": true,
                  "fileTypes": [],
                  "file_path": "",
                  "password": false,
                  "name": "input_value",
                  "display_name": "Message",
                  "advanced": false,
                  "input_types": [],
                  "dynamic": false,
                  "info": "",
                  "load_from_db": false,
                  "title_case": false,
                  "value": ""
                },
                "return_record": {
                  "type": "bool",
                  "required": false,
                  "placeholder": "",
                  "list": false,
                  "show": true,
                  "multiline": false,
                  "value": false,
                  "fileTypes": [],
                  "file_path": "",
                  "password": false,
                  "name": "return_record",
                  "display_name": "Return Record",
                  "advanced": true,
                  "dynamic": false,
                  "info": "Return the message as a record containing the sender, sender_name, and session_id.",
                  "load_from_db": false,
                  "title_case": false
                },
                "sender": {
                  "type": "str",
                  "required": false,
                  "placeholder": "",
                  "list": true,
                  "show": true,
                  "multiline": false,
                  "value": "User",
                  "fileTypes": [],
                  "file_path": "",
                  "password": false,
                  "options": [
                    "Machine",
                    "User"
                  ],
                  "name": "sender",
                  "display_name": "Sender Type",
                  "advanced": true,
                  "dynamic": false,
                  "info": "",
                  "load_from_db": false,
                  "title_case": false,
                  "input_types": [
                    "Text"
                  ]
                },
                "sender_name": {
                  "type": "str",
                  "required": false,
                  "placeholder": "",
                  "list": false,
                  "show": true,
                  "multiline": false,
                  "value": "User",
                  "fileTypes": [],
                  "file_path": "",
                  "password": false,
                  "name": "sender_name",
                  "display_name": "Sender Name",
                  "advanced": false,
                  "dynamic": false,
                  "info": "",
                  "load_from_db": false,
                  "title_case": false,
                  "input_types": [
                    "Text"
                  ]
                },
                "session_id": {
                  "type": "str",
                  "required": false,
                  "placeholder": "",
                  "list": false,
                  "show": true,
                  "multiline": false,
                  "fileTypes": [],
                  "file_path": "",
                  "password": false,
                  "name": "session_id",
                  "display_name": "Session ID",
                  "advanced": true,
                  "dynamic": false,
                  "info": "If provided, the message will be stored in the memory.",
                  "load_from_db": false,
                  "title_case": false,
                  "input_types": [
                    "Text"
                  ]
                },
                "_type": "CustomComponent"
              },
              "description": "Get chat inputs from the Interaction Panel.",
              "icon": "ChatInput",
              "base_classes": [
                "object",
                "Record",
                "str",
                "Text"
              ],
              "display_name": "Chat Input",
              "documentation": "",
              "custom_fields": {
                "sender": null,
                "sender_name": null,
                "input_value": null,
                "session_id": null,
                "return_record": null
              },
              "output_types": [
                "Text",
                "Record"
              ],
              "field_formatters": {},
              "frozen": false,
              "field_order": [],
              "beta": false
            },
            "id": "ChatInput-KBJEC"
          },
          "selected": false,
          "width": 384,
          "height": 391,
          "positionAbsolute": {
            "x": -1736.0887154747422,
            "y": -992.6173318945476
          },
          "dragging": false
        },
        {
          "id": "Calculator-jrRc7",
          "type": "genericNode",
          "position": {
            "x": -747.4997297425699,
            "y": -1571.4094439337557
          },
          "data": {
            "type": "Calculator",
            "node": {
              "template": {
                "llm": {
                  "type": "BaseLanguageModel",
                  "required": true,
                  "placeholder": "",
                  "list": false,
                  "show": true,
                  "multiline": false,
                  "value": "",
                  "fileTypes": [],
                  "file_path": "",
                  "password": false,
                  "name": "llm",
                  "advanced": false,
                  "dynamic": false,
                  "info": "",
                  "title_case": true
                },
                "_type": "Calculator"
              },
              "description": "Useful for when you need to answer questions about math.",
              "base_classes": [
                "Tool",
                "BaseTool"
              ],
              "display_name": "Calculator",
              "documentation": "",
              "custom_fields": {},
              "output_types": [],
              "field_formatters": {},
              "beta": false
            },
            "id": "Calculator-jrRc7"
          },
          "selected": false,
          "width": 384,
          "height": 263,
          "positionAbsolute": {
            "x": -747.4997297425699,
            "y": -1571.4094439337557
          },
          "dragging": false
        },
        {
          "id": "BaseLLM-We2EH",
          "type": "genericNode",
          "position": {
            "x": -1386.530951302448,
            "y": -1591.5469050300042
          },
          "data": {
            "type": "BaseLLM",
            "node": {
              "template": {
                "base_url": {
                  "type": "str",
                  "required": false,
                  "placeholder": "",
                  "list": false,
                  "show": true,
                  "multiline": false,
                  "fileTypes": [],
                  "file_path": "",
                  "password": false,
                  "name": "base_url",
                  "display_name": "Base URL",
                  "advanced": false,
                  "dynamic": false,
                  "info": "Endpoint of the Ollama API. Defaults to 'http://localhost:11434' if not specified.",
                  "title_case": true
                },
                "code": {
                  "type": "code",
                  "required": true,
                  "placeholder": "",
                  "list": false,
                  "show": true,
                  "multiline": true,
                  "value": "from typing import List, Optional\n\nfrom langchain.llms.base import BaseLLM\nfrom langchain_community.llms.ollama import Ollama\n\nfrom axiestudio import CustomComponent\n\n\nclass OllamaLLM(CustomComponent):\n    display_name = \"Ollama\"\n    description = \"Local LLM with Ollama.\"\n\n    def build_config(self) -> dict:\n        return {\n            \"base_url\": {\n                \"display_name\": \"Base URL\",\n                \"info\": \"Endpoint of the Ollama API. Defaults to 'http://localhost:11434' if not specified.\",\n            },\n            \"model\": {\n                \"display_name\": \"Model Name\",\n                \"value\": \"llama2\",\n                \"info\": \"Refer to https://ollama.ai/library for more models.\",\n            },\n            \"temperature\": {\n                \"display_name\": \"Temperature\",\n                \"field_type\": \"float\",\n                \"value\": 0.8,\n                \"info\": \"Controls the creativity of model responses.\",\n            },\n            \"mirostat\": {\n                \"display_name\": \"Mirostat\",\n                \"options\": [\"Disabled\", \"Mirostat\", \"Mirostat 2.0\"],\n                \"info\": \"Enable/disable Mirostat sampling for controlling perplexity.\",\n                \"value\": \"Disabled\",\n                \"advanced\": True,\n            },\n            \"mirostat_eta\": {\n                \"display_name\": \"Mirostat Eta\",\n                \"field_type\": \"float\",\n                \"info\": \"Learning rate influencing the algorithm's response to feedback.\",\n                \"advanced\": True,\n            },\n            \"mirostat_tau\": {\n                \"display_name\": \"Mirostat Tau\",\n                \"field_type\": \"float\",\n                \"info\": \"Controls balance between coherence and diversity.\",\n                \"advanced\": True,\n            },\n            \"num_ctx\": {\n                \"display_name\": \"Context Window Size\",\n                \"field_type\": \"int\",\n                \"info\": \"Size of the context window for generating the next token.\",\n                \"advanced\": True,\n            },\n            \"num_gpu\": {\n                \"display_name\": \"Number of GPUs\",\n                \"field_type\": \"int\",\n                \"info\": \"Number of GPUs to use for computation.\",\n                \"advanced\": True,\n            },\n            \"num_thread\": {\n                \"display_name\": \"Number of Threads\",\n                \"field_type\": \"int\",\n                \"info\": \"Number of threads to use during computation.\",\n                \"advanced\": True,\n            },\n            \"repeat_last_n\": {\n                \"display_name\": \"Repeat Last N\",\n                \"field_type\": \"int\",\n                \"info\": \"Sets how far back the model looks to prevent repetition.\",\n                \"advanced\": True,\n            },\n            \"repeat_penalty\": {\n                \"display_name\": \"Repeat Penalty\",\n                \"field_type\": \"float\",\n                \"info\": \"Penalty for repetitions in generated text.\",\n                \"advanced\": True,\n            },\n            \"stop\": {\n                \"display_name\": \"Stop Tokens\",\n                \"info\": \"List of tokens to signal the model to stop generating text.\",\n                \"advanced\": True,\n            },\n            \"tfs_z\": {\n                \"display_name\": \"TFS Z\",\n                \"field_type\": \"float\",\n                \"info\": \"Tail free sampling to reduce impact of less probable tokens.\",\n                \"advanced\": True,\n            },\n            \"top_k\": {\n                \"display_name\": \"Top K\",\n                \"field_type\": \"int\",\n                \"info\": \"Limits token selection to top K for reducing nonsense generation.\",\n                \"advanced\": True,\n            },\n            \"top_p\": {\n                \"display_name\": \"Top P\",\n                \"field_type\": \"int\",\n                \"info\": \"Works with top-k to control diversity of generated text.\",\n                \"advanced\": True,\n            },\n        }\n\n    def build(\n        self,\n        base_url: Optional[str],\n        model: str,\n        temperature: Optional[float],\n        mirostat: Optional[str],\n        mirostat_eta: Optional[float] = None,\n        mirostat_tau: Optional[float] = None,\n        num_ctx: Optional[int] = None,\n        num_gpu: Optional[int] = None,\n        num_thread: Optional[int] = None,\n        repeat_last_n: Optional[int] = None,\n        repeat_penalty: Optional[float] = None,\n        stop: Optional[List[str]] = None,\n        tfs_z: Optional[float] = None,\n        top_k: Optional[int] = None,\n        top_p: Optional[int] = None,\n    ) -> BaseLLM:\n        if not base_url:\n            base_url = \"http://localhost:11434\"\n\n        # Mapping mirostat settings to their corresponding values\n        mirostat_options = {\"Mirostat\": 1, \"Mirostat 2.0\": 2}\n\n        # Default to 0 for 'Disabled'\n        mirostat_value = mirostat_options.get(mirostat, 0)  # type: ignore\n\n        # Set mirostat_eta and mirostat_tau to None if mirostat is disabled\n        if mirostat_value == 0:\n            mirostat_eta = None\n            mirostat_tau = None\n\n        try:\n            llm = Ollama(\n                base_url=base_url,\n                model=model,\n                mirostat=mirostat_value,\n                mirostat_eta=mirostat_eta,\n                mirostat_tau=mirostat_tau,\n                num_ctx=num_ctx,\n                num_gpu=num_gpu,\n                num_thread=num_thread,\n                repeat_last_n=repeat_last_n,\n                repeat_penalty=repeat_penalty,\n                temperature=temperature,\n                stop=stop,\n                tfs_z=tfs_z,\n                top_k=top_k,\n                top_p=top_p,\n            )\n\n        except Exception as e:\n            raise ValueError(\"Could not connect to Ollama.\") from e\n\n        return llm\n",
                  "fileTypes": [],
                  "file_path": "",
                  "password": false,
                  "name": "code",
                  "advanced": false,
                  "dynamic": true,
                  "info": "",
                  "title_case": true
                },
                "mirostat": {
                  "type": "str",
                  "required": false,
                  "placeholder": "",
                  "list": true,
                  "show": true,
                  "multiline": false,
                  "value": "Disabled",
                  "fileTypes": [],
                  "file_path": "",
                  "password": false,
                  "options": [
                    "Disabled",
                    "Mirostat",
                    "Mirostat 2.0"
                  ],
                  "name": "mirostat",
                  "display_name": "Mirostat",
                  "advanced": true,
                  "dynamic": false,
                  "info": "Enable/disable Mirostat sampling for controlling perplexity.",
                  "title_case": true
                },
                "mirostat_eta": {
                  "type": "float",
                  "required": false,
                  "placeholder": "",
                  "list": false,
                  "show": true,
                  "multiline": false,
                  "fileTypes": [],
                  "file_path": "",
                  "password": false,
                  "name": "mirostat_eta",
                  "display_name": "Mirostat Eta",
                  "advanced": true,
                  "dynamic": false,
                  "info": "Learning rate influencing the algorithm's response to feedback.",
                  "rangeSpec": {
                    "min": -1,
                    "max": 1,
                    "step": 0.1
                  },
                  "title_case": true
                },
                "mirostat_tau": {
                  "type": "float",
                  "required": false,
                  "placeholder": "",
                  "list": false,
                  "show": true,
                  "multiline": false,
                  "fileTypes": [],
                  "file_path": "",
                  "password": false,
                  "name": "mirostat_tau",
                  "display_name": "Mirostat Tau",
                  "advanced": true,
                  "dynamic": false,
                  "info": "Controls balance between coherence and diversity.",
                  "rangeSpec": {
                    "min": -1,
                    "max": 1,
                    "step": 0.1
                  },
                  "title_case": true
                },
                "model": {
                  "type": "str",
                  "required": true,
                  "placeholder": "",
                  "list": false,
                  "show": true,
                  "multiline": false,
                  "value": "llama2",
                  "fileTypes": [],
                  "file_path": "",
                  "password": false,
                  "name": "model",
                  "display_name": "Model Name",
                  "advanced": false,
                  "dynamic": false,
                  "info": "Refer to https://ollama.ai/library for more models.",
                  "title_case": true
                },
                "num_ctx": {
                  "type": "int",
                  "required": false,
                  "placeholder": "",
                  "list": false,
                  "show": true,
                  "multiline": false,
                  "fileTypes": [],
                  "file_path": "",
                  "password": false,
                  "name": "num_ctx",
                  "display_name": "Context Window Size",
                  "advanced": true,
                  "dynamic": false,
                  "info": "Size of the context window for generating the next token.",
                  "title_case": true
                },
                "num_gpu": {
                  "type": "int",
                  "required": false,
                  "placeholder": "",
                  "list": false,
                  "show": true,
                  "multiline": false,
                  "fileTypes": [],
                  "file_path": "",
                  "password": false,
                  "name": "num_gpu",
                  "display_name": "Number of GPUs",
                  "advanced": true,
                  "dynamic": false,
                  "info": "Number of GPUs to use for computation.",
                  "title_case": true
                },
                "num_thread": {
                  "type": "int",
                  "required": false,
                  "placeholder": "",
                  "list": false,
                  "show": true,
                  "multiline": false,
                  "fileTypes": [],
                  "file_path": "",
                  "password": false,
                  "name": "num_thread",
                  "display_name": "Number of Threads",
                  "advanced": true,
                  "dynamic": false,
                  "info": "Number of threads to use during computation.",
                  "title_case": true
                },
                "repeat_last_n": {
                  "type": "int",
                  "required": false,
                  "placeholder": "",
                  "list": false,
                  "show": true,
                  "multiline": false,
                  "fileTypes": [],
                  "file_path": "",
                  "password": false,
                  "name": "repeat_last_n",
                  "display_name": "Repeat Last N",
                  "advanced": true,
                  "dynamic": false,
                  "info": "Sets how far back the model looks to prevent repetition.",
                  "title_case": true
                },
                "repeat_penalty": {
                  "type": "float",
                  "required": false,
                  "placeholder": "",
                  "list": false,
                  "show": true,
                  "multiline": false,
                  "fileTypes": [],
                  "file_path": "",
                  "password": false,
                  "name": "repeat_penalty",
                  "display_name": "Repeat Penalty",
                  "advanced": true,
                  "dynamic": false,
                  "info": "Penalty for repetitions in generated text.",
                  "rangeSpec": {
                    "min": -1,
                    "max": 1,
                    "step": 0.1
                  },
                  "title_case": true
                },
                "stop": {
                  "type": "str",
                  "required": false,
                  "placeholder": "",
                  "list": true,
                  "show": true,
                  "multiline": false,
                  "fileTypes": [],
                  "file_path": "",
                  "password": false,
                  "name": "stop",
                  "display_name": "Stop Tokens",
                  "advanced": true,
                  "dynamic": false,
                  "info": "List of tokens to signal the model to stop generating text.",
                  "title_case": true
                },
                "temperature": {
                  "type": "float",
                  "required": false,
                  "placeholder": "",
                  "list": false,
                  "show": true,
                  "multiline": false,
                  "value": 0.8,
                  "fileTypes": [],
                  "file_path": "",
                  "password": false,
                  "name": "temperature",
                  "display_name": "Temperature",
                  "advanced": false,
                  "dynamic": false,
                  "info": "Controls the creativity of model responses.",
                  "rangeSpec": {
                    "min": -1,
                    "max": 1,
                    "step": 0.1
                  },
                  "title_case": true
                },
                "tfs_z": {
                  "type": "float",
                  "required": false,
                  "placeholder": "",
                  "list": false,
                  "show": true,
                  "multiline": false,
                  "fileTypes": [],
                  "file_path": "",
                  "password": false,
                  "name": "tfs_z",
                  "display_name": "TFS Z",
                  "advanced": true,
                  "dynamic": false,
                  "info": "Tail free sampling to reduce impact of less probable tokens.",
                  "rangeSpec": {
                    "min": -1,
                    "max": 1,
                    "step": 0.1
                  },
                  "title_case": true
                },
                "top_k": {
                  "type": "int",
                  "required": false,
                  "placeholder": "",
                  "list": false,
                  "show": true,
                  "multiline": false,
                  "fileTypes": [],
                  "file_path": "",
                  "password": false,
                  "name": "top_k",
                  "display_name": "Top K",
                  "advanced": true,
                  "dynamic": false,
                  "info": "Limits token selection to top K for reducing nonsense generation.",
                  "title_case": true
                },
                "top_p": {
                  "type": "int",
                  "required": false,
                  "placeholder": "",
                  "list": false,
                  "show": true,
                  "multiline": false,
                  "fileTypes": [],
                  "file_path": "",
                  "password": false,
                  "name": "top_p",
                  "display_name": "Top P",
                  "advanced": true,
                  "dynamic": false,
                  "info": "Works with top-k to control diversity of generated text.",
                  "title_case": true
                },
                "_type": "CustomComponent"
              },
              "description": "Local LLM with Ollama.",
              "base_classes": [
                "BaseLanguageModel",
                "BaseLLM"
              ],
              "display_name": "Ollama",
              "documentation": "",
              "custom_fields": {
                "base_url": null,
                "model": null,
                "temperature": null,
                "mirostat": null,
                "mirostat_eta": null,
                "mirostat_tau": null,
                "num_ctx": null,
                "num_gpu": null,
                "num_thread": null,
                "repeat_last_n": null,
                "repeat_penalty": null,
                "stop": null,
                "tfs_z": null,
                "top_k": null,
                "top_p": null
              },
              "output_types": [
                "BaseLLM"
              ],
              "field_formatters": {},
              "beta": true
            },
            "id": "BaseLLM-We2EH",
            "description": "Local LLM with Ollama.",
            "display_name": "Ollama"
          },
          "selected": false,
          "width": 384,
          "height": 555,
          "positionAbsolute": {
            "x": -1386.530951302448,
            "y": -1591.5469050300042
          },
          "dragging": false
        },
        {
          "id": "AgentInitializer-zE8Xs",
          "type": "genericNode",
          "position": {
            "x": -136.5668351256163,
            "y": -1497.9607914487976
          },
          "data": {
            "type": "AgentInitializer",
            "node": {
              "template": {
                "llm": {
                  "type": "BaseLanguageModel",
                  "required": true,
                  "placeholder": "",
                  "list": false,
                  "show": true,
                  "multiline": false,
                  "fileTypes": [],
                  "file_path": "",
                  "password": false,
                  "name": "llm",
                  "display_name": "Language Model",
                  "advanced": false,
                  "dynamic": false,
                  "info": "",
                  "title_case": true
                },
                "memory": {
                  "type": "BaseChatMemory",
                  "required": false,
                  "placeholder": "",
                  "list": false,
                  "show": true,
                  "multiline": false,
                  "fileTypes": [],
                  "file_path": "",
                  "password": false,
                  "name": "memory",
                  "display_name": "Memory",
                  "advanced": false,
                  "dynamic": false,
                  "info": "",
                  "title_case": true
                },
                "tools": {
                  "type": "Tool",
                  "required": true,
                  "placeholder": "",
                  "list": true,
                  "show": true,
                  "multiline": false,
                  "fileTypes": [],
                  "file_path": "",
                  "password": false,
                  "name": "tools",
                  "display_name": "Tools",
                  "advanced": false,
                  "dynamic": false,
                  "info": "",
                  "title_case": true
                },
                "agent": {
                  "type": "str",
                  "required": true,
                  "placeholder": "",
                  "list": true,
                  "show": true,
                  "multiline": false,
                  "value": "zero-shot-react-description",
                  "fileTypes": [],
                  "file_path": "",
                  "password": false,
                  "options": [
                    "zero-shot-react-description",
                    "react-docstore",
                    "self-ask-with-search",
                    "conversational-react-description",
                    "chat-zero-shot-react-description",
                    "chat-conversational-react-description",
                    "structured-chat-zero-shot-react-description",
                    "openai-functions",
                    "openai-multi-functions",
                    "JsonAgent",
                    "CSVAgent",
                    "VectorStoreAgent",
                    "VectorStoreRouterAgent",
                    "SQLAgent"
                  ],
                  "name": "agent",
                  "display_name": "Agent Type",
                  "advanced": false,
                  "dynamic": false,
                  "info": "",
                  "title_case": true
                },
                "code": {
                  "type": "code",
                  "required": true,
                  "placeholder": "",
                  "list": false,
                  "show": true,
                  "multiline": true,
                  "value": "from typing import Callable, List, Optional, Union\n\nfrom langchain.agents import AgentExecutor, AgentType, initialize_agent, types\nfrom axiestudio import CustomComponent\nfrom axiestudio.field_typing import BaseChatMemory, BaseLanguageModel, Tool\n\n\nclass AgentInitializerComponent(CustomComponent):\n    display_name: str = \"Agent Initializer\"\n    description: str = \"Initialize a Langchain Agent.\"\n    documentation: str = \"https://python.langchain.com/docs/modules/agents/agent_types/\"\n\n    def build_config(self):\n        agents = list(types.AGENT_TO_CLASS.keys())\n        # field_type and required are optional\n        return {\n            \"agent\": {\"options\": agents, \"value\": agents[0], \"display_name\": \"Agent Type\"},\n            \"max_iterations\": {\"display_name\": \"Max Iterations\", \"value\": 10},\n            \"memory\": {\"display_name\": \"Memory\"},\n            \"tools\": {\"display_name\": \"Tools\"},\n            \"llm\": {\"display_name\": \"Language Model\"},\n            \"code\": {\"advanced\": True},\n        }\n\n    def build(\n        self,\n        agent: str,\n        llm: BaseLanguageModel,\n        tools: List[Tool],\n        max_iterations: int,\n        memory: Optional[BaseChatMemory] = None,\n    ) -> Union[AgentExecutor, Callable]:\n        agent = AgentType(agent)\n        if memory:\n            return initialize_agent(\n                tools=tools,\n                llm=llm,\n                agent=agent,\n                memory=memory,\n                return_intermediate_steps=True,\n                handle_parsing_errors=True,\n                max_iterations=max_iterations,\n            )\n        return initialize_agent(\n            tools=tools,\n            llm=llm,\n            agent=agent,\n            return_intermediate_steps=True,\n            handle_parsing_errors=True,\n            max_iterations=max_iterations,\n        )\n",
                  "fileTypes": [],
                  "file_path": "",
                  "password": false,
                  "name": "code",
                  "advanced": true,
                  "dynamic": true,
                  "info": "",
                  "title_case": true
                },
                "max_iterations": {
                  "type": "int",
                  "required": true,
                  "placeholder": "",
                  "list": false,
                  "show": true,
                  "multiline": false,
                  "value": 10,
                  "fileTypes": [],
                  "file_path": "",
                  "password": false,
                  "name": "max_iterations",
                  "display_name": "Max Iterations",
                  "advanced": false,
                  "dynamic": false,
                  "info": "",
                  "title_case": true
                },
                "_type": "CustomComponent"
              },
              "description": "Initialize a Langchain Agent.",
              "base_classes": [
                "AgentExecutor",
                "Chain",
                "Callable"
              ],
              "display_name": "Agent Initializer",
              "documentation": "https://python.langchain.com/docs/modules/agents/agent_types/",
              "custom_fields": {
                "agent": null,
                "llm": null,
                "tools": null,
                "max_iterations": null,
                "memory": null
              },
              "output_types": [
                "AgentExecutor",
                "Callable"
              ],
              "field_formatters": {},
              "beta": true
            },
            "id": "AgentInitializer-zE8Xs"
          },
          "selected": false,
          "width": 384,
          "height": 515,
          "positionAbsolute": {
            "x": -136.5668351256163,
            "y": -1497.9607914487976
          },
          "dragging": false
        },
        {
          "id": "Search-vkHaJ",
          "type": "genericNode",
          "position": {
            "x": -736.1842232794054,
            "y": -1190.8776238762402
          },
          "data": {
            "type": "Search",
            "node": {
              "template": {
                "aiosession": {
                  "type": "str",
                  "required": false,
                  "placeholder": "",
                  "list": false,
                  "show": false,
                  "multiline": false,
                  "value": "",
                  "fileTypes": [],
                  "file_path": "",
                  "password": false,
                  "name": "aiosession",
                  "advanced": false,
                  "dynamic": false,
                  "info": "",
                  "title_case": true
                },
                "serpapi_api_key": {
                  "type": "str",
                  "required": true,
                  "placeholder": "",
                  "list": false,
                  "show": true,
                  "multiline": false,
                  "value": "",
                  "fileTypes": [],
                  "file_path": "",
                  "password": true,
                  "name": "serpapi_api_key",
                  "advanced": false,
                  "dynamic": false,
                  "info": "",
                  "title_case": true
                },
                "_type": "Search"
              },
              "description": "A search engine. Useful for when you need to answer questions about current events. Input should be a search query.",
              "base_classes": [
                "Tool",
                "BaseTool"
              ],
              "display_name": "Search",
              "documentation": "",
              "custom_fields": {},
              "output_types": [],
              "field_formatters": {},
              "beta": false
            },
            "id": "Search-vkHaJ"
          },
          "selected": false,
          "width": 384,
          "height": 329,
          "positionAbsolute": {
            "x": -736.1842232794054,
            "y": -1190.8776238762402
          },
          "dragging": false
        },
        {
          "id": "ChatOutput-1U9f5",
          "type": "genericNode",
          "position": {
            "x": -205.95883452621763,
            "y": -608.129386012972
          },
          "data": {
            "type": "ChatOutput",
            "node": {
              "template": {
                "code": {
                  "type": "code",
                  "required": true,
                  "placeholder": "",
                  "list": false,
                  "show": true,
                  "multiline": true,
                  "value": "from typing import Optional, Union\n\nfrom axiestudio.base.io.chat import ChatComponent\nfrom axiestudio.field_typing import Text\nfrom axiestudio.schema import Record\n\n\nclass ChatOutput(ChatComponent):\n    display_name = \"Chat Output\"\n    description = \"Display a chat message in the Playground.\"\n    icon = \"ChatOutput\"\n\n    def build(\n        self,\n        sender: Optional[str] = \"Machine\",\n        sender_name: Optional[str] = \"AI\",\n        input_value: Optional[str] = None,\n        session_id: Optional[str] = None,\n        return_record: Optional[bool] = False,\n        record_template: Optional[str] = \"{text}\",\n    ) -> Union[Text, Record]:\n        return super().build_with_record(\n            sender=sender,\n            sender_name=sender_name,\n            input_value=input_value,\n            session_id=session_id,\n            return_record=return_record,\n            record_template=record_template or \"\",\n        )\n",
                  "fileTypes": [],
                  "file_path": "",
                  "password": false,
                  "name": "code",
                  "advanced": true,
                  "dynamic": true,
                  "info": "",
                  "load_from_db": false,
                  "title_case": false
                },
                "input_value": {
                  "type": "str",
                  "required": false,
                  "placeholder": "",
                  "list": false,
                  "show": true,
                  "multiline": true,
                  "fileTypes": [],
                  "file_path": "",
                  "password": false,
                  "name": "input_value",
                  "display_name": "Message",
                  "advanced": false,
                  "input_types": [
                    "Text"
                  ],
                  "dynamic": false,
                  "info": "",
                  "load_from_db": false,
                  "title_case": false
                },
                "record_template": {
                  "type": "str",
                  "required": false,
                  "placeholder": "",
                  "list": false,
                  "show": true,
                  "multiline": true,
                  "value": "{text}",
                  "fileTypes": [],
                  "file_path": "",
                  "password": false,
                  "name": "record_template",
                  "display_name": "Record Template",
                  "advanced": true,
                  "dynamic": false,
                  "info": "In case of Message being a Record, this template will be used to convert it to text.",
                  "load_from_db": false,
                  "title_case": false,
                  "input_types": [
                    "Text"
                  ]
                },
                "return_record": {
                  "type": "bool",
                  "required": false,
                  "placeholder": "",
                  "list": false,
                  "show": true,
                  "multiline": false,
                  "value": false,
                  "fileTypes": [],
                  "file_path": "",
                  "password": false,
                  "name": "return_record",
                  "display_name": "Return Record",
                  "advanced": true,
                  "dynamic": false,
                  "info": "Return the message as a record containing the sender, sender_name, and session_id.",
                  "load_from_db": false,
                  "title_case": false
                },
                "sender": {
                  "type": "str",
                  "required": false,
                  "placeholder": "",
                  "list": true,
                  "show": true,
                  "multiline": false,
                  "value": "Machine",
                  "fileTypes": [],
                  "file_path": "",
                  "password": false,
                  "options": [
                    "Machine",
                    "User"
                  ],
                  "name": "sender",
                  "display_name": "Sender Type",
                  "advanced": true,
                  "dynamic": false,
                  "info": "",
                  "load_from_db": false,
                  "title_case": false,
                  "input_types": [
                    "Text"
                  ]
                },
                "sender_name": {
                  "type": "str",
                  "required": false,
                  "placeholder": "",
                  "list": false,
                  "show": true,
                  "multiline": false,
                  "value": "AI",
                  "fileTypes": [],
                  "file_path": "",
                  "password": false,
                  "name": "sender_name",
                  "display_name": "Sender Name",
                  "advanced": false,
                  "dynamic": false,
                  "info": "",
                  "load_from_db": false,
                  "title_case": false,
                  "input_types": [
                    "Text"
                  ]
                },
                "session_id": {
                  "type": "str",
                  "required": false,
                  "placeholder": "",
                  "list": false,
                  "show": true,
                  "multiline": false,
                  "fileTypes": [],
                  "file_path": "",
                  "password": false,
                  "name": "session_id",
                  "display_name": "Session ID",
                  "advanced": true,
                  "dynamic": false,
                  "info": "If provided, the message will be stored in the memory.",
                  "load_from_db": false,
                  "title_case": false,
                  "input_types": [
                    "Text"
                  ]
                },
                "_type": "CustomComponent"
              },
              "description": "Display a chat message in the Playground.",
              "icon": "ChatOutput",
              "base_classes": [
                "object",
                "Record",
                "str",
                "Text"
              ],
              "display_name": "Chat Output",
              "documentation": "",
              "custom_fields": {
                "sender": null,
                "sender_name": null,
                "input_value": null,
                "session_id": null,
                "return_record": null,
                "record_template": null
              },
              "output_types": [
                "Text",
                "Record"
              ],
              "field_formatters": {},
              "frozen": false,
              "field_order": [],
              "beta": false
            },
            "id": "ChatOutput-1U9f5"
          },
          "selected": false,
          "width": 384,
          "height": 391,
          "positionAbsolute": {
            "x": -205.95883452621763,
            "y": -608.129386012972
          },
          "dragging": false
        }
      ],
      "edges": [
        {
          "source": "TextInput-nmGaZ",
          "sourceHandle": "{œbaseClassesœ:[œobjectœ,œstrœ,œTextœ],œdataTypeœ:œTextInputœ,œidœ:œTextInput-nmGaZœ}",
          "target": "ChatInput-dykoz",
          "targetHandle": "{œfieldNameœ:œinput_valueœ,œidœ:œChatInput-dykozœ,œinputTypesœ:[],œtypeœ:œstrœ}",
          "data": {
            "targetHandle": {
              "fieldName": "input_value",
              "id": "ChatInput-dykoz",
              "inputTypes": [],
              "type": "str"
            },
            "sourceHandle": {
              "baseClasses": [
                "object",
                "str",
                "Text"
              ],
              "dataType": "TextInput",
              "id": "TextInput-nmGaZ"
            }
          },
          "style": {
            "stroke": "#555"
          },
          "className": "stroke-foreground  stroke-connection",
          "animated": false,
          "id": "reactflow__edge-TextInput-nmGaZ{œbaseClassesœ:[œobjectœ,œstrœ,œTextœ],œdataTypeœ:œTextInputœ,œidœ:œTextInput-nmGaZœ}-ChatInput-dykoz{œfieldNameœ:œinput_valueœ,œidœ:œChatInput-dykozœ,œinputTypesœ:[],œtypeœ:œstrœ}",
          "selected": false
        },
        {
          "source": "ChatInput-dykoz",
          "sourceHandle": "{œbaseClassesœ:[œobjectœ,œRecordœ,œstrœ,œTextœ],œdataTypeœ:œChatInputœ,œidœ:œChatInput-dykozœ}",
          "target": "MemoryComponent-PDg8B",
          "targetHandle": "{œfieldNameœ:œsenderœ,œidœ:œMemoryComponent-PDg8Bœ,œinputTypesœ:[œTextœ],œtypeœ:œstrœ}",
          "data": {
            "targetHandle": {
              "fieldName": "sender",
              "id": "MemoryComponent-PDg8B",
              "inputTypes": [
                "Text"
              ],
              "type": "str"
            },
            "sourceHandle": {
              "baseClasses": [
                "object",
                "Record",
                "str",
                "Text"
              ],
              "dataType": "ChatInput",
              "id": "ChatInput-dykoz"
            }
          },
          "style": {
            "stroke": "#555"
          },
          "className": "stroke-foreground  stroke-connection",
          "animated": false,
          "id": "reactflow__edge-ChatInput-dykoz{œbaseClassesœ:[œobjectœ,œRecordœ,œstrœ,œTextœ],œdataTypeœ:œChatInputœ,œidœ:œChatInput-dykozœ}-MemoryComponent-PDg8B{œfieldNameœ:œsenderœ,œidœ:œMemoryComponent-PDg8Bœ,œinputTypesœ:[œTextœ],œtypeœ:œstrœ}",
          "selected": false
        },
        {
          "source": "TextInput-G36IC",
          "sourceHandle": "{œbaseClassesœ:[œobjectœ,œstrœ,œTextœ],œdataTypeœ:œTextInputœ,œidœ:œTextInput-G36ICœ}",
          "target": "ChatInput-HuRZp",
          "targetHandle": "{œfieldNameœ:œinput_valueœ,œidœ:œChatInput-HuRZpœ,œinputTypesœ:[],œtypeœ:œstrœ}",
          "data": {
            "targetHandle": {
              "fieldName": "input_value",
              "id": "ChatInput-HuRZp",
              "inputTypes": [],
              "type": "str"
            },
            "sourceHandle": {
              "baseClasses": [
                "object",
                "str",
                "Text"
              ],
              "dataType": "TextInput",
              "id": "TextInput-G36IC"
            }
          },
          "style": {
            "stroke": "#555"
          },
          "className": "stroke-foreground  stroke-connection",
          "animated": false,
          "id": "reactflow__edge-TextInput-G36IC{œbaseClassesœ:[œobjectœ,œstrœ,œTextœ],œdataTypeœ:œTextInputœ,œidœ:œTextInput-G36ICœ}-ChatInput-HuRZp{œfieldNameœ:œinput_valueœ,œidœ:œChatInput-HuRZpœ,œinputTypesœ:[],œtypeœ:œstrœ}",
          "selected": false
        },
        {
          "source": "ChatInput-HuRZp",
          "sourceHandle": "{œbaseClassesœ:[œobjectœ,œRecordœ,œstrœ,œTextœ],œdataTypeœ:œChatInputœ,œidœ:œChatInput-HuRZpœ}",
          "target": "MemoryComponent-PDg8B",
          "targetHandle": "{œfieldNameœ:œsenderœ,œidœ:œMemoryComponent-PDg8Bœ,œinputTypesœ:[œTextœ],œtypeœ:œstrœ}",
          "data": {
            "targetHandle": {
              "fieldName": "sender",
              "id": "MemoryComponent-PDg8B",
              "inputTypes": [
                "Text"
              ],
              "type": "str"
            },
            "sourceHandle": {
              "baseClasses": [
                "object",
                "Record",
                "str",
                "Text"
              ],
              "dataType": "ChatInput",
              "id": "ChatInput-HuRZp"
            }
          },
          "style": {
            "stroke": "#555"
          },
          "className": "stroke-foreground  stroke-connection",
          "animated": false,
          "id": "reactflow__edge-ChatInput-HuRZp{œbaseClassesœ:[œobjectœ,œRecordœ,œstrœ,œTextœ],œdataTypeœ:œChatInputœ,œidœ:œChatInput-HuRZpœ}-MemoryComponent-PDg8B{œfieldNameœ:œsenderœ,œidœ:œMemoryComponent-PDg8Bœ,œinputTypesœ:[œTextœ],œtypeœ:œstrœ}",
          "selected": false
        },
        {
          "source": "TextInput-jYned",
          "sourceHandle": "{œbaseClassesœ:[œobjectœ,œstrœ,œTextœ],œdataTypeœ:œTextInputœ,œidœ:œTextInput-jYnedœ}",
          "target": "ChatInput-KBJEC",
          "targetHandle": "{œfieldNameœ:œinput_valueœ,œidœ:œChatInput-KBJECœ,œinputTypesœ:[],œtypeœ:œstrœ}",
          "data": {
            "targetHandle": {
              "fieldName": "input_value",
              "id": "ChatInput-KBJEC",
              "inputTypes": [],
              "type": "str"
            },
            "sourceHandle": {
              "baseClasses": [
                "object",
                "str",
                "Text"
              ],
              "dataType": "TextInput",
              "id": "TextInput-jYned"
            }
          },
          "style": {
            "stroke": "#555"
          },
          "className": "stroke-foreground  stroke-connection",
          "animated": false,
          "id": "reactflow__edge-TextInput-jYned{œbaseClassesœ:[œobjectœ,œstrœ,œTextœ],œdataTypeœ:œTextInputœ,œidœ:œTextInput-jYnedœ}-ChatInput-KBJEC{œfieldNameœ:œinput_valueœ,œidœ:œChatInput-KBJECœ,œinputTypesœ:[],œtypeœ:œstrœ}",
          "selected": false
        },
        {
          "source": "ChatInput-KBJEC",
          "sourceHandle": "{œbaseClassesœ:[œobjectœ,œRecordœ,œstrœ,œTextœ],œdataTypeœ:œChatInputœ,œidœ:œChatInput-KBJECœ}",
          "target": "MemoryComponent-PDg8B",
          "targetHandle": "{œfieldNameœ:œsenderœ,œidœ:œMemoryComponent-PDg8Bœ,œinputTypesœ:[œTextœ],œtypeœ:œstrœ}",
          "data": {
            "targetHandle": {
              "fieldName": "sender",
              "id": "MemoryComponent-PDg8B",
              "inputTypes": [
                "Text"
              ],
              "type": "str"
            },
            "sourceHandle": {
              "baseClasses": [
                "object",
                "Record",
                "str",
                "Text"
              ],
              "dataType": "ChatInput",
              "id": "ChatInput-KBJEC"
            }
          },
          "style": {
            "stroke": "#555"
          },
          "className": "stroke-foreground  stroke-connection",
          "animated": false,
          "id": "reactflow__edge-ChatInput-KBJEC{œbaseClassesœ:[œobjectœ,œRecordœ,œstrœ,œTextœ],œdataTypeœ:œChatInputœ,œidœ:œChatInput-KBJECœ}-MemoryComponent-PDg8B{œfieldNameœ:œsenderœ,œidœ:œMemoryComponent-PDg8Bœ,œinputTypesœ:[œTextœ],œtypeœ:œstrœ}",
          "selected": false
        },
        {
          "source": "MemoryComponent-PDg8B",
          "sourceHandle": "{œbaseClassesœ:[œobjectœ,œstrœ,œTextœ],œdataTypeœ:œMemoryComponentœ,œidœ:œMemoryComponent-PDg8Bœ}",
          "target": "Prompt-FqMeL",
          "targetHandle": "{œfieldNameœ:œhistoryœ,œidœ:œPrompt-FqMeLœ,œinputTypesœ:[œDocumentœ,œBaseOutputParserœ],œtypeœ:œstrœ}",
          "data": {
            "targetHandle": {
              "fieldName": "history",
              "id": "Prompt-FqMeL",
              "inputTypes": [
                "Document",
                "BaseOutputParser"
              ],
              "type": "str"
            },
            "sourceHandle": {
              "baseClasses": [
                "object",
                "str",
                "Text"
              ],
              "dataType": "MemoryComponent",
              "id": "MemoryComponent-PDg8B"
            }
          },
          "style": {
            "stroke": "#555"
          },
          "className": "stroke-foreground  stroke-connection",
          "animated": false,
          "id": "reactflow__edge-MemoryComponent-PDg8B{œbaseClassesœ:[œobjectœ,œstrœ,œTextœ],œdataTypeœ:œMemoryComponentœ,œidœ:œMemoryComponent-PDg8Bœ}-Prompt-FqMeL{œfieldNameœ:œhistoryœ,œidœ:œPrompt-FqMeLœ,œinputTypesœ:[œDocumentœ,œBaseOutputParserœ],œtypeœ:œstrœ}",
          "selected": false
        },
        {
          "source": "BaseLLM-We2EH",
          "sourceHandle": "{œbaseClassesœ:[œBaseLanguageModelœ,œBaseLLMœ],œdataTypeœ:œBaseLLMœ,œidœ:œBaseLLM-We2EHœ}",
          "target": "Calculator-jrRc7",
          "targetHandle": "{œfieldNameœ:œllmœ,œidœ:œCalculator-jrRc7œ,œinputTypesœ:null,œtypeœ:œBaseLanguageModelœ}",
          "data": {
            "targetHandle": {
              "fieldName": "llm",
              "id": "Calculator-jrRc7",
              "inputTypes": null,
              "type": "BaseLanguageModel"
            },
            "sourceHandle": {
              "baseClasses": [
                "BaseLanguageModel",
                "BaseLLM"
              ],
              "dataType": "BaseLLM",
              "id": "BaseLLM-We2EH"
            }
          },
          "style": {
            "stroke": "#555"
          },
          "className": "stroke-foreground  stroke-connection",
          "animated": false,
          "id": "reactflow__edge-BaseLLM-We2EH{œbaseClassesœ:[œBaseLanguageModelœ,œBaseLLMœ],œdataTypeœ:œBaseLLMœ,œidœ:œBaseLLM-We2EHœ}-Calculator-jrRc7{œfieldNameœ:œllmœ,œidœ:œCalculator-jrRc7œ,œinputTypesœ:null,œtypeœ:œBaseLanguageModelœ}",
          "selected": false
        },
        {
          "source": "Calculator-jrRc7",
          "sourceHandle": "{œbaseClassesœ:[œToolœ,œBaseToolœ],œdataTypeœ:œCalculatorœ,œidœ:œCalculator-jrRc7œ}",
          "target": "AgentInitializer-zE8Xs",
          "targetHandle": "{œfieldNameœ:œtoolsœ,œidœ:œAgentInitializer-zE8Xsœ,œinputTypesœ:null,œtypeœ:œToolœ}",
          "data": {
            "targetHandle": {
              "fieldName": "tools",
              "id": "AgentInitializer-zE8Xs",
              "inputTypes": null,
              "type": "Tool"
            },
            "sourceHandle": {
              "baseClasses": [
                "Tool",
                "BaseTool"
              ],
              "dataType": "Calculator",
              "id": "Calculator-jrRc7"
            }
          },
          "style": {
            "stroke": "#555"
          },
          "className": "stroke-foreground  stroke-connection",
          "animated": false,
          "id": "reactflow__edge-Calculator-jrRc7{œbaseClassesœ:[œToolœ,œBaseToolœ],œdataTypeœ:œCalculatorœ,œidœ:œCalculator-jrRc7œ}-AgentInitializer-zE8Xs{œfieldNameœ:œtoolsœ,œidœ:œAgentInitializer-zE8Xsœ,œinputTypesœ:null,œtypeœ:œToolœ}",
          "selected": false
        },
        {
          "source": "BaseLLM-We2EH",
          "sourceHandle": "{œbaseClassesœ:[œBaseLanguageModelœ,œBaseLLMœ],œdataTypeœ:œBaseLLMœ,œidœ:œBaseLLM-We2EHœ}",
          "target": "AgentInitializer-zE8Xs",
          "targetHandle": "{œfieldNameœ:œllmœ,œidœ:œAgentInitializer-zE8Xsœ,œinputTypesœ:null,œtypeœ:œBaseLanguageModelœ}",
          "data": {
            "targetHandle": {
              "fieldName": "llm",
              "id": "AgentInitializer-zE8Xs",
              "inputTypes": null,
              "type": "BaseLanguageModel"
            },
            "sourceHandle": {
              "baseClasses": [
                "BaseLanguageModel",
                "BaseLLM"
              ],
              "dataType": "BaseLLM",
              "id": "BaseLLM-We2EH"
            }
          },
          "style": {
            "stroke": "#555"
          },
          "className": "stroke-foreground  stroke-connection",
          "animated": false,
          "id": "reactflow__edge-BaseLLM-We2EH{œbaseClassesœ:[œBaseLanguageModelœ,œBaseLLMœ],œdataTypeœ:œBaseLLMœ,œidœ:œBaseLLM-We2EHœ}-AgentInitializer-zE8Xs{œfieldNameœ:œllmœ,œidœ:œAgentInitializer-zE8Xsœ,œinputTypesœ:null,œtypeœ:œBaseLanguageModelœ}",
          "selected": false
        },
        {
          "source": "Search-vkHaJ",
          "sourceHandle": "{œbaseClassesœ:[œToolœ,œBaseToolœ],œdataTypeœ:œSearchœ,œidœ:œSearch-vkHaJœ}",
          "target": "AgentInitializer-zE8Xs",
          "targetHandle": "{œfieldNameœ:œtoolsœ,œidœ:œAgentInitializer-zE8Xsœ,œinputTypesœ:null,œtypeœ:œToolœ}",
          "data": {
            "targetHandle": {
              "fieldName": "tools",
              "id": "AgentInitializer-zE8Xs",
              "inputTypes": null,
              "type": "Tool"
            },
            "sourceHandle": {
              "baseClasses": [
                "Tool",
                "BaseTool"
              ],
              "dataType": "Search",
              "id": "Search-vkHaJ"
            }
          },
          "style": {
            "stroke": "#555"
          },
          "className": "stroke-foreground  stroke-connection",
          "animated": false,
          "id": "reactflow__edge-Search-vkHaJ{œbaseClassesœ:[œToolœ,œBaseToolœ],œdataTypeœ:œSearchœ,œidœ:œSearch-vkHaJœ}-AgentInitializer-zE8Xs{œfieldNameœ:œtoolsœ,œidœ:œAgentInitializer-zE8Xsœ,œinputTypesœ:null,œtypeœ:œToolœ}",
          "selected": false
        },
        {
          "source": "Prompt-FqMeL",
          "sourceHandle": "{œbaseClassesœ:[œstrœ,œTextœ],œdataTypeœ:œPromptœ,œidœ:œPrompt-FqMeLœ}",
          "target": "ChatOutput-1U9f5",
          "targetHandle": "{œfieldNameœ:œinput_valueœ,œidœ:œChatOutput-1U9f5œ,œinputTypesœ:[œTextœ],œtypeœ:œstrœ}",
          "data": {
            "targetHandle": {
              "fieldName": "input_value",
              "id": "ChatOutput-1U9f5",
              "inputTypes": [
                "Text"
              ],
              "type": "str"
            },
            "sourceHandle": {
              "baseClasses": [
                "str",
                "Text"
              ],
              "dataType": "Prompt",
              "id": "Prompt-FqMeL"
            }
          },
          "style": {
            "stroke": "#555"
          },
          "className": "stroke-foreground  stroke-connection",
          "animated": false,
          "id": "reactflow__edge-Prompt-FqMeL{œbaseClassesœ:[œstrœ,œTextœ],œdataTypeœ:œPromptœ,œidœ:œPrompt-FqMeLœ}-ChatOutput-1U9f5{œfieldNameœ:œinput_valueœ,œidœ:œChatOutput-1U9f5œ,œinputTypesœ:[œTextœ],œtypeœ:œstrœ}"
        }
      ],
      "viewport": {
        "x": 1260.6744101493734,
        "y": 846.6088827570151,
        "zoom": 0.48210624798355733
      }
    },
    "date_created": "2024-05-30T10:23:28.085Z",
    "date_updated": "2024-05-30T10:23:28.133Z",
    "status": "Public",
    "sort": null,
    "user_updated": "6494a69f-853b-4676-96e7-1c5e1a9617bd",
    "user_created": {
      "username": "gavinzli",
      "first_name": "Gavin",
      "last_name": "Li",
      "id": "6494a69f-853b-4676-96e7-1c5e1a9617bd"
    },
    "tags": []
  },
  "conversion": {
    "converted_at": "2025-08-19T18:08:55.935Z",
    "converted_from": "langflow",
    "converted_to": "axiestudio",
    "conversions_made": 58,
    "converter_version": "1.0.0"
  }
}