{
  "id": "990b0b4a-95ae-4fe5-8ae2-7ed2d63ba43b",
  "name": "dtp_extractor_agent",
  "description": "Extracts DTP and food preferences from the user (Converted from Langflow Store for AxieStudio compatibility)",
  "type": "FLOW",
  "is_component": false,
  "author": {
    "username": "ashaumyan",
    "first_name": "Amazasp",
    "last_name": "Shaumyan",
    "id": "a40f6153-fb06-44aa-be94-2ce6278045ae",
    "full_name": "Amazasp Shaumyan"
  },
  "store_url": "https://www.langflow.store/store/component/990b0b4a-95ae-4fe5-8ae2-7ed2d63ba43b",
  "stats": {
    "downloads": 0,
    "likes": 0
  },
  "dates": {
    "created": "2024-05-03T21:12:57.276Z",
    "updated": "2024-05-03T21:12:57.397Z",
    "downloaded": "2025-08-19T17:50:04.966Z"
  },
  "tags": [
    {
      "tags_id": {
        "name": "Agent",
        "id": "ccabb590-c9e8-4e56-9d6c-309955936c6c"
      }
    }
  ],
  "technical": {
    "last_tested_version": "0.6.16",
    "private": false,
    "status": "Public"
  },
  "data": {
    "nodes": [
      {
        "id": "ConversationBufferMemory-CseqN",
        "type": "genericNode",
        "position": {
          "x": 823.8211249124307,
          "y": -288.8826451299408
        },
        "data": {
          "type": "ConversationBufferMemory",
          "node": {
            "template": {
              "chat_memory": {
                "type": "BaseChatMessageHistory",
                "required": false,
                "placeholder": "",
                "list": false,
                "show": true,
                "multiline": false,
                "fileTypes": [],
                "password": false,
                "name": "chat_memory",
                "advanced": false,
                "dynamic": false,
                "info": "",
                "title_case": true
              },
              "ai_prefix": {
                "type": "str",
                "required": false,
                "placeholder": "",
                "list": false,
                "show": false,
                "multiline": false,
                "value": "AI",
                "fileTypes": [],
                "password": false,
                "name": "ai_prefix",
                "advanced": false,
                "dynamic": false,
                "info": "",
                "title_case": true
              },
              "human_prefix": {
                "type": "str",
                "required": false,
                "placeholder": "",
                "list": false,
                "show": false,
                "multiline": false,
                "value": "Human",
                "fileTypes": [],
                "password": false,
                "name": "human_prefix",
                "advanced": false,
                "dynamic": false,
                "info": "",
                "title_case": true
              },
              "input_key": {
                "type": "str",
                "required": false,
                "placeholder": "",
                "list": false,
                "show": true,
                "multiline": false,
                "value": "",
                "fileTypes": [],
                "file_path": "",
                "password": false,
                "name": "input_key",
                "advanced": false,
                "dynamic": false,
                "info": "The variable to be used as Chat Input when more than one variable is available.",
                "title_case": true
              },
              "memory_key": {
                "type": "str",
                "required": false,
                "placeholder": "",
                "list": false,
                "show": true,
                "multiline": false,
                "value": "chat_history",
                "fileTypes": [],
                "password": false,
                "name": "memory_key",
                "advanced": false,
                "dynamic": false,
                "info": "",
                "title_case": true
              },
              "output_key": {
                "type": "str",
                "required": false,
                "placeholder": "",
                "list": false,
                "show": true,
                "multiline": false,
                "value": "",
                "fileTypes": [],
                "file_path": "",
                "password": false,
                "name": "output_key",
                "advanced": false,
                "dynamic": false,
                "info": "The variable to be used as Chat Output (e.g. answer in a ConversationalRetrievalChain)",
                "title_case": true
              },
              "return_messages": {
                "type": "bool",
                "required": false,
                "placeholder": "",
                "list": false,
                "show": true,
                "multiline": false,
                "fileTypes": [],
                "file_path": "",
                "password": false,
                "name": "return_messages",
                "advanced": false,
                "dynamic": false,
                "info": "",
                "title_case": true,
                "value": true
              },
              "_type": "ConversationBufferMemory"
            },
            "description": "Buffer for storing conversation memory.",
            "base_classes": [
              "BaseMemory",
              "BaseChatMemory",
              "ConversationBufferMemory"
            ],
            "display_name": "ConversationBufferMemory",
            "documentation": "https://python.langchain.com/docs/modules/memory/how_to/buffer",
            "custom_fields": {},
            "output_types": [],
            "field_formatters": {},
            "beta": false
          },
          "id": "ConversationBufferMemory-CseqN"
        },
        "selected": false,
        "width": 384,
        "height": 601,
        "positionAbsolute": {
          "x": 823.8211249124307,
          "y": -288.8826451299408
        },
        "dragging": false
      },
      {
        "id": "AgentExecutor-rlara",
        "type": "genericNode",
        "position": {
          "x": 2055.9949411548973,
          "y": 74.58211187412066
        },
        "data": {
          "type": "AgentExecutor",
          "node": {
            "template": {
              "memory": {
                "type": "BaseMemory",
                "required": false,
                "placeholder": "",
                "list": false,
                "show": true,
                "multiline": false,
                "fileTypes": [],
                "file_path": "",
                "password": false,
                "name": "memory",
                "display_name": "Memory",
                "advanced": false,
                "dynamic": false,
                "info": "",
                "title_case": true
              },
              "system_message": {
                "type": "SystemMessagePromptTemplate",
                "required": false,
                "placeholder": "",
                "list": false,
                "show": true,
                "multiline": false,
                "fileTypes": [],
                "file_path": "",
                "password": false,
                "name": "system_message",
                "display_name": "System Message",
                "advanced": false,
                "dynamic": false,
                "info": "",
                "title_case": true
              },
              "tools": {
                "type": "Tool",
                "required": true,
                "placeholder": "",
                "list": true,
                "show": true,
                "multiline": false,
                "fileTypes": [],
                "file_path": "",
                "password": false,
                "name": "tools",
                "display_name": "Tools",
                "advanced": false,
                "dynamic": false,
                "info": "",
                "title_case": true
              },
              "code": {
                "type": "code",
                "required": true,
                "placeholder": "",
                "list": false,
                "show": true,
                "multiline": true,
                "value": "from typing import List, Optional\n\nfrom langchain.agents.agent import AgentExecutor\nfrom langchain.agents.agent_toolkits.conversational_retrieval.openai_functions import _get_default_system_message\nfrom langchain.agents.openai_functions_agent.base import OpenAIFunctionsAgent\nfrom langchain.memory.token_buffer import ConversationTokenBufferMemory\nfrom langchain.prompts import SystemMessagePromptTemplate\nfrom langchain.prompts.chat import MessagesPlaceholder\nfrom langchain.schema.memory import BaseMemory\nfrom langchain.tools import Tool\nfrom langchain_community.chat_models import ChatOpenAI\nfrom axiestudio import CustomComponent\nfrom axiestudio.field_typing.range_spec import RangeSpec\n\n\nclass ConversationalAgent(CustomComponent):\n    display_name: str = \"OpenAI Conversational Agent\"\n    description: str = \"Conversational Agent that can use OpenAI's function calling API\"\n\n    def build_config(self):\n        openai_function_models = [\n            \"gpt-4-turbo-preview\",\n            \"gpt-4-0125-preview\",\n            \"gpt-4-1106-preview\",\n            \"gpt-4-vision-preview\",\n            \"gpt-3.5-turbo-0125\",\n            \"gpt-3.5-turbo-1106\",\n        ]\n        return {\n            \"tools\": {\"display_name\": \"Tools\"},\n            \"memory\": {\"display_name\": \"Memory\"},\n            \"system_message\": {\"display_name\": \"System Message\"},\n            \"max_token_limit\": {\"display_name\": \"Max Token Limit\"},\n            \"model_name\": {\n                \"display_name\": \"Model Name\",\n                \"options\": openai_function_models,\n                \"value\": openai_function_models[0],\n            },\n            \"code\": {\"show\": False},\n            \"temperature\": {\n                \"display_name\": \"Temperature\",\n                \"value\": 0.2,\n                \"range_spec\": RangeSpec(min=0, max=2, step=0.1),\n            },\n        }\n\n    def build(\n        self,\n        model_name: str,\n        openai_api_key: str,\n        tools: List[Tool],\n        openai_api_base: Optional[str] = None,\n        memory: Optional[BaseMemory] = None,\n        system_message: Optional[SystemMessagePromptTemplate] = None,\n        max_token_limit: int = 2000,\n        temperature: float = 0.9,\n    ) -> AgentExecutor:\n        llm = ChatOpenAI(\n            model=model_name,\n            api_key=openai_api_key,\n            base_url=openai_api_base,\n            max_tokens=max_token_limit,\n            temperature=temperature,\n        )\n        if not memory:\n            memory_key = \"chat_history\"\n            memory = ConversationTokenBufferMemory(\n                memory_key=memory_key,\n                return_messages=True,\n                output_key=\"output\",\n                llm=llm,\n                max_token_limit=max_token_limit,\n            )\n        else:\n            memory_key = memory.memory_key  # type: ignore\n\n        _system_message = system_message or _get_default_system_message()\n        prompt = OpenAIFunctionsAgent.create_prompt(\n            system_message=_system_message,  # type: ignore\n            extra_prompt_messages=[MessagesPlaceholder(variable_name=memory_key)],\n        )\n        agent = OpenAIFunctionsAgent(\n            llm=llm,\n            tools=tools,\n            prompt=prompt,  # type: ignore\n        )\n        return AgentExecutor(\n            agent=agent,\n            tools=tools,  # type: ignore\n            memory=memory,\n            verbose=True,\n            return_intermediate_steps=True,\n            handle_parsing_errors=True,\n        )\n",
                "fileTypes": [],
                "file_path": "",
                "password": false,
                "name": "code",
                "advanced": false,
                "dynamic": true,
                "info": "",
                "title_case": true
              },
              "max_token_limit": {
                "type": "int",
                "required": true,
                "placeholder": "",
                "list": false,
                "show": true,
                "multiline": false,
                "value": "2000",
                "fileTypes": [],
                "file_path": "",
                "password": false,
                "name": "max_token_limit",
                "display_name": "Max Token Limit",
                "advanced": false,
                "dynamic": false,
                "info": "",
                "title_case": true
              },
              "model_name": {
                "type": "str",
                "required": true,
                "placeholder": "",
                "list": true,
                "show": true,
                "multiline": false,
                "value": "gpt-4-turbo-preview",
                "fileTypes": [],
                "file_path": "",
                "password": false,
                "options": [
                  "gpt-4-turbo-preview",
                  "gpt-4-0125-preview",
                  "gpt-4-1106-preview",
                  "gpt-4-vision-preview",
                  "gpt-3.5-turbo-0125",
                  "gpt-3.5-turbo-1106"
                ],
                "name": "model_name",
                "display_name": "Model Name",
                "advanced": false,
                "dynamic": false,
                "info": "",
                "title_case": true
              },
              "openai_api_base": {
                "type": "str",
                "required": false,
                "placeholder": "",
                "list": false,
                "show": true,
                "multiline": false,
                "fileTypes": [],
                "file_path": "",
                "password": false,
                "name": "openai_api_base",
                "advanced": false,
                "dynamic": false,
                "info": "",
                "title_case": true
              },
              "openai_api_key": {
                "type": "str",
                "required": true,
                "placeholder": "",
                "list": false,
                "show": true,
                "multiline": false,
                "fileTypes": [],
                "file_path": "",
                "password": false,
                "name": "openai_api_key",
                "advanced": false,
                "dynamic": false,
                "info": "",
                "title_case": true,
                "value": "sk-PLACEHOLDER_API_KEY"
              },
              "temperature": {
                "type": "float",
                "required": true,
                "placeholder": "",
                "list": false,
                "show": true,
                "multiline": false,
                "value": "0.2",
                "fileTypes": [],
                "file_path": "",
                "password": false,
                "name": "temperature",
                "display_name": "Temperature",
                "advanced": false,
                "dynamic": false,
                "info": "",
                "rangeSpec": {
                  "min": 0,
                  "max": 2,
                  "step": 0.1
                },
                "title_case": true
              },
              "_type": "CustomComponent"
            },
            "description": "Conversational Agent that can use OpenAI's function calling API",
            "base_classes": [
              "Chain",
              "AgentExecutor"
            ],
            "display_name": "OpenAI Conversational Agent",
            "documentation": "",
            "custom_fields": {
              "model_name": null,
              "openai_api_key": null,
              "tools": null,
              "openai_api_base": null,
              "memory": null,
              "system_message": null,
              "max_token_limit": null,
              "temperature": null
            },
            "output_types": [
              "AgentExecutor"
            ],
            "field_formatters": {},
            "beta": true
          },
          "id": "AgentExecutor-rlara"
        },
        "selected": false,
        "width": 384,
        "height": 895,
        "dragging": false,
        "positionAbsolute": {
          "x": 2055.9949411548973,
          "y": 74.58211187412066
        }
      },
      {
        "id": "SystemMessagePromptTemplate-dmkev",
        "type": "genericNode",
        "position": {
          "x": 537.6622259237166,
          "y": 409.4572881404006
        },
        "data": {
          "type": "SystemMessagePromptTemplate",
          "node": {
            "template": {
              "additional_kwargs": {
                "type": "dict",
                "required": false,
                "placeholder": "",
                "list": false,
                "show": false,
                "multiline": false,
                "fileTypes": [],
                "password": false,
                "name": "additional_kwargs",
                "advanced": true,
                "dynamic": true,
                "info": "",
                "title_case": true
              },
              "prompt": {
                "type": "prompt",
                "required": true,
                "placeholder": "",
                "list": true,
                "show": true,
                "multiline": true,
                "value": "You are a helpful assistant with the following key directives:\n\n1. Your purpose  - assist users in finding and booking restaurants based on specific preferences and details provided by the user.\n2. Your user interaction_philosophy - empower users by providing clear information and confirming details at every step, ensuring a user-friendly and adaptable interaction experience. You \nhandle errors or misunderstandings by asking clarifying questions and allowing users to easily correct or update information.\n \nNow you need to use the state machine for OpenTable reservation system. For state machine to work\n# Identify Current State:\nAt each step of the conversation, use the context/history of user-agent interactions to determine the current state of the conversation. This could involve recognizing keywords, user intents, or specific information provided by the user.\n\n# Determine Applicable Transitions:\nBased on the current state, evaluate the conditions for each possible transition. This involves checking if the user's latest input or the accumulated context data satisfies the conditions to move to another state.\n\n# Execute State Tasks:\nPerform the tasks associated with the current state, as outlined in the state machine. This may include collecting information, providing responses, or confirming details with the user. At some stages before execution of task you can retrieve past mistakes to avoid them (using past_mistakes_tool).\n\n# Transition to the Next State:\nOnce a transition condition is met, move to the next appropriate state as dictated by the state machine. Update the conversation context to reflect this new state.\n\n# Handle Exceptions and Loops:\nIf the user's input does not clearly satisfy any transition condition, or if the input is outside the expected responses (e.g., a request to go back or cancel), handle these gracefully by providing appropriate responses and adjusting the state accordingly.\n\nHere is the state machine for OpenTable reservation system:\n\n### 1. **Gather Initial Request**\n**Task:** Prompt the user to start a reservation process by asking for either a specific restaurant or general preferences like cuisine, ambience, food, preferred dishes. Follow up by asking for location, date_time and party_size if the restaurant was not provided. If a restaurant name was provided only date time and party size are necessary. If a specific restaurant name is mentioned, confirm its validity using restaurant_name_tool.\n**Transition Conditions:**\n- **To Confirmation of Details:** If a specific restaurant is named with all details provided (i.e. date_time and party_size).\n- **To Extract Reservation Details:** If general preferences along with location, date_time, party_size are provided without a specific restaurant name.\n**Tools Available:** `get_current_time`, `past_mistakes_tool`, `restaurant_name_tool`\n\n### 2. **Extract Reservation Details**\n**Task:** Ask for detailed information required for reservation which might include date, time, party size, and any special requests or preferences.\n**Transition Conditions:**\n- **To Restaurant Search:** Once all necessary details are collected.\n- **To Confirmation of Details:** If a specific restaurant was initially named but more details are needed.\n**Tools Available:** `get_current_time`, `past_mistakes_tool`\n\n### 3. **Restaurant Search**\n**Task:** Utilize the restaurant_search_tool to generate a list of restaurants based on user preferences stated in their query. If the user has not specified any particular preferences about the dining experience beyond party size, location, and date_time, select the top two restaurants based on their ratings. From the output of the restaurant_search_tool, which includes summaries for each restaurant, select and prepare a concise summary for the top two choices. Emphasize aspects particularly relevant to the user's detailed or general preferences to help them understand why these options might be the best fit.\n**Transition Conditions:**\n- **To Select Restaurant:** Display search results and ask the user to choose a restaurant.\n- **To Extract Reservation Details:** If no suitable options are found, prompt to refine search criteria.\n**Tools Available:** `restaurant_search_tool`\n\n### 4. **Select Restaurant**\n**Task:** Present the list of restaurants from the search results, summarizing and outlining for every restaurant details that are related to the general preference that user query contained and let the user make a selection.\n**Transition Conditions:**\n- **To Confirmation of Details:** Once a restaurant is selected.\n- **To Restaurant Search:** If the user wants to see more options or change search criteria.\n\n### 5. **Confirmation of Details**\n**Task:** Summarize all details of the reservation in a JSON format. The JSON object should include the restaurant_name, party_size, and date_time (date_time in `YYYY-MM-DDTHH:MM` format). Ensure that JSON object with details of reservation is shown to the user for confirmation.\n**Transition Conditions:**\n- **To Complete the Reservation:** If all details are confirmed.\n- **To Modify Reservation Details:** If the user wants to change any detail.\n\n### 6. **Modify Reservation Details**\n**Task:** Allow changes to any of the reservation details like date, time, or party size.\n**Transition Conditions:**\n- **To Confirmation of Details:** After changes are made and need reconfirmation.\n- **To Restaurant Search:** If user changes preferences significantly enough to warrant a new search.\n\n### 7. **Complete the Reservation**\n**Task:** Check current date using `get_current_time` tool and deduce date of reservation. Finalize the reservation by sending details (i.e. restaurant_name, date_time, and party_size) to the restaurant_reservation_tool. Confirm back to the user with a booking confirmation.\n**Transition Conditions:**\n- **End:** Upon successful reservation.\n- **To Modify Reservation Details:** If finalization fails or the user wishes to alter the reservation at the last minute.\n**Tools Available:** `restaurant_reservation_tool`, `get_current_time`, `past_mistakes_tool`\n\n\n### Handling Unexpected Inputs\nIt's also important to handle unexpected inputs or requests from the user at any stage, which might involve:\n- Providing help or clarification.\n- Returning to a previous state if the user is confused or makes an error.\n- Terminating or restarting the process if the user wishes to cancel or start over.\n\nThis state machine design provides a robust framework for handling the complexities of a restaurant reservation system like OpenTable. It takes into account various user actions and system responses, ensuring flexibility and a good user experience throughout the reservation process.\n",
                "fileTypes": [],
                "password": false,
                "name": "prompt",
                "advanced": false,
                "dynamic": true,
                "info": "",
                "title_case": true
              },
              "_type": "SystemMessagePromptTemplate"
            },
            "description": "System message prompt template.",
            "icon": null,
            "base_classes": [
              "SystemMessagePromptTemplate",
              "BaseMessagePromptTemplate",
              "_StringImageMessagePromptTemplate"
            ],
            "name": "",
            "display_name": "SystemMessagePromptTemplate",
            "documentation": "https://python.langchain.com/docs/modules/model_io/models/chat/how_to/prompts",
            "custom_fields": {
              "": []
            },
            "output_types": [],
            "full_path": null,
            "field_formatters": {},
            "beta": false,
            "error": null
          },
          "id": "SystemMessagePromptTemplate-dmkev",
          "description": "System message prompt template.",
          "display_name": "SystemMessagePromptTemplate"
        },
        "selected": false,
        "width": 384,
        "height": 281,
        "dragging": false,
        "positionAbsolute": {
          "x": 537.6622259237166,
          "y": 409.4572881404006
        }
      },
      {
        "id": "PythonFunctionTool-zoas5",
        "type": "genericNode",
        "position": {
          "x": -980.4134443539951,
          "y": 1166.6966929093687
        },
        "data": {
          "type": "PythonFunctionTool",
          "node": {
            "template": {
              "code": {
                "type": "code",
                "required": true,
                "placeholder": "",
                "list": false,
                "show": true,
                "multiline": true,
                "value": "import json\n\n\ndef restaurant_reservation_function(parameters) -> str:\n    \"\"\"\n    Reserves restaurant and returns confirmation of the reservation \n    \"\"\"\n    params = json.loads(parameters)\n    return (\n        f\"Congratulations, restaurant {params.get('restaurant_name')} is reserved for {params.get('party_size')} people at {params.get('date_time')}\"\n    )\n",
                "fileTypes": [],
                "file_path": "",
                "password": false,
                "name": "code",
                "advanced": false,
                "dynamic": false,
                "info": "",
                "title_case": true
              },
              "description": {
                "type": "str",
                "required": true,
                "placeholder": "",
                "list": false,
                "show": true,
                "multiline": true,
                "value": "restaurant reservation tool - allows to book the restaurant. Parameters to the tool are restaurant_name, date_time, party_size",
                "fileTypes": [],
                "file_path": "",
                "password": false,
                "name": "description",
                "advanced": false,
                "dynamic": false,
                "info": "",
                "title_case": true
              },
              "name": {
                "type": "str",
                "required": true,
                "placeholder": "",
                "list": false,
                "show": true,
                "multiline": false,
                "value": "restaurant_reservation_tool",
                "fileTypes": [],
                "file_path": "",
                "password": false,
                "name": "name",
                "advanced": false,
                "dynamic": false,
                "info": "",
                "title_case": true
              },
              "return_direct": {
                "type": "bool",
                "required": true,
                "placeholder": "",
                "list": false,
                "show": true,
                "multiline": false,
                "value": true,
                "fileTypes": [],
                "file_path": "",
                "password": false,
                "name": "return_direct",
                "advanced": false,
                "dynamic": false,
                "info": "",
                "title_case": true
              },
              "_type": "PythonFunctionTool"
            },
            "description": "Python function to be executed.",
            "base_classes": [
              "BaseTool",
              "Tool"
            ],
            "display_name": "PythonFunctionTool",
            "documentation": "",
            "custom_fields": {},
            "output_types": [],
            "field_formatters": {},
            "beta": false
          },
          "id": "PythonFunctionTool-zoas5"
        },
        "selected": false,
        "width": 384,
        "height": 537,
        "positionAbsolute": {
          "x": -980.4134443539951,
          "y": 1166.6966929093687
        },
        "dragging": false
      },
      {
        "id": "OpenAIEmbeddings-UExkq",
        "type": "genericNode",
        "position": {
          "x": -1387.0001236345906,
          "y": 2125.239874302798
        },
        "data": {
          "type": "OpenAIEmbeddings",
          "node": {
            "template": {
              "allowed_special": {
                "type": "str",
                "required": true,
                "placeholder": "",
                "list": true,
                "show": true,
                "multiline": false,
                "value": [],
                "fileTypes": [],
                "file_path": "",
                "password": false,
                "name": "allowed_special",
                "display_name": "Allowed Special",
                "advanced": true,
                "dynamic": false,
                "info": "",
                "title_case": true
              },
              "chunk_size": {
                "type": "int",
                "required": true,
                "placeholder": "",
                "list": false,
                "show": true,
                "multiline": false,
                "value": 1000,
                "fileTypes": [],
                "file_path": "",
                "password": false,
                "name": "chunk_size",
                "display_name": "Chunk Size",
                "advanced": true,
                "dynamic": false,
                "info": "",
                "title_case": true
              },
              "client": {
                "type": "Any",
                "required": false,
                "placeholder": "",
                "list": false,
                "show": true,
                "multiline": false,
                "fileTypes": [],
                "file_path": "",
                "password": false,
                "name": "client",
                "display_name": "Client",
                "advanced": true,
                "dynamic": false,
                "info": "",
                "title_case": true
              },
              "code": {
                "type": "code",
                "required": true,
                "placeholder": "",
                "list": false,
                "show": true,
                "multiline": true,
                "value": "from typing import Any, Callable, Dict, List, Optional, Union\n\nfrom langchain_openai.embeddings.base import OpenAIEmbeddings\nfrom axiestudio import CustomComponent\nfrom axiestudio.field_typing import NestedDict\nfrom pydantic.v1.types import SecretStr\n\n\nclass OpenAIEmbeddingsComponent(CustomComponent):\n    display_name = \"OpenAIEmbeddings\"\n    description = \"OpenAI embedding models\"\n\n    def build_config(self):\n        return {\n            \"allowed_special\": {\n                \"display_name\": \"Allowed Special\",\n                \"advanced\": True,\n                \"field_type\": \"str\",\n                \"is_list\": True,\n            },\n            \"default_headers\": {\n                \"display_name\": \"Default Headers\",\n                \"advanced\": True,\n                \"field_type\": \"dict\",\n            },\n            \"default_query\": {\n                \"display_name\": \"Default Query\",\n                \"advanced\": True,\n                \"field_type\": \"NestedDict\",\n            },\n            \"disallowed_special\": {\n                \"display_name\": \"Disallowed Special\",\n                \"advanced\": True,\n                \"field_type\": \"str\",\n                \"is_list\": True,\n            },\n            \"chunk_size\": {\"display_name\": \"Chunk Size\", \"advanced\": True},\n            \"client\": {\"display_name\": \"Client\", \"advanced\": True},\n            \"deployment\": {\"display_name\": \"Deployment\", \"advanced\": True},\n            \"embedding_ctx_length\": {\n                \"display_name\": \"Embedding Context Length\",\n                \"advanced\": True,\n            },\n            \"max_retries\": {\"display_name\": \"Max Retries\", \"advanced\": True},\n            \"model\": {\n                \"display_name\": \"Model\",\n                \"advanced\": False,\n                \"options\": [\"text-embedding-3-small\", \"text-embedding-3-large\", \"text-embedding-ada-002\"],\n            },\n            \"model_kwargs\": {\"display_name\": \"Model Kwargs\", \"advanced\": True},\n            \"openai_api_base\": {\"display_name\": \"OpenAI API Base\", \"password\": True, \"advanced\": True},\n            \"openai_api_key\": {\"display_name\": \"OpenAI API Key\", \"password\": True},\n            \"openai_api_type\": {\"display_name\": \"OpenAI API Type\", \"advanced\": True, \"password\": True},\n            \"openai_api_version\": {\n                \"display_name\": \"OpenAI API Version\",\n                \"advanced\": True,\n            },\n            \"openai_organization\": {\n                \"display_name\": \"OpenAI Organization\",\n                \"advanced\": True,\n            },\n            \"openai_proxy\": {\"display_name\": \"OpenAI Proxy\", \"advanced\": True},\n            \"request_timeout\": {\"display_name\": \"Request Timeout\", \"advanced\": True},\n            \"show_progress_bar\": {\n                \"display_name\": \"Show Progress Bar\",\n                \"advanced\": True,\n            },\n            \"skip_empty\": {\"display_name\": \"Skip Empty\", \"advanced\": True},\n            \"tiktoken_model_name\": {\"display_name\": \"TikToken Model Name\"},\n            \"tikToken_enable\": {\"display_name\": \"TikToken Enable\", \"advanced\": True},\n        }\n\n    def build(\n        self,\n        default_headers: Optional[Dict[str, str]] = None,\n        default_query: Optional[NestedDict] = {},\n        allowed_special: List[str] = [],\n        disallowed_special: List[str] = [\"all\"],\n        chunk_size: int = 1000,\n        client: Optional[Any] = None,\n        deployment: str = \"text-embedding-3-small\",\n        embedding_ctx_length: int = 8191,\n        max_retries: int = 6,\n        model: str = \"text-embedding-3-small\",\n        model_kwargs: NestedDict = {},\n        openai_api_base: Optional[str] = None,\n        openai_api_key: Optional[str] = \"\",\n        openai_api_type: Optional[str] = None,\n        openai_api_version: Optional[str] = None,\n        openai_organization: Optional[str] = None,\n        openai_proxy: Optional[str] = None,\n        request_timeout: Optional[float] = None,\n        show_progress_bar: bool = False,\n        skip_empty: bool = False,\n        tiktoken_enable: bool = True,\n        tiktoken_model_name: Optional[str] = None,\n    ) -> Union[OpenAIEmbeddings, Callable]:\n        # This is to avoid errors with Vector Stores (e.g Chroma)\n        if disallowed_special == [\"all\"]:\n            disallowed_special = \"all\"  # type: ignore\n\n        api_key = SecretStr(openai_api_key) if openai_api_key else None\n\n        return OpenAIEmbeddings(\n            tiktoken_enabled=tiktoken_enable,\n            default_headers=default_headers,\n            default_query=default_query,\n            allowed_special=set(allowed_special),\n            disallowed_special=\"all\",\n            chunk_size=chunk_size,\n            client=client,\n            deployment=deployment,\n            embedding_ctx_length=embedding_ctx_length,\n            max_retries=max_retries,\n            model=model,\n            model_kwargs=model_kwargs,\n            base_url=openai_api_base,\n            api_key=api_key,\n            openai_api_type=openai_api_type,\n            api_version=openai_api_version,\n            organization=openai_organization,\n            openai_proxy=openai_proxy,\n            timeout=request_timeout,\n            show_progress_bar=show_progress_bar,\n            skip_empty=skip_empty,\n            tiktoken_model_name=tiktoken_model_name,\n        )\n",
                "fileTypes": [],
                "file_path": "",
                "password": false,
                "name": "code",
                "advanced": false,
                "dynamic": true,
                "info": "",
                "title_case": true
              },
              "default_headers": {
                "type": "dict",
                "required": false,
                "placeholder": "",
                "list": false,
                "show": true,
                "multiline": false,
                "fileTypes": [],
                "file_path": "",
                "password": false,
                "name": "default_headers",
                "display_name": "Default Headers",
                "advanced": true,
                "dynamic": false,
                "info": "",
                "title_case": true
              },
              "default_query": {
                "type": "NestedDict",
                "required": false,
                "placeholder": "",
                "list": false,
                "show": true,
                "multiline": false,
                "value": {},
                "fileTypes": [],
                "file_path": "",
                "password": false,
                "name": "default_query",
                "display_name": "Default Query",
                "advanced": true,
                "dynamic": false,
                "info": "",
                "title_case": true
              },
              "deployment": {
                "type": "str",
                "required": true,
                "placeholder": "",
                "list": false,
                "show": true,
                "multiline": false,
                "value": "text-embedding-3-small",
                "fileTypes": [],
                "file_path": "",
                "password": false,
                "name": "deployment",
                "display_name": "Deployment",
                "advanced": true,
                "dynamic": false,
                "info": "",
                "title_case": true
              },
              "disallowed_special": {
                "type": "str",
                "required": true,
                "placeholder": "",
                "list": true,
                "show": true,
                "multiline": false,
                "value": [
                  "all"
                ],
                "fileTypes": [],
                "file_path": "",
                "password": false,
                "name": "disallowed_special",
                "display_name": "Disallowed Special",
                "advanced": true,
                "dynamic": false,
                "info": "",
                "title_case": true
              },
              "embedding_ctx_length": {
                "type": "int",
                "required": true,
                "placeholder": "",
                "list": false,
                "show": true,
                "multiline": false,
                "value": 8191,
                "fileTypes": [],
                "file_path": "",
                "password": false,
                "name": "embedding_ctx_length",
                "display_name": "Embedding Context Length",
                "advanced": true,
                "dynamic": false,
                "info": "",
                "title_case": true
              },
              "max_retries": {
                "type": "int",
                "required": true,
                "placeholder": "",
                "list": false,
                "show": true,
                "multiline": false,
                "value": 6,
                "fileTypes": [],
                "file_path": "",
                "password": false,
                "name": "max_retries",
                "display_name": "Max Retries",
                "advanced": true,
                "dynamic": false,
                "info": "",
                "title_case": true
              },
              "model": {
                "type": "str",
                "required": true,
                "placeholder": "",
                "list": true,
                "show": true,
                "multiline": false,
                "value": "text-embedding-3-large",
                "fileTypes": [],
                "file_path": "",
                "password": false,
                "options": [
                  "text-embedding-3-small",
                  "text-embedding-3-large",
                  "text-embedding-ada-002"
                ],
                "name": "model",
                "display_name": "Model",
                "advanced": false,
                "dynamic": false,
                "info": "",
                "title_case": true
              },
              "model_kwargs": {
                "type": "NestedDict",
                "required": true,
                "placeholder": "",
                "list": false,
                "show": true,
                "multiline": false,
                "value": {},
                "fileTypes": [],
                "file_path": "",
                "password": false,
                "name": "model_kwargs",
                "display_name": "Model Kwargs",
                "advanced": true,
                "dynamic": false,
                "info": "",
                "title_case": true
              },
              "openai_api_base": {
                "type": "str",
                "required": false,
                "placeholder": "",
                "list": false,
                "show": true,
                "multiline": false,
                "fileTypes": [],
                "file_path": "",
                "password": true,
                "name": "openai_api_base",
                "display_name": "OpenAI API Base",
                "advanced": true,
                "dynamic": false,
                "info": "",
                "title_case": true,
                "value": ""
              },
              "openai_api_key": {
                "type": "str",
                "required": false,
                "placeholder": "",
                "list": false,
                "show": true,
                "multiline": false,
                "value": "",
                "fileTypes": [],
                "file_path": "",
                "password": true,
                "name": "openai_api_key",
                "display_name": "OpenAI API Key",
                "advanced": false,
                "dynamic": false,
                "info": "",
                "title_case": true
              },
              "openai_api_type": {
                "type": "str",
                "required": false,
                "placeholder": "",
                "list": false,
                "show": true,
                "multiline": false,
                "fileTypes": [],
                "file_path": "",
                "password": true,
                "name": "openai_api_type",
                "display_name": "OpenAI API Type",
                "advanced": true,
                "dynamic": false,
                "info": "",
                "title_case": true,
                "value": ""
              },
              "openai_api_version": {
                "type": "str",
                "required": false,
                "placeholder": "",
                "list": false,
                "show": true,
                "multiline": false,
                "fileTypes": [],
                "file_path": "",
                "password": false,
                "name": "openai_api_version",
                "display_name": "OpenAI API Version",
                "advanced": true,
                "dynamic": false,
                "info": "",
                "title_case": true
              },
              "openai_organization": {
                "type": "str",
                "required": false,
                "placeholder": "",
                "list": false,
                "show": true,
                "multiline": false,
                "fileTypes": [],
                "file_path": "",
                "password": false,
                "name": "openai_organization",
                "display_name": "OpenAI Organization",
                "advanced": true,
                "dynamic": false,
                "info": "",
                "title_case": true
              },
              "openai_proxy": {
                "type": "str",
                "required": false,
                "placeholder": "",
                "list": false,
                "show": true,
                "multiline": false,
                "fileTypes": [],
                "file_path": "",
                "password": false,
                "name": "openai_proxy",
                "display_name": "OpenAI Proxy",
                "advanced": true,
                "dynamic": false,
                "info": "",
                "title_case": true
              },
              "request_timeout": {
                "type": "float",
                "required": false,
                "placeholder": "",
                "list": false,
                "show": true,
                "multiline": false,
                "fileTypes": [],
                "file_path": "",
                "password": false,
                "name": "request_timeout",
                "display_name": "Request Timeout",
                "advanced": true,
                "dynamic": false,
                "info": "",
                "rangeSpec": {
                  "min": -1,
                  "max": 1,
                  "step": 0.1
                },
                "title_case": true
              },
              "show_progress_bar": {
                "type": "bool",
                "required": true,
                "placeholder": "",
                "list": false,
                "show": true,
                "multiline": false,
                "value": false,
                "fileTypes": [],
                "file_path": "",
                "password": false,
                "name": "show_progress_bar",
                "display_name": "Show Progress Bar",
                "advanced": true,
                "dynamic": false,
                "info": "",
                "title_case": true
              },
              "skip_empty": {
                "type": "bool",
                "required": true,
                "placeholder": "",
                "list": false,
                "show": true,
                "multiline": false,
                "value": false,
                "fileTypes": [],
                "file_path": "",
                "password": false,
                "name": "skip_empty",
                "display_name": "Skip Empty",
                "advanced": true,
                "dynamic": false,
                "info": "",
                "title_case": true
              },
              "tiktoken_enable": {
                "type": "bool",
                "required": true,
                "placeholder": "",
                "list": false,
                "show": true,
                "multiline": false,
                "value": true,
                "fileTypes": [],
                "file_path": "",
                "password": false,
                "name": "tiktoken_enable",
                "advanced": false,
                "dynamic": false,
                "info": "",
                "title_case": true
              },
              "tiktoken_model_name": {
                "type": "str",
                "required": false,
                "placeholder": "",
                "list": false,
                "show": true,
                "multiline": false,
                "fileTypes": [],
                "file_path": "",
                "password": false,
                "name": "tiktoken_model_name",
                "display_name": "TikToken Model Name",
                "advanced": false,
                "dynamic": false,
                "info": "",
                "title_case": true
              },
              "_type": "CustomComponent"
            },
            "description": "OpenAI embedding models",
            "base_classes": [
              "Embeddings",
              "OpenAIEmbeddings",
              "Callable"
            ],
            "display_name": "OpenAIEmbeddings",
            "documentation": "",
            "custom_fields": {
              "default_headers": null,
              "default_query": null,
              "allowed_special": null,
              "disallowed_special": null,
              "chunk_size": null,
              "client": null,
              "deployment": null,
              "embedding_ctx_length": null,
              "max_retries": null,
              "model": null,
              "model_kwargs": null,
              "openai_api_base": null,
              "openai_api_key": null,
              "openai_api_type": null,
              "openai_api_version": null,
              "openai_organization": null,
              "openai_proxy": null,
              "request_timeout": null,
              "show_progress_bar": null,
              "skip_empty": null,
              "tiktoken_enable": null,
              "tiktoken_model_name": null
            },
            "output_types": [
              "OpenAIEmbeddings",
              "Callable"
            ],
            "field_formatters": {},
            "beta": true
          },
          "id": "OpenAIEmbeddings-UExkq"
        },
        "selected": false,
        "width": 384,
        "height": 635,
        "dragging": false,
        "positionAbsolute": {
          "x": -1387.0001236345906,
          "y": 2125.239874302798
        }
      },
      {
        "id": "Tool-48O0F",
        "type": "genericNode",
        "position": {
          "x": 996.5129832313512,
          "y": 1315.783571713832
        },
        "data": {
          "type": "Tool",
          "node": {
            "template": {
              "retriever": {
                "type": "BaseRetriever",
                "required": true,
                "placeholder": "",
                "list": false,
                "show": true,
                "multiline": false,
                "fileTypes": [],
                "file_path": "",
                "password": false,
                "name": "retriever",
                "display_name": "Retriever",
                "advanced": false,
                "dynamic": false,
                "info": "Retriever to interact with",
                "title_case": true
              },
              "code": {
                "type": "code",
                "required": true,
                "placeholder": "",
                "list": false,
                "show": true,
                "multiline": true,
                "value": "from langchain.tools.retriever import create_retriever_tool\n\nfrom axiestudio import CustomComponent\nfrom axiestudio.field_typing import BaseRetriever, Tool\n\n\nclass RetrieverToolComponent(CustomComponent):\n    display_name = \"RetrieverTool\"\n    description = \"Tool for interacting with retriever\"\n\n    def build_config(self):\n        return {\n            \"retriever\": {\n                \"display_name\": \"Retriever\",\n                \"info\": \"Retriever to interact with\",\n                \"type\": BaseRetriever,\n            },\n            \"name\": {\"display_name\": \"Name\", \"info\": \"Name of the tool\"},\n            \"description\": {\"display_name\": \"Description\", \"info\": \"Description of the tool\"},\n        }\n\n    def build(\n        self,\n        retriever: BaseRetriever,\n        name: str,\n        description: str,\n    ) -> Tool:\n        return create_retriever_tool(\n            retriever=retriever,\n            name=name,\n            description=description,\n        )\n",
                "fileTypes": [],
                "file_path": "",
                "password": false,
                "name": "code",
                "advanced": false,
                "dynamic": true,
                "info": "",
                "title_case": true
              },
              "description": {
                "type": "str",
                "required": true,
                "placeholder": "",
                "list": false,
                "show": true,
                "multiline": false,
                "fileTypes": [],
                "file_path": "",
                "password": false,
                "name": "description",
                "display_name": "Description",
                "advanced": false,
                "dynamic": false,
                "info": "Description of the tool",
                "title_case": true,
                "value": "Helps find restaurant from user query about restaurant preferences"
              },
              "name": {
                "type": "str",
                "required": true,
                "placeholder": "",
                "list": false,
                "show": true,
                "multiline": false,
                "fileTypes": [],
                "file_path": "",
                "password": false,
                "name": "name",
                "display_name": "Name",
                "advanced": false,
                "dynamic": false,
                "info": "Name of the tool",
                "title_case": true,
                "value": "restaurant_search_tool"
              },
              "_type": "CustomComponent"
            },
            "description": "Tool for interacting with retriever",
            "base_classes": [
              "BaseTool",
              "Tool"
            ],
            "display_name": "RetrieverTool",
            "documentation": "",
            "custom_fields": {
              "retriever": null,
              "name": null,
              "description": null
            },
            "output_types": [
              "Tool"
            ],
            "field_formatters": {},
            "beta": true
          },
          "id": "Tool-48O0F"
        },
        "selected": false,
        "width": 384,
        "height": 517,
        "positionAbsolute": {
          "x": 996.5129832313512,
          "y": 1315.783571713832
        },
        "dragging": false
      },
      {
        "id": "PythonFunctionTool-4bjH8",
        "type": "genericNode",
        "position": {
          "x": -973.0875895208826,
          "y": 287.60003222422677
        },
        "data": {
          "type": "PythonFunctionTool",
          "node": {
            "template": {
              "code": {
                "type": "code",
                "required": true,
                "placeholder": "",
                "list": false,
                "show": true,
                "multiline": true,
                "value": "import datetime\n\n\ndef get_current_time(*args) -> str:\n    \"\"\"\n    returns current date \n    \"\"\"\n    return datetime.date.today().strftime('%Y-%m-%d')\n",
                "fileTypes": [],
                "file_path": "",
                "password": false,
                "name": "code",
                "advanced": false,
                "dynamic": false,
                "info": "",
                "title_case": true
              },
              "description": {
                "type": "str",
                "required": true,
                "placeholder": "",
                "list": false,
                "show": true,
                "multiline": true,
                "value": "method to get current date",
                "fileTypes": [],
                "file_path": "",
                "password": false,
                "name": "description",
                "advanced": false,
                "dynamic": false,
                "info": "",
                "title_case": true
              },
              "name": {
                "type": "str",
                "required": true,
                "placeholder": "",
                "list": false,
                "show": true,
                "multiline": false,
                "value": "get_current_date",
                "fileTypes": [],
                "file_path": "",
                "password": false,
                "name": "name",
                "advanced": false,
                "dynamic": false,
                "info": "",
                "title_case": true
              },
              "return_direct": {
                "type": "bool",
                "required": true,
                "placeholder": "",
                "list": false,
                "show": true,
                "multiline": false,
                "value": false,
                "fileTypes": [],
                "file_path": "",
                "password": false,
                "name": "return_direct",
                "advanced": false,
                "dynamic": false,
                "info": "",
                "title_case": true
              },
              "_type": "PythonFunctionTool"
            },
            "description": "Python function to be executed.",
            "base_classes": [
              "BaseTool",
              "Tool"
            ],
            "display_name": "PythonFunctionTool",
            "documentation": "",
            "custom_fields": {},
            "output_types": [],
            "field_formatters": {},
            "beta": false
          },
          "id": "PythonFunctionTool-4bjH8"
        },
        "selected": false,
        "width": 384,
        "height": 537,
        "positionAbsolute": {
          "x": -973.0875895208826,
          "y": 287.60003222422677
        },
        "dragging": false
      },
      {
        "id": "CharacterTextSplitter-fVjsy",
        "type": "genericNode",
        "position": {
          "x": -742.8854227595605,
          "y": 3195.10075069594
        },
        "data": {
          "type": "CharacterTextSplitter",
          "node": {
            "template": {
              "documents": {
                "type": "Document",
                "required": true,
                "placeholder": "",
                "list": true,
                "show": true,
                "multiline": false,
                "value": "",
                "fileTypes": [],
                "file_path": "",
                "password": false,
                "name": "documents",
                "advanced": false,
                "dynamic": false,
                "info": "",
                "title_case": true
              },
              "chunk_overlap": {
                "type": "int",
                "required": true,
                "placeholder": "",
                "list": false,
                "show": true,
                "multiline": false,
                "value": "20",
                "fileTypes": [],
                "file_path": "",
                "password": false,
                "name": "chunk_overlap",
                "display_name": "Chunk Overlap",
                "advanced": false,
                "dynamic": false,
                "info": "",
                "title_case": true
              },
              "chunk_size": {
                "type": "int",
                "required": true,
                "placeholder": "",
                "list": false,
                "show": true,
                "multiline": false,
                "value": "3000",
                "fileTypes": [],
                "file_path": "",
                "password": false,
                "name": "chunk_size",
                "display_name": "Chunk Size",
                "advanced": false,
                "dynamic": false,
                "info": "",
                "title_case": true
              },
              "separator": {
                "type": "str",
                "required": true,
                "placeholder": "",
                "list": false,
                "show": true,
                "multiline": false,
                "value": "separator",
                "fileTypes": [],
                "file_path": "",
                "password": false,
                "name": "separator",
                "display_name": "Separator",
                "advanced": false,
                "dynamic": false,
                "info": "",
                "title_case": true
              },
              "_type": "CharacterTextSplitter"
            },
            "description": "Splitting text that looks at characters.",
            "base_classes": [
              "Document"
            ],
            "display_name": "CharacterTextSplitter",
            "documentation": "https://python.langchain.com/docs/modules/data_connection/document_transformers/text_splitters/character_text_splitter",
            "custom_fields": {},
            "output_types": [
              "Document"
            ],
            "field_formatters": {},
            "beta": false
          },
          "id": "CharacterTextSplitter-fVjsy"
        },
        "selected": false,
        "width": 384,
        "height": 509,
        "positionAbsolute": {
          "x": -742.8854227595605,
          "y": 3195.10075069594
        },
        "dragging": false
      },
      {
        "id": "Chroma-70USl",
        "type": "genericNode",
        "position": {
          "x": 417.9314251973908,
          "y": 2885.102762925332
        },
        "data": {
          "type": "Chroma",
          "node": {
            "template": {
              "documents": {
                "type": "Document",
                "required": false,
                "placeholder": "",
                "list": true,
                "show": true,
                "multiline": false,
                "fileTypes": [],
                "file_path": "",
                "password": false,
                "name": "documents",
                "display_name": "Documents",
                "advanced": false,
                "dynamic": false,
                "info": "",
                "title_case": true
              },
              "embedding": {
                "type": "Embeddings",
                "required": true,
                "placeholder": "",
                "list": false,
                "show": true,
                "multiline": false,
                "fileTypes": [],
                "file_path": "",
                "password": false,
                "name": "embedding",
                "display_name": "Embedding",
                "advanced": false,
                "dynamic": false,
                "info": "",
                "title_case": true
              },
              "chroma_server_cors_allow_origins": {
                "type": "str",
                "required": false,
                "placeholder": "",
                "list": false,
                "show": true,
                "multiline": false,
                "fileTypes": [],
                "file_path": "",
                "password": false,
                "name": "chroma_server_cors_allow_origins",
                "display_name": "Server CORS Allow Origins",
                "advanced": true,
                "dynamic": false,
                "info": "",
                "title_case": true
              },
              "chroma_server_grpc_port": {
                "type": "int",
                "required": false,
                "placeholder": "",
                "list": false,
                "show": true,
                "multiline": false,
                "fileTypes": [],
                "file_path": "",
                "password": false,
                "name": "chroma_server_grpc_port",
                "display_name": "Server gRPC Port",
                "advanced": true,
                "dynamic": false,
                "info": "",
                "title_case": true
              },
              "chroma_server_host": {
                "type": "str",
                "required": false,
                "placeholder": "",
                "list": false,
                "show": true,
                "multiline": false,
                "fileTypes": [],
                "file_path": "",
                "password": false,
                "name": "chroma_server_host",
                "display_name": "Server Host",
                "advanced": true,
                "dynamic": false,
                "info": "",
                "title_case": true
              },
              "chroma_server_port": {
                "type": "int",
                "required": false,
                "placeholder": "",
                "list": false,
                "show": true,
                "multiline": false,
                "fileTypes": [],
                "file_path": "",
                "password": false,
                "name": "chroma_server_port",
                "display_name": "Server Port",
                "advanced": true,
                "dynamic": false,
                "info": "",
                "title_case": true
              },
              "chroma_server_ssl_enabled": {
                "type": "bool",
                "required": true,
                "placeholder": "",
                "list": false,
                "show": true,
                "multiline": false,
                "value": false,
                "fileTypes": [],
                "file_path": "",
                "password": false,
                "name": "chroma_server_ssl_enabled",
                "display_name": "Server SSL Enabled",
                "advanced": true,
                "dynamic": false,
                "info": "",
                "title_case": true
              },
              "code": {
                "type": "code",
                "required": true,
                "placeholder": "",
                "list": false,
                "show": true,
                "multiline": true,
                "value": "from typing import List, Optional, Union\n\nimport chromadb  # type: ignore\nfrom langchain.embeddings.base import Embeddings\nfrom langchain.schema import BaseRetriever, Document\nfrom langchain_community.vectorstores import VectorStore\nfrom langchain_community.vectorstores.chroma import Chroma\nfrom axiestudio import CustomComponent\n\n\nclass ChromaComponent(CustomComponent):\n    \"\"\"\n    A custom component for implementing a Vector Store using Chroma.\n    \"\"\"\n\n    display_name: str = \"Chroma\"\n    description: str = \"Implementation of Vector Store using Chroma\"\n    documentation = \"https://python.langchain.com/docs/integrations/vectorstores/chroma\"\n    beta: bool = True\n\n    def build_config(self):\n        \"\"\"\n        Builds the configuration for the component.\n\n        Returns:\n        - dict: A dictionary containing the configuration options for the component.\n        \"\"\"\n        return {\n            \"collection_name\": {\"display_name\": \"Collection Name\", \"value\": \"axiestudio\"},\n            \"persist\": {\"display_name\": \"Persist\"},\n            \"persist_directory\": {\"display_name\": \"Persist Directory\"},\n            \"code\": {\"advanced\": True, \"display_name\": \"Code\"},\n            \"documents\": {\"display_name\": \"Documents\", \"is_list\": True},\n            \"embedding\": {\"display_name\": \"Embedding\"},\n            \"chroma_server_cors_allow_origins\": {\n                \"display_name\": \"Server CORS Allow Origins\",\n                \"advanced\": True,\n            },\n            \"chroma_server_host\": {\"display_name\": \"Server Host\", \"advanced\": True},\n            \"chroma_server_port\": {\"display_name\": \"Server Port\", \"advanced\": True},\n            \"chroma_server_grpc_port\": {\n                \"display_name\": \"Server gRPC Port\",\n                \"advanced\": True,\n            },\n            \"chroma_server_ssl_enabled\": {\n                \"display_name\": \"Server SSL Enabled\",\n                \"advanced\": True,\n            },\n        }\n\n    def build(\n        self,\n        collection_name: str,\n        persist: bool,\n        embedding: Embeddings,\n        chroma_server_ssl_enabled: bool,\n        persist_directory: Optional[str] = None,\n        documents: Optional[List[Document]] = None,\n        chroma_server_cors_allow_origins: Optional[str] = None,\n        chroma_server_host: Optional[str] = None,\n        chroma_server_port: Optional[int] = None,\n        chroma_server_grpc_port: Optional[int] = None,\n    ) -> Union[VectorStore, BaseRetriever]:\n        \"\"\"\n        Builds the Vector Store or BaseRetriever object.\n\n        Args:\n        - collection_name (str): The name of the collection.\n        - persist_directory (Optional[str]): The directory to persist the Vector Store to.\n        - chroma_server_ssl_enabled (bool): Whether to enable SSL for the Chroma server.\n        - persist (bool): Whether to persist the Vector Store or not.\n        - embedding (Optional[Embeddings]): The embeddings to use for the Vector Store.\n        - documents (Optional[Document]): The documents to use for the Vector Store.\n        - chroma_server_cors_allow_origins (Optional[str]): The CORS allow origins for the Chroma server.\n        - chroma_server_host (Optional[str]): The host for the Chroma server.\n        - chroma_server_port (Optional[int]): The port for the Chroma server.\n        - chroma_server_grpc_port (Optional[int]): The gRPC port for the Chroma server.\n\n        Returns:\n        - Union[VectorStore, BaseRetriever]: The Vector Store or BaseRetriever object.\n        \"\"\"\n\n        # Chroma settings\n        chroma_settings = None\n\n        if chroma_server_host is not None:\n            chroma_settings = chromadb.config.Settings(\n                chroma_server_cors_allow_origins=chroma_server_cors_allow_origins or None,\n                chroma_server_host=chroma_server_host,\n                chroma_server_port=chroma_server_port or None,\n                chroma_server_grpc_port=chroma_server_grpc_port or None,\n                chroma_server_ssl_enabled=chroma_server_ssl_enabled,\n            )\n\n        # If documents, then we need to create a Chroma instance using .from_documents\n        if documents is not None and embedding is not None:\n            if len(documents) == 0:\n                raise ValueError(\"If documents are provided, there must be at least one document.\")\n            return Chroma.from_documents(\n                documents=documents,  # type: ignore\n                persist_directory=persist_directory if persist else None,\n                collection_name=collection_name,\n                embedding=embedding,\n                client_settings=chroma_settings,\n            )\n\n        return Chroma(persist_directory=persist_directory, client_settings=chroma_settings)\n",
                "fileTypes": [],
                "file_path": "",
                "password": false,
                "name": "code",
                "advanced": true,
                "dynamic": true,
                "info": "",
                "title_case": true
              },
              "collection_name": {
                "type": "str",
                "required": true,
                "placeholder": "",
                "list": false,
                "show": true,
                "multiline": false,
                "value": "past_mistakes",
                "fileTypes": [],
                "file_path": "",
                "password": false,
                "name": "collection_name",
                "display_name": "Collection Name",
                "advanced": false,
                "dynamic": false,
                "info": "",
                "title_case": true
              },
              "persist": {
                "type": "bool",
                "required": true,
                "placeholder": "",
                "list": false,
                "show": true,
                "multiline": false,
                "value": false,
                "fileTypes": [],
                "file_path": "",
                "password": false,
                "name": "persist",
                "display_name": "Persist",
                "advanced": false,
                "dynamic": false,
                "info": "",
                "title_case": true
              },
              "persist_directory": {
                "type": "str",
                "required": false,
                "placeholder": "",
                "list": false,
                "show": true,
                "multiline": false,
                "fileTypes": [],
                "file_path": "",
                "password": false,
                "name": "persist_directory",
                "display_name": "Persist Directory",
                "advanced": false,
                "dynamic": false,
                "info": "",
                "title_case": true
              },
              "_type": "CustomComponent"
            },
            "description": "Implementation of Vector Store using Chroma",
            "base_classes": [
              "VectorStore",
              "BaseRetriever"
            ],
            "display_name": "Chroma",
            "documentation": "https://python.langchain.com/docs/integrations/vectorstores/chroma",
            "custom_fields": {
              "collection_name": null,
              "persist": null,
              "embedding": null,
              "chroma_server_ssl_enabled": null,
              "persist_directory": null,
              "documents": null,
              "chroma_server_cors_allow_origins": null,
              "chroma_server_host": null,
              "chroma_server_port": null,
              "chroma_server_grpc_port": null
            },
            "output_types": [
              "VectorStore",
              "BaseRetriever"
            ],
            "field_formatters": {},
            "beta": true
          },
          "id": "Chroma-70USl"
        },
        "selected": false,
        "width": 384,
        "height": 555,
        "positionAbsolute": {
          "x": 417.9314251973908,
          "y": 2885.102762925332
        },
        "dragging": false
      },
      {
        "id": "TextLoader-ciWpH",
        "type": "genericNode",
        "position": {
          "x": -68.95346576186017,
          "y": 3749.749505719438
        },
        "data": {
          "type": "TextLoader",
          "node": {
            "template": {
              "file_path": {
                "type": "file",
                "required": true,
                "placeholder": "",
                "list": false,
                "show": true,
                "multiline": false,
                "value": "",
                "fileTypes": [
                  ".txt"
                ],
                "file_path": "/Users/amazaspshaumyan/Library/Caches/axiestudio/bce2d1af-6626-47c1-b1c8-8b5e56d3dc66/71a127e32e09fb43a35e48c29958c55ad2df00b9a1a67c96d0a3f7d1f2db198e.txt",
                "password": false,
                "name": "file_path",
                "advanced": false,
                "dynamic": false,
                "info": "",
                "title_case": true
              },
              "metadata": {
                "type": "dict",
                "required": false,
                "placeholder": "",
                "list": false,
                "show": true,
                "multiline": false,
                "value": [
                  {
                    "mistakes": "None"
                  }
                ],
                "fileTypes": [],
                "file_path": "",
                "password": false,
                "name": "metadata",
                "display_name": "Metadata",
                "advanced": false,
                "dynamic": false,
                "info": "",
                "title_case": true
              },
              "_type": "TextLoader"
            },
            "description": "Load text file.",
            "base_classes": [
              "Document"
            ],
            "display_name": "TextLoader",
            "documentation": "https://python.langchain.com/docs/modules/data_connection/document_loaders/",
            "custom_fields": {},
            "output_types": [
              "Document"
            ],
            "field_formatters": {},
            "beta": false
          },
          "id": "TextLoader-ciWpH"
        },
        "selected": false,
        "width": 384,
        "height": 367,
        "positionAbsolute": {
          "x": -68.95346576186017,
          "y": 3749.749505719438
        },
        "dragging": false
      },
      {
        "id": "VectorStoreRetriever-nVACO",
        "type": "genericNode",
        "position": {
          "x": 974.3517286726301,
          "y": 2476.6427314052316
        },
        "data": {
          "type": "VectorStoreRetriever",
          "node": {
            "template": {
              "vectorstore": {
                "type": "VectorStore",
                "required": true,
                "placeholder": "",
                "list": false,
                "show": true,
                "multiline": false,
                "fileTypes": [],
                "file_path": "",
                "password": false,
                "name": "vectorstore",
                "display_name": "Vector Store",
                "advanced": false,
                "dynamic": false,
                "info": "",
                "title_case": true
              },
              "code": {
                "type": "code",
                "required": true,
                "placeholder": "",
                "list": false,
                "show": true,
                "multiline": true,
                "value": "from langchain_core.vectorstores import VectorStoreRetriever\n\nfrom axiestudio import CustomComponent\nfrom axiestudio.field_typing import VectorStore\n\n\nclass VectoStoreRetrieverComponent(CustomComponent):\n    display_name = \"VectorStore Retriever\"\n    description = \"A vector store retriever\"\n\n    def build_config(self):\n        return {\n            \"vectorstore\": {\"display_name\": \"Vector Store\", \"type\": VectorStore},\n        }\n\n    def build(self, vectorstore: VectorStore) -> VectorStoreRetriever:\n        return vectorstore.as_retriever()\n",
                "fileTypes": [],
                "file_path": "",
                "password": false,
                "name": "code",
                "advanced": false,
                "dynamic": true,
                "info": "",
                "title_case": true
              },
              "_type": "CustomComponent"
            },
            "description": "A vector store retriever",
            "base_classes": [
              "VectorStoreRetriever",
              "BaseRetriever"
            ],
            "display_name": "VectorStore Retriever",
            "documentation": "",
            "custom_fields": {
              "vectorstore": null
            },
            "output_types": [
              "VectorStoreRetriever"
            ],
            "field_formatters": {},
            "beta": true
          },
          "id": "VectorStoreRetriever-nVACO"
        },
        "selected": false,
        "width": 384,
        "height": 329,
        "positionAbsolute": {
          "x": 974.3517286726301,
          "y": 2476.6427314052316
        },
        "dragging": false
      },
      {
        "id": "Tool-NnjKb",
        "type": "genericNode",
        "position": {
          "x": 1487.1543336840978,
          "y": 1870.3184068576759
        },
        "data": {
          "type": "Tool",
          "node": {
            "template": {
              "retriever": {
                "type": "BaseRetriever",
                "required": true,
                "placeholder": "",
                "list": false,
                "show": true,
                "multiline": false,
                "fileTypes": [],
                "file_path": "",
                "password": false,
                "name": "retriever",
                "display_name": "Retriever",
                "advanced": false,
                "dynamic": false,
                "info": "Retriever to interact with",
                "title_case": true
              },
              "code": {
                "type": "code",
                "required": true,
                "placeholder": "",
                "list": false,
                "show": true,
                "multiline": true,
                "value": "from langchain.tools.retriever import create_retriever_tool\n\nfrom axiestudio import CustomComponent\nfrom axiestudio.field_typing import BaseRetriever, Tool\n\n\nclass RetrieverToolComponent(CustomComponent):\n    display_name = \"RetrieverTool\"\n    description = \"Tool for interacting with retriever\"\n\n    def build_config(self):\n        return {\n            \"retriever\": {\n                \"display_name\": \"Retriever\",\n                \"info\": \"Retriever to interact with\",\n                \"type\": BaseRetriever,\n            },\n            \"name\": {\"display_name\": \"Name\", \"info\": \"Name of the tool\"},\n            \"description\": {\"display_name\": \"Description\", \"info\": \"Description of the tool\"},\n        }\n\n    def build(\n        self,\n        retriever: BaseRetriever,\n        name: str,\n        description: str,\n    ) -> Tool:\n        return create_retriever_tool(\n            retriever=retriever,\n            name=name,\n            description=description,\n        )\n",
                "fileTypes": [],
                "file_path": "",
                "password": false,
                "name": "code",
                "advanced": false,
                "dynamic": true,
                "info": "",
                "title_case": true
              },
              "description": {
                "type": "str",
                "required": true,
                "placeholder": "",
                "list": false,
                "show": true,
                "multiline": false,
                "fileTypes": [],
                "file_path": "",
                "password": false,
                "name": "description",
                "display_name": "Description",
                "advanced": false,
                "dynamic": false,
                "info": "Description of the tool",
                "title_case": true,
                "value": "This tool allows to query past mistakes, it is useful at every stage of the conversation"
              },
              "name": {
                "type": "str",
                "required": true,
                "placeholder": "",
                "list": false,
                "show": true,
                "multiline": false,
                "fileTypes": [],
                "file_path": "",
                "password": false,
                "name": "name",
                "display_name": "Name",
                "advanced": false,
                "dynamic": false,
                "info": "Name of the tool",
                "title_case": true,
                "value": "previous_mistakes_tool"
              },
              "_type": "CustomComponent"
            },
            "description": "Tool for interacting with retriever",
            "base_classes": [
              "BaseTool",
              "Tool"
            ],
            "display_name": "RetrieverTool",
            "documentation": "",
            "custom_fields": {
              "retriever": null,
              "name": null,
              "description": null
            },
            "output_types": [
              "Tool"
            ],
            "field_formatters": {},
            "beta": true
          },
          "id": "Tool-NnjKb"
        },
        "selected": false,
        "width": 384,
        "height": 517,
        "positionAbsolute": {
          "x": 1487.1543336840978,
          "y": 1870.3184068576759
        },
        "dragging": false
      },
      {
        "id": "VectorStoreRetriever-G7oKw",
        "type": "genericNode",
        "position": {
          "x": 406.26173835634904,
          "y": 1775.9928322709397
        },
        "data": {
          "type": "VectorStoreRetriever",
          "node": {
            "template": {
              "vectorstore": {
                "type": "VectorStore",
                "required": true,
                "placeholder": "",
                "list": false,
                "show": true,
                "multiline": false,
                "fileTypes": [],
                "file_path": "",
                "password": false,
                "name": "vectorstore",
                "display_name": "Vector Store",
                "advanced": false,
                "dynamic": false,
                "info": "",
                "title_case": true
              },
              "code": {
                "type": "code",
                "required": true,
                "placeholder": "",
                "list": false,
                "show": true,
                "multiline": true,
                "value": "from langchain_core.vectorstores import VectorStoreRetriever\n\nfrom axiestudio import CustomComponent\nfrom axiestudio.field_typing import VectorStore\n\n\nclass VectoStoreRetrieverComponent(CustomComponent):\n    display_name = \"VectorStore Retriever\"\n    description = \"A vector store retriever\"\n\n    def build_config(self):\n        return {\n            \"vectorstore\": {\"display_name\": \"Vector Store\", \"type\": VectorStore},\n        }\n\n    def build(self, vectorstore: VectorStore) -> VectorStoreRetriever:\n        return vectorstore.as_retriever(search_kwargs={\"k\": 5})\n",
                "fileTypes": [],
                "file_path": "",
                "password": false,
                "name": "code",
                "advanced": false,
                "dynamic": true,
                "info": "",
                "title_case": true
              },
              "_type": "CustomComponent"
            },
            "description": "A vector store retriever",
            "base_classes": [
              "BaseRetriever",
              "VectorStoreRetriever"
            ],
            "display_name": "VectorStore Retriever",
            "documentation": "",
            "custom_fields": {
              "vectorstore": null
            },
            "output_types": [
              "VectorStoreRetriever"
            ],
            "field_formatters": {},
            "beta": true
          },
          "id": "VectorStoreRetriever-G7oKw",
          "description": "A vector store retriever",
          "display_name": "VectorStore Retriever"
        },
        "selected": false,
        "width": 384,
        "height": 329,
        "positionAbsolute": {
          "x": 406.26173835634904,
          "y": 1775.9928322709397
        },
        "dragging": false
      },
      {
        "id": "Chroma-vFe6o",
        "type": "genericNode",
        "position": {
          "x": -361.1374451280311,
          "y": 1999.961895120452
        },
        "data": {
          "type": "Chroma",
          "node": {
            "template": {
              "documents": {
                "type": "Document",
                "required": false,
                "placeholder": "",
                "list": true,
                "show": true,
                "multiline": false,
                "fileTypes": [],
                "file_path": "",
                "password": false,
                "name": "documents",
                "display_name": "Documents",
                "advanced": false,
                "dynamic": false,
                "info": "",
                "title_case": true
              },
              "embedding": {
                "type": "Embeddings",
                "required": true,
                "placeholder": "",
                "list": false,
                "show": true,
                "multiline": false,
                "fileTypes": [],
                "file_path": "",
                "password": false,
                "name": "embedding",
                "display_name": "Embedding",
                "advanced": false,
                "dynamic": false,
                "info": "",
                "title_case": true
              },
              "chroma_server_cors_allow_origins": {
                "type": "str",
                "required": false,
                "placeholder": "",
                "list": false,
                "show": true,
                "multiline": false,
                "fileTypes": [],
                "file_path": "",
                "password": false,
                "name": "chroma_server_cors_allow_origins",
                "display_name": "Server CORS Allow Origins",
                "advanced": true,
                "dynamic": false,
                "info": "",
                "title_case": true
              },
              "chroma_server_grpc_port": {
                "type": "int",
                "required": false,
                "placeholder": "",
                "list": false,
                "show": true,
                "multiline": false,
                "fileTypes": [],
                "file_path": "",
                "password": false,
                "name": "chroma_server_grpc_port",
                "display_name": "Server gRPC Port",
                "advanced": true,
                "dynamic": false,
                "info": "",
                "title_case": true
              },
              "chroma_server_host": {
                "type": "str",
                "required": false,
                "placeholder": "",
                "list": false,
                "show": true,
                "multiline": false,
                "fileTypes": [],
                "file_path": "",
                "password": false,
                "name": "chroma_server_host",
                "display_name": "Server Host",
                "advanced": true,
                "dynamic": false,
                "info": "",
                "title_case": true
              },
              "chroma_server_port": {
                "type": "int",
                "required": false,
                "placeholder": "",
                "list": false,
                "show": true,
                "multiline": false,
                "fileTypes": [],
                "file_path": "",
                "password": false,
                "name": "chroma_server_port",
                "display_name": "Server Port",
                "advanced": true,
                "dynamic": false,
                "info": "",
                "title_case": true
              },
              "chroma_server_ssl_enabled": {
                "type": "bool",
                "required": true,
                "placeholder": "",
                "list": false,
                "show": true,
                "multiline": false,
                "value": false,
                "fileTypes": [],
                "file_path": "",
                "password": false,
                "name": "chroma_server_ssl_enabled",
                "display_name": "Server SSL Enabled",
                "advanced": true,
                "dynamic": false,
                "info": "",
                "title_case": true
              },
              "code": {
                "type": "code",
                "required": true,
                "placeholder": "",
                "list": false,
                "show": true,
                "multiline": true,
                "value": "from typing import List, Optional, Union\n\nimport chromadb  # type: ignore\nfrom langchain.embeddings.base import Embeddings\nfrom langchain.schema import BaseRetriever, Document\nfrom langchain_community.vectorstores import VectorStore\nfrom langchain_community.vectorstores.chroma import Chroma\nfrom axiestudio import CustomComponent\n\n\nclass ChromaComponent(CustomComponent):\n    \"\"\"\n    A custom component for implementing a Vector Store using Chroma.\n    \"\"\"\n\n    display_name: str = \"Chroma\"\n    description: str = \"Implementation of Vector Store using Chroma\"\n    documentation = \"https://python.langchain.com/docs/integrations/vectorstores/chroma\"\n    beta: bool = True\n\n    def build_config(self):\n        \"\"\"\n        Builds the configuration for the component.\n\n        Returns:\n        - dict: A dictionary containing the configuration options for the component.\n        \"\"\"\n        return {\n            \"collection_name\": {\"display_name\": \"Collection Name\", \"value\": \"axiestudio\"},\n            \"persist\": {\"display_name\": \"Persist\"},\n            \"persist_directory\": {\"display_name\": \"Persist Directory\"},\n            \"code\": {\"advanced\": True, \"display_name\": \"Code\"},\n            \"documents\": {\"display_name\": \"Documents\", \"is_list\": True},\n            \"embedding\": {\"display_name\": \"Embedding\"},\n            \"chroma_server_cors_allow_origins\": {\n                \"display_name\": \"Server CORS Allow Origins\",\n                \"advanced\": True,\n            },\n            \"chroma_server_host\": {\"display_name\": \"Server Host\", \"advanced\": True},\n            \"chroma_server_port\": {\"display_name\": \"Server Port\", \"advanced\": True},\n            \"chroma_server_grpc_port\": {\n                \"display_name\": \"Server gRPC Port\",\n                \"advanced\": True,\n            },\n            \"chroma_server_ssl_enabled\": {\n                \"display_name\": \"Server SSL Enabled\",\n                \"advanced\": True,\n            },\n        }\n\n    def build(\n        self,\n        collection_name: str,\n        persist: bool,\n        embedding: Embeddings,\n        chroma_server_ssl_enabled: bool,\n        persist_directory: Optional[str] = None,\n        documents: Optional[List[Document]] = None,\n        chroma_server_cors_allow_origins: Optional[str] = None,\n        chroma_server_host: Optional[str] = None,\n        chroma_server_port: Optional[int] = None,\n        chroma_server_grpc_port: Optional[int] = None,\n    ) -> Union[VectorStore, BaseRetriever]:\n        \"\"\"\n        Builds the Vector Store or BaseRetriever object.\n\n        Args:\n        - collection_name (str): The name of the collection.\n        - persist_directory (Optional[str]): The directory to persist the Vector Store to.\n        - chroma_server_ssl_enabled (bool): Whether to enable SSL for the Chroma server.\n        - persist (bool): Whether to persist the Vector Store or not.\n        - embedding (Optional[Embeddings]): The embeddings to use for the Vector Store.\n        - documents (Optional[Document]): The documents to use for the Vector Store.\n        - chroma_server_cors_allow_origins (Optional[str]): The CORS allow origins for the Chroma server.\n        - chroma_server_host (Optional[str]): The host for the Chroma server.\n        - chroma_server_port (Optional[int]): The port for the Chroma server.\n        - chroma_server_grpc_port (Optional[int]): The gRPC port for the Chroma server.\n\n        Returns:\n        - Union[VectorStore, BaseRetriever]: The Vector Store or BaseRetriever object.\n        \"\"\"\n\n        # Chroma settings\n        chroma_settings = None\n\n        if chroma_server_host is not None:\n            chroma_settings = chromadb.config.Settings(\n                chroma_server_cors_allow_origins=chroma_server_cors_allow_origins or None,\n                chroma_server_host=chroma_server_host,\n                chroma_server_port=chroma_server_port or None,\n                chroma_server_grpc_port=chroma_server_grpc_port or None,\n                chroma_server_ssl_enabled=chroma_server_ssl_enabled,\n            )\n\n        # If documents, then we need to create a Chroma instance using .from_documents\n        if documents is not None and embedding is not None:\n            if len(documents) == 0:\n                raise ValueError(\"If documents are provided, there must be at least one document.\")\n            return Chroma.from_documents(\n                documents=documents,  # type: ignore\n                persist_directory=persist_directory if persist else None,\n                collection_name=collection_name,\n                embedding=embedding,\n                client_settings=chroma_settings,\n            )\n\n        return Chroma(persist_directory=persist_directory, client_settings=chroma_settings)\n",
                "fileTypes": [],
                "file_path": "",
                "password": false,
                "name": "code",
                "advanced": true,
                "dynamic": true,
                "info": "",
                "title_case": true
              },
              "collection_name": {
                "type": "str",
                "required": true,
                "placeholder": "",
                "list": false,
                "show": true,
                "multiline": false,
                "value": "axiestudio",
                "fileTypes": [],
                "file_path": "",
                "password": false,
                "name": "collection_name",
                "display_name": "Collection Name",
                "advanced": false,
                "dynamic": false,
                "info": "",
                "title_case": true
              },
              "persist": {
                "type": "bool",
                "required": true,
                "placeholder": "",
                "list": false,
                "show": true,
                "multiline": false,
                "value": false,
                "fileTypes": [],
                "file_path": "",
                "password": false,
                "name": "persist",
                "display_name": "Persist",
                "advanced": false,
                "dynamic": false,
                "info": "",
                "title_case": true
              },
              "persist_directory": {
                "type": "str",
                "required": false,
                "placeholder": "",
                "list": false,
                "show": true,
                "multiline": false,
                "fileTypes": [],
                "file_path": "",
                "password": false,
                "name": "persist_directory",
                "display_name": "Persist Directory",
                "advanced": false,
                "dynamic": false,
                "info": "",
                "title_case": true
              },
              "_type": "CustomComponent"
            },
            "description": "Implementation of Vector Store using Chroma",
            "base_classes": [
              "VectorStore",
              "BaseRetriever"
            ],
            "display_name": "Chroma",
            "documentation": "https://python.langchain.com/docs/integrations/vectorstores/chroma",
            "custom_fields": {
              "collection_name": null,
              "persist": null,
              "embedding": null,
              "chroma_server_ssl_enabled": null,
              "persist_directory": null,
              "documents": null,
              "chroma_server_cors_allow_origins": null,
              "chroma_server_host": null,
              "chroma_server_port": null,
              "chroma_server_grpc_port": null
            },
            "output_types": [
              "VectorStore",
              "BaseRetriever"
            ],
            "field_formatters": {},
            "beta": true
          },
          "id": "Chroma-vFe6o"
        },
        "selected": false,
        "width": 384,
        "height": 555,
        "positionAbsolute": {
          "x": -361.1374451280311,
          "y": 1999.961895120452
        },
        "dragging": false
      },
      {
        "id": "Document-DATKy",
        "type": "genericNode",
        "position": {
          "x": -1394.6587875764462,
          "y": 3224.0016188277673
        },
        "data": {
          "type": "Document",
          "node": {
            "template": {
              "file_path": {
                "type": "file",
                "required": true,
                "placeholder": "",
                "list": false,
                "show": true,
                "multiline": false,
                "fileTypes": [
                  "json",
                  "txt",
                  "csv",
                  "jsonl",
                  "html",
                  "htm",
                  "conllu",
                  "enex",
                  "msg",
                  "pdf",
                  "srt",
                  "eml",
                  "md",
                  "pptx",
                  "docx"
                ],
                "file_path": "/Users/amazaspshaumyan/Library/Caches/axiestudio/bce2d1af-6626-47c1-b1c8-8b5e56d3dc66/6a53e672a924ed42b60c8741e2b90532793a2929aaee1011dec54408da7ec55b.txt",
                "password": false,
                "name": "file_path",
                "display_name": "File Path",
                "advanced": false,
                "dynamic": false,
                "info": "",
                "title_case": true,
                "value": ""
              },
              "code": {
                "type": "code",
                "required": true,
                "placeholder": "",
                "list": false,
                "show": true,
                "multiline": true,
                "value": "from langchain_core.documents import Document\nfrom axiestudio import CustomComponent\nfrom axiestudio.utils.constants import LOADERS_INFO\n\n\nclass FileLoaderComponent(CustomComponent):\n    display_name: str = \"File Loader\"\n    description: str = \"Generic File Loader\"\n    beta = True\n\n    def build_config(self):\n        loader_options = [\"Automatic\"] + [loader_info[\"name\"] for loader_info in LOADERS_INFO]\n\n        file_types = []\n        suffixes = []\n\n        for loader_info in LOADERS_INFO:\n            if \"allowedTypes\" in loader_info:\n                file_types.extend(loader_info[\"allowedTypes\"])\n                suffixes.extend([f\".{ext}\" for ext in loader_info[\"allowedTypes\"]])\n\n        return {\n            \"file_path\": {\n                \"display_name\": \"File Path\",\n                \"required\": True,\n                \"field_type\": \"file\",\n                \"file_types\": [\n                    \"json\",\n                    \"txt\",\n                    \"csv\",\n                    \"jsonl\",\n                    \"html\",\n                    \"htm\",\n                    \"conllu\",\n                    \"enex\",\n                    \"msg\",\n                    \"pdf\",\n                    \"srt\",\n                    \"eml\",\n                    \"md\",\n                    \"pptx\",\n                    \"docx\",\n                ],\n                \"suffixes\": [\n                    \".json\",\n                    \".txt\",\n                    \".csv\",\n                    \".jsonl\",\n                    \".html\",\n                    \".htm\",\n                    \".conllu\",\n                    \".enex\",\n                    \".msg\",\n                    \".pdf\",\n                    \".srt\",\n                    \".eml\",\n                    \".md\",\n                    \".pptx\",\n                    \".docx\",\n                ],\n                # \"file_types\" : file_types,\n                # \"suffixes\": suffixes,\n            },\n            \"loader\": {\n                \"display_name\": \"Loader\",\n                \"is_list\": True,\n                \"required\": True,\n                \"options\": loader_options,\n                \"value\": \"Automatic\",\n            },\n            \"code\": {\"show\": False},\n        }\n\n    def build(self, file_path: str, loader: str) -> Document:\n        file_type = file_path.split(\".\")[-1]\n\n        # Mapeie o nome do loader selecionado para suas informações\n        selected_loader_info = None\n        for loader_info in LOADERS_INFO:\n            if loader_info[\"name\"] == loader:\n                selected_loader_info = loader_info\n                break\n\n        if selected_loader_info is None and loader != \"Automatic\":\n            raise ValueError(f\"Loader {loader} not found in the loader info list\")\n\n        if loader == \"Automatic\":\n            # Determine o loader automaticamente com base na extensão do arquivo\n            default_loader_info = None\n            for info in LOADERS_INFO:\n                if \"defaultFor\" in info and file_type in info[\"defaultFor\"]:\n                    default_loader_info = info\n                    break\n\n            if default_loader_info is None:\n                raise ValueError(f\"No default loader found for file type: {file_type}\")\n\n            selected_loader_info = default_loader_info\n        if isinstance(selected_loader_info, dict):\n            loader_import: str = selected_loader_info[\"import\"]\n        else:\n            raise ValueError(f\"Loader info for {loader} is not a dict\\nLoader info:\\n{selected_loader_info}\")\n        module_name, class_name = loader_import.rsplit(\".\", 1)\n\n        try:\n            # Importe o loader dinamicamente\n            loader_module = __import__(module_name, fromlist=[class_name])\n            loader_instance = getattr(loader_module, class_name)\n        except ImportError as e:\n            raise ValueError(f\"Loader {loader} could not be imported\\nLoader info:\\n{selected_loader_info}\") from e\n\n        result = loader_instance(file_path=file_path)\n        return result.load()\n",
                "fileTypes": [],
                "file_path": "",
                "password": false,
                "name": "code",
                "advanced": false,
                "dynamic": true,
                "info": "",
                "title_case": true
              },
              "loader": {
                "type": "str",
                "required": true,
                "placeholder": "",
                "list": true,
                "show": true,
                "multiline": false,
                "value": "Text (.txt)",
                "fileTypes": [],
                "file_path": "",
                "password": false,
                "options": [
                  "Automatic",
                  "Airbyte JSON (.jsonl)",
                  "JSON (.json)",
                  "BeautifulSoup4 HTML (.html, .htm)",
                  "CSV (.csv)",
                  "CoNLL-U (.conllu)",
                  "EverNote (.enex)",
                  "Facebook Chat (.json)",
                  "Outlook Message (.msg)",
                  "PyPDF (.pdf)",
                  "Subtitle (.str)",
                  "Text (.txt)",
                  "Unstructured Email (.eml)",
                  "Unstructured HTML (.html, .htm)",
                  "Unstructured Markdown (.md)",
                  "Unstructured PowerPoint (.pptx)",
                  "Unstructured Word (.docx)"
                ],
                "name": "loader",
                "display_name": "Loader",
                "advanced": false,
                "dynamic": false,
                "info": "",
                "title_case": true
              },
              "_type": "CustomComponent"
            },
            "description": "Generic File Loader",
            "base_classes": [
              "Document"
            ],
            "display_name": "File Loader",
            "documentation": "",
            "custom_fields": {
              "file_path": null,
              "loader": null
            },
            "output_types": [
              "Document"
            ],
            "field_formatters": {},
            "beta": true
          },
          "id": "Document-DATKy"
        },
        "selected": false,
        "width": 384,
        "height": 457,
        "positionAbsolute": {
          "x": -1394.6587875764462,
          "y": 3224.0016188277673
        },
        "dragging": false
      },
      {
        "id": "PythonFunctionTool-wdYwS",
        "type": "genericNode",
        "position": {
          "x": -227.8403626844044,
          "y": 125.63045346795093
        },
        "data": {
          "type": "PythonFunctionTool",
          "node": {
            "template": {
              "code": {
                "type": "code",
                "required": true,
                "placeholder": "",
                "list": false,
                "show": true,
                "multiline": true,
                "value": "import json\n\n\n\n\n\ndef get_restaurant_names(*args) -> str:\n    \"\"\"This is a default python function that returns the input text\"\"\"\n    return \"\"\"[\n 'Wayfare Tavern',\n 'Gold Mirror Italian Restaurant',\n 'Krua Thai - San Francisco',\n 'Taksim',\n 'The Barnes Restaurant and Bar',\n 'The Rotunda at Neiman Marcus - San Francisco',\n 'Tacolicious - Mission District',\n 'Ti Piacera',\n \"Perry's Union Street\",\n 'Barbary Coast Lounge',\n 'The Barrel Room - San Francisco',\n 'Cafe Bastille',\n 'Blind Butcher',\n 'Hard Knox Cafe on 3rd Street',\n 'Fiorella Sunset',\n 'Ristobar',\n 'BAIA',\n 'BISTRO 888',\n 'Osha Thai Embarcadero',\n 'E&O Kitchen and Bar',\n 'Seven Square Taproom - The Clancy Autograph Collection',\n 'Tacos La Neta - San Francisco',\n 'Gentilly',\n 'Auto-NA-CW-PI-BUDGET- Test',\n 'Opaque - Dining In The Dark - Permanently Closed',\n 'Trinity',\n 'Barbacco',\n 'La Mar Bar',\n 'Sushi Hon',\n 'Outer Orbit',\n 'Cracked & Battered Potrero Hill',\n 'Bocconcino',\n 'Mamanoko',\n 'La Bande',\n 'La Connessa',\n 'Nisei',\n 'The Progress',\n \"Tallio's Coffee & Tea\",\n 'Causwells',\n 'Spiazzo Ristorante',\n 'Waterbar',\n 'The Waterfront Restaurant and Cafe',\n 'B44',\n 'Jaranita',\n 'Resolute',\n 'Piroo',\n 'Little Baobab',\n 'Biriani House',\n 'Guest Center - iPad Manual 1',\n 'Spruce',\n 'Hayes Street Grill',\n 'Caffe Fiore - San Francisco',\n 'Hinata Sushi',\n \"Luisa's Restaurant Wine bar since 1959\",\n 'Intimo Restaurante',\n 'Players Sports Grill & Arcade',\n 'bota tapas and paella bar',\n 'The Garden Court - Luxury Collection',\n 'Hyde Street Seafood House & Raw Bar',\n 'Uva Enoteca',\n 'Bagatella',\n 'Tratto - San Francisco',\n 'KUSAKABE',\n 'DACHA Kitchen & Bar',\n 'Pizzeria Delfina - Pacific Heights',\n 'Khamsa Restaurant',\n 'Trestle',\n \"Pa'ina Restaurant and Bar\",\n 'Tonga Room & Hurricane Bar - Fairmont San Francisco',\n 'HK Lounge Bistro',\n 'The Old Clam House',\n 'One Market Restaurant',\n 'New Delhi Restaurant',\n 'Ristorante Milano',\n 'Le Colonial - SF',\n 'grace',\n 'Fresca at Irving Street',\n 'Violet’s',\n \"Miller's Rest\",\n 'NightJar by Nightbird',\n 'Gardenias',\n 'Bazille - Nordstrom San Francisco Centre',\n 'Los Amigos Salvadoran Restaurant - Castro',\n 'Mariposas',\n 'Bissap Baobab',\n 'Fusion Dumpling',\n 'Farmhouse Kitchen Thai at Portola Music Festival',\n 'Son & Garden - San Francisco',\n 'California Fish Market Restaurant',\n 'Camino Alto',\n 'Richmond Republic Draught House',\n 'Bansang',\n 'The Third Floor',\n 'Gary Danko',\n \"Fior D'Italia\",\n 'Okaeri Japanese Bistro',\n 'Kokkari Estiatorio',\n 'Trace',\n 'Wizards & Wands',\n \"L'Ottavo - San Francisco\",\n 'Pro - Elisa Livreri - Test US',\n 'OpenTable HQ Kitchen Area',\n 'Pro - Becky Geggatt - Test US',\n 'Pro - Andrew Johnston - Test US',\n 'Mobile Bistro - Credit Card',\n 'Mona Lisa Mare e Monti',\n 'Lao Table',\n \"Voodoo Love's Incantations\",\n 'Mili Wine Bar',\n 'Perbacco',\n 'Mission Bay Wine & Cheese',\n 'MKT Restaurant and Bar',\n 'Aliment',\n 'Tosca Café',\n 'Komaaj Mazze Wine Bar',\n 'BIX',\n 'Frances',\n 'Pier 23 Cafe',\n 'LaLe Mediterranean & Turkish Restaurant',\n 'Toy Soldier',\n 'Sociale - San Francisco',\n 'Corzetti',\n 'The Anchovy Bar',\n 'Ula Restaurant & Tapas Bar',\n 'Hakashi Japanese Sushi Bar & Grill',\n 'New Belgium Brewpub San Francisco',\n 'Absinthe Brasserie and Bar - SF',\n 'The Patio',\n 'Boulevard',\n 'Z & Y Peking Duck',\n 'Alegrias Food from Spain',\n 'Hardwood Bar & Smokery',\n 'Nob Hill Club at the Mark Hopkins',\n 'Local Kitchen & Wine Merchant',\n 'Jang Soo BBQ',\n 'Biscuits and Blues',\n 'Convivium Enoteca',\n 'La Folie - Permanently Closed',\n 'Presidio Kebab',\n 'The Red Window',\n 'Palm House',\n 'Cafe Mystique',\n \"McCormick & Kuleto's Seafood Restaurant\",\n 'Nightbird',\n 'Chotto Matte San Francisco',\n 'Cafe Tiramisu',\n 'Abrazo',\n 'Lupa Trattoria',\n 'Lark',\n 'North Box Restaurant',\n 'Isa',\n 'Foreign Cinema',\n 'Andiamo In Banca',\n 'The Vault Steakhouse',\n 'Canela Bistro & Wine Bar',\n '5A5',\n 'Florio',\n 'Vico Cavone',\n 'Per Diem - Financial District',\n 'Octavia',\n 'La Société Bar & Café',\n \"Cesario's\",\n \"O' by Claude Le Tohic\",\n 'Niku Steakhouse',\n \"Shelby's Rooftop\",\n 'Four Kings',\n \"Scoma's Fisherman's Wharf\",\n 'ANZU',\n 'Fiorella Clement',\n 'North Beach Restaurant',\n \"Mr. Digby's\",\n '54 Mint',\n 'Rooftop at 25 Lusk',\n 'Nakama Sushi - San Francisco',\n 'The Dorian',\n 'SOMA Restaurant & Bar',\n 'jumbro GC- Test',\n 'Sisterita',\n \"'Napizza\",\n \"Bambino's Ristorante\",\n 'NOVY',\n 'Itria',\n 'Colombini Italian Cafe & Bistro - Nob Hill Hotel',\n 'Top of the Mark',\n 'Bubba Gump - San Francisco',\n 'Lost and Found',\n 'Cold Drinks Bar',\n 'COQUETA - San Francisco',\n 'Salt & Straw - Hayes',\n 'El Nuevo Frutilandia',\n 'FANG',\n 'Angler San Francisco',\n 'Kothai Republic',\n 'Birch & Rye',\n 'Aquitaine - San Francisco',\n 'Taco Rouge',\n 'Rise Over Run',\n 'Sato Omakase Private',\n 'Magnolia Brewing - Haight',\n 'Indian Oven',\n 'India Clay Oven Restaurant and Bar - Richmond District',\n 'Cafe Zoetrope',\n 'Teakwood',\n 'Delfina Restaurant',\n 'Bella Trattoria',\n 'La Mar Cocina Peruana',\n 'Sato Omakase',\n 'Mobile Bistro - POP',\n 'Blue Whale Restaurant & Lounge',\n 'Cracked & Battered Marina',\n 'A16 - San Francisco',\n 'The Palm Court at RH San Francisco',\n 'Lolinda',\n 'Sushi Sato',\n 'Tower Salon - The Westin St. Francis',\n 'JooDang',\n 'Franciscan Crab Restaurant',\n 'Sunset Reservoir Brewing Company',\n 'Jackson Fillmore Trattoria',\n 'La Ciccia',\n 'The Check-In Lounge',\n \"Leo's Oyster Bar\",\n 'Chapeau',\n 'Sens Restaurant',\n 'Salt & Straw - Fillmore',\n 'Starlite',\n \"L'Mida\",\n 'Bacco Ristorante',\n 'Aphotic',\n 'Tsar Nicoulai Caviar Cafe',\n 'Pacific Catch - Sunset District',\n 'Sushi Shio',\n 'La Mediterranee',\n 'Harborview Restaurant & Bar',\n 'Gyu-Kaku - San Francisco',\n 'Barbara Pinseria',\n 'EPIC Steak',\n 'Dumpling Time Thrive City',\n 'Elena Mediterranean Cuisine',\n 'ONE65 Bistro',\n \"Yuebo's noodle shop- Test\",\n 'Blue Plate',\n 'Los Amigos Salvadoran Restaurant - Valencia',\n 'Barnzu',\n 'Slanted Door',\n 'Che Fico San Francisco',\n 'The Matterhorn Restaurant and Bakery',\n 'Prik Hom',\n \"Jasper's Corner Tap and Kitchen\",\n \"L'Ardoise\",\n 'Wilder SF',\n 'Mr. Tipple’s Jazz Club',\n 'Troya',\n 'Zevi Café & Bistro',\n 'Laurel Court Restaurant & Bar - Fairmont San Francisco',\n 'The Cavalier',\n 'Fogo de Chao - San Francisco',\n 'Basil Canteen @ 11th Street',\n 'Sake Bomb',\n 'Fish & Farm',\n 'Red Tavern',\n 'Manzoni',\n 'Alamo Square Seafood Grill',\n 'Campton Place Bar & Bistro',\n 'A16 Popup at SF FOG Fair',\n 'Yank Sing - Stevenson Street',\n 'Venga Group Onboarding 1- Test',\n 'Sacred Taco',\n 'Benihana - San Francisco, CA',\n 'The Tipsy Pig',\n 'Ideale',\n 'Mathilde French Bistro',\n 'Uccello Lounge',\n 'Palio',\n 'Estiatorio Ornos a Michael Mina Restaurant San Francisco',\n 'Matador - San Francisco',\n 'Fare Play',\n 'Aziza',\n 'Savor Cafe',\n 'Villon',\n 'Hed',\n 'Montesacro Marina',\n 'Bellota',\n 'Terzo',\n 'Berber',\n 'Greens Restaurant',\n 'Cultivar Ghirardelli Square Wine & Kitchen',\n 'Park Tavern',\n 'Maruya',\n \"Caitlin's Cafe\",\n 'Pro - Gregory Golphin - Test US',\n 'Le Central',\n 'Okane',\n \"Monk's Kettle\",\n 'Catch - San Francisco',\n 'Back to Back',\n '3rd Cousin',\n 'Lokma',\n 'International Smoke San Francisco',\n 'Nopa - San Francisco',\n 'Dancing Yak',\n 'Hard Rock Cafe - San Francisco',\n 'Willkommen',\n 'Osso Steakhouse',\n 'Gola',\n '¡Chao Pescao!',\n 'Il Borgo',\n 'Bistro Ember',\n \"Mastro's Steakhouse - San Francisco\",\n 'Cultivar',\n 'Marlowe',\n \"Morton's The Steakhouse - San Francisco\",\n 'Amarena',\n 'Mobile Bistro - Specials',\n 'Communications - Core Test',\n 'GuestCenter -Test- Nicholas Burnett',\n \"Rose's Cafe\",\n 'Doppio Zero - San Francisco',\n \"Alexander's Steakhouse - SF\",\n 'Cassava',\n 'Per Diem - Transit Center',\n 'Astra',\n 'Balboa Cafe - SF',\n 'Zuni Cafe',\n 'The Empress by Boon',\n 'Yank Sing - Rincon Center',\n 'Memento SF',\n 'Tuba Restaurant',\n 'Dark Bar',\n 'Black Hammer Brewing',\n 'Experiences - PI- Test',\n 'BrewVino, SF',\n 'Mochica',\n 'Amber India - San Francisco',\n 'Credo',\n 'Alora',\n 'The Post Room',\n 'Golden Crab House',\n 'Dunya',\n \"Original Joe's - San Francisco\",\n 'La Sarrasine',\n 'Presidio Social Club',\n 'Tacolicious - Marina',\n 'Cocotte',\n 'Palmers Tavern',\n \"Izzy's Steaks & Chops - San Francisco\",\n 'Level III',\n 'Heritage Restaurant Bar',\n 'Farmhouse Kitchen Thai Cuisine - San Francisco',\n 'Destapas SF',\n 'B-Side',\n \"Popi's Oysterette\",\n 'Zingari Ristorante e Jazz Caffè',\n 'Pabu Izakaya San Francisco',\n \"Historic John's Grill\",\n 'Curbside Cafe',\n \"Joel's Steakhouse - Test\",\n \"Feinstein's\",\n 'Clay Oven Indian Restaurant - West Portal',\n 'Venga Group Onboarding 2- Test',\n 'Mr. East Kitchen',\n 'B Star',\n 'Z & Y Restaurant',\n 'Prelude at the Opera House - Lower Level',\n 'Cote Ouest',\n 'Acquolina',\n 'AFICI',\n 'Chou Chou Bistro',\n \"Luisa's On Guerrero\",\n 'Kitchen Istanbul',\n 'Members Only',\n 'Barcha',\n 'Cable 55',\n 'Noosh',\n 'Cafe Claude',\n 'Elements Bar at ONE65',\n 'Bartlett Hall',\n 'Sessions at the Presidio',\n 'Urban Putt San Francisco',\n 'Chili House',\n 'Besharam',\n 'Curio',\n 'Pazzia',\n 'The Fly Trap',\n 'Dirty Habit',\n 'AsiaSF - Spectacular Shows & Dining',\n 'Sushi Hashiri',\n 'Rosemary & Pine',\n 'Spork Breakfast & Brunch',\n 'Hakkasan - San Francisco',\n 'Eight Tables by George Chen',\n 'Otoro Sushi',\n 'Dragon Horse',\n 'Spice of America',\n 'Mourad',\n '1849 Bistro + Lounge',\n 'Dobbs Ferry Restaurant - Permanently Closed',\n 'Bistro Central Parc',\n 'Indie Wine & Beer Bar',\n 'Paprika',\n 'Fiorella Polk',\n 'Prospect',\n 'North India Restaurant',\n 'Roka Akor - San Francisco',\n 'Roti Indian Bistro - San Francisco',\n 'Piqueos',\n 'Seven Hills',\n 'Ace Wasabi Rock-N-Roll Sushi',\n 'Frascati',\n 'Yakiniku Shodai',\n 'Elephant Sushi Hayes Valley',\n 'Tia Margarita',\n 'Bouche',\n \"Bobo's\",\n 'House of Prime Rib',\n 'Black Cat Jazz Supper Club',\n 'Linden & Laguna',\n 'Oraan Thai',\n 'Echigo Home Cook',\n \"Rocco's Cafe\",\n 'Monte’s Restaurant & Bar',\n 'Pane e Vino Trattoria',\n 'Base Camp',\n 'Guest Center - iOS/Mobile Auto',\n 'Chambers Eat + Drink',\n 'Fable - SF',\n \"Cioppino's\",\n 'Bistro Boudin',\n 'Miller & Lux',\n 'Arabian Nights',\n 'State Bird Provisions',\n 'Noe Indian Cuisine',\n \"Perry's - Embarcadero\",\n 'Ozumo - San Francisco',\n 'AKIKOS',\n 'STK - San Francisco',\n 'Dalida',\n 'Boho',\n 'Collina',\n \"Chouquet's\",\n 'LELEKA',\n 'Orafo at Four Seasons Embarcadero',\n 'Wako Japanese Restaurant',\n 'Clay Oven on Haight',\n 'The Blue Light',\n 'The Grotto',\n 'Shiji POS - Test',\n 'Burma Love Downtown',\n 'The Harlequin',\n 'Tartine Manufactory - San Francisco',\n 'Starbelly',\n 'Cafe de la Presse',\n \"The Tailor's Son\",\n 'Gambit Lounge',\n \"Harris'\",\n 'Sorella',\n 'Serafina SF',\n 'China Live',\n \"Garibaldi's on Presidio\",\n 'Fermentation Lab Japantown',\n 'Ballast Point Mission Bay',\n 'Bistro Organico',\n 'The Vault Garden',\n 'Castro Indian Restaurant & Bar',\n 'Sushi Hakko',\n 'Caffe Macaroni',\n \"Charmaine's Rooftop Lounge\",\n 'Firefly Restaurant',\n 'Montesacro SOMA',\n 'Hard Knox Cafe on Clement Street',\n \"Marianne's\",\n 'Live Sushi Bar',\n 'Uma Casa',\n 'Pied Piper',\n \"Elena's\",\n 'Eclipse Kitchen and Bar',\n 'Ciccino'    \n]\"\"\"",
                "fileTypes": [],
                "file_path": "",
                "password": false,
                "name": "code",
                "advanced": false,
                "dynamic": false,
                "info": "",
                "title_case": true
              },
              "description": {
                "type": "str",
                "required": true,
                "placeholder": "",
                "list": false,
                "show": true,
                "multiline": true,
                "value": "tool that returns all restaurant names in the area",
                "fileTypes": [],
                "file_path": "",
                "password": false,
                "name": "description",
                "advanced": false,
                "dynamic": false,
                "info": "",
                "title_case": true
              },
              "name": {
                "type": "str",
                "required": true,
                "placeholder": "",
                "list": false,
                "show": true,
                "multiline": false,
                "value": "get_restaurant_name",
                "fileTypes": [],
                "file_path": "",
                "password": false,
                "name": "name",
                "advanced": false,
                "dynamic": false,
                "info": "",
                "title_case": true
              },
              "return_direct": {
                "type": "bool",
                "required": true,
                "placeholder": "",
                "list": false,
                "show": true,
                "multiline": false,
                "value": false,
                "fileTypes": [],
                "file_path": "",
                "password": false,
                "name": "return_direct",
                "advanced": false,
                "dynamic": false,
                "info": "",
                "title_case": true
              },
              "_type": "PythonFunctionTool"
            },
            "description": "Python function to be executed.",
            "base_classes": [
              "BaseTool",
              "Tool"
            ],
            "display_name": "PythonFunctionTool",
            "documentation": "",
            "custom_fields": {},
            "output_types": [],
            "field_formatters": {},
            "beta": false
          },
          "id": "PythonFunctionTool-wdYwS"
        },
        "selected": true,
        "width": 384,
        "height": 537,
        "positionAbsolute": {
          "x": -227.8403626844044,
          "y": 125.63045346795093
        },
        "dragging": false
      }
    ],
    "edges": [
      {
        "source": "ConversationBufferMemory-CseqN",
        "sourceHandle": "{œbaseClassesœ:[œBaseMemoryœ,œBaseChatMemoryœ,œConversationBufferMemoryœ],œdataTypeœ:œConversationBufferMemoryœ,œidœ:œConversationBufferMemory-CseqNœ}",
        "target": "AgentExecutor-rlara",
        "targetHandle": "{œfieldNameœ:œmemoryœ,œidœ:œAgentExecutor-rlaraœ,œinputTypesœ:null,œtypeœ:œBaseMemoryœ}",
        "data": {
          "targetHandle": {
            "fieldName": "memory",
            "id": "AgentExecutor-rlara",
            "inputTypes": null,
            "type": "BaseMemory"
          },
          "sourceHandle": {
            "baseClasses": [
              "BaseMemory",
              "BaseChatMemory",
              "ConversationBufferMemory"
            ],
            "dataType": "ConversationBufferMemory",
            "id": "ConversationBufferMemory-CseqN"
          }
        },
        "style": {
          "stroke": "#555"
        },
        "className": "stroke-gray-900  stroke-connection",
        "animated": false,
        "id": "reactflow__edge-ConversationBufferMemory-CseqN{œbaseClassesœ:[œBaseMemoryœ,œBaseChatMemoryœ,œConversationBufferMemoryœ],œdataTypeœ:œConversationBufferMemoryœ,œidœ:œConversationBufferMemory-CseqNœ}-AgentExecutor-rlara{œfieldNameœ:œmemoryœ,œidœ:œAgentExecutor-rlaraœ,œinputTypesœ:null,œtypeœ:œBaseMemoryœ}"
      },
      {
        "source": "SystemMessagePromptTemplate-dmkev",
        "sourceHandle": "{œbaseClassesœ:[œSystemMessagePromptTemplateœ,œBaseMessagePromptTemplateœ,œ_StringImageMessagePromptTemplateœ],œdataTypeœ:œSystemMessagePromptTemplateœ,œidœ:œSystemMessagePromptTemplate-dmkevœ}",
        "target": "AgentExecutor-rlara",
        "targetHandle": "{œfieldNameœ:œsystem_messageœ,œidœ:œAgentExecutor-rlaraœ,œinputTypesœ:null,œtypeœ:œSystemMessagePromptTemplateœ}",
        "data": {
          "targetHandle": {
            "fieldName": "system_message",
            "id": "AgentExecutor-rlara",
            "inputTypes": null,
            "type": "SystemMessagePromptTemplate"
          },
          "sourceHandle": {
            "baseClasses": [
              "SystemMessagePromptTemplate",
              "BaseMessagePromptTemplate",
              "_StringImageMessagePromptTemplate"
            ],
            "dataType": "SystemMessagePromptTemplate",
            "id": "SystemMessagePromptTemplate-dmkev"
          }
        },
        "style": {
          "stroke": "#555"
        },
        "className": "stroke-gray-900  stroke-connection",
        "animated": false,
        "id": "reactflow__edge-SystemMessagePromptTemplate-dmkev{œbaseClassesœ:[œSystemMessagePromptTemplateœ,œBaseMessagePromptTemplateœ,œ_StringImageMessagePromptTemplateœ],œdataTypeœ:œSystemMessagePromptTemplateœ,œidœ:œSystemMessagePromptTemplate-dmkevœ}-AgentExecutor-rlara{œfieldNameœ:œsystem_messageœ,œidœ:œAgentExecutor-rlaraœ,œinputTypesœ:null,œtypeœ:œSystemMessagePromptTemplateœ}",
        "selected": false
      },
      {
        "source": "PythonFunctionTool-zoas5",
        "sourceHandle": "{œbaseClassesœ:[œBaseToolœ,œToolœ],œdataTypeœ:œPythonFunctionToolœ,œidœ:œPythonFunctionTool-zoas5œ}",
        "target": "AgentExecutor-rlara",
        "targetHandle": "{œfieldNameœ:œtoolsœ,œidœ:œAgentExecutor-rlaraœ,œinputTypesœ:null,œtypeœ:œToolœ}",
        "data": {
          "targetHandle": {
            "fieldName": "tools",
            "id": "AgentExecutor-rlara",
            "inputTypes": null,
            "type": "Tool"
          },
          "sourceHandle": {
            "baseClasses": [
              "BaseTool",
              "Tool"
            ],
            "dataType": "PythonFunctionTool",
            "id": "PythonFunctionTool-zoas5"
          }
        },
        "style": {
          "stroke": "#555"
        },
        "className": "stroke-gray-900  stroke-connection",
        "animated": false,
        "id": "reactflow__edge-PythonFunctionTool-zoas5{œbaseClassesœ:[œBaseToolœ,œToolœ],œdataTypeœ:œPythonFunctionToolœ,œidœ:œPythonFunctionTool-zoas5œ}-AgentExecutor-rlara{œfieldNameœ:œtoolsœ,œidœ:œAgentExecutor-rlaraœ,œinputTypesœ:null,œtypeœ:œToolœ}"
      },
      {
        "source": "Tool-48O0F",
        "sourceHandle": "{œbaseClassesœ:[œBaseToolœ,œToolœ],œdataTypeœ:œToolœ,œidœ:œTool-48O0Fœ}",
        "target": "AgentExecutor-rlara",
        "targetHandle": "{œfieldNameœ:œtoolsœ,œidœ:œAgentExecutor-rlaraœ,œinputTypesœ:null,œtypeœ:œToolœ}",
        "data": {
          "targetHandle": {
            "fieldName": "tools",
            "id": "AgentExecutor-rlara",
            "inputTypes": null,
            "type": "Tool"
          },
          "sourceHandle": {
            "baseClasses": [
              "BaseTool",
              "Tool"
            ],
            "dataType": "Tool",
            "id": "Tool-48O0F"
          }
        },
        "style": {
          "stroke": "#555"
        },
        "className": "stroke-gray-900  stroke-connection",
        "animated": false,
        "id": "reactflow__edge-Tool-48O0F{œbaseClassesœ:[œBaseToolœ,œToolœ],œdataTypeœ:œToolœ,œidœ:œTool-48O0Fœ}-AgentExecutor-rlara{œfieldNameœ:œtoolsœ,œidœ:œAgentExecutor-rlaraœ,œinputTypesœ:null,œtypeœ:œToolœ}"
      },
      {
        "source": "PythonFunctionTool-4bjH8",
        "sourceHandle": "{œbaseClassesœ:[œBaseToolœ,œToolœ],œdataTypeœ:œPythonFunctionToolœ,œidœ:œPythonFunctionTool-4bjH8œ}",
        "target": "AgentExecutor-rlara",
        "targetHandle": "{œfieldNameœ:œtoolsœ,œidœ:œAgentExecutor-rlaraœ,œinputTypesœ:null,œtypeœ:œToolœ}",
        "data": {
          "targetHandle": {
            "fieldName": "tools",
            "id": "AgentExecutor-rlara",
            "inputTypes": null,
            "type": "Tool"
          },
          "sourceHandle": {
            "baseClasses": [
              "BaseTool",
              "Tool"
            ],
            "dataType": "PythonFunctionTool",
            "id": "PythonFunctionTool-4bjH8"
          }
        },
        "style": {
          "stroke": "#555"
        },
        "className": "stroke-gray-900  stroke-connection",
        "animated": false,
        "id": "reactflow__edge-PythonFunctionTool-4bjH8{œbaseClassesœ:[œBaseToolœ,œToolœ],œdataTypeœ:œPythonFunctionToolœ,œidœ:œPythonFunctionTool-4bjH8œ}-AgentExecutor-rlara{œfieldNameœ:œtoolsœ,œidœ:œAgentExecutor-rlaraœ,œinputTypesœ:null,œtypeœ:œToolœ}"
      },
      {
        "source": "TextLoader-ciWpH",
        "sourceHandle": "{œbaseClassesœ:[œDocumentœ],œdataTypeœ:œTextLoaderœ,œidœ:œTextLoader-ciWpHœ}",
        "target": "Chroma-70USl",
        "targetHandle": "{œfieldNameœ:œdocumentsœ,œidœ:œChroma-70USlœ,œinputTypesœ:null,œtypeœ:œDocumentœ}",
        "data": {
          "targetHandle": {
            "fieldName": "documents",
            "id": "Chroma-70USl",
            "inputTypes": null,
            "type": "Document"
          },
          "sourceHandle": {
            "baseClasses": [
              "Document"
            ],
            "dataType": "TextLoader",
            "id": "TextLoader-ciWpH"
          }
        },
        "style": {
          "stroke": "#555"
        },
        "className": "stroke-gray-900  stroke-connection",
        "animated": false,
        "id": "reactflow__edge-TextLoader-ciWpH{œbaseClassesœ:[œDocumentœ],œdataTypeœ:œTextLoaderœ,œidœ:œTextLoader-ciWpHœ}-Chroma-70USl{œfieldNameœ:œdocumentsœ,œidœ:œChroma-70USlœ,œinputTypesœ:null,œtypeœ:œDocumentœ}"
      },
      {
        "source": "OpenAIEmbeddings-UExkq",
        "sourceHandle": "{œbaseClassesœ:[œEmbeddingsœ,œOpenAIEmbeddingsœ,œCallableœ],œdataTypeœ:œOpenAIEmbeddingsœ,œidœ:œOpenAIEmbeddings-UExkqœ}",
        "target": "Chroma-70USl",
        "targetHandle": "{œfieldNameœ:œembeddingœ,œidœ:œChroma-70USlœ,œinputTypesœ:null,œtypeœ:œEmbeddingsœ}",
        "data": {
          "targetHandle": {
            "fieldName": "embedding",
            "id": "Chroma-70USl",
            "inputTypes": null,
            "type": "Embeddings"
          },
          "sourceHandle": {
            "baseClasses": [
              "Embeddings",
              "OpenAIEmbeddings",
              "Callable"
            ],
            "dataType": "OpenAIEmbeddings",
            "id": "OpenAIEmbeddings-UExkq"
          }
        },
        "style": {
          "stroke": "#555"
        },
        "className": "stroke-gray-900  stroke-connection",
        "animated": false,
        "id": "reactflow__edge-OpenAIEmbeddings-UExkq{œbaseClassesœ:[œEmbeddingsœ,œOpenAIEmbeddingsœ,œCallableœ],œdataTypeœ:œOpenAIEmbeddingsœ,œidœ:œOpenAIEmbeddings-UExkqœ}-Chroma-70USl{œfieldNameœ:œembeddingœ,œidœ:œChroma-70USlœ,œinputTypesœ:null,œtypeœ:œEmbeddingsœ}"
      },
      {
        "source": "Chroma-70USl",
        "sourceHandle": "{œbaseClassesœ:[œVectorStoreœ,œBaseRetrieverœ],œdataTypeœ:œChromaœ,œidœ:œChroma-70USlœ}",
        "target": "VectorStoreRetriever-nVACO",
        "targetHandle": "{œfieldNameœ:œvectorstoreœ,œidœ:œVectorStoreRetriever-nVACOœ,œinputTypesœ:null,œtypeœ:œVectorStoreœ}",
        "data": {
          "targetHandle": {
            "fieldName": "vectorstore",
            "id": "VectorStoreRetriever-nVACO",
            "inputTypes": null,
            "type": "VectorStore"
          },
          "sourceHandle": {
            "baseClasses": [
              "VectorStore",
              "BaseRetriever"
            ],
            "dataType": "Chroma",
            "id": "Chroma-70USl"
          }
        },
        "style": {
          "stroke": "#555"
        },
        "className": "stroke-gray-900  stroke-connection",
        "animated": false,
        "id": "reactflow__edge-Chroma-70USl{œbaseClassesœ:[œVectorStoreœ,œBaseRetrieverœ],œdataTypeœ:œChromaœ,œidœ:œChroma-70USlœ}-VectorStoreRetriever-nVACO{œfieldNameœ:œvectorstoreœ,œidœ:œVectorStoreRetriever-nVACOœ,œinputTypesœ:null,œtypeœ:œVectorStoreœ}"
      },
      {
        "source": "VectorStoreRetriever-nVACO",
        "sourceHandle": "{œbaseClassesœ:[œVectorStoreRetrieverœ,œBaseRetrieverœ],œdataTypeœ:œVectorStoreRetrieverœ,œidœ:œVectorStoreRetriever-nVACOœ}",
        "target": "Tool-NnjKb",
        "targetHandle": "{œfieldNameœ:œretrieverœ,œidœ:œTool-NnjKbœ,œinputTypesœ:null,œtypeœ:œBaseRetrieverœ}",
        "data": {
          "targetHandle": {
            "fieldName": "retriever",
            "id": "Tool-NnjKb",
            "inputTypes": null,
            "type": "BaseRetriever"
          },
          "sourceHandle": {
            "baseClasses": [
              "VectorStoreRetriever",
              "BaseRetriever"
            ],
            "dataType": "VectorStoreRetriever",
            "id": "VectorStoreRetriever-nVACO"
          }
        },
        "style": {
          "stroke": "#555"
        },
        "className": "stroke-gray-900  stroke-connection",
        "animated": false,
        "id": "reactflow__edge-VectorStoreRetriever-nVACO{œbaseClassesœ:[œVectorStoreRetrieverœ,œBaseRetrieverœ],œdataTypeœ:œVectorStoreRetrieverœ,œidœ:œVectorStoreRetriever-nVACOœ}-Tool-NnjKb{œfieldNameœ:œretrieverœ,œidœ:œTool-NnjKbœ,œinputTypesœ:null,œtypeœ:œBaseRetrieverœ}"
      },
      {
        "source": "Tool-NnjKb",
        "sourceHandle": "{œbaseClassesœ:[œBaseToolœ,œToolœ],œdataTypeœ:œToolœ,œidœ:œTool-NnjKbœ}",
        "target": "AgentExecutor-rlara",
        "targetHandle": "{œfieldNameœ:œtoolsœ,œidœ:œAgentExecutor-rlaraœ,œinputTypesœ:null,œtypeœ:œToolœ}",
        "data": {
          "targetHandle": {
            "fieldName": "tools",
            "id": "AgentExecutor-rlara",
            "inputTypes": null,
            "type": "Tool"
          },
          "sourceHandle": {
            "baseClasses": [
              "BaseTool",
              "Tool"
            ],
            "dataType": "Tool",
            "id": "Tool-NnjKb"
          }
        },
        "style": {
          "stroke": "#555"
        },
        "className": "stroke-gray-900  stroke-connection",
        "animated": false,
        "id": "reactflow__edge-Tool-NnjKb{œbaseClassesœ:[œBaseToolœ,œToolœ],œdataTypeœ:œToolœ,œidœ:œTool-NnjKbœ}-AgentExecutor-rlara{œfieldNameœ:œtoolsœ,œidœ:œAgentExecutor-rlaraœ,œinputTypesœ:null,œtypeœ:œToolœ}"
      },
      {
        "source": "CharacterTextSplitter-fVjsy",
        "sourceHandle": "{œbaseClassesœ:[œDocumentœ],œdataTypeœ:œCharacterTextSplitterœ,œidœ:œCharacterTextSplitter-fVjsyœ}",
        "target": "Chroma-vFe6o",
        "targetHandle": "{œfieldNameœ:œdocumentsœ,œidœ:œChroma-vFe6oœ,œinputTypesœ:null,œtypeœ:œDocumentœ}",
        "data": {
          "targetHandle": {
            "fieldName": "documents",
            "id": "Chroma-vFe6o",
            "inputTypes": null,
            "type": "Document"
          },
          "sourceHandle": {
            "baseClasses": [
              "Document"
            ],
            "dataType": "CharacterTextSplitter",
            "id": "CharacterTextSplitter-fVjsy"
          }
        },
        "style": {
          "stroke": "#555"
        },
        "className": "stroke-gray-900  stroke-connection",
        "animated": false,
        "id": "reactflow__edge-CharacterTextSplitter-fVjsy{œbaseClassesœ:[œDocumentœ],œdataTypeœ:œCharacterTextSplitterœ,œidœ:œCharacterTextSplitter-fVjsyœ}-Chroma-vFe6o{œfieldNameœ:œdocumentsœ,œidœ:œChroma-vFe6oœ,œinputTypesœ:null,œtypeœ:œDocumentœ}"
      },
      {
        "source": "OpenAIEmbeddings-UExkq",
        "sourceHandle": "{œbaseClassesœ:[œEmbeddingsœ,œOpenAIEmbeddingsœ,œCallableœ],œdataTypeœ:œOpenAIEmbeddingsœ,œidœ:œOpenAIEmbeddings-UExkqœ}",
        "target": "Chroma-vFe6o",
        "targetHandle": "{œfieldNameœ:œembeddingœ,œidœ:œChroma-vFe6oœ,œinputTypesœ:null,œtypeœ:œEmbeddingsœ}",
        "data": {
          "targetHandle": {
            "fieldName": "embedding",
            "id": "Chroma-vFe6o",
            "inputTypes": null,
            "type": "Embeddings"
          },
          "sourceHandle": {
            "baseClasses": [
              "Embeddings",
              "OpenAIEmbeddings",
              "Callable"
            ],
            "dataType": "OpenAIEmbeddings",
            "id": "OpenAIEmbeddings-UExkq"
          }
        },
        "style": {
          "stroke": "#555"
        },
        "className": "stroke-gray-900  stroke-connection",
        "animated": false,
        "id": "reactflow__edge-OpenAIEmbeddings-UExkq{œbaseClassesœ:[œEmbeddingsœ,œOpenAIEmbeddingsœ,œCallableœ],œdataTypeœ:œOpenAIEmbeddingsœ,œidœ:œOpenAIEmbeddings-UExkqœ}-Chroma-vFe6o{œfieldNameœ:œembeddingœ,œidœ:œChroma-vFe6oœ,œinputTypesœ:null,œtypeœ:œEmbeddingsœ}"
      },
      {
        "source": "Chroma-vFe6o",
        "sourceHandle": "{œbaseClassesœ:[œVectorStoreœ,œBaseRetrieverœ],œdataTypeœ:œChromaœ,œidœ:œChroma-vFe6oœ}",
        "target": "VectorStoreRetriever-G7oKw",
        "targetHandle": "{œfieldNameœ:œvectorstoreœ,œidœ:œVectorStoreRetriever-G7oKwœ,œinputTypesœ:null,œtypeœ:œVectorStoreœ}",
        "data": {
          "targetHandle": {
            "fieldName": "vectorstore",
            "id": "VectorStoreRetriever-G7oKw",
            "inputTypes": null,
            "type": "VectorStore"
          },
          "sourceHandle": {
            "baseClasses": [
              "VectorStore",
              "BaseRetriever"
            ],
            "dataType": "Chroma",
            "id": "Chroma-vFe6o"
          }
        },
        "style": {
          "stroke": "#555"
        },
        "className": "stroke-gray-900  stroke-connection",
        "animated": false,
        "id": "reactflow__edge-Chroma-vFe6o{œbaseClassesœ:[œVectorStoreœ,œBaseRetrieverœ],œdataTypeœ:œChromaœ,œidœ:œChroma-vFe6oœ}-VectorStoreRetriever-G7oKw{œfieldNameœ:œvectorstoreœ,œidœ:œVectorStoreRetriever-G7oKwœ,œinputTypesœ:null,œtypeœ:œVectorStoreœ}"
      },
      {
        "source": "Document-DATKy",
        "sourceHandle": "{œbaseClassesœ:[œDocumentœ],œdataTypeœ:œDocumentœ,œidœ:œDocument-DATKyœ}",
        "target": "CharacterTextSplitter-fVjsy",
        "targetHandle": "{œfieldNameœ:œdocumentsœ,œidœ:œCharacterTextSplitter-fVjsyœ,œinputTypesœ:null,œtypeœ:œDocumentœ}",
        "data": {
          "targetHandle": {
            "fieldName": "documents",
            "id": "CharacterTextSplitter-fVjsy",
            "inputTypes": null,
            "type": "Document"
          },
          "sourceHandle": {
            "baseClasses": [
              "Document"
            ],
            "dataType": "Document",
            "id": "Document-DATKy"
          }
        },
        "style": {
          "stroke": "#555"
        },
        "className": "stroke-gray-900  stroke-connection",
        "animated": false,
        "id": "reactflow__edge-Document-DATKy{œbaseClassesœ:[œDocumentœ],œdataTypeœ:œDocumentœ,œidœ:œDocument-DATKyœ}-CharacterTextSplitter-fVjsy{œfieldNameœ:œdocumentsœ,œidœ:œCharacterTextSplitter-fVjsyœ,œinputTypesœ:null,œtypeœ:œDocumentœ}"
      },
      {
        "source": "VectorStoreRetriever-G7oKw",
        "sourceHandle": "{œbaseClassesœ:[œBaseRetrieverœ,œVectorStoreRetrieverœ],œdataTypeœ:œVectorStoreRetrieverœ,œidœ:œVectorStoreRetriever-G7oKwœ}",
        "target": "Tool-48O0F",
        "targetHandle": "{œfieldNameœ:œretrieverœ,œidœ:œTool-48O0Fœ,œinputTypesœ:null,œtypeœ:œBaseRetrieverœ}",
        "data": {
          "targetHandle": {
            "fieldName": "retriever",
            "id": "Tool-48O0F",
            "inputTypes": null,
            "type": "BaseRetriever"
          },
          "sourceHandle": {
            "baseClasses": [
              "BaseRetriever",
              "VectorStoreRetriever"
            ],
            "dataType": "VectorStoreRetriever",
            "id": "VectorStoreRetriever-G7oKw"
          }
        },
        "style": {
          "stroke": "#555"
        },
        "className": "stroke-gray-900  stroke-connection",
        "animated": false,
        "id": "reactflow__edge-VectorStoreRetriever-G7oKw{œbaseClassesœ:[œBaseRetrieverœ,œVectorStoreRetrieverœ],œdataTypeœ:œVectorStoreRetrieverœ,œidœ:œVectorStoreRetriever-G7oKwœ}-Tool-48O0F{œfieldNameœ:œretrieverœ,œidœ:œTool-48O0Fœ,œinputTypesœ:null,œtypeœ:œBaseRetrieverœ}"
      },
      {
        "source": "PythonFunctionTool-wdYwS",
        "sourceHandle": "{œbaseClassesœ:[œBaseToolœ,œToolœ],œdataTypeœ:œPythonFunctionToolœ,œidœ:œPythonFunctionTool-wdYwSœ}",
        "target": "AgentExecutor-rlara",
        "targetHandle": "{œfieldNameœ:œtoolsœ,œidœ:œAgentExecutor-rlaraœ,œinputTypesœ:null,œtypeœ:œToolœ}",
        "data": {
          "targetHandle": {
            "fieldName": "tools",
            "id": "AgentExecutor-rlara",
            "inputTypes": null,
            "type": "Tool"
          },
          "sourceHandle": {
            "baseClasses": [
              "BaseTool",
              "Tool"
            ],
            "dataType": "PythonFunctionTool",
            "id": "PythonFunctionTool-wdYwS"
          }
        },
        "style": {
          "stroke": "#555"
        },
        "className": "stroke-gray-900  stroke-connection",
        "animated": false,
        "id": "reactflow__edge-PythonFunctionTool-wdYwS{œbaseClassesœ:[œBaseToolœ,œToolœ],œdataTypeœ:œPythonFunctionToolœ,œidœ:œPythonFunctionTool-wdYwSœ}-AgentExecutor-rlara{œfieldNameœ:œtoolsœ,œidœ:œAgentExecutor-rlaraœ,œinputTypesœ:null,œtypeœ:œToolœ}"
      }
    ],
    "viewport": {
      "x": 752.2020613777515,
      "y": 6.943518714157136,
      "zoom": 0.542004857590742
    }
  },
  "metadata": {
    "ConversationBufferMemory": {
      "count": 1
    },
    "AgentExecutor": {
      "count": 1
    },
    "SystemMessagePromptTemplate": {
      "count": 1
    },
    "PythonFunctionTool": {
      "count": 3
    },
    "OpenAIEmbeddings": {
      "count": 1
    },
    "Tool": {
      "count": 2
    },
    "CharacterTextSplitter": {
      "count": 1
    },
    "Chroma": {
      "count": 2
    },
    "TextLoader": {
      "count": 1
    },
    "VectorStoreRetriever": {
      "count": 2
    },
    "Document": {
      "count": 1
    },
    "total": 16
  },
  "original": {
    "id": "990b0b4a-95ae-4fe5-8ae2-7ed2d63ba43b",
    "name": "dtp_extractor_agent",
    "description": "Extracts DTP and food preferences from the user",
    "is_component": false,
    "liked_by_count": "2",
    "downloads_count": "76",
    "metadata": {
      "ConversationBufferMemory": {
        "count": 1
      },
      "AgentExecutor": {
        "count": 1
      },
      "SystemMessagePromptTemplate": {
        "count": 1
      },
      "PythonFunctionTool": {
        "count": 3
      },
      "OpenAIEmbeddings": {
        "count": 1
      },
      "Tool": {
        "count": 2
      },
      "CharacterTextSplitter": {
        "count": 1
      },
      "Chroma": {
        "count": 2
      },
      "TextLoader": {
        "count": 1
      },
      "VectorStoreRetriever": {
        "count": 2
      },
      "Document": {
        "count": 1
      },
      "total": 16
    },
    "last_tested_version": "0.6.16",
    "private": false,
    "data": {
      "nodes": [
        {
          "id": "ConversationBufferMemory-CseqN",
          "type": "genericNode",
          "position": {
            "x": 823.8211249124307,
            "y": -288.8826451299408
          },
          "data": {
            "type": "ConversationBufferMemory",
            "node": {
              "template": {
                "chat_memory": {
                  "type": "BaseChatMessageHistory",
                  "required": false,
                  "placeholder": "",
                  "list": false,
                  "show": true,
                  "multiline": false,
                  "fileTypes": [],
                  "password": false,
                  "name": "chat_memory",
                  "advanced": false,
                  "dynamic": false,
                  "info": "",
                  "title_case": true
                },
                "ai_prefix": {
                  "type": "str",
                  "required": false,
                  "placeholder": "",
                  "list": false,
                  "show": false,
                  "multiline": false,
                  "value": "AI",
                  "fileTypes": [],
                  "password": false,
                  "name": "ai_prefix",
                  "advanced": false,
                  "dynamic": false,
                  "info": "",
                  "title_case": true
                },
                "human_prefix": {
                  "type": "str",
                  "required": false,
                  "placeholder": "",
                  "list": false,
                  "show": false,
                  "multiline": false,
                  "value": "Human",
                  "fileTypes": [],
                  "password": false,
                  "name": "human_prefix",
                  "advanced": false,
                  "dynamic": false,
                  "info": "",
                  "title_case": true
                },
                "input_key": {
                  "type": "str",
                  "required": false,
                  "placeholder": "",
                  "list": false,
                  "show": true,
                  "multiline": false,
                  "value": "",
                  "fileTypes": [],
                  "file_path": "",
                  "password": false,
                  "name": "input_key",
                  "advanced": false,
                  "dynamic": false,
                  "info": "The variable to be used as Chat Input when more than one variable is available.",
                  "title_case": true
                },
                "memory_key": {
                  "type": "str",
                  "required": false,
                  "placeholder": "",
                  "list": false,
                  "show": true,
                  "multiline": false,
                  "value": "chat_history",
                  "fileTypes": [],
                  "password": false,
                  "name": "memory_key",
                  "advanced": false,
                  "dynamic": false,
                  "info": "",
                  "title_case": true
                },
                "output_key": {
                  "type": "str",
                  "required": false,
                  "placeholder": "",
                  "list": false,
                  "show": true,
                  "multiline": false,
                  "value": "",
                  "fileTypes": [],
                  "file_path": "",
                  "password": false,
                  "name": "output_key",
                  "advanced": false,
                  "dynamic": false,
                  "info": "The variable to be used as Chat Output (e.g. answer in a ConversationalRetrievalChain)",
                  "title_case": true
                },
                "return_messages": {
                  "type": "bool",
                  "required": false,
                  "placeholder": "",
                  "list": false,
                  "show": true,
                  "multiline": false,
                  "fileTypes": [],
                  "file_path": "",
                  "password": false,
                  "name": "return_messages",
                  "advanced": false,
                  "dynamic": false,
                  "info": "",
                  "title_case": true,
                  "value": true
                },
                "_type": "ConversationBufferMemory"
              },
              "description": "Buffer for storing conversation memory.",
              "base_classes": [
                "BaseMemory",
                "BaseChatMemory",
                "ConversationBufferMemory"
              ],
              "display_name": "ConversationBufferMemory",
              "documentation": "https://python.langchain.com/docs/modules/memory/how_to/buffer",
              "custom_fields": {},
              "output_types": [],
              "field_formatters": {},
              "beta": false
            },
            "id": "ConversationBufferMemory-CseqN"
          },
          "selected": false,
          "width": 384,
          "height": 601,
          "positionAbsolute": {
            "x": 823.8211249124307,
            "y": -288.8826451299408
          },
          "dragging": false
        },
        {
          "id": "AgentExecutor-rlara",
          "type": "genericNode",
          "position": {
            "x": 2055.9949411548973,
            "y": 74.58211187412066
          },
          "data": {
            "type": "AgentExecutor",
            "node": {
              "template": {
                "memory": {
                  "type": "BaseMemory",
                  "required": false,
                  "placeholder": "",
                  "list": false,
                  "show": true,
                  "multiline": false,
                  "fileTypes": [],
                  "file_path": "",
                  "password": false,
                  "name": "memory",
                  "display_name": "Memory",
                  "advanced": false,
                  "dynamic": false,
                  "info": "",
                  "title_case": true
                },
                "system_message": {
                  "type": "SystemMessagePromptTemplate",
                  "required": false,
                  "placeholder": "",
                  "list": false,
                  "show": true,
                  "multiline": false,
                  "fileTypes": [],
                  "file_path": "",
                  "password": false,
                  "name": "system_message",
                  "display_name": "System Message",
                  "advanced": false,
                  "dynamic": false,
                  "info": "",
                  "title_case": true
                },
                "tools": {
                  "type": "Tool",
                  "required": true,
                  "placeholder": "",
                  "list": true,
                  "show": true,
                  "multiline": false,
                  "fileTypes": [],
                  "file_path": "",
                  "password": false,
                  "name": "tools",
                  "display_name": "Tools",
                  "advanced": false,
                  "dynamic": false,
                  "info": "",
                  "title_case": true
                },
                "code": {
                  "type": "code",
                  "required": true,
                  "placeholder": "",
                  "list": false,
                  "show": true,
                  "multiline": true,
                  "value": "from typing import List, Optional\n\nfrom langchain.agents.agent import AgentExecutor\nfrom langchain.agents.agent_toolkits.conversational_retrieval.openai_functions import _get_default_system_message\nfrom langchain.agents.openai_functions_agent.base import OpenAIFunctionsAgent\nfrom langchain.memory.token_buffer import ConversationTokenBufferMemory\nfrom langchain.prompts import SystemMessagePromptTemplate\nfrom langchain.prompts.chat import MessagesPlaceholder\nfrom langchain.schema.memory import BaseMemory\nfrom langchain.tools import Tool\nfrom langchain_community.chat_models import ChatOpenAI\nfrom axiestudio import CustomComponent\nfrom axiestudio.field_typing.range_spec import RangeSpec\n\n\nclass ConversationalAgent(CustomComponent):\n    display_name: str = \"OpenAI Conversational Agent\"\n    description: str = \"Conversational Agent that can use OpenAI's function calling API\"\n\n    def build_config(self):\n        openai_function_models = [\n            \"gpt-4-turbo-preview\",\n            \"gpt-4-0125-preview\",\n            \"gpt-4-1106-preview\",\n            \"gpt-4-vision-preview\",\n            \"gpt-3.5-turbo-0125\",\n            \"gpt-3.5-turbo-1106\",\n        ]\n        return {\n            \"tools\": {\"display_name\": \"Tools\"},\n            \"memory\": {\"display_name\": \"Memory\"},\n            \"system_message\": {\"display_name\": \"System Message\"},\n            \"max_token_limit\": {\"display_name\": \"Max Token Limit\"},\n            \"model_name\": {\n                \"display_name\": \"Model Name\",\n                \"options\": openai_function_models,\n                \"value\": openai_function_models[0],\n            },\n            \"code\": {\"show\": False},\n            \"temperature\": {\n                \"display_name\": \"Temperature\",\n                \"value\": 0.2,\n                \"range_spec\": RangeSpec(min=0, max=2, step=0.1),\n            },\n        }\n\n    def build(\n        self,\n        model_name: str,\n        openai_api_key: str,\n        tools: List[Tool],\n        openai_api_base: Optional[str] = None,\n        memory: Optional[BaseMemory] = None,\n        system_message: Optional[SystemMessagePromptTemplate] = None,\n        max_token_limit: int = 2000,\n        temperature: float = 0.9,\n    ) -> AgentExecutor:\n        llm = ChatOpenAI(\n            model=model_name,\n            api_key=openai_api_key,\n            base_url=openai_api_base,\n            max_tokens=max_token_limit,\n            temperature=temperature,\n        )\n        if not memory:\n            memory_key = \"chat_history\"\n            memory = ConversationTokenBufferMemory(\n                memory_key=memory_key,\n                return_messages=True,\n                output_key=\"output\",\n                llm=llm,\n                max_token_limit=max_token_limit,\n            )\n        else:\n            memory_key = memory.memory_key  # type: ignore\n\n        _system_message = system_message or _get_default_system_message()\n        prompt = OpenAIFunctionsAgent.create_prompt(\n            system_message=_system_message,  # type: ignore\n            extra_prompt_messages=[MessagesPlaceholder(variable_name=memory_key)],\n        )\n        agent = OpenAIFunctionsAgent(\n            llm=llm,\n            tools=tools,\n            prompt=prompt,  # type: ignore\n        )\n        return AgentExecutor(\n            agent=agent,\n            tools=tools,  # type: ignore\n            memory=memory,\n            verbose=True,\n            return_intermediate_steps=True,\n            handle_parsing_errors=True,\n        )\n",
                  "fileTypes": [],
                  "file_path": "",
                  "password": false,
                  "name": "code",
                  "advanced": false,
                  "dynamic": true,
                  "info": "",
                  "title_case": true
                },
                "max_token_limit": {
                  "type": "int",
                  "required": true,
                  "placeholder": "",
                  "list": false,
                  "show": true,
                  "multiline": false,
                  "value": "2000",
                  "fileTypes": [],
                  "file_path": "",
                  "password": false,
                  "name": "max_token_limit",
                  "display_name": "Max Token Limit",
                  "advanced": false,
                  "dynamic": false,
                  "info": "",
                  "title_case": true
                },
                "model_name": {
                  "type": "str",
                  "required": true,
                  "placeholder": "",
                  "list": true,
                  "show": true,
                  "multiline": false,
                  "value": "gpt-4-turbo-preview",
                  "fileTypes": [],
                  "file_path": "",
                  "password": false,
                  "options": [
                    "gpt-4-turbo-preview",
                    "gpt-4-0125-preview",
                    "gpt-4-1106-preview",
                    "gpt-4-vision-preview",
                    "gpt-3.5-turbo-0125",
                    "gpt-3.5-turbo-1106"
                  ],
                  "name": "model_name",
                  "display_name": "Model Name",
                  "advanced": false,
                  "dynamic": false,
                  "info": "",
                  "title_case": true
                },
                "openai_api_base": {
                  "type": "str",
                  "required": false,
                  "placeholder": "",
                  "list": false,
                  "show": true,
                  "multiline": false,
                  "fileTypes": [],
                  "file_path": "",
                  "password": false,
                  "name": "openai_api_base",
                  "advanced": false,
                  "dynamic": false,
                  "info": "",
                  "title_case": true
                },
                "openai_api_key": {
                  "type": "str",
                  "required": true,
                  "placeholder": "",
                  "list": false,
                  "show": true,
                  "multiline": false,
                  "fileTypes": [],
                  "file_path": "",
                  "password": false,
                  "name": "openai_api_key",
                  "advanced": false,
                  "dynamic": false,
                  "info": "",
                  "title_case": true,
                  "value": "sk-PLACEHOLDER_API_KEY"
                },
                "temperature": {
                  "type": "float",
                  "required": true,
                  "placeholder": "",
                  "list": false,
                  "show": true,
                  "multiline": false,
                  "value": "0.2",
                  "fileTypes": [],
                  "file_path": "",
                  "password": false,
                  "name": "temperature",
                  "display_name": "Temperature",
                  "advanced": false,
                  "dynamic": false,
                  "info": "",
                  "rangeSpec": {
                    "min": 0,
                    "max": 2,
                    "step": 0.1
                  },
                  "title_case": true
                },
                "_type": "CustomComponent"
              },
              "description": "Conversational Agent that can use OpenAI's function calling API",
              "base_classes": [
                "Chain",
                "AgentExecutor"
              ],
              "display_name": "OpenAI Conversational Agent",
              "documentation": "",
              "custom_fields": {
                "model_name": null,
                "openai_api_key": null,
                "tools": null,
                "openai_api_base": null,
                "memory": null,
                "system_message": null,
                "max_token_limit": null,
                "temperature": null
              },
              "output_types": [
                "AgentExecutor"
              ],
              "field_formatters": {},
              "beta": true
            },
            "id": "AgentExecutor-rlara"
          },
          "selected": false,
          "width": 384,
          "height": 895,
          "dragging": false,
          "positionAbsolute": {
            "x": 2055.9949411548973,
            "y": 74.58211187412066
          }
        },
        {
          "id": "SystemMessagePromptTemplate-dmkev",
          "type": "genericNode",
          "position": {
            "x": 537.6622259237166,
            "y": 409.4572881404006
          },
          "data": {
            "type": "SystemMessagePromptTemplate",
            "node": {
              "template": {
                "additional_kwargs": {
                  "type": "dict",
                  "required": false,
                  "placeholder": "",
                  "list": false,
                  "show": false,
                  "multiline": false,
                  "fileTypes": [],
                  "password": false,
                  "name": "additional_kwargs",
                  "advanced": true,
                  "dynamic": true,
                  "info": "",
                  "title_case": true
                },
                "prompt": {
                  "type": "prompt",
                  "required": true,
                  "placeholder": "",
                  "list": true,
                  "show": true,
                  "multiline": true,
                  "value": "You are a helpful assistant with the following key directives:\n\n1. Your purpose  - assist users in finding and booking restaurants based on specific preferences and details provided by the user.\n2. Your user interaction_philosophy - empower users by providing clear information and confirming details at every step, ensuring a user-friendly and adaptable interaction experience. You \nhandle errors or misunderstandings by asking clarifying questions and allowing users to easily correct or update information.\n \nNow you need to use the state machine for OpenTable reservation system. For state machine to work\n# Identify Current State:\nAt each step of the conversation, use the context/history of user-agent interactions to determine the current state of the conversation. This could involve recognizing keywords, user intents, or specific information provided by the user.\n\n# Determine Applicable Transitions:\nBased on the current state, evaluate the conditions for each possible transition. This involves checking if the user's latest input or the accumulated context data satisfies the conditions to move to another state.\n\n# Execute State Tasks:\nPerform the tasks associated with the current state, as outlined in the state machine. This may include collecting information, providing responses, or confirming details with the user. At some stages before execution of task you can retrieve past mistakes to avoid them (using past_mistakes_tool).\n\n# Transition to the Next State:\nOnce a transition condition is met, move to the next appropriate state as dictated by the state machine. Update the conversation context to reflect this new state.\n\n# Handle Exceptions and Loops:\nIf the user's input does not clearly satisfy any transition condition, or if the input is outside the expected responses (e.g., a request to go back or cancel), handle these gracefully by providing appropriate responses and adjusting the state accordingly.\n\nHere is the state machine for OpenTable reservation system:\n\n### 1. **Gather Initial Request**\n**Task:** Prompt the user to start a reservation process by asking for either a specific restaurant or general preferences like cuisine, ambience, food, preferred dishes. Follow up by asking for location, date_time and party_size if the restaurant was not provided. If a restaurant name was provided only date time and party size are necessary. If a specific restaurant name is mentioned, confirm its validity using restaurant_name_tool.\n**Transition Conditions:**\n- **To Confirmation of Details:** If a specific restaurant is named with all details provided (i.e. date_time and party_size).\n- **To Extract Reservation Details:** If general preferences along with location, date_time, party_size are provided without a specific restaurant name.\n**Tools Available:** `get_current_time`, `past_mistakes_tool`, `restaurant_name_tool`\n\n### 2. **Extract Reservation Details**\n**Task:** Ask for detailed information required for reservation which might include date, time, party size, and any special requests or preferences.\n**Transition Conditions:**\n- **To Restaurant Search:** Once all necessary details are collected.\n- **To Confirmation of Details:** If a specific restaurant was initially named but more details are needed.\n**Tools Available:** `get_current_time`, `past_mistakes_tool`\n\n### 3. **Restaurant Search**\n**Task:** Utilize the restaurant_search_tool to generate a list of restaurants based on user preferences stated in their query. If the user has not specified any particular preferences about the dining experience beyond party size, location, and date_time, select the top two restaurants based on their ratings. From the output of the restaurant_search_tool, which includes summaries for each restaurant, select and prepare a concise summary for the top two choices. Emphasize aspects particularly relevant to the user's detailed or general preferences to help them understand why these options might be the best fit.\n**Transition Conditions:**\n- **To Select Restaurant:** Display search results and ask the user to choose a restaurant.\n- **To Extract Reservation Details:** If no suitable options are found, prompt to refine search criteria.\n**Tools Available:** `restaurant_search_tool`\n\n### 4. **Select Restaurant**\n**Task:** Present the list of restaurants from the search results, summarizing and outlining for every restaurant details that are related to the general preference that user query contained and let the user make a selection.\n**Transition Conditions:**\n- **To Confirmation of Details:** Once a restaurant is selected.\n- **To Restaurant Search:** If the user wants to see more options or change search criteria.\n\n### 5. **Confirmation of Details**\n**Task:** Summarize all details of the reservation in a JSON format. The JSON object should include the restaurant_name, party_size, and date_time (date_time in `YYYY-MM-DDTHH:MM` format). Ensure that JSON object with details of reservation is shown to the user for confirmation.\n**Transition Conditions:**\n- **To Complete the Reservation:** If all details are confirmed.\n- **To Modify Reservation Details:** If the user wants to change any detail.\n\n### 6. **Modify Reservation Details**\n**Task:** Allow changes to any of the reservation details like date, time, or party size.\n**Transition Conditions:**\n- **To Confirmation of Details:** After changes are made and need reconfirmation.\n- **To Restaurant Search:** If user changes preferences significantly enough to warrant a new search.\n\n### 7. **Complete the Reservation**\n**Task:** Check current date using `get_current_time` tool and deduce date of reservation. Finalize the reservation by sending details (i.e. restaurant_name, date_time, and party_size) to the restaurant_reservation_tool. Confirm back to the user with a booking confirmation.\n**Transition Conditions:**\n- **End:** Upon successful reservation.\n- **To Modify Reservation Details:** If finalization fails or the user wishes to alter the reservation at the last minute.\n**Tools Available:** `restaurant_reservation_tool`, `get_current_time`, `past_mistakes_tool`\n\n\n### Handling Unexpected Inputs\nIt's also important to handle unexpected inputs or requests from the user at any stage, which might involve:\n- Providing help or clarification.\n- Returning to a previous state if the user is confused or makes an error.\n- Terminating or restarting the process if the user wishes to cancel or start over.\n\nThis state machine design provides a robust framework for handling the complexities of a restaurant reservation system like OpenTable. It takes into account various user actions and system responses, ensuring flexibility and a good user experience throughout the reservation process.\n",
                  "fileTypes": [],
                  "password": false,
                  "name": "prompt",
                  "advanced": false,
                  "dynamic": true,
                  "info": "",
                  "title_case": true
                },
                "_type": "SystemMessagePromptTemplate"
              },
              "description": "System message prompt template.",
              "icon": null,
              "base_classes": [
                "SystemMessagePromptTemplate",
                "BaseMessagePromptTemplate",
                "_StringImageMessagePromptTemplate"
              ],
              "name": "",
              "display_name": "SystemMessagePromptTemplate",
              "documentation": "https://python.langchain.com/docs/modules/model_io/models/chat/how_to/prompts",
              "custom_fields": {
                "": []
              },
              "output_types": [],
              "full_path": null,
              "field_formatters": {},
              "beta": false,
              "error": null
            },
            "id": "SystemMessagePromptTemplate-dmkev",
            "description": "System message prompt template.",
            "display_name": "SystemMessagePromptTemplate"
          },
          "selected": false,
          "width": 384,
          "height": 281,
          "dragging": false,
          "positionAbsolute": {
            "x": 537.6622259237166,
            "y": 409.4572881404006
          }
        },
        {
          "id": "PythonFunctionTool-zoas5",
          "type": "genericNode",
          "position": {
            "x": -980.4134443539951,
            "y": 1166.6966929093687
          },
          "data": {
            "type": "PythonFunctionTool",
            "node": {
              "template": {
                "code": {
                  "type": "code",
                  "required": true,
                  "placeholder": "",
                  "list": false,
                  "show": true,
                  "multiline": true,
                  "value": "import json\n\n\ndef restaurant_reservation_function(parameters) -> str:\n    \"\"\"\n    Reserves restaurant and returns confirmation of the reservation \n    \"\"\"\n    params = json.loads(parameters)\n    return (\n        f\"Congratulations, restaurant {params.get('restaurant_name')} is reserved for {params.get('party_size')} people at {params.get('date_time')}\"\n    )\n",
                  "fileTypes": [],
                  "file_path": "",
                  "password": false,
                  "name": "code",
                  "advanced": false,
                  "dynamic": false,
                  "info": "",
                  "title_case": true
                },
                "description": {
                  "type": "str",
                  "required": true,
                  "placeholder": "",
                  "list": false,
                  "show": true,
                  "multiline": true,
                  "value": "restaurant reservation tool - allows to book the restaurant. Parameters to the tool are restaurant_name, date_time, party_size",
                  "fileTypes": [],
                  "file_path": "",
                  "password": false,
                  "name": "description",
                  "advanced": false,
                  "dynamic": false,
                  "info": "",
                  "title_case": true
                },
                "name": {
                  "type": "str",
                  "required": true,
                  "placeholder": "",
                  "list": false,
                  "show": true,
                  "multiline": false,
                  "value": "restaurant_reservation_tool",
                  "fileTypes": [],
                  "file_path": "",
                  "password": false,
                  "name": "name",
                  "advanced": false,
                  "dynamic": false,
                  "info": "",
                  "title_case": true
                },
                "return_direct": {
                  "type": "bool",
                  "required": true,
                  "placeholder": "",
                  "list": false,
                  "show": true,
                  "multiline": false,
                  "value": true,
                  "fileTypes": [],
                  "file_path": "",
                  "password": false,
                  "name": "return_direct",
                  "advanced": false,
                  "dynamic": false,
                  "info": "",
                  "title_case": true
                },
                "_type": "PythonFunctionTool"
              },
              "description": "Python function to be executed.",
              "base_classes": [
                "BaseTool",
                "Tool"
              ],
              "display_name": "PythonFunctionTool",
              "documentation": "",
              "custom_fields": {},
              "output_types": [],
              "field_formatters": {},
              "beta": false
            },
            "id": "PythonFunctionTool-zoas5"
          },
          "selected": false,
          "width": 384,
          "height": 537,
          "positionAbsolute": {
            "x": -980.4134443539951,
            "y": 1166.6966929093687
          },
          "dragging": false
        },
        {
          "id": "OpenAIEmbeddings-UExkq",
          "type": "genericNode",
          "position": {
            "x": -1387.0001236345906,
            "y": 2125.239874302798
          },
          "data": {
            "type": "OpenAIEmbeddings",
            "node": {
              "template": {
                "allowed_special": {
                  "type": "str",
                  "required": true,
                  "placeholder": "",
                  "list": true,
                  "show": true,
                  "multiline": false,
                  "value": [],
                  "fileTypes": [],
                  "file_path": "",
                  "password": false,
                  "name": "allowed_special",
                  "display_name": "Allowed Special",
                  "advanced": true,
                  "dynamic": false,
                  "info": "",
                  "title_case": true
                },
                "chunk_size": {
                  "type": "int",
                  "required": true,
                  "placeholder": "",
                  "list": false,
                  "show": true,
                  "multiline": false,
                  "value": 1000,
                  "fileTypes": [],
                  "file_path": "",
                  "password": false,
                  "name": "chunk_size",
                  "display_name": "Chunk Size",
                  "advanced": true,
                  "dynamic": false,
                  "info": "",
                  "title_case": true
                },
                "client": {
                  "type": "Any",
                  "required": false,
                  "placeholder": "",
                  "list": false,
                  "show": true,
                  "multiline": false,
                  "fileTypes": [],
                  "file_path": "",
                  "password": false,
                  "name": "client",
                  "display_name": "Client",
                  "advanced": true,
                  "dynamic": false,
                  "info": "",
                  "title_case": true
                },
                "code": {
                  "type": "code",
                  "required": true,
                  "placeholder": "",
                  "list": false,
                  "show": true,
                  "multiline": true,
                  "value": "from typing import Any, Callable, Dict, List, Optional, Union\n\nfrom langchain_openai.embeddings.base import OpenAIEmbeddings\nfrom axiestudio import CustomComponent\nfrom axiestudio.field_typing import NestedDict\nfrom pydantic.v1.types import SecretStr\n\n\nclass OpenAIEmbeddingsComponent(CustomComponent):\n    display_name = \"OpenAIEmbeddings\"\n    description = \"OpenAI embedding models\"\n\n    def build_config(self):\n        return {\n            \"allowed_special\": {\n                \"display_name\": \"Allowed Special\",\n                \"advanced\": True,\n                \"field_type\": \"str\",\n                \"is_list\": True,\n            },\n            \"default_headers\": {\n                \"display_name\": \"Default Headers\",\n                \"advanced\": True,\n                \"field_type\": \"dict\",\n            },\n            \"default_query\": {\n                \"display_name\": \"Default Query\",\n                \"advanced\": True,\n                \"field_type\": \"NestedDict\",\n            },\n            \"disallowed_special\": {\n                \"display_name\": \"Disallowed Special\",\n                \"advanced\": True,\n                \"field_type\": \"str\",\n                \"is_list\": True,\n            },\n            \"chunk_size\": {\"display_name\": \"Chunk Size\", \"advanced\": True},\n            \"client\": {\"display_name\": \"Client\", \"advanced\": True},\n            \"deployment\": {\"display_name\": \"Deployment\", \"advanced\": True},\n            \"embedding_ctx_length\": {\n                \"display_name\": \"Embedding Context Length\",\n                \"advanced\": True,\n            },\n            \"max_retries\": {\"display_name\": \"Max Retries\", \"advanced\": True},\n            \"model\": {\n                \"display_name\": \"Model\",\n                \"advanced\": False,\n                \"options\": [\"text-embedding-3-small\", \"text-embedding-3-large\", \"text-embedding-ada-002\"],\n            },\n            \"model_kwargs\": {\"display_name\": \"Model Kwargs\", \"advanced\": True},\n            \"openai_api_base\": {\"display_name\": \"OpenAI API Base\", \"password\": True, \"advanced\": True},\n            \"openai_api_key\": {\"display_name\": \"OpenAI API Key\", \"password\": True},\n            \"openai_api_type\": {\"display_name\": \"OpenAI API Type\", \"advanced\": True, \"password\": True},\n            \"openai_api_version\": {\n                \"display_name\": \"OpenAI API Version\",\n                \"advanced\": True,\n            },\n            \"openai_organization\": {\n                \"display_name\": \"OpenAI Organization\",\n                \"advanced\": True,\n            },\n            \"openai_proxy\": {\"display_name\": \"OpenAI Proxy\", \"advanced\": True},\n            \"request_timeout\": {\"display_name\": \"Request Timeout\", \"advanced\": True},\n            \"show_progress_bar\": {\n                \"display_name\": \"Show Progress Bar\",\n                \"advanced\": True,\n            },\n            \"skip_empty\": {\"display_name\": \"Skip Empty\", \"advanced\": True},\n            \"tiktoken_model_name\": {\"display_name\": \"TikToken Model Name\"},\n            \"tikToken_enable\": {\"display_name\": \"TikToken Enable\", \"advanced\": True},\n        }\n\n    def build(\n        self,\n        default_headers: Optional[Dict[str, str]] = None,\n        default_query: Optional[NestedDict] = {},\n        allowed_special: List[str] = [],\n        disallowed_special: List[str] = [\"all\"],\n        chunk_size: int = 1000,\n        client: Optional[Any] = None,\n        deployment: str = \"text-embedding-3-small\",\n        embedding_ctx_length: int = 8191,\n        max_retries: int = 6,\n        model: str = \"text-embedding-3-small\",\n        model_kwargs: NestedDict = {},\n        openai_api_base: Optional[str] = None,\n        openai_api_key: Optional[str] = \"\",\n        openai_api_type: Optional[str] = None,\n        openai_api_version: Optional[str] = None,\n        openai_organization: Optional[str] = None,\n        openai_proxy: Optional[str] = None,\n        request_timeout: Optional[float] = None,\n        show_progress_bar: bool = False,\n        skip_empty: bool = False,\n        tiktoken_enable: bool = True,\n        tiktoken_model_name: Optional[str] = None,\n    ) -> Union[OpenAIEmbeddings, Callable]:\n        # This is to avoid errors with Vector Stores (e.g Chroma)\n        if disallowed_special == [\"all\"]:\n            disallowed_special = \"all\"  # type: ignore\n\n        api_key = SecretStr(openai_api_key) if openai_api_key else None\n\n        return OpenAIEmbeddings(\n            tiktoken_enabled=tiktoken_enable,\n            default_headers=default_headers,\n            default_query=default_query,\n            allowed_special=set(allowed_special),\n            disallowed_special=\"all\",\n            chunk_size=chunk_size,\n            client=client,\n            deployment=deployment,\n            embedding_ctx_length=embedding_ctx_length,\n            max_retries=max_retries,\n            model=model,\n            model_kwargs=model_kwargs,\n            base_url=openai_api_base,\n            api_key=api_key,\n            openai_api_type=openai_api_type,\n            api_version=openai_api_version,\n            organization=openai_organization,\n            openai_proxy=openai_proxy,\n            timeout=request_timeout,\n            show_progress_bar=show_progress_bar,\n            skip_empty=skip_empty,\n            tiktoken_model_name=tiktoken_model_name,\n        )\n",
                  "fileTypes": [],
                  "file_path": "",
                  "password": false,
                  "name": "code",
                  "advanced": false,
                  "dynamic": true,
                  "info": "",
                  "title_case": true
                },
                "default_headers": {
                  "type": "dict",
                  "required": false,
                  "placeholder": "",
                  "list": false,
                  "show": true,
                  "multiline": false,
                  "fileTypes": [],
                  "file_path": "",
                  "password": false,
                  "name": "default_headers",
                  "display_name": "Default Headers",
                  "advanced": true,
                  "dynamic": false,
                  "info": "",
                  "title_case": true
                },
                "default_query": {
                  "type": "NestedDict",
                  "required": false,
                  "placeholder": "",
                  "list": false,
                  "show": true,
                  "multiline": false,
                  "value": {},
                  "fileTypes": [],
                  "file_path": "",
                  "password": false,
                  "name": "default_query",
                  "display_name": "Default Query",
                  "advanced": true,
                  "dynamic": false,
                  "info": "",
                  "title_case": true
                },
                "deployment": {
                  "type": "str",
                  "required": true,
                  "placeholder": "",
                  "list": false,
                  "show": true,
                  "multiline": false,
                  "value": "text-embedding-3-small",
                  "fileTypes": [],
                  "file_path": "",
                  "password": false,
                  "name": "deployment",
                  "display_name": "Deployment",
                  "advanced": true,
                  "dynamic": false,
                  "info": "",
                  "title_case": true
                },
                "disallowed_special": {
                  "type": "str",
                  "required": true,
                  "placeholder": "",
                  "list": true,
                  "show": true,
                  "multiline": false,
                  "value": [
                    "all"
                  ],
                  "fileTypes": [],
                  "file_path": "",
                  "password": false,
                  "name": "disallowed_special",
                  "display_name": "Disallowed Special",
                  "advanced": true,
                  "dynamic": false,
                  "info": "",
                  "title_case": true
                },
                "embedding_ctx_length": {
                  "type": "int",
                  "required": true,
                  "placeholder": "",
                  "list": false,
                  "show": true,
                  "multiline": false,
                  "value": 8191,
                  "fileTypes": [],
                  "file_path": "",
                  "password": false,
                  "name": "embedding_ctx_length",
                  "display_name": "Embedding Context Length",
                  "advanced": true,
                  "dynamic": false,
                  "info": "",
                  "title_case": true
                },
                "max_retries": {
                  "type": "int",
                  "required": true,
                  "placeholder": "",
                  "list": false,
                  "show": true,
                  "multiline": false,
                  "value": 6,
                  "fileTypes": [],
                  "file_path": "",
                  "password": false,
                  "name": "max_retries",
                  "display_name": "Max Retries",
                  "advanced": true,
                  "dynamic": false,
                  "info": "",
                  "title_case": true
                },
                "model": {
                  "type": "str",
                  "required": true,
                  "placeholder": "",
                  "list": true,
                  "show": true,
                  "multiline": false,
                  "value": "text-embedding-3-large",
                  "fileTypes": [],
                  "file_path": "",
                  "password": false,
                  "options": [
                    "text-embedding-3-small",
                    "text-embedding-3-large",
                    "text-embedding-ada-002"
                  ],
                  "name": "model",
                  "display_name": "Model",
                  "advanced": false,
                  "dynamic": false,
                  "info": "",
                  "title_case": true
                },
                "model_kwargs": {
                  "type": "NestedDict",
                  "required": true,
                  "placeholder": "",
                  "list": false,
                  "show": true,
                  "multiline": false,
                  "value": {},
                  "fileTypes": [],
                  "file_path": "",
                  "password": false,
                  "name": "model_kwargs",
                  "display_name": "Model Kwargs",
                  "advanced": true,
                  "dynamic": false,
                  "info": "",
                  "title_case": true
                },
                "openai_api_base": {
                  "type": "str",
                  "required": false,
                  "placeholder": "",
                  "list": false,
                  "show": true,
                  "multiline": false,
                  "fileTypes": [],
                  "file_path": "",
                  "password": true,
                  "name": "openai_api_base",
                  "display_name": "OpenAI API Base",
                  "advanced": true,
                  "dynamic": false,
                  "info": "",
                  "title_case": true,
                  "value": ""
                },
                "openai_api_key": {
                  "type": "str",
                  "required": false,
                  "placeholder": "",
                  "list": false,
                  "show": true,
                  "multiline": false,
                  "value": "",
                  "fileTypes": [],
                  "file_path": "",
                  "password": true,
                  "name": "openai_api_key",
                  "display_name": "OpenAI API Key",
                  "advanced": false,
                  "dynamic": false,
                  "info": "",
                  "title_case": true
                },
                "openai_api_type": {
                  "type": "str",
                  "required": false,
                  "placeholder": "",
                  "list": false,
                  "show": true,
                  "multiline": false,
                  "fileTypes": [],
                  "file_path": "",
                  "password": true,
                  "name": "openai_api_type",
                  "display_name": "OpenAI API Type",
                  "advanced": true,
                  "dynamic": false,
                  "info": "",
                  "title_case": true,
                  "value": ""
                },
                "openai_api_version": {
                  "type": "str",
                  "required": false,
                  "placeholder": "",
                  "list": false,
                  "show": true,
                  "multiline": false,
                  "fileTypes": [],
                  "file_path": "",
                  "password": false,
                  "name": "openai_api_version",
                  "display_name": "OpenAI API Version",
                  "advanced": true,
                  "dynamic": false,
                  "info": "",
                  "title_case": true
                },
                "openai_organization": {
                  "type": "str",
                  "required": false,
                  "placeholder": "",
                  "list": false,
                  "show": true,
                  "multiline": false,
                  "fileTypes": [],
                  "file_path": "",
                  "password": false,
                  "name": "openai_organization",
                  "display_name": "OpenAI Organization",
                  "advanced": true,
                  "dynamic": false,
                  "info": "",
                  "title_case": true
                },
                "openai_proxy": {
                  "type": "str",
                  "required": false,
                  "placeholder": "",
                  "list": false,
                  "show": true,
                  "multiline": false,
                  "fileTypes": [],
                  "file_path": "",
                  "password": false,
                  "name": "openai_proxy",
                  "display_name": "OpenAI Proxy",
                  "advanced": true,
                  "dynamic": false,
                  "info": "",
                  "title_case": true
                },
                "request_timeout": {
                  "type": "float",
                  "required": false,
                  "placeholder": "",
                  "list": false,
                  "show": true,
                  "multiline": false,
                  "fileTypes": [],
                  "file_path": "",
                  "password": false,
                  "name": "request_timeout",
                  "display_name": "Request Timeout",
                  "advanced": true,
                  "dynamic": false,
                  "info": "",
                  "rangeSpec": {
                    "min": -1,
                    "max": 1,
                    "step": 0.1
                  },
                  "title_case": true
                },
                "show_progress_bar": {
                  "type": "bool",
                  "required": true,
                  "placeholder": "",
                  "list": false,
                  "show": true,
                  "multiline": false,
                  "value": false,
                  "fileTypes": [],
                  "file_path": "",
                  "password": false,
                  "name": "show_progress_bar",
                  "display_name": "Show Progress Bar",
                  "advanced": true,
                  "dynamic": false,
                  "info": "",
                  "title_case": true
                },
                "skip_empty": {
                  "type": "bool",
                  "required": true,
                  "placeholder": "",
                  "list": false,
                  "show": true,
                  "multiline": false,
                  "value": false,
                  "fileTypes": [],
                  "file_path": "",
                  "password": false,
                  "name": "skip_empty",
                  "display_name": "Skip Empty",
                  "advanced": true,
                  "dynamic": false,
                  "info": "",
                  "title_case": true
                },
                "tiktoken_enable": {
                  "type": "bool",
                  "required": true,
                  "placeholder": "",
                  "list": false,
                  "show": true,
                  "multiline": false,
                  "value": true,
                  "fileTypes": [],
                  "file_path": "",
                  "password": false,
                  "name": "tiktoken_enable",
                  "advanced": false,
                  "dynamic": false,
                  "info": "",
                  "title_case": true
                },
                "tiktoken_model_name": {
                  "type": "str",
                  "required": false,
                  "placeholder": "",
                  "list": false,
                  "show": true,
                  "multiline": false,
                  "fileTypes": [],
                  "file_path": "",
                  "password": false,
                  "name": "tiktoken_model_name",
                  "display_name": "TikToken Model Name",
                  "advanced": false,
                  "dynamic": false,
                  "info": "",
                  "title_case": true
                },
                "_type": "CustomComponent"
              },
              "description": "OpenAI embedding models",
              "base_classes": [
                "Embeddings",
                "OpenAIEmbeddings",
                "Callable"
              ],
              "display_name": "OpenAIEmbeddings",
              "documentation": "",
              "custom_fields": {
                "default_headers": null,
                "default_query": null,
                "allowed_special": null,
                "disallowed_special": null,
                "chunk_size": null,
                "client": null,
                "deployment": null,
                "embedding_ctx_length": null,
                "max_retries": null,
                "model": null,
                "model_kwargs": null,
                "openai_api_base": null,
                "openai_api_key": null,
                "openai_api_type": null,
                "openai_api_version": null,
                "openai_organization": null,
                "openai_proxy": null,
                "request_timeout": null,
                "show_progress_bar": null,
                "skip_empty": null,
                "tiktoken_enable": null,
                "tiktoken_model_name": null
              },
              "output_types": [
                "OpenAIEmbeddings",
                "Callable"
              ],
              "field_formatters": {},
              "beta": true
            },
            "id": "OpenAIEmbeddings-UExkq"
          },
          "selected": false,
          "width": 384,
          "height": 635,
          "dragging": false,
          "positionAbsolute": {
            "x": -1387.0001236345906,
            "y": 2125.239874302798
          }
        },
        {
          "id": "Tool-48O0F",
          "type": "genericNode",
          "position": {
            "x": 996.5129832313512,
            "y": 1315.783571713832
          },
          "data": {
            "type": "Tool",
            "node": {
              "template": {
                "retriever": {
                  "type": "BaseRetriever",
                  "required": true,
                  "placeholder": "",
                  "list": false,
                  "show": true,
                  "multiline": false,
                  "fileTypes": [],
                  "file_path": "",
                  "password": false,
                  "name": "retriever",
                  "display_name": "Retriever",
                  "advanced": false,
                  "dynamic": false,
                  "info": "Retriever to interact with",
                  "title_case": true
                },
                "code": {
                  "type": "code",
                  "required": true,
                  "placeholder": "",
                  "list": false,
                  "show": true,
                  "multiline": true,
                  "value": "from langchain.tools.retriever import create_retriever_tool\n\nfrom axiestudio import CustomComponent\nfrom axiestudio.field_typing import BaseRetriever, Tool\n\n\nclass RetrieverToolComponent(CustomComponent):\n    display_name = \"RetrieverTool\"\n    description = \"Tool for interacting with retriever\"\n\n    def build_config(self):\n        return {\n            \"retriever\": {\n                \"display_name\": \"Retriever\",\n                \"info\": \"Retriever to interact with\",\n                \"type\": BaseRetriever,\n            },\n            \"name\": {\"display_name\": \"Name\", \"info\": \"Name of the tool\"},\n            \"description\": {\"display_name\": \"Description\", \"info\": \"Description of the tool\"},\n        }\n\n    def build(\n        self,\n        retriever: BaseRetriever,\n        name: str,\n        description: str,\n    ) -> Tool:\n        return create_retriever_tool(\n            retriever=retriever,\n            name=name,\n            description=description,\n        )\n",
                  "fileTypes": [],
                  "file_path": "",
                  "password": false,
                  "name": "code",
                  "advanced": false,
                  "dynamic": true,
                  "info": "",
                  "title_case": true
                },
                "description": {
                  "type": "str",
                  "required": true,
                  "placeholder": "",
                  "list": false,
                  "show": true,
                  "multiline": false,
                  "fileTypes": [],
                  "file_path": "",
                  "password": false,
                  "name": "description",
                  "display_name": "Description",
                  "advanced": false,
                  "dynamic": false,
                  "info": "Description of the tool",
                  "title_case": true,
                  "value": "Helps find restaurant from user query about restaurant preferences"
                },
                "name": {
                  "type": "str",
                  "required": true,
                  "placeholder": "",
                  "list": false,
                  "show": true,
                  "multiline": false,
                  "fileTypes": [],
                  "file_path": "",
                  "password": false,
                  "name": "name",
                  "display_name": "Name",
                  "advanced": false,
                  "dynamic": false,
                  "info": "Name of the tool",
                  "title_case": true,
                  "value": "restaurant_search_tool"
                },
                "_type": "CustomComponent"
              },
              "description": "Tool for interacting with retriever",
              "base_classes": [
                "BaseTool",
                "Tool"
              ],
              "display_name": "RetrieverTool",
              "documentation": "",
              "custom_fields": {
                "retriever": null,
                "name": null,
                "description": null
              },
              "output_types": [
                "Tool"
              ],
              "field_formatters": {},
              "beta": true
            },
            "id": "Tool-48O0F"
          },
          "selected": false,
          "width": 384,
          "height": 517,
          "positionAbsolute": {
            "x": 996.5129832313512,
            "y": 1315.783571713832
          },
          "dragging": false
        },
        {
          "id": "PythonFunctionTool-4bjH8",
          "type": "genericNode",
          "position": {
            "x": -973.0875895208826,
            "y": 287.60003222422677
          },
          "data": {
            "type": "PythonFunctionTool",
            "node": {
              "template": {
                "code": {
                  "type": "code",
                  "required": true,
                  "placeholder": "",
                  "list": false,
                  "show": true,
                  "multiline": true,
                  "value": "import datetime\n\n\ndef get_current_time(*args) -> str:\n    \"\"\"\n    returns current date \n    \"\"\"\n    return datetime.date.today().strftime('%Y-%m-%d')\n",
                  "fileTypes": [],
                  "file_path": "",
                  "password": false,
                  "name": "code",
                  "advanced": false,
                  "dynamic": false,
                  "info": "",
                  "title_case": true
                },
                "description": {
                  "type": "str",
                  "required": true,
                  "placeholder": "",
                  "list": false,
                  "show": true,
                  "multiline": true,
                  "value": "method to get current date",
                  "fileTypes": [],
                  "file_path": "",
                  "password": false,
                  "name": "description",
                  "advanced": false,
                  "dynamic": false,
                  "info": "",
                  "title_case": true
                },
                "name": {
                  "type": "str",
                  "required": true,
                  "placeholder": "",
                  "list": false,
                  "show": true,
                  "multiline": false,
                  "value": "get_current_date",
                  "fileTypes": [],
                  "file_path": "",
                  "password": false,
                  "name": "name",
                  "advanced": false,
                  "dynamic": false,
                  "info": "",
                  "title_case": true
                },
                "return_direct": {
                  "type": "bool",
                  "required": true,
                  "placeholder": "",
                  "list": false,
                  "show": true,
                  "multiline": false,
                  "value": false,
                  "fileTypes": [],
                  "file_path": "",
                  "password": false,
                  "name": "return_direct",
                  "advanced": false,
                  "dynamic": false,
                  "info": "",
                  "title_case": true
                },
                "_type": "PythonFunctionTool"
              },
              "description": "Python function to be executed.",
              "base_classes": [
                "BaseTool",
                "Tool"
              ],
              "display_name": "PythonFunctionTool",
              "documentation": "",
              "custom_fields": {},
              "output_types": [],
              "field_formatters": {},
              "beta": false
            },
            "id": "PythonFunctionTool-4bjH8"
          },
          "selected": false,
          "width": 384,
          "height": 537,
          "positionAbsolute": {
            "x": -973.0875895208826,
            "y": 287.60003222422677
          },
          "dragging": false
        },
        {
          "id": "CharacterTextSplitter-fVjsy",
          "type": "genericNode",
          "position": {
            "x": -742.8854227595605,
            "y": 3195.10075069594
          },
          "data": {
            "type": "CharacterTextSplitter",
            "node": {
              "template": {
                "documents": {
                  "type": "Document",
                  "required": true,
                  "placeholder": "",
                  "list": true,
                  "show": true,
                  "multiline": false,
                  "value": "",
                  "fileTypes": [],
                  "file_path": "",
                  "password": false,
                  "name": "documents",
                  "advanced": false,
                  "dynamic": false,
                  "info": "",
                  "title_case": true
                },
                "chunk_overlap": {
                  "type": "int",
                  "required": true,
                  "placeholder": "",
                  "list": false,
                  "show": true,
                  "multiline": false,
                  "value": "20",
                  "fileTypes": [],
                  "file_path": "",
                  "password": false,
                  "name": "chunk_overlap",
                  "display_name": "Chunk Overlap",
                  "advanced": false,
                  "dynamic": false,
                  "info": "",
                  "title_case": true
                },
                "chunk_size": {
                  "type": "int",
                  "required": true,
                  "placeholder": "",
                  "list": false,
                  "show": true,
                  "multiline": false,
                  "value": "3000",
                  "fileTypes": [],
                  "file_path": "",
                  "password": false,
                  "name": "chunk_size",
                  "display_name": "Chunk Size",
                  "advanced": false,
                  "dynamic": false,
                  "info": "",
                  "title_case": true
                },
                "separator": {
                  "type": "str",
                  "required": true,
                  "placeholder": "",
                  "list": false,
                  "show": true,
                  "multiline": false,
                  "value": "separator",
                  "fileTypes": [],
                  "file_path": "",
                  "password": false,
                  "name": "separator",
                  "display_name": "Separator",
                  "advanced": false,
                  "dynamic": false,
                  "info": "",
                  "title_case": true
                },
                "_type": "CharacterTextSplitter"
              },
              "description": "Splitting text that looks at characters.",
              "base_classes": [
                "Document"
              ],
              "display_name": "CharacterTextSplitter",
              "documentation": "https://python.langchain.com/docs/modules/data_connection/document_transformers/text_splitters/character_text_splitter",
              "custom_fields": {},
              "output_types": [
                "Document"
              ],
              "field_formatters": {},
              "beta": false
            },
            "id": "CharacterTextSplitter-fVjsy"
          },
          "selected": false,
          "width": 384,
          "height": 509,
          "positionAbsolute": {
            "x": -742.8854227595605,
            "y": 3195.10075069594
          },
          "dragging": false
        },
        {
          "id": "Chroma-70USl",
          "type": "genericNode",
          "position": {
            "x": 417.9314251973908,
            "y": 2885.102762925332
          },
          "data": {
            "type": "Chroma",
            "node": {
              "template": {
                "documents": {
                  "type": "Document",
                  "required": false,
                  "placeholder": "",
                  "list": true,
                  "show": true,
                  "multiline": false,
                  "fileTypes": [],
                  "file_path": "",
                  "password": false,
                  "name": "documents",
                  "display_name": "Documents",
                  "advanced": false,
                  "dynamic": false,
                  "info": "",
                  "title_case": true
                },
                "embedding": {
                  "type": "Embeddings",
                  "required": true,
                  "placeholder": "",
                  "list": false,
                  "show": true,
                  "multiline": false,
                  "fileTypes": [],
                  "file_path": "",
                  "password": false,
                  "name": "embedding",
                  "display_name": "Embedding",
                  "advanced": false,
                  "dynamic": false,
                  "info": "",
                  "title_case": true
                },
                "chroma_server_cors_allow_origins": {
                  "type": "str",
                  "required": false,
                  "placeholder": "",
                  "list": false,
                  "show": true,
                  "multiline": false,
                  "fileTypes": [],
                  "file_path": "",
                  "password": false,
                  "name": "chroma_server_cors_allow_origins",
                  "display_name": "Server CORS Allow Origins",
                  "advanced": true,
                  "dynamic": false,
                  "info": "",
                  "title_case": true
                },
                "chroma_server_grpc_port": {
                  "type": "int",
                  "required": false,
                  "placeholder": "",
                  "list": false,
                  "show": true,
                  "multiline": false,
                  "fileTypes": [],
                  "file_path": "",
                  "password": false,
                  "name": "chroma_server_grpc_port",
                  "display_name": "Server gRPC Port",
                  "advanced": true,
                  "dynamic": false,
                  "info": "",
                  "title_case": true
                },
                "chroma_server_host": {
                  "type": "str",
                  "required": false,
                  "placeholder": "",
                  "list": false,
                  "show": true,
                  "multiline": false,
                  "fileTypes": [],
                  "file_path": "",
                  "password": false,
                  "name": "chroma_server_host",
                  "display_name": "Server Host",
                  "advanced": true,
                  "dynamic": false,
                  "info": "",
                  "title_case": true
                },
                "chroma_server_port": {
                  "type": "int",
                  "required": false,
                  "placeholder": "",
                  "list": false,
                  "show": true,
                  "multiline": false,
                  "fileTypes": [],
                  "file_path": "",
                  "password": false,
                  "name": "chroma_server_port",
                  "display_name": "Server Port",
                  "advanced": true,
                  "dynamic": false,
                  "info": "",
                  "title_case": true
                },
                "chroma_server_ssl_enabled": {
                  "type": "bool",
                  "required": true,
                  "placeholder": "",
                  "list": false,
                  "show": true,
                  "multiline": false,
                  "value": false,
                  "fileTypes": [],
                  "file_path": "",
                  "password": false,
                  "name": "chroma_server_ssl_enabled",
                  "display_name": "Server SSL Enabled",
                  "advanced": true,
                  "dynamic": false,
                  "info": "",
                  "title_case": true
                },
                "code": {
                  "type": "code",
                  "required": true,
                  "placeholder": "",
                  "list": false,
                  "show": true,
                  "multiline": true,
                  "value": "from typing import List, Optional, Union\n\nimport chromadb  # type: ignore\nfrom langchain.embeddings.base import Embeddings\nfrom langchain.schema import BaseRetriever, Document\nfrom langchain_community.vectorstores import VectorStore\nfrom langchain_community.vectorstores.chroma import Chroma\nfrom axiestudio import CustomComponent\n\n\nclass ChromaComponent(CustomComponent):\n    \"\"\"\n    A custom component for implementing a Vector Store using Chroma.\n    \"\"\"\n\n    display_name: str = \"Chroma\"\n    description: str = \"Implementation of Vector Store using Chroma\"\n    documentation = \"https://python.langchain.com/docs/integrations/vectorstores/chroma\"\n    beta: bool = True\n\n    def build_config(self):\n        \"\"\"\n        Builds the configuration for the component.\n\n        Returns:\n        - dict: A dictionary containing the configuration options for the component.\n        \"\"\"\n        return {\n            \"collection_name\": {\"display_name\": \"Collection Name\", \"value\": \"axiestudio\"},\n            \"persist\": {\"display_name\": \"Persist\"},\n            \"persist_directory\": {\"display_name\": \"Persist Directory\"},\n            \"code\": {\"advanced\": True, \"display_name\": \"Code\"},\n            \"documents\": {\"display_name\": \"Documents\", \"is_list\": True},\n            \"embedding\": {\"display_name\": \"Embedding\"},\n            \"chroma_server_cors_allow_origins\": {\n                \"display_name\": \"Server CORS Allow Origins\",\n                \"advanced\": True,\n            },\n            \"chroma_server_host\": {\"display_name\": \"Server Host\", \"advanced\": True},\n            \"chroma_server_port\": {\"display_name\": \"Server Port\", \"advanced\": True},\n            \"chroma_server_grpc_port\": {\n                \"display_name\": \"Server gRPC Port\",\n                \"advanced\": True,\n            },\n            \"chroma_server_ssl_enabled\": {\n                \"display_name\": \"Server SSL Enabled\",\n                \"advanced\": True,\n            },\n        }\n\n    def build(\n        self,\n        collection_name: str,\n        persist: bool,\n        embedding: Embeddings,\n        chroma_server_ssl_enabled: bool,\n        persist_directory: Optional[str] = None,\n        documents: Optional[List[Document]] = None,\n        chroma_server_cors_allow_origins: Optional[str] = None,\n        chroma_server_host: Optional[str] = None,\n        chroma_server_port: Optional[int] = None,\n        chroma_server_grpc_port: Optional[int] = None,\n    ) -> Union[VectorStore, BaseRetriever]:\n        \"\"\"\n        Builds the Vector Store or BaseRetriever object.\n\n        Args:\n        - collection_name (str): The name of the collection.\n        - persist_directory (Optional[str]): The directory to persist the Vector Store to.\n        - chroma_server_ssl_enabled (bool): Whether to enable SSL for the Chroma server.\n        - persist (bool): Whether to persist the Vector Store or not.\n        - embedding (Optional[Embeddings]): The embeddings to use for the Vector Store.\n        - documents (Optional[Document]): The documents to use for the Vector Store.\n        - chroma_server_cors_allow_origins (Optional[str]): The CORS allow origins for the Chroma server.\n        - chroma_server_host (Optional[str]): The host for the Chroma server.\n        - chroma_server_port (Optional[int]): The port for the Chroma server.\n        - chroma_server_grpc_port (Optional[int]): The gRPC port for the Chroma server.\n\n        Returns:\n        - Union[VectorStore, BaseRetriever]: The Vector Store or BaseRetriever object.\n        \"\"\"\n\n        # Chroma settings\n        chroma_settings = None\n\n        if chroma_server_host is not None:\n            chroma_settings = chromadb.config.Settings(\n                chroma_server_cors_allow_origins=chroma_server_cors_allow_origins or None,\n                chroma_server_host=chroma_server_host,\n                chroma_server_port=chroma_server_port or None,\n                chroma_server_grpc_port=chroma_server_grpc_port or None,\n                chroma_server_ssl_enabled=chroma_server_ssl_enabled,\n            )\n\n        # If documents, then we need to create a Chroma instance using .from_documents\n        if documents is not None and embedding is not None:\n            if len(documents) == 0:\n                raise ValueError(\"If documents are provided, there must be at least one document.\")\n            return Chroma.from_documents(\n                documents=documents,  # type: ignore\n                persist_directory=persist_directory if persist else None,\n                collection_name=collection_name,\n                embedding=embedding,\n                client_settings=chroma_settings,\n            )\n\n        return Chroma(persist_directory=persist_directory, client_settings=chroma_settings)\n",
                  "fileTypes": [],
                  "file_path": "",
                  "password": false,
                  "name": "code",
                  "advanced": true,
                  "dynamic": true,
                  "info": "",
                  "title_case": true
                },
                "collection_name": {
                  "type": "str",
                  "required": true,
                  "placeholder": "",
                  "list": false,
                  "show": true,
                  "multiline": false,
                  "value": "past_mistakes",
                  "fileTypes": [],
                  "file_path": "",
                  "password": false,
                  "name": "collection_name",
                  "display_name": "Collection Name",
                  "advanced": false,
                  "dynamic": false,
                  "info": "",
                  "title_case": true
                },
                "persist": {
                  "type": "bool",
                  "required": true,
                  "placeholder": "",
                  "list": false,
                  "show": true,
                  "multiline": false,
                  "value": false,
                  "fileTypes": [],
                  "file_path": "",
                  "password": false,
                  "name": "persist",
                  "display_name": "Persist",
                  "advanced": false,
                  "dynamic": false,
                  "info": "",
                  "title_case": true
                },
                "persist_directory": {
                  "type": "str",
                  "required": false,
                  "placeholder": "",
                  "list": false,
                  "show": true,
                  "multiline": false,
                  "fileTypes": [],
                  "file_path": "",
                  "password": false,
                  "name": "persist_directory",
                  "display_name": "Persist Directory",
                  "advanced": false,
                  "dynamic": false,
                  "info": "",
                  "title_case": true
                },
                "_type": "CustomComponent"
              },
              "description": "Implementation of Vector Store using Chroma",
              "base_classes": [
                "VectorStore",
                "BaseRetriever"
              ],
              "display_name": "Chroma",
              "documentation": "https://python.langchain.com/docs/integrations/vectorstores/chroma",
              "custom_fields": {
                "collection_name": null,
                "persist": null,
                "embedding": null,
                "chroma_server_ssl_enabled": null,
                "persist_directory": null,
                "documents": null,
                "chroma_server_cors_allow_origins": null,
                "chroma_server_host": null,
                "chroma_server_port": null,
                "chroma_server_grpc_port": null
              },
              "output_types": [
                "VectorStore",
                "BaseRetriever"
              ],
              "field_formatters": {},
              "beta": true
            },
            "id": "Chroma-70USl"
          },
          "selected": false,
          "width": 384,
          "height": 555,
          "positionAbsolute": {
            "x": 417.9314251973908,
            "y": 2885.102762925332
          },
          "dragging": false
        },
        {
          "id": "TextLoader-ciWpH",
          "type": "genericNode",
          "position": {
            "x": -68.95346576186017,
            "y": 3749.749505719438
          },
          "data": {
            "type": "TextLoader",
            "node": {
              "template": {
                "file_path": {
                  "type": "file",
                  "required": true,
                  "placeholder": "",
                  "list": false,
                  "show": true,
                  "multiline": false,
                  "value": "",
                  "fileTypes": [
                    ".txt"
                  ],
                  "file_path": "/Users/amazaspshaumyan/Library/Caches/axiestudio/bce2d1af-6626-47c1-b1c8-8b5e56d3dc66/71a127e32e09fb43a35e48c29958c55ad2df00b9a1a67c96d0a3f7d1f2db198e.txt",
                  "password": false,
                  "name": "file_path",
                  "advanced": false,
                  "dynamic": false,
                  "info": "",
                  "title_case": true
                },
                "metadata": {
                  "type": "dict",
                  "required": false,
                  "placeholder": "",
                  "list": false,
                  "show": true,
                  "multiline": false,
                  "value": [
                    {
                      "mistakes": "None"
                    }
                  ],
                  "fileTypes": [],
                  "file_path": "",
                  "password": false,
                  "name": "metadata",
                  "display_name": "Metadata",
                  "advanced": false,
                  "dynamic": false,
                  "info": "",
                  "title_case": true
                },
                "_type": "TextLoader"
              },
              "description": "Load text file.",
              "base_classes": [
                "Document"
              ],
              "display_name": "TextLoader",
              "documentation": "https://python.langchain.com/docs/modules/data_connection/document_loaders/",
              "custom_fields": {},
              "output_types": [
                "Document"
              ],
              "field_formatters": {},
              "beta": false
            },
            "id": "TextLoader-ciWpH"
          },
          "selected": false,
          "width": 384,
          "height": 367,
          "positionAbsolute": {
            "x": -68.95346576186017,
            "y": 3749.749505719438
          },
          "dragging": false
        },
        {
          "id": "VectorStoreRetriever-nVACO",
          "type": "genericNode",
          "position": {
            "x": 974.3517286726301,
            "y": 2476.6427314052316
          },
          "data": {
            "type": "VectorStoreRetriever",
            "node": {
              "template": {
                "vectorstore": {
                  "type": "VectorStore",
                  "required": true,
                  "placeholder": "",
                  "list": false,
                  "show": true,
                  "multiline": false,
                  "fileTypes": [],
                  "file_path": "",
                  "password": false,
                  "name": "vectorstore",
                  "display_name": "Vector Store",
                  "advanced": false,
                  "dynamic": false,
                  "info": "",
                  "title_case": true
                },
                "code": {
                  "type": "code",
                  "required": true,
                  "placeholder": "",
                  "list": false,
                  "show": true,
                  "multiline": true,
                  "value": "from langchain_core.vectorstores import VectorStoreRetriever\n\nfrom axiestudio import CustomComponent\nfrom axiestudio.field_typing import VectorStore\n\n\nclass VectoStoreRetrieverComponent(CustomComponent):\n    display_name = \"VectorStore Retriever\"\n    description = \"A vector store retriever\"\n\n    def build_config(self):\n        return {\n            \"vectorstore\": {\"display_name\": \"Vector Store\", \"type\": VectorStore},\n        }\n\n    def build(self, vectorstore: VectorStore) -> VectorStoreRetriever:\n        return vectorstore.as_retriever()\n",
                  "fileTypes": [],
                  "file_path": "",
                  "password": false,
                  "name": "code",
                  "advanced": false,
                  "dynamic": true,
                  "info": "",
                  "title_case": true
                },
                "_type": "CustomComponent"
              },
              "description": "A vector store retriever",
              "base_classes": [
                "VectorStoreRetriever",
                "BaseRetriever"
              ],
              "display_name": "VectorStore Retriever",
              "documentation": "",
              "custom_fields": {
                "vectorstore": null
              },
              "output_types": [
                "VectorStoreRetriever"
              ],
              "field_formatters": {},
              "beta": true
            },
            "id": "VectorStoreRetriever-nVACO"
          },
          "selected": false,
          "width": 384,
          "height": 329,
          "positionAbsolute": {
            "x": 974.3517286726301,
            "y": 2476.6427314052316
          },
          "dragging": false
        },
        {
          "id": "Tool-NnjKb",
          "type": "genericNode",
          "position": {
            "x": 1487.1543336840978,
            "y": 1870.3184068576759
          },
          "data": {
            "type": "Tool",
            "node": {
              "template": {
                "retriever": {
                  "type": "BaseRetriever",
                  "required": true,
                  "placeholder": "",
                  "list": false,
                  "show": true,
                  "multiline": false,
                  "fileTypes": [],
                  "file_path": "",
                  "password": false,
                  "name": "retriever",
                  "display_name": "Retriever",
                  "advanced": false,
                  "dynamic": false,
                  "info": "Retriever to interact with",
                  "title_case": true
                },
                "code": {
                  "type": "code",
                  "required": true,
                  "placeholder": "",
                  "list": false,
                  "show": true,
                  "multiline": true,
                  "value": "from langchain.tools.retriever import create_retriever_tool\n\nfrom axiestudio import CustomComponent\nfrom axiestudio.field_typing import BaseRetriever, Tool\n\n\nclass RetrieverToolComponent(CustomComponent):\n    display_name = \"RetrieverTool\"\n    description = \"Tool for interacting with retriever\"\n\n    def build_config(self):\n        return {\n            \"retriever\": {\n                \"display_name\": \"Retriever\",\n                \"info\": \"Retriever to interact with\",\n                \"type\": BaseRetriever,\n            },\n            \"name\": {\"display_name\": \"Name\", \"info\": \"Name of the tool\"},\n            \"description\": {\"display_name\": \"Description\", \"info\": \"Description of the tool\"},\n        }\n\n    def build(\n        self,\n        retriever: BaseRetriever,\n        name: str,\n        description: str,\n    ) -> Tool:\n        return create_retriever_tool(\n            retriever=retriever,\n            name=name,\n            description=description,\n        )\n",
                  "fileTypes": [],
                  "file_path": "",
                  "password": false,
                  "name": "code",
                  "advanced": false,
                  "dynamic": true,
                  "info": "",
                  "title_case": true
                },
                "description": {
                  "type": "str",
                  "required": true,
                  "placeholder": "",
                  "list": false,
                  "show": true,
                  "multiline": false,
                  "fileTypes": [],
                  "file_path": "",
                  "password": false,
                  "name": "description",
                  "display_name": "Description",
                  "advanced": false,
                  "dynamic": false,
                  "info": "Description of the tool",
                  "title_case": true,
                  "value": "This tool allows to query past mistakes, it is useful at every stage of the conversation"
                },
                "name": {
                  "type": "str",
                  "required": true,
                  "placeholder": "",
                  "list": false,
                  "show": true,
                  "multiline": false,
                  "fileTypes": [],
                  "file_path": "",
                  "password": false,
                  "name": "name",
                  "display_name": "Name",
                  "advanced": false,
                  "dynamic": false,
                  "info": "Name of the tool",
                  "title_case": true,
                  "value": "previous_mistakes_tool"
                },
                "_type": "CustomComponent"
              },
              "description": "Tool for interacting with retriever",
              "base_classes": [
                "BaseTool",
                "Tool"
              ],
              "display_name": "RetrieverTool",
              "documentation": "",
              "custom_fields": {
                "retriever": null,
                "name": null,
                "description": null
              },
              "output_types": [
                "Tool"
              ],
              "field_formatters": {},
              "beta": true
            },
            "id": "Tool-NnjKb"
          },
          "selected": false,
          "width": 384,
          "height": 517,
          "positionAbsolute": {
            "x": 1487.1543336840978,
            "y": 1870.3184068576759
          },
          "dragging": false
        },
        {
          "id": "VectorStoreRetriever-G7oKw",
          "type": "genericNode",
          "position": {
            "x": 406.26173835634904,
            "y": 1775.9928322709397
          },
          "data": {
            "type": "VectorStoreRetriever",
            "node": {
              "template": {
                "vectorstore": {
                  "type": "VectorStore",
                  "required": true,
                  "placeholder": "",
                  "list": false,
                  "show": true,
                  "multiline": false,
                  "fileTypes": [],
                  "file_path": "",
                  "password": false,
                  "name": "vectorstore",
                  "display_name": "Vector Store",
                  "advanced": false,
                  "dynamic": false,
                  "info": "",
                  "title_case": true
                },
                "code": {
                  "type": "code",
                  "required": true,
                  "placeholder": "",
                  "list": false,
                  "show": true,
                  "multiline": true,
                  "value": "from langchain_core.vectorstores import VectorStoreRetriever\n\nfrom axiestudio import CustomComponent\nfrom axiestudio.field_typing import VectorStore\n\n\nclass VectoStoreRetrieverComponent(CustomComponent):\n    display_name = \"VectorStore Retriever\"\n    description = \"A vector store retriever\"\n\n    def build_config(self):\n        return {\n            \"vectorstore\": {\"display_name\": \"Vector Store\", \"type\": VectorStore},\n        }\n\n    def build(self, vectorstore: VectorStore) -> VectorStoreRetriever:\n        return vectorstore.as_retriever(search_kwargs={\"k\": 5})\n",
                  "fileTypes": [],
                  "file_path": "",
                  "password": false,
                  "name": "code",
                  "advanced": false,
                  "dynamic": true,
                  "info": "",
                  "title_case": true
                },
                "_type": "CustomComponent"
              },
              "description": "A vector store retriever",
              "base_classes": [
                "BaseRetriever",
                "VectorStoreRetriever"
              ],
              "display_name": "VectorStore Retriever",
              "documentation": "",
              "custom_fields": {
                "vectorstore": null
              },
              "output_types": [
                "VectorStoreRetriever"
              ],
              "field_formatters": {},
              "beta": true
            },
            "id": "VectorStoreRetriever-G7oKw",
            "description": "A vector store retriever",
            "display_name": "VectorStore Retriever"
          },
          "selected": false,
          "width": 384,
          "height": 329,
          "positionAbsolute": {
            "x": 406.26173835634904,
            "y": 1775.9928322709397
          },
          "dragging": false
        },
        {
          "id": "Chroma-vFe6o",
          "type": "genericNode",
          "position": {
            "x": -361.1374451280311,
            "y": 1999.961895120452
          },
          "data": {
            "type": "Chroma",
            "node": {
              "template": {
                "documents": {
                  "type": "Document",
                  "required": false,
                  "placeholder": "",
                  "list": true,
                  "show": true,
                  "multiline": false,
                  "fileTypes": [],
                  "file_path": "",
                  "password": false,
                  "name": "documents",
                  "display_name": "Documents",
                  "advanced": false,
                  "dynamic": false,
                  "info": "",
                  "title_case": true
                },
                "embedding": {
                  "type": "Embeddings",
                  "required": true,
                  "placeholder": "",
                  "list": false,
                  "show": true,
                  "multiline": false,
                  "fileTypes": [],
                  "file_path": "",
                  "password": false,
                  "name": "embedding",
                  "display_name": "Embedding",
                  "advanced": false,
                  "dynamic": false,
                  "info": "",
                  "title_case": true
                },
                "chroma_server_cors_allow_origins": {
                  "type": "str",
                  "required": false,
                  "placeholder": "",
                  "list": false,
                  "show": true,
                  "multiline": false,
                  "fileTypes": [],
                  "file_path": "",
                  "password": false,
                  "name": "chroma_server_cors_allow_origins",
                  "display_name": "Server CORS Allow Origins",
                  "advanced": true,
                  "dynamic": false,
                  "info": "",
                  "title_case": true
                },
                "chroma_server_grpc_port": {
                  "type": "int",
                  "required": false,
                  "placeholder": "",
                  "list": false,
                  "show": true,
                  "multiline": false,
                  "fileTypes": [],
                  "file_path": "",
                  "password": false,
                  "name": "chroma_server_grpc_port",
                  "display_name": "Server gRPC Port",
                  "advanced": true,
                  "dynamic": false,
                  "info": "",
                  "title_case": true
                },
                "chroma_server_host": {
                  "type": "str",
                  "required": false,
                  "placeholder": "",
                  "list": false,
                  "show": true,
                  "multiline": false,
                  "fileTypes": [],
                  "file_path": "",
                  "password": false,
                  "name": "chroma_server_host",
                  "display_name": "Server Host",
                  "advanced": true,
                  "dynamic": false,
                  "info": "",
                  "title_case": true
                },
                "chroma_server_port": {
                  "type": "int",
                  "required": false,
                  "placeholder": "",
                  "list": false,
                  "show": true,
                  "multiline": false,
                  "fileTypes": [],
                  "file_path": "",
                  "password": false,
                  "name": "chroma_server_port",
                  "display_name": "Server Port",
                  "advanced": true,
                  "dynamic": false,
                  "info": "",
                  "title_case": true
                },
                "chroma_server_ssl_enabled": {
                  "type": "bool",
                  "required": true,
                  "placeholder": "",
                  "list": false,
                  "show": true,
                  "multiline": false,
                  "value": false,
                  "fileTypes": [],
                  "file_path": "",
                  "password": false,
                  "name": "chroma_server_ssl_enabled",
                  "display_name": "Server SSL Enabled",
                  "advanced": true,
                  "dynamic": false,
                  "info": "",
                  "title_case": true
                },
                "code": {
                  "type": "code",
                  "required": true,
                  "placeholder": "",
                  "list": false,
                  "show": true,
                  "multiline": true,
                  "value": "from typing import List, Optional, Union\n\nimport chromadb  # type: ignore\nfrom langchain.embeddings.base import Embeddings\nfrom langchain.schema import BaseRetriever, Document\nfrom langchain_community.vectorstores import VectorStore\nfrom langchain_community.vectorstores.chroma import Chroma\nfrom axiestudio import CustomComponent\n\n\nclass ChromaComponent(CustomComponent):\n    \"\"\"\n    A custom component for implementing a Vector Store using Chroma.\n    \"\"\"\n\n    display_name: str = \"Chroma\"\n    description: str = \"Implementation of Vector Store using Chroma\"\n    documentation = \"https://python.langchain.com/docs/integrations/vectorstores/chroma\"\n    beta: bool = True\n\n    def build_config(self):\n        \"\"\"\n        Builds the configuration for the component.\n\n        Returns:\n        - dict: A dictionary containing the configuration options for the component.\n        \"\"\"\n        return {\n            \"collection_name\": {\"display_name\": \"Collection Name\", \"value\": \"axiestudio\"},\n            \"persist\": {\"display_name\": \"Persist\"},\n            \"persist_directory\": {\"display_name\": \"Persist Directory\"},\n            \"code\": {\"advanced\": True, \"display_name\": \"Code\"},\n            \"documents\": {\"display_name\": \"Documents\", \"is_list\": True},\n            \"embedding\": {\"display_name\": \"Embedding\"},\n            \"chroma_server_cors_allow_origins\": {\n                \"display_name\": \"Server CORS Allow Origins\",\n                \"advanced\": True,\n            },\n            \"chroma_server_host\": {\"display_name\": \"Server Host\", \"advanced\": True},\n            \"chroma_server_port\": {\"display_name\": \"Server Port\", \"advanced\": True},\n            \"chroma_server_grpc_port\": {\n                \"display_name\": \"Server gRPC Port\",\n                \"advanced\": True,\n            },\n            \"chroma_server_ssl_enabled\": {\n                \"display_name\": \"Server SSL Enabled\",\n                \"advanced\": True,\n            },\n        }\n\n    def build(\n        self,\n        collection_name: str,\n        persist: bool,\n        embedding: Embeddings,\n        chroma_server_ssl_enabled: bool,\n        persist_directory: Optional[str] = None,\n        documents: Optional[List[Document]] = None,\n        chroma_server_cors_allow_origins: Optional[str] = None,\n        chroma_server_host: Optional[str] = None,\n        chroma_server_port: Optional[int] = None,\n        chroma_server_grpc_port: Optional[int] = None,\n    ) -> Union[VectorStore, BaseRetriever]:\n        \"\"\"\n        Builds the Vector Store or BaseRetriever object.\n\n        Args:\n        - collection_name (str): The name of the collection.\n        - persist_directory (Optional[str]): The directory to persist the Vector Store to.\n        - chroma_server_ssl_enabled (bool): Whether to enable SSL for the Chroma server.\n        - persist (bool): Whether to persist the Vector Store or not.\n        - embedding (Optional[Embeddings]): The embeddings to use for the Vector Store.\n        - documents (Optional[Document]): The documents to use for the Vector Store.\n        - chroma_server_cors_allow_origins (Optional[str]): The CORS allow origins for the Chroma server.\n        - chroma_server_host (Optional[str]): The host for the Chroma server.\n        - chroma_server_port (Optional[int]): The port for the Chroma server.\n        - chroma_server_grpc_port (Optional[int]): The gRPC port for the Chroma server.\n\n        Returns:\n        - Union[VectorStore, BaseRetriever]: The Vector Store or BaseRetriever object.\n        \"\"\"\n\n        # Chroma settings\n        chroma_settings = None\n\n        if chroma_server_host is not None:\n            chroma_settings = chromadb.config.Settings(\n                chroma_server_cors_allow_origins=chroma_server_cors_allow_origins or None,\n                chroma_server_host=chroma_server_host,\n                chroma_server_port=chroma_server_port or None,\n                chroma_server_grpc_port=chroma_server_grpc_port or None,\n                chroma_server_ssl_enabled=chroma_server_ssl_enabled,\n            )\n\n        # If documents, then we need to create a Chroma instance using .from_documents\n        if documents is not None and embedding is not None:\n            if len(documents) == 0:\n                raise ValueError(\"If documents are provided, there must be at least one document.\")\n            return Chroma.from_documents(\n                documents=documents,  # type: ignore\n                persist_directory=persist_directory if persist else None,\n                collection_name=collection_name,\n                embedding=embedding,\n                client_settings=chroma_settings,\n            )\n\n        return Chroma(persist_directory=persist_directory, client_settings=chroma_settings)\n",
                  "fileTypes": [],
                  "file_path": "",
                  "password": false,
                  "name": "code",
                  "advanced": true,
                  "dynamic": true,
                  "info": "",
                  "title_case": true
                },
                "collection_name": {
                  "type": "str",
                  "required": true,
                  "placeholder": "",
                  "list": false,
                  "show": true,
                  "multiline": false,
                  "value": "axiestudio",
                  "fileTypes": [],
                  "file_path": "",
                  "password": false,
                  "name": "collection_name",
                  "display_name": "Collection Name",
                  "advanced": false,
                  "dynamic": false,
                  "info": "",
                  "title_case": true
                },
                "persist": {
                  "type": "bool",
                  "required": true,
                  "placeholder": "",
                  "list": false,
                  "show": true,
                  "multiline": false,
                  "value": false,
                  "fileTypes": [],
                  "file_path": "",
                  "password": false,
                  "name": "persist",
                  "display_name": "Persist",
                  "advanced": false,
                  "dynamic": false,
                  "info": "",
                  "title_case": true
                },
                "persist_directory": {
                  "type": "str",
                  "required": false,
                  "placeholder": "",
                  "list": false,
                  "show": true,
                  "multiline": false,
                  "fileTypes": [],
                  "file_path": "",
                  "password": false,
                  "name": "persist_directory",
                  "display_name": "Persist Directory",
                  "advanced": false,
                  "dynamic": false,
                  "info": "",
                  "title_case": true
                },
                "_type": "CustomComponent"
              },
              "description": "Implementation of Vector Store using Chroma",
              "base_classes": [
                "VectorStore",
                "BaseRetriever"
              ],
              "display_name": "Chroma",
              "documentation": "https://python.langchain.com/docs/integrations/vectorstores/chroma",
              "custom_fields": {
                "collection_name": null,
                "persist": null,
                "embedding": null,
                "chroma_server_ssl_enabled": null,
                "persist_directory": null,
                "documents": null,
                "chroma_server_cors_allow_origins": null,
                "chroma_server_host": null,
                "chroma_server_port": null,
                "chroma_server_grpc_port": null
              },
              "output_types": [
                "VectorStore",
                "BaseRetriever"
              ],
              "field_formatters": {},
              "beta": true
            },
            "id": "Chroma-vFe6o"
          },
          "selected": false,
          "width": 384,
          "height": 555,
          "positionAbsolute": {
            "x": -361.1374451280311,
            "y": 1999.961895120452
          },
          "dragging": false
        },
        {
          "id": "Document-DATKy",
          "type": "genericNode",
          "position": {
            "x": -1394.6587875764462,
            "y": 3224.0016188277673
          },
          "data": {
            "type": "Document",
            "node": {
              "template": {
                "file_path": {
                  "type": "file",
                  "required": true,
                  "placeholder": "",
                  "list": false,
                  "show": true,
                  "multiline": false,
                  "fileTypes": [
                    "json",
                    "txt",
                    "csv",
                    "jsonl",
                    "html",
                    "htm",
                    "conllu",
                    "enex",
                    "msg",
                    "pdf",
                    "srt",
                    "eml",
                    "md",
                    "pptx",
                    "docx"
                  ],
                  "file_path": "/Users/amazaspshaumyan/Library/Caches/axiestudio/bce2d1af-6626-47c1-b1c8-8b5e56d3dc66/6a53e672a924ed42b60c8741e2b90532793a2929aaee1011dec54408da7ec55b.txt",
                  "password": false,
                  "name": "file_path",
                  "display_name": "File Path",
                  "advanced": false,
                  "dynamic": false,
                  "info": "",
                  "title_case": true,
                  "value": ""
                },
                "code": {
                  "type": "code",
                  "required": true,
                  "placeholder": "",
                  "list": false,
                  "show": true,
                  "multiline": true,
                  "value": "from langchain_core.documents import Document\nfrom axiestudio import CustomComponent\nfrom axiestudio.utils.constants import LOADERS_INFO\n\n\nclass FileLoaderComponent(CustomComponent):\n    display_name: str = \"File Loader\"\n    description: str = \"Generic File Loader\"\n    beta = True\n\n    def build_config(self):\n        loader_options = [\"Automatic\"] + [loader_info[\"name\"] for loader_info in LOADERS_INFO]\n\n        file_types = []\n        suffixes = []\n\n        for loader_info in LOADERS_INFO:\n            if \"allowedTypes\" in loader_info:\n                file_types.extend(loader_info[\"allowedTypes\"])\n                suffixes.extend([f\".{ext}\" for ext in loader_info[\"allowedTypes\"]])\n\n        return {\n            \"file_path\": {\n                \"display_name\": \"File Path\",\n                \"required\": True,\n                \"field_type\": \"file\",\n                \"file_types\": [\n                    \"json\",\n                    \"txt\",\n                    \"csv\",\n                    \"jsonl\",\n                    \"html\",\n                    \"htm\",\n                    \"conllu\",\n                    \"enex\",\n                    \"msg\",\n                    \"pdf\",\n                    \"srt\",\n                    \"eml\",\n                    \"md\",\n                    \"pptx\",\n                    \"docx\",\n                ],\n                \"suffixes\": [\n                    \".json\",\n                    \".txt\",\n                    \".csv\",\n                    \".jsonl\",\n                    \".html\",\n                    \".htm\",\n                    \".conllu\",\n                    \".enex\",\n                    \".msg\",\n                    \".pdf\",\n                    \".srt\",\n                    \".eml\",\n                    \".md\",\n                    \".pptx\",\n                    \".docx\",\n                ],\n                # \"file_types\" : file_types,\n                # \"suffixes\": suffixes,\n            },\n            \"loader\": {\n                \"display_name\": \"Loader\",\n                \"is_list\": True,\n                \"required\": True,\n                \"options\": loader_options,\n                \"value\": \"Automatic\",\n            },\n            \"code\": {\"show\": False},\n        }\n\n    def build(self, file_path: str, loader: str) -> Document:\n        file_type = file_path.split(\".\")[-1]\n\n        # Mapeie o nome do loader selecionado para suas informações\n        selected_loader_info = None\n        for loader_info in LOADERS_INFO:\n            if loader_info[\"name\"] == loader:\n                selected_loader_info = loader_info\n                break\n\n        if selected_loader_info is None and loader != \"Automatic\":\n            raise ValueError(f\"Loader {loader} not found in the loader info list\")\n\n        if loader == \"Automatic\":\n            # Determine o loader automaticamente com base na extensão do arquivo\n            default_loader_info = None\n            for info in LOADERS_INFO:\n                if \"defaultFor\" in info and file_type in info[\"defaultFor\"]:\n                    default_loader_info = info\n                    break\n\n            if default_loader_info is None:\n                raise ValueError(f\"No default loader found for file type: {file_type}\")\n\n            selected_loader_info = default_loader_info\n        if isinstance(selected_loader_info, dict):\n            loader_import: str = selected_loader_info[\"import\"]\n        else:\n            raise ValueError(f\"Loader info for {loader} is not a dict\\nLoader info:\\n{selected_loader_info}\")\n        module_name, class_name = loader_import.rsplit(\".\", 1)\n\n        try:\n            # Importe o loader dinamicamente\n            loader_module = __import__(module_name, fromlist=[class_name])\n            loader_instance = getattr(loader_module, class_name)\n        except ImportError as e:\n            raise ValueError(f\"Loader {loader} could not be imported\\nLoader info:\\n{selected_loader_info}\") from e\n\n        result = loader_instance(file_path=file_path)\n        return result.load()\n",
                  "fileTypes": [],
                  "file_path": "",
                  "password": false,
                  "name": "code",
                  "advanced": false,
                  "dynamic": true,
                  "info": "",
                  "title_case": true
                },
                "loader": {
                  "type": "str",
                  "required": true,
                  "placeholder": "",
                  "list": true,
                  "show": true,
                  "multiline": false,
                  "value": "Text (.txt)",
                  "fileTypes": [],
                  "file_path": "",
                  "password": false,
                  "options": [
                    "Automatic",
                    "Airbyte JSON (.jsonl)",
                    "JSON (.json)",
                    "BeautifulSoup4 HTML (.html, .htm)",
                    "CSV (.csv)",
                    "CoNLL-U (.conllu)",
                    "EverNote (.enex)",
                    "Facebook Chat (.json)",
                    "Outlook Message (.msg)",
                    "PyPDF (.pdf)",
                    "Subtitle (.str)",
                    "Text (.txt)",
                    "Unstructured Email (.eml)",
                    "Unstructured HTML (.html, .htm)",
                    "Unstructured Markdown (.md)",
                    "Unstructured PowerPoint (.pptx)",
                    "Unstructured Word (.docx)"
                  ],
                  "name": "loader",
                  "display_name": "Loader",
                  "advanced": false,
                  "dynamic": false,
                  "info": "",
                  "title_case": true
                },
                "_type": "CustomComponent"
              },
              "description": "Generic File Loader",
              "base_classes": [
                "Document"
              ],
              "display_name": "File Loader",
              "documentation": "",
              "custom_fields": {
                "file_path": null,
                "loader": null
              },
              "output_types": [
                "Document"
              ],
              "field_formatters": {},
              "beta": true
            },
            "id": "Document-DATKy"
          },
          "selected": false,
          "width": 384,
          "height": 457,
          "positionAbsolute": {
            "x": -1394.6587875764462,
            "y": 3224.0016188277673
          },
          "dragging": false
        },
        {
          "id": "PythonFunctionTool-wdYwS",
          "type": "genericNode",
          "position": {
            "x": -227.8403626844044,
            "y": 125.63045346795093
          },
          "data": {
            "type": "PythonFunctionTool",
            "node": {
              "template": {
                "code": {
                  "type": "code",
                  "required": true,
                  "placeholder": "",
                  "list": false,
                  "show": true,
                  "multiline": true,
                  "value": "import json\n\n\n\n\n\ndef get_restaurant_names(*args) -> str:\n    \"\"\"This is a default python function that returns the input text\"\"\"\n    return \"\"\"[\n 'Wayfare Tavern',\n 'Gold Mirror Italian Restaurant',\n 'Krua Thai - San Francisco',\n 'Taksim',\n 'The Barnes Restaurant and Bar',\n 'The Rotunda at Neiman Marcus - San Francisco',\n 'Tacolicious - Mission District',\n 'Ti Piacera',\n \"Perry's Union Street\",\n 'Barbary Coast Lounge',\n 'The Barrel Room - San Francisco',\n 'Cafe Bastille',\n 'Blind Butcher',\n 'Hard Knox Cafe on 3rd Street',\n 'Fiorella Sunset',\n 'Ristobar',\n 'BAIA',\n 'BISTRO 888',\n 'Osha Thai Embarcadero',\n 'E&O Kitchen and Bar',\n 'Seven Square Taproom - The Clancy Autograph Collection',\n 'Tacos La Neta - San Francisco',\n 'Gentilly',\n 'Auto-NA-CW-PI-BUDGET- Test',\n 'Opaque - Dining In The Dark - Permanently Closed',\n 'Trinity',\n 'Barbacco',\n 'La Mar Bar',\n 'Sushi Hon',\n 'Outer Orbit',\n 'Cracked & Battered Potrero Hill',\n 'Bocconcino',\n 'Mamanoko',\n 'La Bande',\n 'La Connessa',\n 'Nisei',\n 'The Progress',\n \"Tallio's Coffee & Tea\",\n 'Causwells',\n 'Spiazzo Ristorante',\n 'Waterbar',\n 'The Waterfront Restaurant and Cafe',\n 'B44',\n 'Jaranita',\n 'Resolute',\n 'Piroo',\n 'Little Baobab',\n 'Biriani House',\n 'Guest Center - iPad Manual 1',\n 'Spruce',\n 'Hayes Street Grill',\n 'Caffe Fiore - San Francisco',\n 'Hinata Sushi',\n \"Luisa's Restaurant Wine bar since 1959\",\n 'Intimo Restaurante',\n 'Players Sports Grill & Arcade',\n 'bota tapas and paella bar',\n 'The Garden Court - Luxury Collection',\n 'Hyde Street Seafood House & Raw Bar',\n 'Uva Enoteca',\n 'Bagatella',\n 'Tratto - San Francisco',\n 'KUSAKABE',\n 'DACHA Kitchen & Bar',\n 'Pizzeria Delfina - Pacific Heights',\n 'Khamsa Restaurant',\n 'Trestle',\n \"Pa'ina Restaurant and Bar\",\n 'Tonga Room & Hurricane Bar - Fairmont San Francisco',\n 'HK Lounge Bistro',\n 'The Old Clam House',\n 'One Market Restaurant',\n 'New Delhi Restaurant',\n 'Ristorante Milano',\n 'Le Colonial - SF',\n 'grace',\n 'Fresca at Irving Street',\n 'Violet’s',\n \"Miller's Rest\",\n 'NightJar by Nightbird',\n 'Gardenias',\n 'Bazille - Nordstrom San Francisco Centre',\n 'Los Amigos Salvadoran Restaurant - Castro',\n 'Mariposas',\n 'Bissap Baobab',\n 'Fusion Dumpling',\n 'Farmhouse Kitchen Thai at Portola Music Festival',\n 'Son & Garden - San Francisco',\n 'California Fish Market Restaurant',\n 'Camino Alto',\n 'Richmond Republic Draught House',\n 'Bansang',\n 'The Third Floor',\n 'Gary Danko',\n \"Fior D'Italia\",\n 'Okaeri Japanese Bistro',\n 'Kokkari Estiatorio',\n 'Trace',\n 'Wizards & Wands',\n \"L'Ottavo - San Francisco\",\n 'Pro - Elisa Livreri - Test US',\n 'OpenTable HQ Kitchen Area',\n 'Pro - Becky Geggatt - Test US',\n 'Pro - Andrew Johnston - Test US',\n 'Mobile Bistro - Credit Card',\n 'Mona Lisa Mare e Monti',\n 'Lao Table',\n \"Voodoo Love's Incantations\",\n 'Mili Wine Bar',\n 'Perbacco',\n 'Mission Bay Wine & Cheese',\n 'MKT Restaurant and Bar',\n 'Aliment',\n 'Tosca Café',\n 'Komaaj Mazze Wine Bar',\n 'BIX',\n 'Frances',\n 'Pier 23 Cafe',\n 'LaLe Mediterranean & Turkish Restaurant',\n 'Toy Soldier',\n 'Sociale - San Francisco',\n 'Corzetti',\n 'The Anchovy Bar',\n 'Ula Restaurant & Tapas Bar',\n 'Hakashi Japanese Sushi Bar & Grill',\n 'New Belgium Brewpub San Francisco',\n 'Absinthe Brasserie and Bar - SF',\n 'The Patio',\n 'Boulevard',\n 'Z & Y Peking Duck',\n 'Alegrias Food from Spain',\n 'Hardwood Bar & Smokery',\n 'Nob Hill Club at the Mark Hopkins',\n 'Local Kitchen & Wine Merchant',\n 'Jang Soo BBQ',\n 'Biscuits and Blues',\n 'Convivium Enoteca',\n 'La Folie - Permanently Closed',\n 'Presidio Kebab',\n 'The Red Window',\n 'Palm House',\n 'Cafe Mystique',\n \"McCormick & Kuleto's Seafood Restaurant\",\n 'Nightbird',\n 'Chotto Matte San Francisco',\n 'Cafe Tiramisu',\n 'Abrazo',\n 'Lupa Trattoria',\n 'Lark',\n 'North Box Restaurant',\n 'Isa',\n 'Foreign Cinema',\n 'Andiamo In Banca',\n 'The Vault Steakhouse',\n 'Canela Bistro & Wine Bar',\n '5A5',\n 'Florio',\n 'Vico Cavone',\n 'Per Diem - Financial District',\n 'Octavia',\n 'La Société Bar & Café',\n \"Cesario's\",\n \"O' by Claude Le Tohic\",\n 'Niku Steakhouse',\n \"Shelby's Rooftop\",\n 'Four Kings',\n \"Scoma's Fisherman's Wharf\",\n 'ANZU',\n 'Fiorella Clement',\n 'North Beach Restaurant',\n \"Mr. Digby's\",\n '54 Mint',\n 'Rooftop at 25 Lusk',\n 'Nakama Sushi - San Francisco',\n 'The Dorian',\n 'SOMA Restaurant & Bar',\n 'jumbro GC- Test',\n 'Sisterita',\n \"'Napizza\",\n \"Bambino's Ristorante\",\n 'NOVY',\n 'Itria',\n 'Colombini Italian Cafe & Bistro - Nob Hill Hotel',\n 'Top of the Mark',\n 'Bubba Gump - San Francisco',\n 'Lost and Found',\n 'Cold Drinks Bar',\n 'COQUETA - San Francisco',\n 'Salt & Straw - Hayes',\n 'El Nuevo Frutilandia',\n 'FANG',\n 'Angler San Francisco',\n 'Kothai Republic',\n 'Birch & Rye',\n 'Aquitaine - San Francisco',\n 'Taco Rouge',\n 'Rise Over Run',\n 'Sato Omakase Private',\n 'Magnolia Brewing - Haight',\n 'Indian Oven',\n 'India Clay Oven Restaurant and Bar - Richmond District',\n 'Cafe Zoetrope',\n 'Teakwood',\n 'Delfina Restaurant',\n 'Bella Trattoria',\n 'La Mar Cocina Peruana',\n 'Sato Omakase',\n 'Mobile Bistro - POP',\n 'Blue Whale Restaurant & Lounge',\n 'Cracked & Battered Marina',\n 'A16 - San Francisco',\n 'The Palm Court at RH San Francisco',\n 'Lolinda',\n 'Sushi Sato',\n 'Tower Salon - The Westin St. Francis',\n 'JooDang',\n 'Franciscan Crab Restaurant',\n 'Sunset Reservoir Brewing Company',\n 'Jackson Fillmore Trattoria',\n 'La Ciccia',\n 'The Check-In Lounge',\n \"Leo's Oyster Bar\",\n 'Chapeau',\n 'Sens Restaurant',\n 'Salt & Straw - Fillmore',\n 'Starlite',\n \"L'Mida\",\n 'Bacco Ristorante',\n 'Aphotic',\n 'Tsar Nicoulai Caviar Cafe',\n 'Pacific Catch - Sunset District',\n 'Sushi Shio',\n 'La Mediterranee',\n 'Harborview Restaurant & Bar',\n 'Gyu-Kaku - San Francisco',\n 'Barbara Pinseria',\n 'EPIC Steak',\n 'Dumpling Time Thrive City',\n 'Elena Mediterranean Cuisine',\n 'ONE65 Bistro',\n \"Yuebo's noodle shop- Test\",\n 'Blue Plate',\n 'Los Amigos Salvadoran Restaurant - Valencia',\n 'Barnzu',\n 'Slanted Door',\n 'Che Fico San Francisco',\n 'The Matterhorn Restaurant and Bakery',\n 'Prik Hom',\n \"Jasper's Corner Tap and Kitchen\",\n \"L'Ardoise\",\n 'Wilder SF',\n 'Mr. Tipple’s Jazz Club',\n 'Troya',\n 'Zevi Café & Bistro',\n 'Laurel Court Restaurant & Bar - Fairmont San Francisco',\n 'The Cavalier',\n 'Fogo de Chao - San Francisco',\n 'Basil Canteen @ 11th Street',\n 'Sake Bomb',\n 'Fish & Farm',\n 'Red Tavern',\n 'Manzoni',\n 'Alamo Square Seafood Grill',\n 'Campton Place Bar & Bistro',\n 'A16 Popup at SF FOG Fair',\n 'Yank Sing - Stevenson Street',\n 'Venga Group Onboarding 1- Test',\n 'Sacred Taco',\n 'Benihana - San Francisco, CA',\n 'The Tipsy Pig',\n 'Ideale',\n 'Mathilde French Bistro',\n 'Uccello Lounge',\n 'Palio',\n 'Estiatorio Ornos a Michael Mina Restaurant San Francisco',\n 'Matador - San Francisco',\n 'Fare Play',\n 'Aziza',\n 'Savor Cafe',\n 'Villon',\n 'Hed',\n 'Montesacro Marina',\n 'Bellota',\n 'Terzo',\n 'Berber',\n 'Greens Restaurant',\n 'Cultivar Ghirardelli Square Wine & Kitchen',\n 'Park Tavern',\n 'Maruya',\n \"Caitlin's Cafe\",\n 'Pro - Gregory Golphin - Test US',\n 'Le Central',\n 'Okane',\n \"Monk's Kettle\",\n 'Catch - San Francisco',\n 'Back to Back',\n '3rd Cousin',\n 'Lokma',\n 'International Smoke San Francisco',\n 'Nopa - San Francisco',\n 'Dancing Yak',\n 'Hard Rock Cafe - San Francisco',\n 'Willkommen',\n 'Osso Steakhouse',\n 'Gola',\n '¡Chao Pescao!',\n 'Il Borgo',\n 'Bistro Ember',\n \"Mastro's Steakhouse - San Francisco\",\n 'Cultivar',\n 'Marlowe',\n \"Morton's The Steakhouse - San Francisco\",\n 'Amarena',\n 'Mobile Bistro - Specials',\n 'Communications - Core Test',\n 'GuestCenter -Test- Nicholas Burnett',\n \"Rose's Cafe\",\n 'Doppio Zero - San Francisco',\n \"Alexander's Steakhouse - SF\",\n 'Cassava',\n 'Per Diem - Transit Center',\n 'Astra',\n 'Balboa Cafe - SF',\n 'Zuni Cafe',\n 'The Empress by Boon',\n 'Yank Sing - Rincon Center',\n 'Memento SF',\n 'Tuba Restaurant',\n 'Dark Bar',\n 'Black Hammer Brewing',\n 'Experiences - PI- Test',\n 'BrewVino, SF',\n 'Mochica',\n 'Amber India - San Francisco',\n 'Credo',\n 'Alora',\n 'The Post Room',\n 'Golden Crab House',\n 'Dunya',\n \"Original Joe's - San Francisco\",\n 'La Sarrasine',\n 'Presidio Social Club',\n 'Tacolicious - Marina',\n 'Cocotte',\n 'Palmers Tavern',\n \"Izzy's Steaks & Chops - San Francisco\",\n 'Level III',\n 'Heritage Restaurant Bar',\n 'Farmhouse Kitchen Thai Cuisine - San Francisco',\n 'Destapas SF',\n 'B-Side',\n \"Popi's Oysterette\",\n 'Zingari Ristorante e Jazz Caffè',\n 'Pabu Izakaya San Francisco',\n \"Historic John's Grill\",\n 'Curbside Cafe',\n \"Joel's Steakhouse - Test\",\n \"Feinstein's\",\n 'Clay Oven Indian Restaurant - West Portal',\n 'Venga Group Onboarding 2- Test',\n 'Mr. East Kitchen',\n 'B Star',\n 'Z & Y Restaurant',\n 'Prelude at the Opera House - Lower Level',\n 'Cote Ouest',\n 'Acquolina',\n 'AFICI',\n 'Chou Chou Bistro',\n \"Luisa's On Guerrero\",\n 'Kitchen Istanbul',\n 'Members Only',\n 'Barcha',\n 'Cable 55',\n 'Noosh',\n 'Cafe Claude',\n 'Elements Bar at ONE65',\n 'Bartlett Hall',\n 'Sessions at the Presidio',\n 'Urban Putt San Francisco',\n 'Chili House',\n 'Besharam',\n 'Curio',\n 'Pazzia',\n 'The Fly Trap',\n 'Dirty Habit',\n 'AsiaSF - Spectacular Shows & Dining',\n 'Sushi Hashiri',\n 'Rosemary & Pine',\n 'Spork Breakfast & Brunch',\n 'Hakkasan - San Francisco',\n 'Eight Tables by George Chen',\n 'Otoro Sushi',\n 'Dragon Horse',\n 'Spice of America',\n 'Mourad',\n '1849 Bistro + Lounge',\n 'Dobbs Ferry Restaurant - Permanently Closed',\n 'Bistro Central Parc',\n 'Indie Wine & Beer Bar',\n 'Paprika',\n 'Fiorella Polk',\n 'Prospect',\n 'North India Restaurant',\n 'Roka Akor - San Francisco',\n 'Roti Indian Bistro - San Francisco',\n 'Piqueos',\n 'Seven Hills',\n 'Ace Wasabi Rock-N-Roll Sushi',\n 'Frascati',\n 'Yakiniku Shodai',\n 'Elephant Sushi Hayes Valley',\n 'Tia Margarita',\n 'Bouche',\n \"Bobo's\",\n 'House of Prime Rib',\n 'Black Cat Jazz Supper Club',\n 'Linden & Laguna',\n 'Oraan Thai',\n 'Echigo Home Cook',\n \"Rocco's Cafe\",\n 'Monte’s Restaurant & Bar',\n 'Pane e Vino Trattoria',\n 'Base Camp',\n 'Guest Center - iOS/Mobile Auto',\n 'Chambers Eat + Drink',\n 'Fable - SF',\n \"Cioppino's\",\n 'Bistro Boudin',\n 'Miller & Lux',\n 'Arabian Nights',\n 'State Bird Provisions',\n 'Noe Indian Cuisine',\n \"Perry's - Embarcadero\",\n 'Ozumo - San Francisco',\n 'AKIKOS',\n 'STK - San Francisco',\n 'Dalida',\n 'Boho',\n 'Collina',\n \"Chouquet's\",\n 'LELEKA',\n 'Orafo at Four Seasons Embarcadero',\n 'Wako Japanese Restaurant',\n 'Clay Oven on Haight',\n 'The Blue Light',\n 'The Grotto',\n 'Shiji POS - Test',\n 'Burma Love Downtown',\n 'The Harlequin',\n 'Tartine Manufactory - San Francisco',\n 'Starbelly',\n 'Cafe de la Presse',\n \"The Tailor's Son\",\n 'Gambit Lounge',\n \"Harris'\",\n 'Sorella',\n 'Serafina SF',\n 'China Live',\n \"Garibaldi's on Presidio\",\n 'Fermentation Lab Japantown',\n 'Ballast Point Mission Bay',\n 'Bistro Organico',\n 'The Vault Garden',\n 'Castro Indian Restaurant & Bar',\n 'Sushi Hakko',\n 'Caffe Macaroni',\n \"Charmaine's Rooftop Lounge\",\n 'Firefly Restaurant',\n 'Montesacro SOMA',\n 'Hard Knox Cafe on Clement Street',\n \"Marianne's\",\n 'Live Sushi Bar',\n 'Uma Casa',\n 'Pied Piper',\n \"Elena's\",\n 'Eclipse Kitchen and Bar',\n 'Ciccino'    \n]\"\"\"",
                  "fileTypes": [],
                  "file_path": "",
                  "password": false,
                  "name": "code",
                  "advanced": false,
                  "dynamic": false,
                  "info": "",
                  "title_case": true
                },
                "description": {
                  "type": "str",
                  "required": true,
                  "placeholder": "",
                  "list": false,
                  "show": true,
                  "multiline": true,
                  "value": "tool that returns all restaurant names in the area",
                  "fileTypes": [],
                  "file_path": "",
                  "password": false,
                  "name": "description",
                  "advanced": false,
                  "dynamic": false,
                  "info": "",
                  "title_case": true
                },
                "name": {
                  "type": "str",
                  "required": true,
                  "placeholder": "",
                  "list": false,
                  "show": true,
                  "multiline": false,
                  "value": "get_restaurant_name",
                  "fileTypes": [],
                  "file_path": "",
                  "password": false,
                  "name": "name",
                  "advanced": false,
                  "dynamic": false,
                  "info": "",
                  "title_case": true
                },
                "return_direct": {
                  "type": "bool",
                  "required": true,
                  "placeholder": "",
                  "list": false,
                  "show": true,
                  "multiline": false,
                  "value": false,
                  "fileTypes": [],
                  "file_path": "",
                  "password": false,
                  "name": "return_direct",
                  "advanced": false,
                  "dynamic": false,
                  "info": "",
                  "title_case": true
                },
                "_type": "PythonFunctionTool"
              },
              "description": "Python function to be executed.",
              "base_classes": [
                "BaseTool",
                "Tool"
              ],
              "display_name": "PythonFunctionTool",
              "documentation": "",
              "custom_fields": {},
              "output_types": [],
              "field_formatters": {},
              "beta": false
            },
            "id": "PythonFunctionTool-wdYwS"
          },
          "selected": true,
          "width": 384,
          "height": 537,
          "positionAbsolute": {
            "x": -227.8403626844044,
            "y": 125.63045346795093
          },
          "dragging": false
        }
      ],
      "edges": [
        {
          "source": "ConversationBufferMemory-CseqN",
          "sourceHandle": "{œbaseClassesœ:[œBaseMemoryœ,œBaseChatMemoryœ,œConversationBufferMemoryœ],œdataTypeœ:œConversationBufferMemoryœ,œidœ:œConversationBufferMemory-CseqNœ}",
          "target": "AgentExecutor-rlara",
          "targetHandle": "{œfieldNameœ:œmemoryœ,œidœ:œAgentExecutor-rlaraœ,œinputTypesœ:null,œtypeœ:œBaseMemoryœ}",
          "data": {
            "targetHandle": {
              "fieldName": "memory",
              "id": "AgentExecutor-rlara",
              "inputTypes": null,
              "type": "BaseMemory"
            },
            "sourceHandle": {
              "baseClasses": [
                "BaseMemory",
                "BaseChatMemory",
                "ConversationBufferMemory"
              ],
              "dataType": "ConversationBufferMemory",
              "id": "ConversationBufferMemory-CseqN"
            }
          },
          "style": {
            "stroke": "#555"
          },
          "className": "stroke-gray-900  stroke-connection",
          "animated": false,
          "id": "reactflow__edge-ConversationBufferMemory-CseqN{œbaseClassesœ:[œBaseMemoryœ,œBaseChatMemoryœ,œConversationBufferMemoryœ],œdataTypeœ:œConversationBufferMemoryœ,œidœ:œConversationBufferMemory-CseqNœ}-AgentExecutor-rlara{œfieldNameœ:œmemoryœ,œidœ:œAgentExecutor-rlaraœ,œinputTypesœ:null,œtypeœ:œBaseMemoryœ}"
        },
        {
          "source": "SystemMessagePromptTemplate-dmkev",
          "sourceHandle": "{œbaseClassesœ:[œSystemMessagePromptTemplateœ,œBaseMessagePromptTemplateœ,œ_StringImageMessagePromptTemplateœ],œdataTypeœ:œSystemMessagePromptTemplateœ,œidœ:œSystemMessagePromptTemplate-dmkevœ}",
          "target": "AgentExecutor-rlara",
          "targetHandle": "{œfieldNameœ:œsystem_messageœ,œidœ:œAgentExecutor-rlaraœ,œinputTypesœ:null,œtypeœ:œSystemMessagePromptTemplateœ}",
          "data": {
            "targetHandle": {
              "fieldName": "system_message",
              "id": "AgentExecutor-rlara",
              "inputTypes": null,
              "type": "SystemMessagePromptTemplate"
            },
            "sourceHandle": {
              "baseClasses": [
                "SystemMessagePromptTemplate",
                "BaseMessagePromptTemplate",
                "_StringImageMessagePromptTemplate"
              ],
              "dataType": "SystemMessagePromptTemplate",
              "id": "SystemMessagePromptTemplate-dmkev"
            }
          },
          "style": {
            "stroke": "#555"
          },
          "className": "stroke-gray-900  stroke-connection",
          "animated": false,
          "id": "reactflow__edge-SystemMessagePromptTemplate-dmkev{œbaseClassesœ:[œSystemMessagePromptTemplateœ,œBaseMessagePromptTemplateœ,œ_StringImageMessagePromptTemplateœ],œdataTypeœ:œSystemMessagePromptTemplateœ,œidœ:œSystemMessagePromptTemplate-dmkevœ}-AgentExecutor-rlara{œfieldNameœ:œsystem_messageœ,œidœ:œAgentExecutor-rlaraœ,œinputTypesœ:null,œtypeœ:œSystemMessagePromptTemplateœ}",
          "selected": false
        },
        {
          "source": "PythonFunctionTool-zoas5",
          "sourceHandle": "{œbaseClassesœ:[œBaseToolœ,œToolœ],œdataTypeœ:œPythonFunctionToolœ,œidœ:œPythonFunctionTool-zoas5œ}",
          "target": "AgentExecutor-rlara",
          "targetHandle": "{œfieldNameœ:œtoolsœ,œidœ:œAgentExecutor-rlaraœ,œinputTypesœ:null,œtypeœ:œToolœ}",
          "data": {
            "targetHandle": {
              "fieldName": "tools",
              "id": "AgentExecutor-rlara",
              "inputTypes": null,
              "type": "Tool"
            },
            "sourceHandle": {
              "baseClasses": [
                "BaseTool",
                "Tool"
              ],
              "dataType": "PythonFunctionTool",
              "id": "PythonFunctionTool-zoas5"
            }
          },
          "style": {
            "stroke": "#555"
          },
          "className": "stroke-gray-900  stroke-connection",
          "animated": false,
          "id": "reactflow__edge-PythonFunctionTool-zoas5{œbaseClassesœ:[œBaseToolœ,œToolœ],œdataTypeœ:œPythonFunctionToolœ,œidœ:œPythonFunctionTool-zoas5œ}-AgentExecutor-rlara{œfieldNameœ:œtoolsœ,œidœ:œAgentExecutor-rlaraœ,œinputTypesœ:null,œtypeœ:œToolœ}"
        },
        {
          "source": "Tool-48O0F",
          "sourceHandle": "{œbaseClassesœ:[œBaseToolœ,œToolœ],œdataTypeœ:œToolœ,œidœ:œTool-48O0Fœ}",
          "target": "AgentExecutor-rlara",
          "targetHandle": "{œfieldNameœ:œtoolsœ,œidœ:œAgentExecutor-rlaraœ,œinputTypesœ:null,œtypeœ:œToolœ}",
          "data": {
            "targetHandle": {
              "fieldName": "tools",
              "id": "AgentExecutor-rlara",
              "inputTypes": null,
              "type": "Tool"
            },
            "sourceHandle": {
              "baseClasses": [
                "BaseTool",
                "Tool"
              ],
              "dataType": "Tool",
              "id": "Tool-48O0F"
            }
          },
          "style": {
            "stroke": "#555"
          },
          "className": "stroke-gray-900  stroke-connection",
          "animated": false,
          "id": "reactflow__edge-Tool-48O0F{œbaseClassesœ:[œBaseToolœ,œToolœ],œdataTypeœ:œToolœ,œidœ:œTool-48O0Fœ}-AgentExecutor-rlara{œfieldNameœ:œtoolsœ,œidœ:œAgentExecutor-rlaraœ,œinputTypesœ:null,œtypeœ:œToolœ}"
        },
        {
          "source": "PythonFunctionTool-4bjH8",
          "sourceHandle": "{œbaseClassesœ:[œBaseToolœ,œToolœ],œdataTypeœ:œPythonFunctionToolœ,œidœ:œPythonFunctionTool-4bjH8œ}",
          "target": "AgentExecutor-rlara",
          "targetHandle": "{œfieldNameœ:œtoolsœ,œidœ:œAgentExecutor-rlaraœ,œinputTypesœ:null,œtypeœ:œToolœ}",
          "data": {
            "targetHandle": {
              "fieldName": "tools",
              "id": "AgentExecutor-rlara",
              "inputTypes": null,
              "type": "Tool"
            },
            "sourceHandle": {
              "baseClasses": [
                "BaseTool",
                "Tool"
              ],
              "dataType": "PythonFunctionTool",
              "id": "PythonFunctionTool-4bjH8"
            }
          },
          "style": {
            "stroke": "#555"
          },
          "className": "stroke-gray-900  stroke-connection",
          "animated": false,
          "id": "reactflow__edge-PythonFunctionTool-4bjH8{œbaseClassesœ:[œBaseToolœ,œToolœ],œdataTypeœ:œPythonFunctionToolœ,œidœ:œPythonFunctionTool-4bjH8œ}-AgentExecutor-rlara{œfieldNameœ:œtoolsœ,œidœ:œAgentExecutor-rlaraœ,œinputTypesœ:null,œtypeœ:œToolœ}"
        },
        {
          "source": "TextLoader-ciWpH",
          "sourceHandle": "{œbaseClassesœ:[œDocumentœ],œdataTypeœ:œTextLoaderœ,œidœ:œTextLoader-ciWpHœ}",
          "target": "Chroma-70USl",
          "targetHandle": "{œfieldNameœ:œdocumentsœ,œidœ:œChroma-70USlœ,œinputTypesœ:null,œtypeœ:œDocumentœ}",
          "data": {
            "targetHandle": {
              "fieldName": "documents",
              "id": "Chroma-70USl",
              "inputTypes": null,
              "type": "Document"
            },
            "sourceHandle": {
              "baseClasses": [
                "Document"
              ],
              "dataType": "TextLoader",
              "id": "TextLoader-ciWpH"
            }
          },
          "style": {
            "stroke": "#555"
          },
          "className": "stroke-gray-900  stroke-connection",
          "animated": false,
          "id": "reactflow__edge-TextLoader-ciWpH{œbaseClassesœ:[œDocumentœ],œdataTypeœ:œTextLoaderœ,œidœ:œTextLoader-ciWpHœ}-Chroma-70USl{œfieldNameœ:œdocumentsœ,œidœ:œChroma-70USlœ,œinputTypesœ:null,œtypeœ:œDocumentœ}"
        },
        {
          "source": "OpenAIEmbeddings-UExkq",
          "sourceHandle": "{œbaseClassesœ:[œEmbeddingsœ,œOpenAIEmbeddingsœ,œCallableœ],œdataTypeœ:œOpenAIEmbeddingsœ,œidœ:œOpenAIEmbeddings-UExkqœ}",
          "target": "Chroma-70USl",
          "targetHandle": "{œfieldNameœ:œembeddingœ,œidœ:œChroma-70USlœ,œinputTypesœ:null,œtypeœ:œEmbeddingsœ}",
          "data": {
            "targetHandle": {
              "fieldName": "embedding",
              "id": "Chroma-70USl",
              "inputTypes": null,
              "type": "Embeddings"
            },
            "sourceHandle": {
              "baseClasses": [
                "Embeddings",
                "OpenAIEmbeddings",
                "Callable"
              ],
              "dataType": "OpenAIEmbeddings",
              "id": "OpenAIEmbeddings-UExkq"
            }
          },
          "style": {
            "stroke": "#555"
          },
          "className": "stroke-gray-900  stroke-connection",
          "animated": false,
          "id": "reactflow__edge-OpenAIEmbeddings-UExkq{œbaseClassesœ:[œEmbeddingsœ,œOpenAIEmbeddingsœ,œCallableœ],œdataTypeœ:œOpenAIEmbeddingsœ,œidœ:œOpenAIEmbeddings-UExkqœ}-Chroma-70USl{œfieldNameœ:œembeddingœ,œidœ:œChroma-70USlœ,œinputTypesœ:null,œtypeœ:œEmbeddingsœ}"
        },
        {
          "source": "Chroma-70USl",
          "sourceHandle": "{œbaseClassesœ:[œVectorStoreœ,œBaseRetrieverœ],œdataTypeœ:œChromaœ,œidœ:œChroma-70USlœ}",
          "target": "VectorStoreRetriever-nVACO",
          "targetHandle": "{œfieldNameœ:œvectorstoreœ,œidœ:œVectorStoreRetriever-nVACOœ,œinputTypesœ:null,œtypeœ:œVectorStoreœ}",
          "data": {
            "targetHandle": {
              "fieldName": "vectorstore",
              "id": "VectorStoreRetriever-nVACO",
              "inputTypes": null,
              "type": "VectorStore"
            },
            "sourceHandle": {
              "baseClasses": [
                "VectorStore",
                "BaseRetriever"
              ],
              "dataType": "Chroma",
              "id": "Chroma-70USl"
            }
          },
          "style": {
            "stroke": "#555"
          },
          "className": "stroke-gray-900  stroke-connection",
          "animated": false,
          "id": "reactflow__edge-Chroma-70USl{œbaseClassesœ:[œVectorStoreœ,œBaseRetrieverœ],œdataTypeœ:œChromaœ,œidœ:œChroma-70USlœ}-VectorStoreRetriever-nVACO{œfieldNameœ:œvectorstoreœ,œidœ:œVectorStoreRetriever-nVACOœ,œinputTypesœ:null,œtypeœ:œVectorStoreœ}"
        },
        {
          "source": "VectorStoreRetriever-nVACO",
          "sourceHandle": "{œbaseClassesœ:[œVectorStoreRetrieverœ,œBaseRetrieverœ],œdataTypeœ:œVectorStoreRetrieverœ,œidœ:œVectorStoreRetriever-nVACOœ}",
          "target": "Tool-NnjKb",
          "targetHandle": "{œfieldNameœ:œretrieverœ,œidœ:œTool-NnjKbœ,œinputTypesœ:null,œtypeœ:œBaseRetrieverœ}",
          "data": {
            "targetHandle": {
              "fieldName": "retriever",
              "id": "Tool-NnjKb",
              "inputTypes": null,
              "type": "BaseRetriever"
            },
            "sourceHandle": {
              "baseClasses": [
                "VectorStoreRetriever",
                "BaseRetriever"
              ],
              "dataType": "VectorStoreRetriever",
              "id": "VectorStoreRetriever-nVACO"
            }
          },
          "style": {
            "stroke": "#555"
          },
          "className": "stroke-gray-900  stroke-connection",
          "animated": false,
          "id": "reactflow__edge-VectorStoreRetriever-nVACO{œbaseClassesœ:[œVectorStoreRetrieverœ,œBaseRetrieverœ],œdataTypeœ:œVectorStoreRetrieverœ,œidœ:œVectorStoreRetriever-nVACOœ}-Tool-NnjKb{œfieldNameœ:œretrieverœ,œidœ:œTool-NnjKbœ,œinputTypesœ:null,œtypeœ:œBaseRetrieverœ}"
        },
        {
          "source": "Tool-NnjKb",
          "sourceHandle": "{œbaseClassesœ:[œBaseToolœ,œToolœ],œdataTypeœ:œToolœ,œidœ:œTool-NnjKbœ}",
          "target": "AgentExecutor-rlara",
          "targetHandle": "{œfieldNameœ:œtoolsœ,œidœ:œAgentExecutor-rlaraœ,œinputTypesœ:null,œtypeœ:œToolœ}",
          "data": {
            "targetHandle": {
              "fieldName": "tools",
              "id": "AgentExecutor-rlara",
              "inputTypes": null,
              "type": "Tool"
            },
            "sourceHandle": {
              "baseClasses": [
                "BaseTool",
                "Tool"
              ],
              "dataType": "Tool",
              "id": "Tool-NnjKb"
            }
          },
          "style": {
            "stroke": "#555"
          },
          "className": "stroke-gray-900  stroke-connection",
          "animated": false,
          "id": "reactflow__edge-Tool-NnjKb{œbaseClassesœ:[œBaseToolœ,œToolœ],œdataTypeœ:œToolœ,œidœ:œTool-NnjKbœ}-AgentExecutor-rlara{œfieldNameœ:œtoolsœ,œidœ:œAgentExecutor-rlaraœ,œinputTypesœ:null,œtypeœ:œToolœ}"
        },
        {
          "source": "CharacterTextSplitter-fVjsy",
          "sourceHandle": "{œbaseClassesœ:[œDocumentœ],œdataTypeœ:œCharacterTextSplitterœ,œidœ:œCharacterTextSplitter-fVjsyœ}",
          "target": "Chroma-vFe6o",
          "targetHandle": "{œfieldNameœ:œdocumentsœ,œidœ:œChroma-vFe6oœ,œinputTypesœ:null,œtypeœ:œDocumentœ}",
          "data": {
            "targetHandle": {
              "fieldName": "documents",
              "id": "Chroma-vFe6o",
              "inputTypes": null,
              "type": "Document"
            },
            "sourceHandle": {
              "baseClasses": [
                "Document"
              ],
              "dataType": "CharacterTextSplitter",
              "id": "CharacterTextSplitter-fVjsy"
            }
          },
          "style": {
            "stroke": "#555"
          },
          "className": "stroke-gray-900  stroke-connection",
          "animated": false,
          "id": "reactflow__edge-CharacterTextSplitter-fVjsy{œbaseClassesœ:[œDocumentœ],œdataTypeœ:œCharacterTextSplitterœ,œidœ:œCharacterTextSplitter-fVjsyœ}-Chroma-vFe6o{œfieldNameœ:œdocumentsœ,œidœ:œChroma-vFe6oœ,œinputTypesœ:null,œtypeœ:œDocumentœ}"
        },
        {
          "source": "OpenAIEmbeddings-UExkq",
          "sourceHandle": "{œbaseClassesœ:[œEmbeddingsœ,œOpenAIEmbeddingsœ,œCallableœ],œdataTypeœ:œOpenAIEmbeddingsœ,œidœ:œOpenAIEmbeddings-UExkqœ}",
          "target": "Chroma-vFe6o",
          "targetHandle": "{œfieldNameœ:œembeddingœ,œidœ:œChroma-vFe6oœ,œinputTypesœ:null,œtypeœ:œEmbeddingsœ}",
          "data": {
            "targetHandle": {
              "fieldName": "embedding",
              "id": "Chroma-vFe6o",
              "inputTypes": null,
              "type": "Embeddings"
            },
            "sourceHandle": {
              "baseClasses": [
                "Embeddings",
                "OpenAIEmbeddings",
                "Callable"
              ],
              "dataType": "OpenAIEmbeddings",
              "id": "OpenAIEmbeddings-UExkq"
            }
          },
          "style": {
            "stroke": "#555"
          },
          "className": "stroke-gray-900  stroke-connection",
          "animated": false,
          "id": "reactflow__edge-OpenAIEmbeddings-UExkq{œbaseClassesœ:[œEmbeddingsœ,œOpenAIEmbeddingsœ,œCallableœ],œdataTypeœ:œOpenAIEmbeddingsœ,œidœ:œOpenAIEmbeddings-UExkqœ}-Chroma-vFe6o{œfieldNameœ:œembeddingœ,œidœ:œChroma-vFe6oœ,œinputTypesœ:null,œtypeœ:œEmbeddingsœ}"
        },
        {
          "source": "Chroma-vFe6o",
          "sourceHandle": "{œbaseClassesœ:[œVectorStoreœ,œBaseRetrieverœ],œdataTypeœ:œChromaœ,œidœ:œChroma-vFe6oœ}",
          "target": "VectorStoreRetriever-G7oKw",
          "targetHandle": "{œfieldNameœ:œvectorstoreœ,œidœ:œVectorStoreRetriever-G7oKwœ,œinputTypesœ:null,œtypeœ:œVectorStoreœ}",
          "data": {
            "targetHandle": {
              "fieldName": "vectorstore",
              "id": "VectorStoreRetriever-G7oKw",
              "inputTypes": null,
              "type": "VectorStore"
            },
            "sourceHandle": {
              "baseClasses": [
                "VectorStore",
                "BaseRetriever"
              ],
              "dataType": "Chroma",
              "id": "Chroma-vFe6o"
            }
          },
          "style": {
            "stroke": "#555"
          },
          "className": "stroke-gray-900  stroke-connection",
          "animated": false,
          "id": "reactflow__edge-Chroma-vFe6o{œbaseClassesœ:[œVectorStoreœ,œBaseRetrieverœ],œdataTypeœ:œChromaœ,œidœ:œChroma-vFe6oœ}-VectorStoreRetriever-G7oKw{œfieldNameœ:œvectorstoreœ,œidœ:œVectorStoreRetriever-G7oKwœ,œinputTypesœ:null,œtypeœ:œVectorStoreœ}"
        },
        {
          "source": "Document-DATKy",
          "sourceHandle": "{œbaseClassesœ:[œDocumentœ],œdataTypeœ:œDocumentœ,œidœ:œDocument-DATKyœ}",
          "target": "CharacterTextSplitter-fVjsy",
          "targetHandle": "{œfieldNameœ:œdocumentsœ,œidœ:œCharacterTextSplitter-fVjsyœ,œinputTypesœ:null,œtypeœ:œDocumentœ}",
          "data": {
            "targetHandle": {
              "fieldName": "documents",
              "id": "CharacterTextSplitter-fVjsy",
              "inputTypes": null,
              "type": "Document"
            },
            "sourceHandle": {
              "baseClasses": [
                "Document"
              ],
              "dataType": "Document",
              "id": "Document-DATKy"
            }
          },
          "style": {
            "stroke": "#555"
          },
          "className": "stroke-gray-900  stroke-connection",
          "animated": false,
          "id": "reactflow__edge-Document-DATKy{œbaseClassesœ:[œDocumentœ],œdataTypeœ:œDocumentœ,œidœ:œDocument-DATKyœ}-CharacterTextSplitter-fVjsy{œfieldNameœ:œdocumentsœ,œidœ:œCharacterTextSplitter-fVjsyœ,œinputTypesœ:null,œtypeœ:œDocumentœ}"
        },
        {
          "source": "VectorStoreRetriever-G7oKw",
          "sourceHandle": "{œbaseClassesœ:[œBaseRetrieverœ,œVectorStoreRetrieverœ],œdataTypeœ:œVectorStoreRetrieverœ,œidœ:œVectorStoreRetriever-G7oKwœ}",
          "target": "Tool-48O0F",
          "targetHandle": "{œfieldNameœ:œretrieverœ,œidœ:œTool-48O0Fœ,œinputTypesœ:null,œtypeœ:œBaseRetrieverœ}",
          "data": {
            "targetHandle": {
              "fieldName": "retriever",
              "id": "Tool-48O0F",
              "inputTypes": null,
              "type": "BaseRetriever"
            },
            "sourceHandle": {
              "baseClasses": [
                "BaseRetriever",
                "VectorStoreRetriever"
              ],
              "dataType": "VectorStoreRetriever",
              "id": "VectorStoreRetriever-G7oKw"
            }
          },
          "style": {
            "stroke": "#555"
          },
          "className": "stroke-gray-900  stroke-connection",
          "animated": false,
          "id": "reactflow__edge-VectorStoreRetriever-G7oKw{œbaseClassesœ:[œBaseRetrieverœ,œVectorStoreRetrieverœ],œdataTypeœ:œVectorStoreRetrieverœ,œidœ:œVectorStoreRetriever-G7oKwœ}-Tool-48O0F{œfieldNameœ:œretrieverœ,œidœ:œTool-48O0Fœ,œinputTypesœ:null,œtypeœ:œBaseRetrieverœ}"
        },
        {
          "source": "PythonFunctionTool-wdYwS",
          "sourceHandle": "{œbaseClassesœ:[œBaseToolœ,œToolœ],œdataTypeœ:œPythonFunctionToolœ,œidœ:œPythonFunctionTool-wdYwSœ}",
          "target": "AgentExecutor-rlara",
          "targetHandle": "{œfieldNameœ:œtoolsœ,œidœ:œAgentExecutor-rlaraœ,œinputTypesœ:null,œtypeœ:œToolœ}",
          "data": {
            "targetHandle": {
              "fieldName": "tools",
              "id": "AgentExecutor-rlara",
              "inputTypes": null,
              "type": "Tool"
            },
            "sourceHandle": {
              "baseClasses": [
                "BaseTool",
                "Tool"
              ],
              "dataType": "PythonFunctionTool",
              "id": "PythonFunctionTool-wdYwS"
            }
          },
          "style": {
            "stroke": "#555"
          },
          "className": "stroke-gray-900  stroke-connection",
          "animated": false,
          "id": "reactflow__edge-PythonFunctionTool-wdYwS{œbaseClassesœ:[œBaseToolœ,œToolœ],œdataTypeœ:œPythonFunctionToolœ,œidœ:œPythonFunctionTool-wdYwSœ}-AgentExecutor-rlara{œfieldNameœ:œtoolsœ,œidœ:œAgentExecutor-rlaraœ,œinputTypesœ:null,œtypeœ:œToolœ}"
        }
      ],
      "viewport": {
        "x": 752.2020613777515,
        "y": 6.943518714157136,
        "zoom": 0.542004857590742
      }
    },
    "date_created": "2024-05-03T21:12:57.276Z",
    "date_updated": "2024-05-03T21:12:57.397Z",
    "status": "Public",
    "sort": null,
    "user_updated": "a40f6153-fb06-44aa-be94-2ce6278045ae",
    "user_created": {
      "username": "ashaumyan",
      "first_name": "Amazasp",
      "last_name": "Shaumyan",
      "id": "a40f6153-fb06-44aa-be94-2ce6278045ae"
    },
    "tags": [
      {
        "tags_id": {
          "name": "Agent",
          "id": "ccabb590-c9e8-4e56-9d6c-309955936c6c"
        }
      }
    ]
  },
  "conversion": {
    "converted_at": "2025-08-19T18:09:02.449Z",
    "converted_from": "langflow",
    "converted_to": "axiestudio",
    "conversions_made": 42,
    "converter_version": "1.0.0"
  }
}