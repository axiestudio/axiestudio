{
  "id": "a09ce5fa-bee2-4827-a218-299b9b1210d9",
  "name": "Untitled document (1)",
  "description": "Navigate the Linguistic Landscape, Discover Opportunities. (Converted from Langflow Store for AxieStudio compatibility)",
  "type": "FLOW",
  "is_component": false,
  "author": {
    "username": "DMX610",
    "first_name": "ST",
    "last_name": "BA",
    "id": "acfde3b6-626a-4a8f-be83-e43ccd8f6873",
    "full_name": "ST BA"
  },
  "store_url": "https://www.langflow.store/store/component/a09ce5fa-bee2-4827-a218-299b9b1210d9",
  "stats": {
    "downloads": 0,
    "likes": 0
  },
  "dates": {
    "created": "2024-06-20T23:24:15.791Z",
    "updated": "2024-06-20T23:24:15.825Z",
    "downloaded": "2025-08-19T17:50:05.801Z"
  },
  "tags": [],
  "technical": {
    "last_tested_version": "0.6.18",
    "private": true,
    "status": "Public"
  },
  "data": {
    "nodes": [
      {
        "id": "ConversationChain-ofJlO",
        "type": "genericNode",
        "position": {
          "x": 578.4245593219987,
          "y": 579.9619833971999
        },
        "data": {
          "type": "ConversationChain",
          "node": {
            "template": {
              "llm": {
                "type": "BaseLanguageModel",
                "required": true,
                "placeholder": "",
                "list": false,
                "show": true,
                "multiline": false,
                "fileTypes": [],
                "file_path": "",
                "password": false,
                "name": "llm",
                "display_name": "LLM",
                "advanced": false,
                "dynamic": false,
                "info": "",
                "title_case": true
              },
              "memory": {
                "type": "BaseMemory",
                "required": false,
                "placeholder": "",
                "list": false,
                "show": true,
                "multiline": false,
                "fileTypes": [],
                "file_path": "",
                "password": false,
                "name": "memory",
                "display_name": "Memory",
                "advanced": false,
                "dynamic": false,
                "info": "Memory to load context from. If none is provided, a ConversationBufferMemory will be used.",
                "title_case": true
              },
              "code": {
                "type": "code",
                "required": true,
                "placeholder": "",
                "list": false,
                "show": true,
                "multiline": true,
                "value": "from axiestudio import CustomComponent\nfrom langchain.chains import ConversationChain\nfrom typing import Optional, Union, Callable\nfrom axiestudio.field_typing import BaseLanguageModel, BaseMemory, Chain\n\n\nclass ConversationChainComponent(CustomComponent):\n    display_name = \"ConversationChain\"\n    description = \"Chain to have a conversation and load context from memory.\"\n\n    def build_config(self):\n        return {\n            \"prompt\": {\"display_name\": \"Prompt\"},\n            \"llm\": {\"display_name\": \"LLM\"},\n            \"memory\": {\n                \"display_name\": \"Memory\",\n                \"info\": \"Memory to load context from. If none is provided, a ConversationBufferMemory will be used.\",\n            },\n            \"code\": {\"show\": False},\n        }\n\n    def build(\n        self,\n        llm: BaseLanguageModel,\n        memory: Optional[BaseMemory] = None,\n    ) -> Union[Chain, Callable]:\n        if memory is None:\n            return ConversationChain(llm=llm)\n        return ConversationChain(llm=llm, memory=memory)\n",
                "fileTypes": [],
                "file_path": "",
                "password": false,
                "name": "code",
                "advanced": false,
                "dynamic": true,
                "info": "",
                "title_case": true
              },
              "_type": "CustomComponent"
            },
            "description": "Chain to have a conversation and load context from memory.",
            "base_classes": [
              "Chain",
              "Callable"
            ],
            "display_name": "ConversationChain",
            "documentation": "",
            "custom_fields": {
              "llm": null,
              "memory": null
            },
            "output_types": [
              "Chain",
              "Callable"
            ],
            "field_formatters": {},
            "beta": true
          },
          "id": "ConversationChain-ofJlO"
        },
        "selected": false,
        "width": 384,
        "height": 396,
        "positionAbsolute": {
          "x": 578.4245593219987,
          "y": 579.9619833971999
        },
        "dragging": false
      },
      {
        "id": "ChatOpenAI-vohWb",
        "type": "genericNode",
        "position": {
          "x": 319.57474210095575,
          "y": -322.82163248912593
        },
        "data": {
          "type": "ChatOpenAI",
          "node": {
            "template": {
              "code": {
                "type": "code",
                "required": true,
                "placeholder": "",
                "list": false,
                "show": true,
                "multiline": true,
                "value": "from typing import Optional, Union\n\nfrom langchain.llms import BaseLLM\nfrom langchain_community.chat_models.openai import ChatOpenAI\n\nfrom axiestudio import CustomComponent\nfrom axiestudio.field_typing import BaseLanguageModel, NestedDict\n\n\nclass ChatOpenAIComponent(CustomComponent):\n    display_name = \"ChatOpenAI\"\n    description = \"`OpenAI` Chat large language models API.\"\n\n    def build_config(self):\n        return {\n            \"max_tokens\": {\n                \"display_name\": \"Max Tokens\",\n                \"field_type\": \"int\",\n                \"advanced\": False,\n                \"required\": False,\n            },\n            \"model_kwargs\": {\n                \"display_name\": \"Model Kwargs\",\n                \"field_type\": \"NestedDict\",\n                \"advanced\": True,\n                \"required\": False,\n            },\n            \"model_name\": {\n                \"display_name\": \"Model Name\",\n                \"field_type\": \"str\",\n                \"advanced\": False,\n                \"required\": False,\n                \"options\": [\n                    \"gpt-4-turbo-preview\",\n                    \"gpt-4-0125-preview\",\n                    \"gpt-4-1106-preview\",\n                    \"gpt-4-vision-preview\",\n                    \"gpt-3.5-turbo-0125\",\n                    \"gpt-3.5-turbo-1106\",\n                ],\n            },\n            \"openai_api_base\": {\n                \"display_name\": \"OpenAI API Base\",\n                \"field_type\": \"str\",\n                \"advanced\": False,\n                \"required\": False,\n                \"info\": (\n                    \"The base URL of the OpenAI API. Defaults to https://api.openai.com/v1.\\n\\n\"\n                    \"You can change this to use other APIs like JinaChat, LocalAI and Prem.\"\n                ),\n            },\n            \"openai_api_key\": {\n                \"display_name\": \"OpenAI API Key\",\n                \"field_type\": \"str\",\n                \"advanced\": False,\n                \"required\": False,\n                \"password\": True,\n            },\n            \"temperature\": {\n                \"display_name\": \"Temperature\",\n                \"field_type\": \"float\",\n                \"advanced\": False,\n                \"required\": False,\n                \"value\": 0.7,\n            },\n        }\n\n    def build(\n        self,\n        max_tokens: Optional[int] = 256,\n        model_kwargs: NestedDict = {},\n        model_name: str = \"gpt-4-1106-preview\",\n        openai_api_base: Optional[str] = None,\n        openai_api_key: Optional[str] = None,\n        temperature: float = 0.7,\n    ) -> Union[BaseLanguageModel, BaseLLM]:\n        if not openai_api_base:\n            openai_api_base = \"https://api.openai.com/v1\"\n        return ChatOpenAI(\n            max_tokens=max_tokens,\n            model_kwargs=model_kwargs,\n            model=model_name,\n            base_url=openai_api_base,\n            api_key=openai_api_key,\n            temperature=temperature,\n        )\n",
                "fileTypes": [],
                "file_path": "",
                "password": false,
                "name": "code",
                "advanced": false,
                "dynamic": true,
                "info": "",
                "title_case": true
              },
              "max_tokens": {
                "type": "int",
                "required": false,
                "placeholder": "",
                "list": false,
                "show": true,
                "multiline": false,
                "value": 256,
                "fileTypes": [],
                "file_path": "",
                "password": false,
                "name": "max_tokens",
                "display_name": "Max Tokens",
                "advanced": false,
                "dynamic": false,
                "info": "",
                "title_case": true
              },
              "model_kwargs": {
                "type": "NestedDict",
                "required": false,
                "placeholder": "",
                "list": false,
                "show": true,
                "multiline": false,
                "value": {},
                "fileTypes": [],
                "file_path": "",
                "password": false,
                "name": "model_kwargs",
                "display_name": "Model Kwargs",
                "advanced": true,
                "dynamic": false,
                "info": "",
                "title_case": true
              },
              "model_name": {
                "type": "str",
                "required": false,
                "placeholder": "",
                "list": true,
                "show": true,
                "multiline": false,
                "value": "gpt-4-1106-preview",
                "fileTypes": [],
                "file_path": "",
                "password": false,
                "options": [
                  "gpt-4-turbo-preview",
                  "gpt-4-0125-preview",
                  "gpt-4-1106-preview",
                  "gpt-4-vision-preview",
                  "gpt-3.5-turbo-0125",
                  "gpt-3.5-turbo-1106"
                ],
                "name": "model_name",
                "display_name": "Model Name",
                "advanced": false,
                "dynamic": false,
                "info": "",
                "title_case": true
              },
              "openai_api_base": {
                "type": "str",
                "required": false,
                "placeholder": "",
                "list": false,
                "show": true,
                "multiline": false,
                "fileTypes": [],
                "file_path": "",
                "password": false,
                "name": "openai_api_base",
                "display_name": "OpenAI API Base",
                "advanced": false,
                "dynamic": false,
                "info": "The base URL of the OpenAI API. Defaults to https://api.openai.com/v1.\n\nYou can change this to use other APIs like JinaChat, LocalAI and Prem.",
                "title_case": true,
                "value": "https://platform.openai.com/"
              },
              "openai_api_key": {
                "type": "str",
                "required": false,
                "placeholder": "",
                "list": false,
                "show": true,
                "multiline": false,
                "fileTypes": [],
                "file_path": "",
                "password": true,
                "name": "openai_api_key",
                "display_name": "OpenAI API Key",
                "advanced": false,
                "dynamic": false,
                "info": "",
                "title_case": true,
                "value": ""
              },
              "temperature": {
                "type": "float",
                "required": false,
                "placeholder": "",
                "list": false,
                "show": true,
                "multiline": false,
                "value": 0.7,
                "fileTypes": [],
                "file_path": "",
                "password": false,
                "name": "temperature",
                "display_name": "Temperature",
                "advanced": false,
                "dynamic": false,
                "info": "",
                "rangeSpec": {
                  "min": -1,
                  "max": 1,
                  "step": 0.1
                },
                "title_case": true
              },
              "_type": "CustomComponent"
            },
            "description": "`OpenAI` Chat large language models API.",
            "base_classes": [
              "BaseLanguageModel",
              "BaseLLM",
              "BaseLanguageModel"
            ],
            "display_name": "ChatOpenAI",
            "documentation": "",
            "custom_fields": {
              "max_tokens": null,
              "model_kwargs": null,
              "model_name": null,
              "openai_api_base": null,
              "openai_api_key": null,
              "temperature": null
            },
            "output_types": [
              "BaseLanguageModel",
              "BaseLLM"
            ],
            "field_formatters": {},
            "beta": true
          },
          "id": "ChatOpenAI-vohWb"
        },
        "selected": false,
        "width": 384,
        "height": 728,
        "positionAbsolute": {
          "x": 319.57474210095575,
          "y": -322.82163248912593
        },
        "dragging": false
      },
      {
        "id": "Tool-L0gzH",
        "type": "genericNode",
        "position": {
          "x": 858.0750151724003,
          "y": -231.02261146318278
        },
        "data": {
          "type": "Tool",
          "node": {
            "template": {
              "func": {
                "type": "Callable",
                "required": true,
                "placeholder": "",
                "list": false,
                "show": true,
                "multiline": true,
                "value": "",
                "fileTypes": [],
                "file_path": "",
                "password": false,
                "name": "func",
                "advanced": false,
                "dynamic": false,
                "info": "",
                "title_case": true
              },
              "description": {
                "type": "str",
                "required": true,
                "placeholder": "",
                "list": false,
                "show": true,
                "multiline": true,
                "value": "TEST",
                "fileTypes": [],
                "file_path": "",
                "password": false,
                "name": "description",
                "advanced": false,
                "dynamic": false,
                "info": "",
                "title_case": true
              },
              "name": {
                "type": "str",
                "required": true,
                "placeholder": "",
                "list": false,
                "show": true,
                "multiline": true,
                "value": "DFSFFVSDY ",
                "fileTypes": [],
                "file_path": "",
                "password": false,
                "name": "name",
                "advanced": false,
                "dynamic": false,
                "info": "",
                "title_case": true
              },
              "return_direct": {
                "type": "bool",
                "required": true,
                "placeholder": "",
                "list": false,
                "show": true,
                "multiline": false,
                "value": true,
                "fileTypes": [],
                "file_path": "",
                "password": false,
                "name": "return_direct",
                "advanced": false,
                "dynamic": false,
                "info": "",
                "title_case": true
              },
              "_type": "Tool"
            },
            "description": "Converts a chain, agent or function into a tool.",
            "base_classes": [
              "Tool",
              "BaseTool"
            ],
            "display_name": "Tool",
            "documentation": "",
            "custom_fields": {},
            "output_types": [],
            "field_formatters": {},
            "beta": false
          },
          "id": "Tool-L0gzH"
        },
        "selected": true,
        "width": 384,
        "height": 489,
        "positionAbsolute": {
          "x": 858.0750151724003,
          "y": -231.02261146318278
        },
        "dragging": true
      },
      {
        "id": "OpenAIConversationalAgent-szldt",
        "type": "genericNode",
        "position": {
          "x": 1507.1877206101144,
          "y": -155.51549263219715
        },
        "data": {
          "type": "OpenAIConversationalAgent",
          "node": {
            "template": {
              "memory": {
                "type": "BaseMemory",
                "required": false,
                "placeholder": "",
                "list": false,
                "show": true,
                "multiline": false,
                "fileTypes": [],
                "file_path": "",
                "password": false,
                "name": "memory",
                "display_name": "Memory",
                "advanced": false,
                "dynamic": false,
                "info": "",
                "title_case": true
              },
              "system_message": {
                "type": "SystemMessagePromptTemplate",
                "required": false,
                "placeholder": "",
                "list": false,
                "show": true,
                "multiline": false,
                "fileTypes": [],
                "file_path": "",
                "password": false,
                "name": "system_message",
                "display_name": "System Message",
                "advanced": false,
                "dynamic": false,
                "info": "",
                "title_case": true
              },
              "tools": {
                "type": "Tool",
                "required": true,
                "placeholder": "",
                "list": true,
                "show": true,
                "multiline": false,
                "fileTypes": [],
                "file_path": "",
                "password": false,
                "name": "tools",
                "display_name": "Tools",
                "advanced": false,
                "dynamic": false,
                "info": "",
                "title_case": true
              },
              "code": {
                "type": "code",
                "required": true,
                "placeholder": "",
                "list": false,
                "show": true,
                "multiline": true,
                "value": "from typing import List, Optional\n\nfrom langchain.agents.agent import AgentExecutor\nfrom langchain.agents.agent_toolkits.conversational_retrieval.openai_functions import _get_default_system_message\nfrom langchain.agents.openai_functions_agent.base import OpenAIFunctionsAgent\nfrom langchain.memory.token_buffer import ConversationTokenBufferMemory\nfrom langchain.prompts import SystemMessagePromptTemplate\nfrom langchain.prompts.chat import MessagesPlaceholder\nfrom langchain.schema.memory import BaseMemory\nfrom langchain.tools import Tool\nfrom langchain_community.chat_models import ChatOpenAI\nfrom axiestudio import CustomComponent\nfrom axiestudio.field_typing.range_spec import RangeSpec\n\n\nclass ConversationalAgent(CustomComponent):\n    display_name: str = \"OpenAI Conversational Agent\"\n    description: str = \"Conversational Agent that can use OpenAI's function calling API\"\n\n    def build_config(self):\n        openai_function_models = [\n            \"gpt-4-turbo-preview\",\n            \"gpt-4-0125-preview\",\n            \"gpt-4-1106-preview\",\n            \"gpt-4-vision-preview\",\n            \"gpt-3.5-turbo-0125\",\n            \"gpt-3.5-turbo-1106\",\n        ]\n        return {\n            \"tools\": {\"display_name\": \"Tools\"},\n            \"memory\": {\"display_name\": \"Memory\"},\n            \"system_message\": {\"display_name\": \"System Message\"},\n            \"max_token_limit\": {\"display_name\": \"Max Token Limit\"},\n            \"model_name\": {\n                \"display_name\": \"Model Name\",\n                \"options\": openai_function_models,\n                \"value\": openai_function_models[0],\n            },\n            \"code\": {\"show\": False},\n            \"temperature\": {\n                \"display_name\": \"Temperature\",\n                \"value\": 0.2,\n                \"range_spec\": RangeSpec(min=0, max=2, step=0.1),\n            },\n        }\n\n    def build(\n        self,\n        model_name: str,\n        openai_api_key: str,\n        tools: List[Tool],\n        openai_api_base: Optional[str] = None,\n        memory: Optional[BaseMemory] = None,\n        system_message: Optional[SystemMessagePromptTemplate] = None,\n        max_token_limit: int = 2000,\n        temperature: float = 0.9,\n    ) -> AgentExecutor:\n        llm = ChatOpenAI(\n            model=model_name,\n            api_key=openai_api_key,\n            base_url=openai_api_base,\n            max_tokens=max_token_limit,\n            temperature=temperature,\n        )\n        if not memory:\n            memory_key = \"chat_history\"\n            memory = ConversationTokenBufferMemory(\n                memory_key=memory_key,\n                return_messages=True,\n                output_key=\"output\",\n                llm=llm,\n                max_token_limit=max_token_limit,\n            )\n        else:\n            memory_key = memory.memory_key  # type: ignore\n\n        _system_message = system_message or _get_default_system_message()\n        prompt = OpenAIFunctionsAgent.create_prompt(\n            system_message=_system_message,  # type: ignore\n            extra_prompt_messages=[MessagesPlaceholder(variable_name=memory_key)],\n        )\n        agent = OpenAIFunctionsAgent(\n            llm=llm,\n            tools=tools,\n            prompt=prompt,  # type: ignore\n        )\n        return AgentExecutor(\n            agent=agent,\n            tools=tools,  # type: ignore\n            memory=memory,\n            verbose=True,\n            return_intermediate_steps=True,\n            handle_parsing_errors=True,\n        )\n",
                "fileTypes": [],
                "file_path": "",
                "password": false,
                "name": "code",
                "advanced": false,
                "dynamic": true,
                "info": "",
                "title_case": true
              },
              "max_token_limit": {
                "type": "int",
                "required": true,
                "placeholder": "",
                "list": false,
                "show": true,
                "multiline": false,
                "value": 2000,
                "fileTypes": [],
                "file_path": "",
                "password": false,
                "name": "max_token_limit",
                "display_name": "Max Token Limit",
                "advanced": false,
                "dynamic": false,
                "info": "",
                "title_case": true
              },
              "model_name": {
                "type": "str",
                "required": true,
                "placeholder": "",
                "list": true,
                "show": true,
                "multiline": false,
                "value": "gpt-4-turbo-preview",
                "fileTypes": [],
                "file_path": "",
                "password": false,
                "options": [
                  "gpt-4-turbo-preview",
                  "gpt-4-0125-preview",
                  "gpt-4-1106-preview",
                  "gpt-4-vision-preview",
                  "gpt-3.5-turbo-0125",
                  "gpt-3.5-turbo-1106"
                ],
                "name": "model_name",
                "display_name": "Model Name",
                "advanced": false,
                "dynamic": false,
                "info": "",
                "title_case": true
              },
              "openai_api_base": {
                "type": "str",
                "required": false,
                "placeholder": "",
                "list": false,
                "show": true,
                "multiline": false,
                "fileTypes": [],
                "file_path": "",
                "password": false,
                "name": "openai_api_base",
                "advanced": false,
                "dynamic": false,
                "info": "",
                "title_case": true,
                "value": "https://platform.openai.com/"
              },
              "openai_api_key": {
                "type": "str",
                "required": true,
                "placeholder": "",
                "list": false,
                "show": true,
                "multiline": false,
                "fileTypes": [],
                "file_path": "",
                "password": false,
                "name": "openai_api_key",
                "advanced": false,
                "dynamic": false,
                "info": "",
                "title_case": true,
                "value": "sk-PLACEHOLDER_API_KEY"
              },
              "temperature": {
                "type": "float",
                "required": true,
                "placeholder": "",
                "list": false,
                "show": true,
                "multiline": false,
                "value": 0.2,
                "fileTypes": [],
                "file_path": "",
                "password": false,
                "name": "temperature",
                "display_name": "Temperature",
                "advanced": false,
                "dynamic": false,
                "info": "",
                "rangeSpec": {
                  "min": 0,
                  "max": 2,
                  "step": 0.1
                },
                "title_case": true
              },
              "_type": "CustomComponent"
            },
            "description": "Conversational Agent that can use OpenAI's function calling API",
            "base_classes": [
              "AgentExecutor",
              "Chain"
            ],
            "display_name": "OpenAI Conversational Agent",
            "documentation": "",
            "custom_fields": {
              "model_name": null,
              "openai_api_key": null,
              "tools": null,
              "openai_api_base": null,
              "memory": null,
              "system_message": null,
              "max_token_limit": null,
              "temperature": null
            },
            "output_types": [
              "AgentExecutor"
            ],
            "field_formatters": {},
            "beta": true
          },
          "id": "OpenAIConversationalAgent-szldt"
        },
        "selected": false,
        "width": 384,
        "height": 892,
        "positionAbsolute": {
          "x": 1507.1877206101144,
          "y": -155.51549263219715
        },
        "dragging": false
      },
      {
        "id": "SystemMessagePromptTemplate-iged0",
        "type": "genericNode",
        "position": {
          "x": 974.8297536321288,
          "y": 524.458149389305
        },
        "data": {
          "type": "SystemMessagePromptTemplate",
          "node": {
            "template": {
              "additional_kwargs": {
                "type": "dict",
                "required": false,
                "placeholder": "",
                "list": false,
                "show": false,
                "multiline": false,
                "fileTypes": [],
                "password": false,
                "name": "additional_kwargs",
                "advanced": true,
                "dynamic": true,
                "info": "",
                "title_case": true
              },
              "prompt": {
                "type": "prompt",
                "required": true,
                "placeholder": "",
                "list": true,
                "show": true,
                "multiline": true,
                "value": "\nYou are a helpful assistant that talks casually about life in general.\nYou are a good listener and you can talk about anything.\nhear what yout vatbrb",
                "fileTypes": [],
                "password": false,
                "name": "prompt",
                "advanced": false,
                "dynamic": true,
                "info": "",
                "title_case": true
              },
              "_type": "SystemMessagePromptTemplate"
            },
            "description": "System message prompt template.",
            "icon": null,
            "base_classes": [
              "_StringImageMessagePromptTemplate",
              "BaseMessagePromptTemplate",
              "SystemMessagePromptTemplate"
            ],
            "name": "",
            "display_name": "SystemMessagePromptTemplate",
            "documentation": "https://python.langchain.com/docs/modules/model_io/models/chat/how_to/prompts",
            "custom_fields": {
              "": []
            },
            "output_types": [],
            "full_path": null,
            "field_formatters": {},
            "beta": false,
            "error": null
          },
          "id": "SystemMessagePromptTemplate-iged0",
          "description": "System message prompt template.",
          "display_name": "SystemMessagePromptTemplate"
        },
        "selected": false,
        "width": 384,
        "height": 280,
        "positionAbsolute": {
          "x": 974.8297536321288,
          "y": 524.458149389305
        },
        "dragging": false
      },
      {
        "id": "OpenAPIToolkit-LHkim",
        "type": "genericNode",
        "position": {
          "x": 2028.438375256751,
          "y": 429.83048320985716
        },
        "data": {
          "type": "OpenAPIToolkit",
          "node": {
            "template": {
              "json_agent": {
                "type": "AgentExecutor",
                "required": true,
                "placeholder": "",
                "list": false,
                "show": true,
                "multiline": false,
                "fileTypes": [],
                "file_path": "",
                "password": false,
                "name": "json_agent",
                "display_name": "JSON Agent",
                "advanced": false,
                "dynamic": false,
                "info": "",
                "title_case": true
              },
              "requests_wrapper": {
                "type": "TextRequestsWrapper",
                "required": true,
                "placeholder": "",
                "list": false,
                "show": true,
                "multiline": false,
                "fileTypes": [],
                "file_path": "",
                "password": false,
                "name": "requests_wrapper",
                "display_name": "Text Requests Wrapper",
                "advanced": false,
                "dynamic": false,
                "info": "",
                "title_case": true
              },
              "code": {
                "type": "code",
                "required": true,
                "placeholder": "",
                "list": false,
                "show": true,
                "multiline": true,
                "value": "from langchain_community.agent_toolkits.openapi.toolkit import BaseToolkit, OpenAPIToolkit\nfrom langchain_community.utilities.requests import TextRequestsWrapper\nfrom axiestudio import CustomComponent\nfrom axiestudio.field_typing import AgentExecutor\n\n\nclass OpenAPIToolkitComponent(CustomComponent):\n    display_name = \"OpenAPIToolkit\"\n    description = \"Toolkit for interacting with an OpenAPI API.\"\n\n    def build_config(self):\n        return {\n            \"json_agent\": {\"display_name\": \"JSON Agent\"},\n            \"requests_wrapper\": {\"display_name\": \"Text Requests Wrapper\"},\n        }\n\n    def build(\n        self,\n        json_agent: AgentExecutor,\n        requests_wrapper: TextRequestsWrapper,\n    ) -> BaseToolkit:\n        return OpenAPIToolkit(json_agent=json_agent, requests_wrapper=requests_wrapper)\n",
                "fileTypes": [],
                "file_path": "",
                "password": false,
                "name": "code",
                "advanced": false,
                "dynamic": true,
                "info": "",
                "title_case": true
              },
              "_type": "CustomComponent"
            },
            "description": "Toolkit for interacting with an OpenAPI API.",
            "base_classes": [
              "BaseToolkit"
            ],
            "display_name": "OpenAPIToolkit",
            "documentation": "",
            "custom_fields": {
              "json_agent": null,
              "requests_wrapper": null
            },
            "output_types": [
              "BaseToolkit"
            ],
            "field_formatters": {},
            "beta": true
          },
          "id": "OpenAPIToolkit-LHkim"
        },
        "selected": false,
        "width": 384,
        "height": 376,
        "positionAbsolute": {
          "x": 2028.438375256751,
          "y": 429.83048320985716
        },
        "dragging": false
      },
      {
        "id": "TextRequestsWrapper-f5cTV",
        "type": "genericNode",
        "position": {
          "x": 1947.3056546968633,
          "y": -65.9386083330235
        },
        "data": {
          "type": "TextRequestsWrapper",
          "node": {
            "template": {
              "aiosession": {
                "type": "ClientSession",
                "required": false,
                "placeholder": "",
                "list": false,
                "show": false,
                "multiline": false,
                "fileTypes": [],
                "password": false,
                "name": "aiosession",
                "advanced": false,
                "dynamic": false,
                "info": "",
                "title_case": true
              },
              "auth": {
                "type": "Any",
                "required": false,
                "placeholder": "",
                "list": false,
                "show": false,
                "multiline": false,
                "fileTypes": [],
                "password": false,
                "name": "auth",
                "advanced": false,
                "dynamic": false,
                "info": "",
                "title_case": true
              },
              "headers": {
                "type": "dict",
                "required": false,
                "placeholder": "",
                "list": false,
                "show": true,
                "multiline": true,
                "value": [
                  {
                    "Authorization": "Bearer <token>"
                  },
                  {
                    "": ""
                  }
                ],
                "fileTypes": [],
                "password": false,
                "name": "headers",
                "advanced": false,
                "dynamic": false,
                "info": "",
                "title_case": true
              },
              "response_content_type": {
                "type": "str",
                "required": false,
                "placeholder": "",
                "list": false,
                "show": false,
                "multiline": false,
                "value": "text",
                "fileTypes": [],
                "password": false,
                "name": "response_content_type",
                "advanced": false,
                "dynamic": false,
                "info": "",
                "title_case": true
              },
              "_type": "TextRequestsWrapper"
            },
            "description": "Lightweight wrapper around requests library, with async support.",
            "base_classes": [
              "GenericRequestsWrapper",
              "TextRequestsWrapper"
            ],
            "display_name": "TextRequestsWrapper",
            "documentation": "",
            "custom_fields": {},
            "output_types": [],
            "field_formatters": {},
            "beta": false
          },
          "id": "TextRequestsWrapper-f5cTV"
        },
        "selected": false,
        "width": 384,
        "height": 350,
        "positionAbsolute": {
          "x": 1947.3056546968633,
          "y": -65.9386083330235
        },
        "dragging": false
      },
      {
        "id": "ConversationBufferMemory-BiSD2",
        "type": "genericNode",
        "position": {
          "x": 1623.331198553783,
          "y": 638.6748862992274
        },
        "data": {
          "type": "ConversationBufferMemory",
          "node": {
            "template": {
              "chat_memory": {
                "type": "BaseChatMessageHistory",
                "required": false,
                "placeholder": "",
                "list": false,
                "show": true,
                "multiline": false,
                "fileTypes": [],
                "password": false,
                "name": "chat_memory",
                "advanced": false,
                "dynamic": false,
                "info": "",
                "title_case": true
              },
              "ai_prefix": {
                "type": "str",
                "required": false,
                "placeholder": "",
                "list": false,
                "show": false,
                "multiline": false,
                "value": "AI",
                "fileTypes": [],
                "password": false,
                "name": "ai_prefix",
                "advanced": false,
                "dynamic": false,
                "info": "",
                "title_case": true
              },
              "human_prefix": {
                "type": "str",
                "required": false,
                "placeholder": "",
                "list": false,
                "show": false,
                "multiline": false,
                "value": "Human",
                "fileTypes": [],
                "password": false,
                "name": "human_prefix",
                "advanced": false,
                "dynamic": false,
                "info": "",
                "title_case": true
              },
              "input_key": {
                "type": "str",
                "required": false,
                "placeholder": "",
                "list": false,
                "show": true,
                "multiline": false,
                "value": "",
                "fileTypes": [],
                "file_path": "",
                "password": false,
                "name": "input_key",
                "advanced": false,
                "dynamic": false,
                "info": "The variable to be used as Chat Input when more than one variable is available.",
                "title_case": true
              },
              "memory_key": {
                "type": "str",
                "required": false,
                "placeholder": "",
                "list": false,
                "show": true,
                "multiline": false,
                "value": "chat_history",
                "fileTypes": [],
                "password": false,
                "name": "memory_key",
                "advanced": false,
                "dynamic": false,
                "info": "",
                "title_case": true
              },
              "output_key": {
                "type": "str",
                "required": false,
                "placeholder": "",
                "list": false,
                "show": true,
                "multiline": false,
                "value": "",
                "fileTypes": [],
                "file_path": "",
                "password": false,
                "name": "output_key",
                "advanced": false,
                "dynamic": false,
                "info": "The variable to be used as Chat Output (e.g. answer in a ConversationalRetrievalChain)",
                "title_case": true
              },
              "return_messages": {
                "type": "bool",
                "required": false,
                "placeholder": "",
                "list": false,
                "show": true,
                "multiline": false,
                "fileTypes": [],
                "file_path": "",
                "password": false,
                "name": "return_messages",
                "advanced": false,
                "dynamic": false,
                "info": "",
                "title_case": true
              },
              "_type": "ConversationBufferMemory"
            },
            "description": "Buffer for storing conversation memory.",
            "base_classes": [
              "BaseMemory",
              "ConversationBufferMemory",
              "BaseChatMemory"
            ],
            "display_name": "ConversationBufferMemory",
            "documentation": "https://python.langchain.com/docs/modules/memory/how_to/buffer",
            "custom_fields": {},
            "output_types": [],
            "field_formatters": {},
            "beta": false
          },
          "id": "ConversationBufferMemory-BiSD2"
        },
        "selected": false,
        "width": 384,
        "height": 598,
        "positionAbsolute": {
          "x": 1623.331198553783,
          "y": 638.6748862992274
        },
        "dragging": false
      }
    ],
    "edges": [
      {
        "source": "ChatOpenAI-vohWb",
        "sourceHandle": "{œbaseClassesœ:[œBaseLanguageModelœ,œBaseLLMœ,œBaseLanguageModelœ],œdataTypeœ:œChatOpenAIœ,œidœ:œChatOpenAI-vohWbœ}",
        "target": "ConversationChain-ofJlO",
        "targetHandle": "{œfieldNameœ:œllmœ,œidœ:œConversationChain-ofJlOœ,œinputTypesœ:null,œtypeœ:œBaseLanguageModelœ}",
        "data": {
          "targetHandle": {
            "fieldName": "llm",
            "id": "ConversationChain-ofJlO",
            "inputTypes": null,
            "type": "BaseLanguageModel"
          },
          "sourceHandle": {
            "baseClasses": [
              "BaseLanguageModel",
              "BaseLLM",
              "BaseLanguageModel"
            ],
            "dataType": "ChatOpenAI",
            "id": "ChatOpenAI-vohWb"
          }
        },
        "style": {
          "stroke": "#555"
        },
        "className": "stroke-foreground  stroke-connection",
        "animated": false,
        "id": "reactflow__edge-ChatOpenAI-vohWb{œbaseClassesœ:[œBaseLanguageModelœ,œBaseLLMœ,œBaseLanguageModelœ],œdataTypeœ:œChatOpenAIœ,œidœ:œChatOpenAI-vohWbœ}-ConversationChain-ofJlO{œfieldNameœ:œllmœ,œidœ:œConversationChain-ofJlOœ,œinputTypesœ:null,œtypeœ:œBaseLanguageModelœ}"
      },
      {
        "source": "Tool-L0gzH",
        "sourceHandle": "{œbaseClassesœ:[œToolœ,œBaseToolœ],œdataTypeœ:œToolœ,œidœ:œTool-L0gzHœ}",
        "target": "OpenAIConversationalAgent-szldt",
        "targetHandle": "{œfieldNameœ:œtoolsœ,œidœ:œOpenAIConversationalAgent-szldtœ,œinputTypesœ:null,œtypeœ:œToolœ}",
        "data": {
          "targetHandle": {
            "fieldName": "tools",
            "id": "OpenAIConversationalAgent-szldt",
            "inputTypes": null,
            "type": "Tool"
          },
          "sourceHandle": {
            "baseClasses": [
              "Tool",
              "BaseTool"
            ],
            "dataType": "Tool",
            "id": "Tool-L0gzH"
          }
        },
        "style": {
          "stroke": "#555"
        },
        "className": "stroke-foreground  stroke-connection",
        "animated": false,
        "id": "reactflow__edge-Tool-L0gzH{œbaseClassesœ:[œToolœ,œBaseToolœ],œdataTypeœ:œToolœ,œidœ:œTool-L0gzHœ}-OpenAIConversationalAgent-szldt{œfieldNameœ:œtoolsœ,œidœ:œOpenAIConversationalAgent-szldtœ,œinputTypesœ:null,œtypeœ:œToolœ}"
      },
      {
        "source": "SystemMessagePromptTemplate-iged0",
        "sourceHandle": "{œbaseClassesœ:[œ_StringImageMessagePromptTemplateœ,œBaseMessagePromptTemplateœ,œSystemMessagePromptTemplateœ],œdataTypeœ:œSystemMessagePromptTemplateœ,œidœ:œSystemMessagePromptTemplate-iged0œ}",
        "target": "OpenAIConversationalAgent-szldt",
        "targetHandle": "{œfieldNameœ:œsystem_messageœ,œidœ:œOpenAIConversationalAgent-szldtœ,œinputTypesœ:null,œtypeœ:œSystemMessagePromptTemplateœ}",
        "data": {
          "targetHandle": {
            "fieldName": "system_message",
            "id": "OpenAIConversationalAgent-szldt",
            "inputTypes": null,
            "type": "SystemMessagePromptTemplate"
          },
          "sourceHandle": {
            "baseClasses": [
              "_StringImageMessagePromptTemplate",
              "BaseMessagePromptTemplate",
              "SystemMessagePromptTemplate"
            ],
            "dataType": "SystemMessagePromptTemplate",
            "id": "SystemMessagePromptTemplate-iged0"
          }
        },
        "style": {
          "stroke": "#555"
        },
        "className": "stroke-foreground  stroke-connection",
        "animated": false,
        "id": "reactflow__edge-SystemMessagePromptTemplate-iged0{œbaseClassesœ:[œ_StringImageMessagePromptTemplateœ,œBaseMessagePromptTemplateœ,œSystemMessagePromptTemplateœ],œdataTypeœ:œSystemMessagePromptTemplateœ,œidœ:œSystemMessagePromptTemplate-iged0œ}-OpenAIConversationalAgent-szldt{œfieldNameœ:œsystem_messageœ,œidœ:œOpenAIConversationalAgent-szldtœ,œinputTypesœ:null,œtypeœ:œSystemMessagePromptTemplateœ}"
      },
      {
        "source": "OpenAIConversationalAgent-szldt",
        "sourceHandle": "{œbaseClassesœ:[œAgentExecutorœ,œChainœ],œdataTypeœ:œOpenAIConversationalAgentœ,œidœ:œOpenAIConversationalAgent-szldtœ}",
        "target": "OpenAPIToolkit-LHkim",
        "targetHandle": "{œfieldNameœ:œjson_agentœ,œidœ:œOpenAPIToolkit-LHkimœ,œinputTypesœ:null,œtypeœ:œAgentExecutorœ}",
        "data": {
          "targetHandle": {
            "fieldName": "json_agent",
            "id": "OpenAPIToolkit-LHkim",
            "inputTypes": null,
            "type": "AgentExecutor"
          },
          "sourceHandle": {
            "baseClasses": [
              "AgentExecutor",
              "Chain"
            ],
            "dataType": "OpenAIConversationalAgent",
            "id": "OpenAIConversationalAgent-szldt"
          }
        },
        "style": {
          "stroke": "#555"
        },
        "className": "stroke-foreground  stroke-connection",
        "animated": false,
        "id": "reactflow__edge-OpenAIConversationalAgent-szldt{œbaseClassesœ:[œAgentExecutorœ,œChainœ],œdataTypeœ:œOpenAIConversationalAgentœ,œidœ:œOpenAIConversationalAgent-szldtœ}-OpenAPIToolkit-LHkim{œfieldNameœ:œjson_agentœ,œidœ:œOpenAPIToolkit-LHkimœ,œinputTypesœ:null,œtypeœ:œAgentExecutorœ}"
      },
      {
        "source": "TextRequestsWrapper-f5cTV",
        "sourceHandle": "{œbaseClassesœ:[œGenericRequestsWrapperœ,œTextRequestsWrapperœ],œdataTypeœ:œTextRequestsWrapperœ,œidœ:œTextRequestsWrapper-f5cTVœ}",
        "target": "OpenAPIToolkit-LHkim",
        "targetHandle": "{œfieldNameœ:œrequests_wrapperœ,œidœ:œOpenAPIToolkit-LHkimœ,œinputTypesœ:null,œtypeœ:œTextRequestsWrapperœ}",
        "data": {
          "targetHandle": {
            "fieldName": "requests_wrapper",
            "id": "OpenAPIToolkit-LHkim",
            "inputTypes": null,
            "type": "TextRequestsWrapper"
          },
          "sourceHandle": {
            "baseClasses": [
              "GenericRequestsWrapper",
              "TextRequestsWrapper"
            ],
            "dataType": "TextRequestsWrapper",
            "id": "TextRequestsWrapper-f5cTV"
          }
        },
        "style": {
          "stroke": "#555"
        },
        "className": "stroke-foreground  stroke-connection",
        "animated": false,
        "id": "reactflow__edge-TextRequestsWrapper-f5cTV{œbaseClassesœ:[œGenericRequestsWrapperœ,œTextRequestsWrapperœ],œdataTypeœ:œTextRequestsWrapperœ,œidœ:œTextRequestsWrapper-f5cTVœ}-OpenAPIToolkit-LHkim{œfieldNameœ:œrequests_wrapperœ,œidœ:œOpenAPIToolkit-LHkimœ,œinputTypesœ:null,œtypeœ:œTextRequestsWrapperœ}"
      },
      {
        "source": "ConversationBufferMemory-BiSD2",
        "sourceHandle": "{œbaseClassesœ:[œBaseMemoryœ,œConversationBufferMemoryœ,œBaseChatMemoryœ],œdataTypeœ:œConversationBufferMemoryœ,œidœ:œConversationBufferMemory-BiSD2œ}",
        "target": "OpenAIConversationalAgent-szldt",
        "targetHandle": "{œfieldNameœ:œmemoryœ,œidœ:œOpenAIConversationalAgent-szldtœ,œinputTypesœ:null,œtypeœ:œBaseMemoryœ}",
        "data": {
          "targetHandle": {
            "fieldName": "memory",
            "id": "OpenAIConversationalAgent-szldt",
            "inputTypes": null,
            "type": "BaseMemory"
          },
          "sourceHandle": {
            "baseClasses": [
              "BaseMemory",
              "ConversationBufferMemory",
              "BaseChatMemory"
            ],
            "dataType": "ConversationBufferMemory",
            "id": "ConversationBufferMemory-BiSD2"
          }
        },
        "style": {
          "stroke": "#555"
        },
        "className": "stroke-foreground  stroke-connection",
        "animated": false,
        "id": "reactflow__edge-ConversationBufferMemory-BiSD2{œbaseClassesœ:[œBaseMemoryœ,œConversationBufferMemoryœ,œBaseChatMemoryœ],œdataTypeœ:œConversationBufferMemoryœ,œidœ:œConversationBufferMemory-BiSD2œ}-OpenAIConversationalAgent-szldt{œfieldNameœ:œmemoryœ,œidœ:œOpenAIConversationalAgent-szldtœ,œinputTypesœ:null,œtypeœ:œBaseMemoryœ}"
      },
      {
        "source": "ConversationChain-ofJlO",
        "sourceHandle": "{œbaseClassesœ:[œChainœ,œCallableœ],œdataTypeœ:œConversationChainœ,œidœ:œConversationChain-ofJlOœ}",
        "target": "Tool-L0gzH",
        "targetHandle": "{œfieldNameœ:œfuncœ,œidœ:œTool-L0gzHœ,œinputTypesœ:null,œtypeœ:œCallableœ}",
        "data": {
          "targetHandle": {
            "fieldName": "func",
            "id": "Tool-L0gzH",
            "inputTypes": null,
            "type": "Callable"
          },
          "sourceHandle": {
            "baseClasses": [
              "Chain",
              "Callable"
            ],
            "dataType": "ConversationChain",
            "id": "ConversationChain-ofJlO"
          }
        },
        "style": {
          "stroke": "#555"
        },
        "className": "stroke-foreground  stroke-connection",
        "animated": false,
        "id": "reactflow__edge-ConversationChain-ofJlO{œbaseClassesœ:[œChainœ,œCallableœ],œdataTypeœ:œConversationChainœ,œidœ:œConversationChain-ofJlOœ}-Tool-L0gzH{œfieldNameœ:œfuncœ,œidœ:œTool-L0gzHœ,œinputTypesœ:null,œtypeœ:œCallableœ}",
        "selected": false
      }
    ],
    "viewport": {
      "x": 124.46309668778963,
      "y": 252.27764814955094,
      "zoom": 0.6381643844144765
    }
  },
  "metadata": {
    "ConversationChain": {
      "count": 1
    },
    "ChatOpenAI": {
      "count": 1
    },
    "Tool": {
      "count": 1
    },
    "OpenAIConversationalAgent": {
      "count": 1
    },
    "SystemMessagePromptTemplate": {
      "count": 1
    },
    "OpenAPIToolkit": {
      "count": 1
    },
    "TextRequestsWrapper": {
      "count": 1
    },
    "ConversationBufferMemory": {
      "count": 1
    },
    "total": 8
  },
  "original": {
    "id": "a09ce5fa-bee2-4827-a218-299b9b1210d9",
    "name": "Untitled document (1)",
    "description": "Navigate the Linguistic Landscape, Discover Opportunities.",
    "is_component": false,
    "liked_by_count": "0",
    "downloads_count": "0",
    "metadata": {
      "ConversationChain": {
        "count": 1
      },
      "ChatOpenAI": {
        "count": 1
      },
      "Tool": {
        "count": 1
      },
      "OpenAIConversationalAgent": {
        "count": 1
      },
      "SystemMessagePromptTemplate": {
        "count": 1
      },
      "OpenAPIToolkit": {
        "count": 1
      },
      "TextRequestsWrapper": {
        "count": 1
      },
      "ConversationBufferMemory": {
        "count": 1
      },
      "total": 8
    },
    "last_tested_version": "0.6.18",
    "private": true,
    "data": {
      "nodes": [
        {
          "id": "ConversationChain-ofJlO",
          "type": "genericNode",
          "position": {
            "x": 578.4245593219987,
            "y": 579.9619833971999
          },
          "data": {
            "type": "ConversationChain",
            "node": {
              "template": {
                "llm": {
                  "type": "BaseLanguageModel",
                  "required": true,
                  "placeholder": "",
                  "list": false,
                  "show": true,
                  "multiline": false,
                  "fileTypes": [],
                  "file_path": "",
                  "password": false,
                  "name": "llm",
                  "display_name": "LLM",
                  "advanced": false,
                  "dynamic": false,
                  "info": "",
                  "title_case": true
                },
                "memory": {
                  "type": "BaseMemory",
                  "required": false,
                  "placeholder": "",
                  "list": false,
                  "show": true,
                  "multiline": false,
                  "fileTypes": [],
                  "file_path": "",
                  "password": false,
                  "name": "memory",
                  "display_name": "Memory",
                  "advanced": false,
                  "dynamic": false,
                  "info": "Memory to load context from. If none is provided, a ConversationBufferMemory will be used.",
                  "title_case": true
                },
                "code": {
                  "type": "code",
                  "required": true,
                  "placeholder": "",
                  "list": false,
                  "show": true,
                  "multiline": true,
                  "value": "from axiestudio import CustomComponent\nfrom langchain.chains import ConversationChain\nfrom typing import Optional, Union, Callable\nfrom axiestudio.field_typing import BaseLanguageModel, BaseMemory, Chain\n\n\nclass ConversationChainComponent(CustomComponent):\n    display_name = \"ConversationChain\"\n    description = \"Chain to have a conversation and load context from memory.\"\n\n    def build_config(self):\n        return {\n            \"prompt\": {\"display_name\": \"Prompt\"},\n            \"llm\": {\"display_name\": \"LLM\"},\n            \"memory\": {\n                \"display_name\": \"Memory\",\n                \"info\": \"Memory to load context from. If none is provided, a ConversationBufferMemory will be used.\",\n            },\n            \"code\": {\"show\": False},\n        }\n\n    def build(\n        self,\n        llm: BaseLanguageModel,\n        memory: Optional[BaseMemory] = None,\n    ) -> Union[Chain, Callable]:\n        if memory is None:\n            return ConversationChain(llm=llm)\n        return ConversationChain(llm=llm, memory=memory)\n",
                  "fileTypes": [],
                  "file_path": "",
                  "password": false,
                  "name": "code",
                  "advanced": false,
                  "dynamic": true,
                  "info": "",
                  "title_case": true
                },
                "_type": "CustomComponent"
              },
              "description": "Chain to have a conversation and load context from memory.",
              "base_classes": [
                "Chain",
                "Callable"
              ],
              "display_name": "ConversationChain",
              "documentation": "",
              "custom_fields": {
                "llm": null,
                "memory": null
              },
              "output_types": [
                "Chain",
                "Callable"
              ],
              "field_formatters": {},
              "beta": true
            },
            "id": "ConversationChain-ofJlO"
          },
          "selected": false,
          "width": 384,
          "height": 396,
          "positionAbsolute": {
            "x": 578.4245593219987,
            "y": 579.9619833971999
          },
          "dragging": false
        },
        {
          "id": "ChatOpenAI-vohWb",
          "type": "genericNode",
          "position": {
            "x": 319.57474210095575,
            "y": -322.82163248912593
          },
          "data": {
            "type": "ChatOpenAI",
            "node": {
              "template": {
                "code": {
                  "type": "code",
                  "required": true,
                  "placeholder": "",
                  "list": false,
                  "show": true,
                  "multiline": true,
                  "value": "from typing import Optional, Union\n\nfrom langchain.llms import BaseLLM\nfrom langchain_community.chat_models.openai import ChatOpenAI\n\nfrom axiestudio import CustomComponent\nfrom axiestudio.field_typing import BaseLanguageModel, NestedDict\n\n\nclass ChatOpenAIComponent(CustomComponent):\n    display_name = \"ChatOpenAI\"\n    description = \"`OpenAI` Chat large language models API.\"\n\n    def build_config(self):\n        return {\n            \"max_tokens\": {\n                \"display_name\": \"Max Tokens\",\n                \"field_type\": \"int\",\n                \"advanced\": False,\n                \"required\": False,\n            },\n            \"model_kwargs\": {\n                \"display_name\": \"Model Kwargs\",\n                \"field_type\": \"NestedDict\",\n                \"advanced\": True,\n                \"required\": False,\n            },\n            \"model_name\": {\n                \"display_name\": \"Model Name\",\n                \"field_type\": \"str\",\n                \"advanced\": False,\n                \"required\": False,\n                \"options\": [\n                    \"gpt-4-turbo-preview\",\n                    \"gpt-4-0125-preview\",\n                    \"gpt-4-1106-preview\",\n                    \"gpt-4-vision-preview\",\n                    \"gpt-3.5-turbo-0125\",\n                    \"gpt-3.5-turbo-1106\",\n                ],\n            },\n            \"openai_api_base\": {\n                \"display_name\": \"OpenAI API Base\",\n                \"field_type\": \"str\",\n                \"advanced\": False,\n                \"required\": False,\n                \"info\": (\n                    \"The base URL of the OpenAI API. Defaults to https://api.openai.com/v1.\\n\\n\"\n                    \"You can change this to use other APIs like JinaChat, LocalAI and Prem.\"\n                ),\n            },\n            \"openai_api_key\": {\n                \"display_name\": \"OpenAI API Key\",\n                \"field_type\": \"str\",\n                \"advanced\": False,\n                \"required\": False,\n                \"password\": True,\n            },\n            \"temperature\": {\n                \"display_name\": \"Temperature\",\n                \"field_type\": \"float\",\n                \"advanced\": False,\n                \"required\": False,\n                \"value\": 0.7,\n            },\n        }\n\n    def build(\n        self,\n        max_tokens: Optional[int] = 256,\n        model_kwargs: NestedDict = {},\n        model_name: str = \"gpt-4-1106-preview\",\n        openai_api_base: Optional[str] = None,\n        openai_api_key: Optional[str] = None,\n        temperature: float = 0.7,\n    ) -> Union[BaseLanguageModel, BaseLLM]:\n        if not openai_api_base:\n            openai_api_base = \"https://api.openai.com/v1\"\n        return ChatOpenAI(\n            max_tokens=max_tokens,\n            model_kwargs=model_kwargs,\n            model=model_name,\n            base_url=openai_api_base,\n            api_key=openai_api_key,\n            temperature=temperature,\n        )\n",
                  "fileTypes": [],
                  "file_path": "",
                  "password": false,
                  "name": "code",
                  "advanced": false,
                  "dynamic": true,
                  "info": "",
                  "title_case": true
                },
                "max_tokens": {
                  "type": "int",
                  "required": false,
                  "placeholder": "",
                  "list": false,
                  "show": true,
                  "multiline": false,
                  "value": 256,
                  "fileTypes": [],
                  "file_path": "",
                  "password": false,
                  "name": "max_tokens",
                  "display_name": "Max Tokens",
                  "advanced": false,
                  "dynamic": false,
                  "info": "",
                  "title_case": true
                },
                "model_kwargs": {
                  "type": "NestedDict",
                  "required": false,
                  "placeholder": "",
                  "list": false,
                  "show": true,
                  "multiline": false,
                  "value": {},
                  "fileTypes": [],
                  "file_path": "",
                  "password": false,
                  "name": "model_kwargs",
                  "display_name": "Model Kwargs",
                  "advanced": true,
                  "dynamic": false,
                  "info": "",
                  "title_case": true
                },
                "model_name": {
                  "type": "str",
                  "required": false,
                  "placeholder": "",
                  "list": true,
                  "show": true,
                  "multiline": false,
                  "value": "gpt-4-1106-preview",
                  "fileTypes": [],
                  "file_path": "",
                  "password": false,
                  "options": [
                    "gpt-4-turbo-preview",
                    "gpt-4-0125-preview",
                    "gpt-4-1106-preview",
                    "gpt-4-vision-preview",
                    "gpt-3.5-turbo-0125",
                    "gpt-3.5-turbo-1106"
                  ],
                  "name": "model_name",
                  "display_name": "Model Name",
                  "advanced": false,
                  "dynamic": false,
                  "info": "",
                  "title_case": true
                },
                "openai_api_base": {
                  "type": "str",
                  "required": false,
                  "placeholder": "",
                  "list": false,
                  "show": true,
                  "multiline": false,
                  "fileTypes": [],
                  "file_path": "",
                  "password": false,
                  "name": "openai_api_base",
                  "display_name": "OpenAI API Base",
                  "advanced": false,
                  "dynamic": false,
                  "info": "The base URL of the OpenAI API. Defaults to https://api.openai.com/v1.\n\nYou can change this to use other APIs like JinaChat, LocalAI and Prem.",
                  "title_case": true,
                  "value": "https://platform.openai.com/"
                },
                "openai_api_key": {
                  "type": "str",
                  "required": false,
                  "placeholder": "",
                  "list": false,
                  "show": true,
                  "multiline": false,
                  "fileTypes": [],
                  "file_path": "",
                  "password": true,
                  "name": "openai_api_key",
                  "display_name": "OpenAI API Key",
                  "advanced": false,
                  "dynamic": false,
                  "info": "",
                  "title_case": true,
                  "value": ""
                },
                "temperature": {
                  "type": "float",
                  "required": false,
                  "placeholder": "",
                  "list": false,
                  "show": true,
                  "multiline": false,
                  "value": 0.7,
                  "fileTypes": [],
                  "file_path": "",
                  "password": false,
                  "name": "temperature",
                  "display_name": "Temperature",
                  "advanced": false,
                  "dynamic": false,
                  "info": "",
                  "rangeSpec": {
                    "min": -1,
                    "max": 1,
                    "step": 0.1
                  },
                  "title_case": true
                },
                "_type": "CustomComponent"
              },
              "description": "`OpenAI` Chat large language models API.",
              "base_classes": [
                "BaseLanguageModel",
                "BaseLLM",
                "BaseLanguageModel"
              ],
              "display_name": "ChatOpenAI",
              "documentation": "",
              "custom_fields": {
                "max_tokens": null,
                "model_kwargs": null,
                "model_name": null,
                "openai_api_base": null,
                "openai_api_key": null,
                "temperature": null
              },
              "output_types": [
                "BaseLanguageModel",
                "BaseLLM"
              ],
              "field_formatters": {},
              "beta": true
            },
            "id": "ChatOpenAI-vohWb"
          },
          "selected": false,
          "width": 384,
          "height": 728,
          "positionAbsolute": {
            "x": 319.57474210095575,
            "y": -322.82163248912593
          },
          "dragging": false
        },
        {
          "id": "Tool-L0gzH",
          "type": "genericNode",
          "position": {
            "x": 858.0750151724003,
            "y": -231.02261146318278
          },
          "data": {
            "type": "Tool",
            "node": {
              "template": {
                "func": {
                  "type": "Callable",
                  "required": true,
                  "placeholder": "",
                  "list": false,
                  "show": true,
                  "multiline": true,
                  "value": "",
                  "fileTypes": [],
                  "file_path": "",
                  "password": false,
                  "name": "func",
                  "advanced": false,
                  "dynamic": false,
                  "info": "",
                  "title_case": true
                },
                "description": {
                  "type": "str",
                  "required": true,
                  "placeholder": "",
                  "list": false,
                  "show": true,
                  "multiline": true,
                  "value": "TEST",
                  "fileTypes": [],
                  "file_path": "",
                  "password": false,
                  "name": "description",
                  "advanced": false,
                  "dynamic": false,
                  "info": "",
                  "title_case": true
                },
                "name": {
                  "type": "str",
                  "required": true,
                  "placeholder": "",
                  "list": false,
                  "show": true,
                  "multiline": true,
                  "value": "DFSFFVSDY ",
                  "fileTypes": [],
                  "file_path": "",
                  "password": false,
                  "name": "name",
                  "advanced": false,
                  "dynamic": false,
                  "info": "",
                  "title_case": true
                },
                "return_direct": {
                  "type": "bool",
                  "required": true,
                  "placeholder": "",
                  "list": false,
                  "show": true,
                  "multiline": false,
                  "value": true,
                  "fileTypes": [],
                  "file_path": "",
                  "password": false,
                  "name": "return_direct",
                  "advanced": false,
                  "dynamic": false,
                  "info": "",
                  "title_case": true
                },
                "_type": "Tool"
              },
              "description": "Converts a chain, agent or function into a tool.",
              "base_classes": [
                "Tool",
                "BaseTool"
              ],
              "display_name": "Tool",
              "documentation": "",
              "custom_fields": {},
              "output_types": [],
              "field_formatters": {},
              "beta": false
            },
            "id": "Tool-L0gzH"
          },
          "selected": true,
          "width": 384,
          "height": 489,
          "positionAbsolute": {
            "x": 858.0750151724003,
            "y": -231.02261146318278
          },
          "dragging": true
        },
        {
          "id": "OpenAIConversationalAgent-szldt",
          "type": "genericNode",
          "position": {
            "x": 1507.1877206101144,
            "y": -155.51549263219715
          },
          "data": {
            "type": "OpenAIConversationalAgent",
            "node": {
              "template": {
                "memory": {
                  "type": "BaseMemory",
                  "required": false,
                  "placeholder": "",
                  "list": false,
                  "show": true,
                  "multiline": false,
                  "fileTypes": [],
                  "file_path": "",
                  "password": false,
                  "name": "memory",
                  "display_name": "Memory",
                  "advanced": false,
                  "dynamic": false,
                  "info": "",
                  "title_case": true
                },
                "system_message": {
                  "type": "SystemMessagePromptTemplate",
                  "required": false,
                  "placeholder": "",
                  "list": false,
                  "show": true,
                  "multiline": false,
                  "fileTypes": [],
                  "file_path": "",
                  "password": false,
                  "name": "system_message",
                  "display_name": "System Message",
                  "advanced": false,
                  "dynamic": false,
                  "info": "",
                  "title_case": true
                },
                "tools": {
                  "type": "Tool",
                  "required": true,
                  "placeholder": "",
                  "list": true,
                  "show": true,
                  "multiline": false,
                  "fileTypes": [],
                  "file_path": "",
                  "password": false,
                  "name": "tools",
                  "display_name": "Tools",
                  "advanced": false,
                  "dynamic": false,
                  "info": "",
                  "title_case": true
                },
                "code": {
                  "type": "code",
                  "required": true,
                  "placeholder": "",
                  "list": false,
                  "show": true,
                  "multiline": true,
                  "value": "from typing import List, Optional\n\nfrom langchain.agents.agent import AgentExecutor\nfrom langchain.agents.agent_toolkits.conversational_retrieval.openai_functions import _get_default_system_message\nfrom langchain.agents.openai_functions_agent.base import OpenAIFunctionsAgent\nfrom langchain.memory.token_buffer import ConversationTokenBufferMemory\nfrom langchain.prompts import SystemMessagePromptTemplate\nfrom langchain.prompts.chat import MessagesPlaceholder\nfrom langchain.schema.memory import BaseMemory\nfrom langchain.tools import Tool\nfrom langchain_community.chat_models import ChatOpenAI\nfrom axiestudio import CustomComponent\nfrom axiestudio.field_typing.range_spec import RangeSpec\n\n\nclass ConversationalAgent(CustomComponent):\n    display_name: str = \"OpenAI Conversational Agent\"\n    description: str = \"Conversational Agent that can use OpenAI's function calling API\"\n\n    def build_config(self):\n        openai_function_models = [\n            \"gpt-4-turbo-preview\",\n            \"gpt-4-0125-preview\",\n            \"gpt-4-1106-preview\",\n            \"gpt-4-vision-preview\",\n            \"gpt-3.5-turbo-0125\",\n            \"gpt-3.5-turbo-1106\",\n        ]\n        return {\n            \"tools\": {\"display_name\": \"Tools\"},\n            \"memory\": {\"display_name\": \"Memory\"},\n            \"system_message\": {\"display_name\": \"System Message\"},\n            \"max_token_limit\": {\"display_name\": \"Max Token Limit\"},\n            \"model_name\": {\n                \"display_name\": \"Model Name\",\n                \"options\": openai_function_models,\n                \"value\": openai_function_models[0],\n            },\n            \"code\": {\"show\": False},\n            \"temperature\": {\n                \"display_name\": \"Temperature\",\n                \"value\": 0.2,\n                \"range_spec\": RangeSpec(min=0, max=2, step=0.1),\n            },\n        }\n\n    def build(\n        self,\n        model_name: str,\n        openai_api_key: str,\n        tools: List[Tool],\n        openai_api_base: Optional[str] = None,\n        memory: Optional[BaseMemory] = None,\n        system_message: Optional[SystemMessagePromptTemplate] = None,\n        max_token_limit: int = 2000,\n        temperature: float = 0.9,\n    ) -> AgentExecutor:\n        llm = ChatOpenAI(\n            model=model_name,\n            api_key=openai_api_key,\n            base_url=openai_api_base,\n            max_tokens=max_token_limit,\n            temperature=temperature,\n        )\n        if not memory:\n            memory_key = \"chat_history\"\n            memory = ConversationTokenBufferMemory(\n                memory_key=memory_key,\n                return_messages=True,\n                output_key=\"output\",\n                llm=llm,\n                max_token_limit=max_token_limit,\n            )\n        else:\n            memory_key = memory.memory_key  # type: ignore\n\n        _system_message = system_message or _get_default_system_message()\n        prompt = OpenAIFunctionsAgent.create_prompt(\n            system_message=_system_message,  # type: ignore\n            extra_prompt_messages=[MessagesPlaceholder(variable_name=memory_key)],\n        )\n        agent = OpenAIFunctionsAgent(\n            llm=llm,\n            tools=tools,\n            prompt=prompt,  # type: ignore\n        )\n        return AgentExecutor(\n            agent=agent,\n            tools=tools,  # type: ignore\n            memory=memory,\n            verbose=True,\n            return_intermediate_steps=True,\n            handle_parsing_errors=True,\n        )\n",
                  "fileTypes": [],
                  "file_path": "",
                  "password": false,
                  "name": "code",
                  "advanced": false,
                  "dynamic": true,
                  "info": "",
                  "title_case": true
                },
                "max_token_limit": {
                  "type": "int",
                  "required": true,
                  "placeholder": "",
                  "list": false,
                  "show": true,
                  "multiline": false,
                  "value": 2000,
                  "fileTypes": [],
                  "file_path": "",
                  "password": false,
                  "name": "max_token_limit",
                  "display_name": "Max Token Limit",
                  "advanced": false,
                  "dynamic": false,
                  "info": "",
                  "title_case": true
                },
                "model_name": {
                  "type": "str",
                  "required": true,
                  "placeholder": "",
                  "list": true,
                  "show": true,
                  "multiline": false,
                  "value": "gpt-4-turbo-preview",
                  "fileTypes": [],
                  "file_path": "",
                  "password": false,
                  "options": [
                    "gpt-4-turbo-preview",
                    "gpt-4-0125-preview",
                    "gpt-4-1106-preview",
                    "gpt-4-vision-preview",
                    "gpt-3.5-turbo-0125",
                    "gpt-3.5-turbo-1106"
                  ],
                  "name": "model_name",
                  "display_name": "Model Name",
                  "advanced": false,
                  "dynamic": false,
                  "info": "",
                  "title_case": true
                },
                "openai_api_base": {
                  "type": "str",
                  "required": false,
                  "placeholder": "",
                  "list": false,
                  "show": true,
                  "multiline": false,
                  "fileTypes": [],
                  "file_path": "",
                  "password": false,
                  "name": "openai_api_base",
                  "advanced": false,
                  "dynamic": false,
                  "info": "",
                  "title_case": true,
                  "value": "https://platform.openai.com/"
                },
                "openai_api_key": {
                  "type": "str",
                  "required": true,
                  "placeholder": "",
                  "list": false,
                  "show": true,
                  "multiline": false,
                  "fileTypes": [],
                  "file_path": "",
                  "password": false,
                  "name": "openai_api_key",
                  "advanced": false,
                  "dynamic": false,
                  "info": "",
                  "title_case": true,
                  "value": "sk-PLACEHOLDER_API_KEY"
                },
                "temperature": {
                  "type": "float",
                  "required": true,
                  "placeholder": "",
                  "list": false,
                  "show": true,
                  "multiline": false,
                  "value": 0.2,
                  "fileTypes": [],
                  "file_path": "",
                  "password": false,
                  "name": "temperature",
                  "display_name": "Temperature",
                  "advanced": false,
                  "dynamic": false,
                  "info": "",
                  "rangeSpec": {
                    "min": 0,
                    "max": 2,
                    "step": 0.1
                  },
                  "title_case": true
                },
                "_type": "CustomComponent"
              },
              "description": "Conversational Agent that can use OpenAI's function calling API",
              "base_classes": [
                "AgentExecutor",
                "Chain"
              ],
              "display_name": "OpenAI Conversational Agent",
              "documentation": "",
              "custom_fields": {
                "model_name": null,
                "openai_api_key": null,
                "tools": null,
                "openai_api_base": null,
                "memory": null,
                "system_message": null,
                "max_token_limit": null,
                "temperature": null
              },
              "output_types": [
                "AgentExecutor"
              ],
              "field_formatters": {},
              "beta": true
            },
            "id": "OpenAIConversationalAgent-szldt"
          },
          "selected": false,
          "width": 384,
          "height": 892,
          "positionAbsolute": {
            "x": 1507.1877206101144,
            "y": -155.51549263219715
          },
          "dragging": false
        },
        {
          "id": "SystemMessagePromptTemplate-iged0",
          "type": "genericNode",
          "position": {
            "x": 974.8297536321288,
            "y": 524.458149389305
          },
          "data": {
            "type": "SystemMessagePromptTemplate",
            "node": {
              "template": {
                "additional_kwargs": {
                  "type": "dict",
                  "required": false,
                  "placeholder": "",
                  "list": false,
                  "show": false,
                  "multiline": false,
                  "fileTypes": [],
                  "password": false,
                  "name": "additional_kwargs",
                  "advanced": true,
                  "dynamic": true,
                  "info": "",
                  "title_case": true
                },
                "prompt": {
                  "type": "prompt",
                  "required": true,
                  "placeholder": "",
                  "list": true,
                  "show": true,
                  "multiline": true,
                  "value": "\nYou are a helpful assistant that talks casually about life in general.\nYou are a good listener and you can talk about anything.\nhear what yout vatbrb",
                  "fileTypes": [],
                  "password": false,
                  "name": "prompt",
                  "advanced": false,
                  "dynamic": true,
                  "info": "",
                  "title_case": true
                },
                "_type": "SystemMessagePromptTemplate"
              },
              "description": "System message prompt template.",
              "icon": null,
              "base_classes": [
                "_StringImageMessagePromptTemplate",
                "BaseMessagePromptTemplate",
                "SystemMessagePromptTemplate"
              ],
              "name": "",
              "display_name": "SystemMessagePromptTemplate",
              "documentation": "https://python.langchain.com/docs/modules/model_io/models/chat/how_to/prompts",
              "custom_fields": {
                "": []
              },
              "output_types": [],
              "full_path": null,
              "field_formatters": {},
              "beta": false,
              "error": null
            },
            "id": "SystemMessagePromptTemplate-iged0",
            "description": "System message prompt template.",
            "display_name": "SystemMessagePromptTemplate"
          },
          "selected": false,
          "width": 384,
          "height": 280,
          "positionAbsolute": {
            "x": 974.8297536321288,
            "y": 524.458149389305
          },
          "dragging": false
        },
        {
          "id": "OpenAPIToolkit-LHkim",
          "type": "genericNode",
          "position": {
            "x": 2028.438375256751,
            "y": 429.83048320985716
          },
          "data": {
            "type": "OpenAPIToolkit",
            "node": {
              "template": {
                "json_agent": {
                  "type": "AgentExecutor",
                  "required": true,
                  "placeholder": "",
                  "list": false,
                  "show": true,
                  "multiline": false,
                  "fileTypes": [],
                  "file_path": "",
                  "password": false,
                  "name": "json_agent",
                  "display_name": "JSON Agent",
                  "advanced": false,
                  "dynamic": false,
                  "info": "",
                  "title_case": true
                },
                "requests_wrapper": {
                  "type": "TextRequestsWrapper",
                  "required": true,
                  "placeholder": "",
                  "list": false,
                  "show": true,
                  "multiline": false,
                  "fileTypes": [],
                  "file_path": "",
                  "password": false,
                  "name": "requests_wrapper",
                  "display_name": "Text Requests Wrapper",
                  "advanced": false,
                  "dynamic": false,
                  "info": "",
                  "title_case": true
                },
                "code": {
                  "type": "code",
                  "required": true,
                  "placeholder": "",
                  "list": false,
                  "show": true,
                  "multiline": true,
                  "value": "from langchain_community.agent_toolkits.openapi.toolkit import BaseToolkit, OpenAPIToolkit\nfrom langchain_community.utilities.requests import TextRequestsWrapper\nfrom axiestudio import CustomComponent\nfrom axiestudio.field_typing import AgentExecutor\n\n\nclass OpenAPIToolkitComponent(CustomComponent):\n    display_name = \"OpenAPIToolkit\"\n    description = \"Toolkit for interacting with an OpenAPI API.\"\n\n    def build_config(self):\n        return {\n            \"json_agent\": {\"display_name\": \"JSON Agent\"},\n            \"requests_wrapper\": {\"display_name\": \"Text Requests Wrapper\"},\n        }\n\n    def build(\n        self,\n        json_agent: AgentExecutor,\n        requests_wrapper: TextRequestsWrapper,\n    ) -> BaseToolkit:\n        return OpenAPIToolkit(json_agent=json_agent, requests_wrapper=requests_wrapper)\n",
                  "fileTypes": [],
                  "file_path": "",
                  "password": false,
                  "name": "code",
                  "advanced": false,
                  "dynamic": true,
                  "info": "",
                  "title_case": true
                },
                "_type": "CustomComponent"
              },
              "description": "Toolkit for interacting with an OpenAPI API.",
              "base_classes": [
                "BaseToolkit"
              ],
              "display_name": "OpenAPIToolkit",
              "documentation": "",
              "custom_fields": {
                "json_agent": null,
                "requests_wrapper": null
              },
              "output_types": [
                "BaseToolkit"
              ],
              "field_formatters": {},
              "beta": true
            },
            "id": "OpenAPIToolkit-LHkim"
          },
          "selected": false,
          "width": 384,
          "height": 376,
          "positionAbsolute": {
            "x": 2028.438375256751,
            "y": 429.83048320985716
          },
          "dragging": false
        },
        {
          "id": "TextRequestsWrapper-f5cTV",
          "type": "genericNode",
          "position": {
            "x": 1947.3056546968633,
            "y": -65.9386083330235
          },
          "data": {
            "type": "TextRequestsWrapper",
            "node": {
              "template": {
                "aiosession": {
                  "type": "ClientSession",
                  "required": false,
                  "placeholder": "",
                  "list": false,
                  "show": false,
                  "multiline": false,
                  "fileTypes": [],
                  "password": false,
                  "name": "aiosession",
                  "advanced": false,
                  "dynamic": false,
                  "info": "",
                  "title_case": true
                },
                "auth": {
                  "type": "Any",
                  "required": false,
                  "placeholder": "",
                  "list": false,
                  "show": false,
                  "multiline": false,
                  "fileTypes": [],
                  "password": false,
                  "name": "auth",
                  "advanced": false,
                  "dynamic": false,
                  "info": "",
                  "title_case": true
                },
                "headers": {
                  "type": "dict",
                  "required": false,
                  "placeholder": "",
                  "list": false,
                  "show": true,
                  "multiline": true,
                  "value": [
                    {
                      "Authorization": "Bearer <token>"
                    },
                    {
                      "": ""
                    }
                  ],
                  "fileTypes": [],
                  "password": false,
                  "name": "headers",
                  "advanced": false,
                  "dynamic": false,
                  "info": "",
                  "title_case": true
                },
                "response_content_type": {
                  "type": "str",
                  "required": false,
                  "placeholder": "",
                  "list": false,
                  "show": false,
                  "multiline": false,
                  "value": "text",
                  "fileTypes": [],
                  "password": false,
                  "name": "response_content_type",
                  "advanced": false,
                  "dynamic": false,
                  "info": "",
                  "title_case": true
                },
                "_type": "TextRequestsWrapper"
              },
              "description": "Lightweight wrapper around requests library, with async support.",
              "base_classes": [
                "GenericRequestsWrapper",
                "TextRequestsWrapper"
              ],
              "display_name": "TextRequestsWrapper",
              "documentation": "",
              "custom_fields": {},
              "output_types": [],
              "field_formatters": {},
              "beta": false
            },
            "id": "TextRequestsWrapper-f5cTV"
          },
          "selected": false,
          "width": 384,
          "height": 350,
          "positionAbsolute": {
            "x": 1947.3056546968633,
            "y": -65.9386083330235
          },
          "dragging": false
        },
        {
          "id": "ConversationBufferMemory-BiSD2",
          "type": "genericNode",
          "position": {
            "x": 1623.331198553783,
            "y": 638.6748862992274
          },
          "data": {
            "type": "ConversationBufferMemory",
            "node": {
              "template": {
                "chat_memory": {
                  "type": "BaseChatMessageHistory",
                  "required": false,
                  "placeholder": "",
                  "list": false,
                  "show": true,
                  "multiline": false,
                  "fileTypes": [],
                  "password": false,
                  "name": "chat_memory",
                  "advanced": false,
                  "dynamic": false,
                  "info": "",
                  "title_case": true
                },
                "ai_prefix": {
                  "type": "str",
                  "required": false,
                  "placeholder": "",
                  "list": false,
                  "show": false,
                  "multiline": false,
                  "value": "AI",
                  "fileTypes": [],
                  "password": false,
                  "name": "ai_prefix",
                  "advanced": false,
                  "dynamic": false,
                  "info": "",
                  "title_case": true
                },
                "human_prefix": {
                  "type": "str",
                  "required": false,
                  "placeholder": "",
                  "list": false,
                  "show": false,
                  "multiline": false,
                  "value": "Human",
                  "fileTypes": [],
                  "password": false,
                  "name": "human_prefix",
                  "advanced": false,
                  "dynamic": false,
                  "info": "",
                  "title_case": true
                },
                "input_key": {
                  "type": "str",
                  "required": false,
                  "placeholder": "",
                  "list": false,
                  "show": true,
                  "multiline": false,
                  "value": "",
                  "fileTypes": [],
                  "file_path": "",
                  "password": false,
                  "name": "input_key",
                  "advanced": false,
                  "dynamic": false,
                  "info": "The variable to be used as Chat Input when more than one variable is available.",
                  "title_case": true
                },
                "memory_key": {
                  "type": "str",
                  "required": false,
                  "placeholder": "",
                  "list": false,
                  "show": true,
                  "multiline": false,
                  "value": "chat_history",
                  "fileTypes": [],
                  "password": false,
                  "name": "memory_key",
                  "advanced": false,
                  "dynamic": false,
                  "info": "",
                  "title_case": true
                },
                "output_key": {
                  "type": "str",
                  "required": false,
                  "placeholder": "",
                  "list": false,
                  "show": true,
                  "multiline": false,
                  "value": "",
                  "fileTypes": [],
                  "file_path": "",
                  "password": false,
                  "name": "output_key",
                  "advanced": false,
                  "dynamic": false,
                  "info": "The variable to be used as Chat Output (e.g. answer in a ConversationalRetrievalChain)",
                  "title_case": true
                },
                "return_messages": {
                  "type": "bool",
                  "required": false,
                  "placeholder": "",
                  "list": false,
                  "show": true,
                  "multiline": false,
                  "fileTypes": [],
                  "file_path": "",
                  "password": false,
                  "name": "return_messages",
                  "advanced": false,
                  "dynamic": false,
                  "info": "",
                  "title_case": true
                },
                "_type": "ConversationBufferMemory"
              },
              "description": "Buffer for storing conversation memory.",
              "base_classes": [
                "BaseMemory",
                "ConversationBufferMemory",
                "BaseChatMemory"
              ],
              "display_name": "ConversationBufferMemory",
              "documentation": "https://python.langchain.com/docs/modules/memory/how_to/buffer",
              "custom_fields": {},
              "output_types": [],
              "field_formatters": {},
              "beta": false
            },
            "id": "ConversationBufferMemory-BiSD2"
          },
          "selected": false,
          "width": 384,
          "height": 598,
          "positionAbsolute": {
            "x": 1623.331198553783,
            "y": 638.6748862992274
          },
          "dragging": false
        }
      ],
      "edges": [
        {
          "source": "ChatOpenAI-vohWb",
          "sourceHandle": "{œbaseClassesœ:[œBaseLanguageModelœ,œBaseLLMœ,œBaseLanguageModelœ],œdataTypeœ:œChatOpenAIœ,œidœ:œChatOpenAI-vohWbœ}",
          "target": "ConversationChain-ofJlO",
          "targetHandle": "{œfieldNameœ:œllmœ,œidœ:œConversationChain-ofJlOœ,œinputTypesœ:null,œtypeœ:œBaseLanguageModelœ}",
          "data": {
            "targetHandle": {
              "fieldName": "llm",
              "id": "ConversationChain-ofJlO",
              "inputTypes": null,
              "type": "BaseLanguageModel"
            },
            "sourceHandle": {
              "baseClasses": [
                "BaseLanguageModel",
                "BaseLLM",
                "BaseLanguageModel"
              ],
              "dataType": "ChatOpenAI",
              "id": "ChatOpenAI-vohWb"
            }
          },
          "style": {
            "stroke": "#555"
          },
          "className": "stroke-foreground  stroke-connection",
          "animated": false,
          "id": "reactflow__edge-ChatOpenAI-vohWb{œbaseClassesœ:[œBaseLanguageModelœ,œBaseLLMœ,œBaseLanguageModelœ],œdataTypeœ:œChatOpenAIœ,œidœ:œChatOpenAI-vohWbœ}-ConversationChain-ofJlO{œfieldNameœ:œllmœ,œidœ:œConversationChain-ofJlOœ,œinputTypesœ:null,œtypeœ:œBaseLanguageModelœ}"
        },
        {
          "source": "Tool-L0gzH",
          "sourceHandle": "{œbaseClassesœ:[œToolœ,œBaseToolœ],œdataTypeœ:œToolœ,œidœ:œTool-L0gzHœ}",
          "target": "OpenAIConversationalAgent-szldt",
          "targetHandle": "{œfieldNameœ:œtoolsœ,œidœ:œOpenAIConversationalAgent-szldtœ,œinputTypesœ:null,œtypeœ:œToolœ}",
          "data": {
            "targetHandle": {
              "fieldName": "tools",
              "id": "OpenAIConversationalAgent-szldt",
              "inputTypes": null,
              "type": "Tool"
            },
            "sourceHandle": {
              "baseClasses": [
                "Tool",
                "BaseTool"
              ],
              "dataType": "Tool",
              "id": "Tool-L0gzH"
            }
          },
          "style": {
            "stroke": "#555"
          },
          "className": "stroke-foreground  stroke-connection",
          "animated": false,
          "id": "reactflow__edge-Tool-L0gzH{œbaseClassesœ:[œToolœ,œBaseToolœ],œdataTypeœ:œToolœ,œidœ:œTool-L0gzHœ}-OpenAIConversationalAgent-szldt{œfieldNameœ:œtoolsœ,œidœ:œOpenAIConversationalAgent-szldtœ,œinputTypesœ:null,œtypeœ:œToolœ}"
        },
        {
          "source": "SystemMessagePromptTemplate-iged0",
          "sourceHandle": "{œbaseClassesœ:[œ_StringImageMessagePromptTemplateœ,œBaseMessagePromptTemplateœ,œSystemMessagePromptTemplateœ],œdataTypeœ:œSystemMessagePromptTemplateœ,œidœ:œSystemMessagePromptTemplate-iged0œ}",
          "target": "OpenAIConversationalAgent-szldt",
          "targetHandle": "{œfieldNameœ:œsystem_messageœ,œidœ:œOpenAIConversationalAgent-szldtœ,œinputTypesœ:null,œtypeœ:œSystemMessagePromptTemplateœ}",
          "data": {
            "targetHandle": {
              "fieldName": "system_message",
              "id": "OpenAIConversationalAgent-szldt",
              "inputTypes": null,
              "type": "SystemMessagePromptTemplate"
            },
            "sourceHandle": {
              "baseClasses": [
                "_StringImageMessagePromptTemplate",
                "BaseMessagePromptTemplate",
                "SystemMessagePromptTemplate"
              ],
              "dataType": "SystemMessagePromptTemplate",
              "id": "SystemMessagePromptTemplate-iged0"
            }
          },
          "style": {
            "stroke": "#555"
          },
          "className": "stroke-foreground  stroke-connection",
          "animated": false,
          "id": "reactflow__edge-SystemMessagePromptTemplate-iged0{œbaseClassesœ:[œ_StringImageMessagePromptTemplateœ,œBaseMessagePromptTemplateœ,œSystemMessagePromptTemplateœ],œdataTypeœ:œSystemMessagePromptTemplateœ,œidœ:œSystemMessagePromptTemplate-iged0œ}-OpenAIConversationalAgent-szldt{œfieldNameœ:œsystem_messageœ,œidœ:œOpenAIConversationalAgent-szldtœ,œinputTypesœ:null,œtypeœ:œSystemMessagePromptTemplateœ}"
        },
        {
          "source": "OpenAIConversationalAgent-szldt",
          "sourceHandle": "{œbaseClassesœ:[œAgentExecutorœ,œChainœ],œdataTypeœ:œOpenAIConversationalAgentœ,œidœ:œOpenAIConversationalAgent-szldtœ}",
          "target": "OpenAPIToolkit-LHkim",
          "targetHandle": "{œfieldNameœ:œjson_agentœ,œidœ:œOpenAPIToolkit-LHkimœ,œinputTypesœ:null,œtypeœ:œAgentExecutorœ}",
          "data": {
            "targetHandle": {
              "fieldName": "json_agent",
              "id": "OpenAPIToolkit-LHkim",
              "inputTypes": null,
              "type": "AgentExecutor"
            },
            "sourceHandle": {
              "baseClasses": [
                "AgentExecutor",
                "Chain"
              ],
              "dataType": "OpenAIConversationalAgent",
              "id": "OpenAIConversationalAgent-szldt"
            }
          },
          "style": {
            "stroke": "#555"
          },
          "className": "stroke-foreground  stroke-connection",
          "animated": false,
          "id": "reactflow__edge-OpenAIConversationalAgent-szldt{œbaseClassesœ:[œAgentExecutorœ,œChainœ],œdataTypeœ:œOpenAIConversationalAgentœ,œidœ:œOpenAIConversationalAgent-szldtœ}-OpenAPIToolkit-LHkim{œfieldNameœ:œjson_agentœ,œidœ:œOpenAPIToolkit-LHkimœ,œinputTypesœ:null,œtypeœ:œAgentExecutorœ}"
        },
        {
          "source": "TextRequestsWrapper-f5cTV",
          "sourceHandle": "{œbaseClassesœ:[œGenericRequestsWrapperœ,œTextRequestsWrapperœ],œdataTypeœ:œTextRequestsWrapperœ,œidœ:œTextRequestsWrapper-f5cTVœ}",
          "target": "OpenAPIToolkit-LHkim",
          "targetHandle": "{œfieldNameœ:œrequests_wrapperœ,œidœ:œOpenAPIToolkit-LHkimœ,œinputTypesœ:null,œtypeœ:œTextRequestsWrapperœ}",
          "data": {
            "targetHandle": {
              "fieldName": "requests_wrapper",
              "id": "OpenAPIToolkit-LHkim",
              "inputTypes": null,
              "type": "TextRequestsWrapper"
            },
            "sourceHandle": {
              "baseClasses": [
                "GenericRequestsWrapper",
                "TextRequestsWrapper"
              ],
              "dataType": "TextRequestsWrapper",
              "id": "TextRequestsWrapper-f5cTV"
            }
          },
          "style": {
            "stroke": "#555"
          },
          "className": "stroke-foreground  stroke-connection",
          "animated": false,
          "id": "reactflow__edge-TextRequestsWrapper-f5cTV{œbaseClassesœ:[œGenericRequestsWrapperœ,œTextRequestsWrapperœ],œdataTypeœ:œTextRequestsWrapperœ,œidœ:œTextRequestsWrapper-f5cTVœ}-OpenAPIToolkit-LHkim{œfieldNameœ:œrequests_wrapperœ,œidœ:œOpenAPIToolkit-LHkimœ,œinputTypesœ:null,œtypeœ:œTextRequestsWrapperœ}"
        },
        {
          "source": "ConversationBufferMemory-BiSD2",
          "sourceHandle": "{œbaseClassesœ:[œBaseMemoryœ,œConversationBufferMemoryœ,œBaseChatMemoryœ],œdataTypeœ:œConversationBufferMemoryœ,œidœ:œConversationBufferMemory-BiSD2œ}",
          "target": "OpenAIConversationalAgent-szldt",
          "targetHandle": "{œfieldNameœ:œmemoryœ,œidœ:œOpenAIConversationalAgent-szldtœ,œinputTypesœ:null,œtypeœ:œBaseMemoryœ}",
          "data": {
            "targetHandle": {
              "fieldName": "memory",
              "id": "OpenAIConversationalAgent-szldt",
              "inputTypes": null,
              "type": "BaseMemory"
            },
            "sourceHandle": {
              "baseClasses": [
                "BaseMemory",
                "ConversationBufferMemory",
                "BaseChatMemory"
              ],
              "dataType": "ConversationBufferMemory",
              "id": "ConversationBufferMemory-BiSD2"
            }
          },
          "style": {
            "stroke": "#555"
          },
          "className": "stroke-foreground  stroke-connection",
          "animated": false,
          "id": "reactflow__edge-ConversationBufferMemory-BiSD2{œbaseClassesœ:[œBaseMemoryœ,œConversationBufferMemoryœ,œBaseChatMemoryœ],œdataTypeœ:œConversationBufferMemoryœ,œidœ:œConversationBufferMemory-BiSD2œ}-OpenAIConversationalAgent-szldt{œfieldNameœ:œmemoryœ,œidœ:œOpenAIConversationalAgent-szldtœ,œinputTypesœ:null,œtypeœ:œBaseMemoryœ}"
        },
        {
          "source": "ConversationChain-ofJlO",
          "sourceHandle": "{œbaseClassesœ:[œChainœ,œCallableœ],œdataTypeœ:œConversationChainœ,œidœ:œConversationChain-ofJlOœ}",
          "target": "Tool-L0gzH",
          "targetHandle": "{œfieldNameœ:œfuncœ,œidœ:œTool-L0gzHœ,œinputTypesœ:null,œtypeœ:œCallableœ}",
          "data": {
            "targetHandle": {
              "fieldName": "func",
              "id": "Tool-L0gzH",
              "inputTypes": null,
              "type": "Callable"
            },
            "sourceHandle": {
              "baseClasses": [
                "Chain",
                "Callable"
              ],
              "dataType": "ConversationChain",
              "id": "ConversationChain-ofJlO"
            }
          },
          "style": {
            "stroke": "#555"
          },
          "className": "stroke-foreground  stroke-connection",
          "animated": false,
          "id": "reactflow__edge-ConversationChain-ofJlO{œbaseClassesœ:[œChainœ,œCallableœ],œdataTypeœ:œConversationChainœ,œidœ:œConversationChain-ofJlOœ}-Tool-L0gzH{œfieldNameœ:œfuncœ,œidœ:œTool-L0gzHœ,œinputTypesœ:null,œtypeœ:œCallableœ}",
          "selected": false
        }
      ],
      "viewport": {
        "x": 124.46309668778963,
        "y": 252.27764814955094,
        "zoom": 0.6381643844144765
      }
    },
    "date_created": "2024-06-20T23:24:15.791Z",
    "date_updated": "2024-06-20T23:24:15.825Z",
    "status": "Public",
    "sort": null,
    "user_updated": "acfde3b6-626a-4a8f-be83-e43ccd8f6873",
    "user_created": {
      "username": "DMX610",
      "first_name": "ST",
      "last_name": "BA",
      "id": "acfde3b6-626a-4a8f-be83-e43ccd8f6873"
    },
    "tags": []
  },
  "conversion": {
    "converted_at": "2025-08-19T18:09:02.842Z",
    "converted_from": "langflow",
    "converted_to": "axiestudio",
    "conversions_made": 16,
    "converter_version": "1.0.0"
  }
}