{
  "id": "e946a4a4-5c0c-4b4e-bbb0-938662dfb9ae",
  "name": "Ticket Categorization",
  "description": "Find and set the Ticket Category (Converted from Langflow Store for AxieStudio compatibility)",
  "type": "FLOW",
  "is_component": false,
  "author": {
    "username": "rudmac",
    "first_name": "Rud",
    "last_name": "Mac",
    "id": "9d308887-0e67-4bc4-b9c4-e1df042f2367",
    "full_name": "Rud Mac"
  },
  "store_url": "https://www.langflow.store/store/component/e946a4a4-5c0c-4b4e-bbb0-938662dfb9ae",
  "stats": {
    "downloads": 0,
    "likes": 0
  },
  "dates": {
    "created": "2024-07-19T21:06:50.586Z",
    "updated": "2024-07-19T21:06:50.650Z",
    "downloaded": "2025-08-19T17:50:06.618Z"
  },
  "tags": [],
  "technical": {
    "last_tested_version": "1.0.11",
    "private": true,
    "status": "Public"
  },
  "data": {
    "nodes": [
      {
        "id": "CustomComponent-J5MQN",
        "type": "genericNode",
        "position": {
          "x": 646.413841716881,
          "y": 43.24849587121585
        },
        "data": {
          "type": "ZenDesk Ticket Comments",
          "node": {
            "template": {
              "_type": "Component",
              "code": {
                "type": "code",
                "required": true,
                "placeholder": "",
                "list": false,
                "show": true,
                "multiline": true,
                "value": "# from axiestudio.field_typing import Data\nimport re\nfrom axiestudio.custom import Component\nfrom axiestudio.io import MessageTextInput, Output\nfrom axiestudio.schema import Data\nfrom axiestudio.schema.message import Message\nfrom zenpy import Zenpy\nfrom zenpy.lib.api_objects import Ticket, Comment\n\n\nclass CustomComponent(Component):\n    display_name = \"ZenDesk Ticket Comments\"\n    description = \"Get ZenDesk Ticket Comments\"\n    documentation: str = \"\"\n    icon = \"custom_components\"\n    name = \"ZenDesk Ticket Comments\"\n\n    inputs = [\n        MessageTextInput(name=\"ticket_id\", display_name=\"Ticket ID\", value=\"\"),\n        SecretStrInput(\n            name=\"zendesk_api_key\",\n            display_name=\"ZenDesk API Key\",\n            info=\"The ZenDesk API Key\",\n            advanced=False,\n            value=\"ZENDESK_API_KEY\",\n        ),\n        SecretStrInput(\n            name=\"zendesk_api_email\",\n            display_name=\"ZenDesk API Email\",\n            info=\"The ZenDesk API Email\",\n            advanced=False,\n            value=\"ZENDESK_API_EMAIL\",\n        ),\n        SecretStrInput(\n            name=\"zendesk_api_subdomain\",\n            display_name=\"ZenDesk API Subdomain\",\n            info=\"The ZenDesk API Subdomain\",\n            advanced=False,\n            value=\"ZENDESK_API_SUBDOMAIN\",\n        ),\n    ]\n\n    outputs = [\n        Output(display_name=\"Ticket Comments\", name=\"comments\", method=\"build_comments\"),\n    ]\n\n    def build_comments(self) -> Data:\n        credentials = {\n            'email' : self.zendesk_api_email,\n            'token' : self.zendesk_api_key,\n            'subdomain': self.zendesk_api_subdomain\n        }\n        zenpy_client = Zenpy(**credentials)\n        comments = zenpy_client.tickets.comments(ticket=self.ticket_id)\n        plain_comments = []\n        for comment in comments:\n            #plain_comments.append(comment.plain_body)\n            image_urls = []\n            if comment.attachments:\n                for attachment in comment.attachments:\n                    image_urls.append(attachment.content_url)\n            \n            body = comment.body\n            image_urls_by_regex = []\n            pattern = re.compile(r\"\\((https?:\\/\\/support\\.flowbots\\.ninja\\/attachments\\S+\\.\\w+)\\)?\")\n            image_urls_by_regex += pattern.findall(body)\n            \n            for image_url in image_urls_by_regex:\n                image_urls.append(image_url)\n            \n            plain_comments.append({\n                \"plain_body\": comment.plain_body,\n                \"created\": comment.created,\n                \"author\": str(comment.author),\n                \"name\": comment.author.name,\n                \"image_urls\": image_urls\n            })\n\n        data = Data(value=plain_comments)\n        self.status = data\n        return data\n",
                "fileTypes": [],
                "file_path": "",
                "password": false,
                "name": "code",
                "advanced": true,
                "dynamic": true,
                "info": "",
                "load_from_db": false,
                "title_case": false
              },
              "ticket_id": {
                "trace_as_input": true,
                "trace_as_metadata": true,
                "load_from_db": false,
                "list": false,
                "required": false,
                "placeholder": "",
                "show": true,
                "value": "",
                "name": "ticket_id",
                "display_name": "Ticket ID",
                "advanced": false,
                "input_types": [
                  "Message"
                ],
                "dynamic": false,
                "info": "",
                "title_case": false,
                "type": "str"
              },
              "zendesk_api_email": {
                "load_from_db": false,
                "required": false,
                "placeholder": "",
                "show": true,
                "value": "",
                "name": "zendesk_api_email",
                "display_name": "ZenDesk API Email",
                "advanced": true,
                "input_types": [],
                "dynamic": false,
                "info": "The ZenDesk API Email",
                "title_case": false,
                "password": true,
                "type": "str"
              },
              "zendesk_api_key": {
                "load_from_db": false,
                "required": false,
                "placeholder": "",
                "show": true,
                "value": "",
                "name": "zendesk_api_key",
                "display_name": "ZenDesk API Key",
                "advanced": true,
                "input_types": [],
                "dynamic": false,
                "info": "The ZenDesk API Key",
                "title_case": false,
                "password": true,
                "type": "str"
              },
              "zendesk_api_subdomain": {
                "load_from_db": false,
                "required": false,
                "placeholder": "",
                "show": true,
                "value": "",
                "name": "zendesk_api_subdomain",
                "display_name": "ZenDesk API Subdomain",
                "advanced": true,
                "input_types": [],
                "dynamic": false,
                "info": "The ZenDesk API Subdomain",
                "title_case": false,
                "password": true,
                "type": "str"
              }
            },
            "description": "Get ZenDesk Ticket Comments",
            "icon": "custom_components",
            "base_classes": [
              "Data"
            ],
            "display_name": "Zenpy Ticket Comments",
            "documentation": "",
            "custom_fields": {},
            "output_types": [],
            "pinned": false,
            "conditional_paths": [],
            "frozen": false,
            "outputs": [
              {
                "types": [
                  "Data"
                ],
                "selected": "Data",
                "name": "comments",
                "display_name": "Ticket Comments",
                "method": "build_comments",
                "value": "__UNDEFINED__",
                "cache": true
              }
            ],
            "field_order": [
              "ticket_id",
              "zendesk_api_key",
              "zendesk_api_email",
              "zendesk_api_subdomain"
            ],
            "beta": false,
            "edited": true
          },
          "id": "CustomComponent-J5MQN",
          "description": "Get ZenDesk Ticket Comments",
          "display_name": "Zenpy Ticket Comments"
        },
        "selected": false,
        "width": 384,
        "height": 307,
        "positionAbsolute": {
          "x": 646.413841716881,
          "y": 43.24849587121585
        },
        "dragging": false
      },
      {
        "id": "URL-pFyrY",
        "type": "genericNode",
        "position": {
          "x": 1309.192361274156,
          "y": -62.732488103563156
        },
        "data": {
          "type": "Openai File IDs",
          "node": {
            "template": {
              "_type": "Component",
              "comments": {
                "trace_as_input": true,
                "trace_as_metadata": true,
                "list": false,
                "required": false,
                "placeholder": "",
                "show": true,
                "value": "",
                "name": "comments",
                "display_name": "Ticket Comments",
                "advanced": false,
                "input_types": [
                  "Data"
                ],
                "dynamic": false,
                "info": "Ticket Comments",
                "title_case": false,
                "type": "other"
              },
              "code": {
                "type": "code",
                "required": true,
                "placeholder": "",
                "list": false,
                "show": true,
                "multiline": true,
                "value": "import re\nimport base64\nimport requests\n\nfrom urllib.parse import urlparse\nfrom urllib.parse import parse_qs\n\nfrom langchain_community.document_loaders.web_base import WebBaseLoader\n\nfrom axiestudio.custom import Component\nfrom axiestudio.io import MessageTextInput, Output, DataInput, IntInput\nfrom axiestudio.schema import Data\nfrom axiestudio.inputs import (\n    SecretStrInput,\n)\n\nfrom openai import OpenAI\n\n\nclass URLComponent(Component):\n    display_name = \"Create Openai Image IDs\"\n    description = \"Fetch content from one or more image URLs and create the Openai File IDs.\"\n    icon = \"custom_components\"\n    name = \"Openai File IDs\"\n\n    inputs = [\n        DataInput(\n            name=\"comments\",\n            display_name=\"Ticket Comments\",\n            info=\"Ticket Comments\"\n        ),\n        IntInput(name=\"idx\", display_name=\"Index\", value=0),\n        SecretStrInput(\n            name=\"openai_api_key\",\n            display_name=\"OpenAI API Key\",\n            info=\"The OpenAI API Key to use for the OpenAI model.\",\n            advanced=False,\n            value=\"OPENAI_API_KEY\",\n        ),\n    ]\n\n    outputs = [\n        Output(display_name=\"Openai Image IDs\", name=\"data\", method=\"fetch_content\"),\n    ]\n\n    def ensure_url(self, string: str) -> str:\n        \"\"\"\n        Ensures the given string is a URL by adding 'http://' if it doesn't start with 'http://' or 'https://'.\n        Raises an error if the string is not a valid URL.\n\n        Parameters:\n            string (str): The string to be checked and possibly modified.\n\n        Returns:\n            str: The modified string that is ensured to be a URL.\n\n        Raises:\n            ValueError: If the string is not a valid URL.\n        \"\"\"\n        if not string.startswith((\"http://\", \"https://\")):\n            string = \"http://\" + string\n\n        # Basic URL validation regex\n        url_regex = re.compile(\n            r\"^(https?:\\/\\/)?\"  # optional protocol\n            r\"(www\\.)?\"  # optional www\n            r\"([a-zA-Z0-9.-]+)\"  # domain\n            r\"(\\.[a-zA-Z]{2,})?\"  # top-level domain\n            r\"(:\\d+)?\"  # optional port\n            r\"(\\/[^\\s]*)?$\",  # optional path\n            re.IGNORECASE,\n        )\n\n        if not url_regex.match(string):\n            raise ValueError(f\"Invalid URL: {string}\")\n\n        return string\n\n    def fetch_content(self) -> list[Data]:\n        openai_api_key = self.openai_api_key\n        client = OpenAI(api_key=openai_api_key)\n        \n        urls = self.comments.value[self.idx][\"image_urls\"]\n        if len(urls) <= 0:\n            self.status = []\n            return []\n        \n        image_ids = []\n        \n        for image_url in urls:\n            response = requests.get(image_url)\n            if response.status_code == 200:\n                parsed_url = urlparse(image_url)\n                file_name = parse_qs(parsed_url.query)['name'][0]\n                if file_name.endswith((\".jpeg\", \".jpg\", \".png\", \".gif\", \".webp\")):\n                    file = client.files.create(\n                        file=(f\"{file_name.lower()}\", response.content),\n                        purpose=\"assistants\",\n                    )\n                    image_ids.append(file.id)\n        \n        #urls = [self.ensure_url(url.strip()) for url in self.urls if url.strip()]\n        #loader = WebBaseLoader(web_paths=urls, encoding=\"utf-8\")\n        #docs = loader.load()\n        #data = [Data(content=doc.page_content, **doc.metadata) for doc in docs]\n        data = image_ids\n        self.status = data\n        return data",
                "fileTypes": [],
                "file_path": "",
                "password": false,
                "name": "code",
                "advanced": true,
                "dynamic": true,
                "info": "",
                "load_from_db": false,
                "title_case": false
              },
              "idx": {
                "trace_as_metadata": true,
                "list": false,
                "required": false,
                "placeholder": "",
                "show": true,
                "value": 0,
                "name": "idx",
                "display_name": "Index",
                "advanced": false,
                "dynamic": false,
                "info": "",
                "title_case": false,
                "type": "int"
              },
              "openai_api_key": {
                "load_from_db": false,
                "required": false,
                "placeholder": "",
                "show": true,
                "value": "",
                "name": "openai_api_key",
                "display_name": "OpenAI API Key",
                "advanced": true,
                "input_types": [],
                "dynamic": false,
                "info": "The OpenAI API Key to use for the OpenAI model.",
                "title_case": false,
                "password": true,
                "type": "str"
              }
            },
            "description": "Fetch content from one or more image URLs and create the Openai File IDs.",
            "icon": "custom_components",
            "base_classes": [
              "Data"
            ],
            "display_name": "Openai File IDs",
            "documentation": "",
            "custom_fields": {},
            "output_types": [],
            "pinned": false,
            "conditional_paths": [],
            "frozen": false,
            "outputs": [
              {
                "types": [
                  "Data"
                ],
                "selected": "Data",
                "name": "data",
                "display_name": "Openai Image IDs",
                "method": "fetch_content",
                "value": "__UNDEFINED__",
                "cache": true
              }
            ],
            "field_order": [
              "comments",
              "idx",
              "openai_api_key"
            ],
            "beta": false,
            "edited": false
          },
          "id": "URL-pFyrY",
          "description": "Fetch content from one or more image URLs and create the Openai File IDs.",
          "display_name": "Openai File IDs"
        },
        "selected": false,
        "width": 384,
        "height": 375,
        "positionAbsolute": {
          "x": 1309.192361274156,
          "y": -62.732488103563156
        },
        "dragging": false
      },
      {
        "id": "Prompt-YbrxB",
        "type": "genericNode",
        "position": {
          "x": 1719.0392124419304,
          "y": 468.6499727852064
        },
        "data": {
          "type": "Prompt",
          "node": {
            "template": {
              "_type": "Component",
              "code": {
                "type": "code",
                "required": true,
                "placeholder": "",
                "list": false,
                "show": true,
                "multiline": true,
                "value": "from axiestudio.base.prompts.api_utils import process_prompt_template\nfrom axiestudio.custom import Component\nfrom axiestudio.io import Output, PromptInput\nfrom axiestudio.schema.message import Message\nfrom axiestudio.template.utils import update_template_values\n\n\nclass PromptComponent(Component):\n    display_name: str = \"Prompt\"\n    description: str = \"Create a prompt template with dynamic variables.\"\n    icon = \"prompts\"\n    trace_type = \"prompt\"\n    name = \"Prompt\"\n\n    inputs = [\n        PromptInput(name=\"template\", display_name=\"Template\"),\n    ]\n\n    outputs = [\n        Output(display_name=\"Prompt Message\", name=\"prompt\", method=\"build_prompt\"),\n    ]\n\n    async def build_prompt(\n        self,\n    ) -> Message:\n        prompt = await Message.from_template_and_variables(**self._attributes)\n        self.status = prompt.text\n        return prompt\n\n    def post_code_processing(self, new_frontend_node: dict, current_frontend_node: dict):\n        \"\"\"\n        This function is called after the code validation is done.\n        \"\"\"\n        frontend_node = super().post_code_processing(new_frontend_node, current_frontend_node)\n        template = frontend_node[\"template\"][\"template\"][\"value\"]\n        _ = process_prompt_template(\n            template=template,\n            name=\"template\",\n            custom_fields=frontend_node[\"custom_fields\"],\n            frontend_node_template=frontend_node[\"template\"],\n        )\n        # Now that template is updated, we need to grab any values that were set in the current_frontend_node\n        # and update the frontend_node with those values\n        update_template_values(new_template=frontend_node, previous_template=current_frontend_node[\"template\"])\n        return frontend_node\n",
                "fileTypes": [],
                "file_path": "",
                "password": false,
                "name": "code",
                "advanced": true,
                "dynamic": true,
                "info": "",
                "load_from_db": false,
                "title_case": false
              },
              "template": {
                "trace_as_input": true,
                "list": false,
                "required": false,
                "placeholder": "",
                "show": true,
                "value": "<email_subject>{subject}</email_subject>\n<email_body>{body}</email_body>",
                "name": "template",
                "display_name": "Template",
                "advanced": false,
                "dynamic": false,
                "info": "",
                "title_case": false,
                "type": "prompt",
                "load_from_db": false
              },
              "subject": {
                "field_type": "str",
                "required": false,
                "placeholder": "",
                "list": false,
                "show": true,
                "multiline": true,
                "value": "",
                "fileTypes": [],
                "file_path": "",
                "password": false,
                "name": "subject",
                "display_name": "subject",
                "advanced": false,
                "input_types": [
                  "Message",
                  "Text"
                ],
                "dynamic": false,
                "info": "",
                "load_from_db": false,
                "title_case": false,
                "type": "str"
              },
              "body": {
                "field_type": "str",
                "required": false,
                "placeholder": "",
                "list": false,
                "show": true,
                "multiline": true,
                "value": "",
                "fileTypes": [],
                "file_path": "",
                "password": false,
                "name": "body",
                "display_name": "body",
                "advanced": false,
                "input_types": [
                  "Message",
                  "Text"
                ],
                "dynamic": false,
                "info": "",
                "load_from_db": false,
                "title_case": false,
                "type": "str"
              }
            },
            "description": "Create a prompt template with dynamic variables.",
            "icon": "prompts",
            "base_classes": [
              "Message"
            ],
            "display_name": "Prompt",
            "documentation": "",
            "custom_fields": {
              "template": [
                "subject",
                "body"
              ]
            },
            "output_types": [],
            "pinned": false,
            "conditional_paths": [],
            "frozen": false,
            "outputs": [
              {
                "types": [
                  "Message"
                ],
                "selected": "Message",
                "name": "prompt",
                "display_name": "Prompt Message",
                "method": "build_prompt",
                "value": "__UNDEFINED__",
                "cache": true
              }
            ],
            "field_order": [
              "template"
            ],
            "beta": false,
            "edited": false
          },
          "id": "Prompt-YbrxB",
          "description": "Create a prompt template with dynamic variables.",
          "display_name": "Prompt"
        },
        "selected": false,
        "width": 384,
        "height": 514,
        "positionAbsolute": {
          "x": 1719.0392124419304,
          "y": 468.6499727852064
        },
        "dragging": false
      },
      {
        "id": "ParseData-yKmV3",
        "type": "genericNode",
        "position": {
          "x": 1185.0546923446082,
          "y": 398.6715927423094
        },
        "data": {
          "type": "Ticket Comments Plain Body",
          "node": {
            "template": {
              "_type": "Component",
              "data": {
                "trace_as_input": true,
                "trace_as_metadata": true,
                "list": false,
                "required": false,
                "placeholder": "",
                "show": true,
                "value": "",
                "name": "data",
                "display_name": "Ticket Comments",
                "advanced": false,
                "input_types": [
                  "Data"
                ],
                "dynamic": false,
                "info": "Ticket Comments",
                "title_case": false,
                "type": "other"
              },
              "code": {
                "type": "code",
                "required": true,
                "placeholder": "",
                "list": false,
                "show": true,
                "multiline": true,
                "value": "from axiestudio.custom import Component\nfrom axiestudio.helpers.data import data_to_text\nfrom axiestudio.io import DataInput, MultilineInput, Output, StrInput, IntInput\nfrom axiestudio.schema.message import Message\n\n\nclass ParseDataComponent(Component):\n    display_name = \"Ticket Comments Plain Body\"\n    description = \"Return the Ticket Comments plain body\"\n    icon = \"custom_components\"\n    name = \"Ticket Comments Plain Body\"\n\n    inputs = [\n        DataInput(name=\"data\", display_name=\"Ticket Comments\", info=\"Ticket Comments\"),\n        IntInput(name=\"idx\", display_name=\"Index\", value=\"0\"),\n    ]\n\n    outputs = [\n        Output(display_name=\"Plain Body\", name=\"text\", method=\"parse_data\"),\n    ]\n\n    def parse_data(self) -> Message:\n        plain_body = self.data.value[self.idx][\"plain_body\"]\n        self.status = plain_body\n        return Message(text=plain_body)\n",
                "fileTypes": [],
                "file_path": "",
                "password": false,
                "name": "code",
                "advanced": true,
                "dynamic": true,
                "info": "",
                "load_from_db": false,
                "title_case": false
              },
              "idx": {
                "trace_as_metadata": true,
                "list": false,
                "required": false,
                "placeholder": "",
                "show": true,
                "value": "0",
                "name": "idx",
                "display_name": "Index",
                "advanced": false,
                "dynamic": false,
                "info": "",
                "title_case": false,
                "type": "int"
              }
            },
            "description": "Return the Ticket Comments plain body",
            "icon": "custom_components",
            "base_classes": [
              "Message"
            ],
            "display_name": "Ticket Comments Plain Body",
            "documentation": "",
            "custom_fields": {},
            "output_types": [],
            "pinned": false,
            "conditional_paths": [],
            "frozen": false,
            "outputs": [
              {
                "types": [
                  "Message"
                ],
                "selected": "Message",
                "name": "text",
                "display_name": "Plain Body",
                "method": "parse_data",
                "value": "__UNDEFINED__",
                "cache": true
              }
            ],
            "field_order": [
              "data",
              "idx"
            ],
            "beta": false,
            "edited": true
          },
          "id": "ParseData-yKmV3",
          "description": "Return the Ticket Comments plain body",
          "display_name": "Ticket Comments Plain Body"
        },
        "selected": false,
        "width": 384,
        "height": 347,
        "positionAbsolute": {
          "x": 1185.0546923446082,
          "y": 398.6715927423094
        },
        "dragging": false
      },
      {
        "id": "CustomComponent-qz2O3",
        "type": "genericNode",
        "position": {
          "x": 2226.4319744525233,
          "y": -12.575861974809769
        },
        "data": {
          "type": "CustomComponent",
          "node": {
            "template": {
              "_type": "Component",
              "image_ids": {
                "trace_as_input": true,
                "trace_as_metadata": true,
                "list": false,
                "required": false,
                "placeholder": "",
                "show": true,
                "value": "",
                "name": "image_ids",
                "display_name": "Openai Image IDs",
                "advanced": false,
                "input_types": [
                  "Data"
                ],
                "dynamic": false,
                "info": "Image IDs",
                "title_case": false,
                "type": "other"
              },
              "assistante_id": {
                "trace_as_input": true,
                "trace_as_metadata": true,
                "load_from_db": false,
                "list": false,
                "required": false,
                "placeholder": "",
                "show": true,
                "value": "asst_lxlSo4xA16h9WwBS2gpNAVHt",
                "name": "assistante_id",
                "display_name": "Openai Assistante ID",
                "advanced": false,
                "input_types": [
                  "Message"
                ],
                "dynamic": false,
                "info": "",
                "title_case": false,
                "type": "str"
              },
              "code": {
                "type": "code",
                "required": true,
                "placeholder": "",
                "list": false,
                "show": true,
                "multiline": true,
                "value": "# from axiestudio.field_typing import Data\nimport os\nimport base64\nfrom pydantic.v1 import SecretStr\nfrom axiestudio.custom import Component\nfrom axiestudio.io import MessageTextInput, Output, DataInput\nfrom axiestudio.schema import Data\nfrom axiestudio.schema.message import Message\nfrom axiestudio.inputs import (\n    SecretStrInput,\n)\nfrom openai import OpenAI\n\nclass CustomComponent(Component):\n    display_name = \"Custom Component\"\n    description = \"Use as a template to create your own component.\"\n    documentation: str = \"http://docs.axiestudio.org/components/custom\"\n    icon = \"custom_components\"\n    name = \"CustomComponent\"\n\n    inputs = [\n        MessageTextInput(name=\"user_prompt\", display_name=\"User Prompy\", value=\"\"),\n        MessageTextInput(name=\"assistante_id\", display_name=\"Openai Assistante ID\", value=\"\"),\n        DataInput(\n            name=\"image_ids\",\n            display_name=\"Openai Image IDs\",\n            info=\"Image IDs\"\n        ),\n        SecretStrInput(\n            name=\"openai_api_key\",\n            display_name=\"OpenAI API Key\",\n            info=\"The OpenAI API Key to use for the OpenAI model.\",\n            advanced=False,\n            value=\"OPENAI_API_KEY\",\n        ),\n    ]\n\n    outputs = [\n        Output(display_name=\"Output\", name=\"output\", method=\"build_output\"),\n    ]\n\n    def build_output(self) -> Message:\n        openai_api_key = self.openai_api_key\n        client = OpenAI(api_key=openai_api_key)\n        \n        image_ids = self.image_ids\n\n        thread = client.beta.threads.create()\n        \n        content = [\n            {\n                \"type\": \"text\",\n                \"text\": self.user_prompt if self.user_prompt else \"empty body\"\n            }\n        ]\n        \n        for image_id in image_ids:\n            content.append({\n                \"type\": \"image_file\",\n                \"image_file\": \n                {\n                    \"file_id\": image_id,\n                    \"detail\": \"low\"\n                }\n            })\n        \n        message = client.beta.threads.messages.create(\n            thread_id=thread.id,\n            role=\"user\",\n            content=content\n        )\n        \n        run = client.beta.threads.runs.create_and_poll(\n            thread_id=thread.id,\n            assistant_id=self.assistante_id\n        )\n        \n        if run.status == 'completed': \n            messages = client.beta.threads.messages.list(\n                thread_id=thread.id\n            )\n            for message in messages:\n                return Message(text=message.content[0].text.value)\n        else:\n            return Message(text=run.status)\n",
                "fileTypes": [],
                "file_path": "",
                "password": false,
                "name": "code",
                "advanced": true,
                "dynamic": true,
                "info": "",
                "load_from_db": false,
                "title_case": false
              },
              "openai_api_key": {
                "load_from_db": false,
                "required": false,
                "placeholder": "",
                "show": true,
                "value": "",
                "name": "openai_api_key",
                "display_name": "OpenAI API Key",
                "advanced": true,
                "input_types": [],
                "dynamic": false,
                "info": "The OpenAI API Key to use for the OpenAI model.",
                "title_case": false,
                "password": true,
                "type": "str"
              },
              "user_prompt": {
                "trace_as_input": true,
                "trace_as_metadata": true,
                "load_from_db": false,
                "list": false,
                "required": false,
                "placeholder": "",
                "show": true,
                "value": "",
                "name": "user_prompt",
                "display_name": "User Prompy",
                "advanced": false,
                "input_types": [
                  "Message"
                ],
                "dynamic": false,
                "info": "",
                "title_case": false,
                "type": "str"
              }
            },
            "description": "Use as a template to create your own component.",
            "icon": "custom_components",
            "base_classes": [
              "Message"
            ],
            "display_name": "Openai Assistant",
            "documentation": "http://docs.axiestudio.org/components/custom",
            "custom_fields": {},
            "output_types": [],
            "pinned": false,
            "conditional_paths": [],
            "frozen": false,
            "outputs": [
              {
                "types": [
                  "Message"
                ],
                "selected": "Message",
                "name": "output",
                "display_name": "Output",
                "method": "build_output",
                "value": "__UNDEFINED__",
                "cache": true
              }
            ],
            "field_order": [
              "user_prompt",
              "assistante_id",
              "image_ids",
              "openai_api_key"
            ],
            "beta": false,
            "edited": true
          },
          "id": "CustomComponent-qz2O3",
          "description": "Use as a template to create your own component.",
          "display_name": "Openai Assistant"
        },
        "selected": false,
        "width": 384,
        "height": 477,
        "positionAbsolute": {
          "x": 2226.4319744525233,
          "y": -12.575861974809769
        },
        "dragging": false
      },
      {
        "id": "ZenDesk Ticket Comments-cQKbp",
        "type": "genericNode",
        "position": {
          "x": 2738.121617853553,
          "y": 331.05088099912314
        },
        "data": {
          "type": "ZenDesk Ticket Comments",
          "node": {
            "template": {
              "_type": "Component",
              "category": {
                "trace_as_input": true,
                "trace_as_metadata": true,
                "load_from_db": false,
                "list": false,
                "required": false,
                "placeholder": "",
                "show": true,
                "value": "",
                "name": "category",
                "display_name": "Category",
                "advanced": false,
                "input_types": [
                  "Message"
                ],
                "dynamic": false,
                "info": "",
                "title_case": false,
                "type": "str"
              },
              "category_field_id": {
                "trace_as_metadata": true,
                "list": false,
                "required": false,
                "placeholder": "",
                "show": true,
                "value": "26190819793556",
                "name": "category_field_id",
                "display_name": "Category Field ID",
                "advanced": false,
                "dynamic": false,
                "info": "",
                "title_case": false,
                "type": "int",
                "load_from_db": false
              },
              "code": {
                "type": "code",
                "required": true,
                "placeholder": "",
                "list": false,
                "show": true,
                "multiline": true,
                "value": "# from axiestudio.field_typing import Data\nimport re\nfrom axiestudio.custom import Component\nfrom axiestudio.io import MessageTextInput, Output, IntInput\nfrom axiestudio.schema import Data\nfrom axiestudio.schema.message import Message\nfrom zenpy import Zenpy\nfrom zenpy.lib.api_objects import Ticket, Comment\n\n\nclass CustomComponent(Component):\n    display_name = \"ZenDesk Ticket Comments\"\n    description = \"Get ZenDesk Ticket Comments\"\n    documentation: str = \"\"\n    icon = \"custom_components\"\n    name = \"ZenDesk Ticket Comments\"\n\n    inputs = [\n        MessageTextInput(name=\"ticket_id\", display_name=\"Ticket ID\", value=\"\"),\n        MessageTextInput(name=\"category\", display_name=\"Category\", value=\"\"),\n        IntInput(name=\"category_field_id\", display_name=\"Category Field ID\", value=0),\n        SecretStrInput(\n            name=\"zendesk_api_key\",\n            display_name=\"ZenDesk API Key\",\n            info=\"The ZenDesk API Key\",\n            advanced=False,\n            value=\"ZENDESK_API_KEY\",\n        ),\n        SecretStrInput(\n            name=\"zendesk_api_email\",\n            display_name=\"ZenDesk API Email\",\n            info=\"The ZenDesk API Email\",\n            advanced=False,\n            value=\"ZENDESK_API_EMAIL\",\n        ),\n        SecretStrInput(\n            name=\"zendesk_api_subdomain\",\n            display_name=\"ZenDesk API Subdomain\",\n            info=\"The ZenDesk API Subdomain\",\n            advanced=False,\n            value=\"ZENDESK_API_SUBDOMAIN\",\n        ),\n    ]\n\n    outputs = [\n        Output(display_name=\"Category\", name=\"category_output\", method=\"update_ticket\"),\n    ]\n\n    def update_ticket(self) -> Message:\n        credentials = {\n            'email' : self.zendesk_api_email,\n            'token' : self.zendesk_api_key,\n            'subdomain': self.zendesk_api_subdomain\n        }\n        zenpy_client = Zenpy(**credentials)\n        \n        ticket = zenpy_client.tickets(id=self.ticket_id)\n\n        #ticket.tags.append(self.category)\n        for custom_field in ticket.custom_fields:\n            if self.category_field_id == custom_field[\"id\"]: # category\n                custom_field[\"value\"] = self.category\n        \n        ticket_audit = zenpy_client.tickets.update(ticket)\n        \n        #message = Message(text=str(ticket_audit.ticket.id))\n        message = Message(text=self.category)\n        self.status = message\n        return message\n",
                "fileTypes": [],
                "file_path": "",
                "password": false,
                "name": "code",
                "advanced": true,
                "dynamic": true,
                "info": "",
                "load_from_db": false,
                "title_case": false
              },
              "ticket_id": {
                "trace_as_input": true,
                "trace_as_metadata": true,
                "load_from_db": false,
                "list": false,
                "required": false,
                "placeholder": "",
                "show": true,
                "value": "",
                "name": "ticket_id",
                "display_name": "Ticket ID",
                "advanced": false,
                "input_types": [
                  "Message"
                ],
                "dynamic": false,
                "info": "",
                "title_case": false,
                "type": "str"
              },
              "zendesk_api_email": {
                "load_from_db": false,
                "required": false,
                "placeholder": "",
                "show": true,
                "value": "",
                "name": "zendesk_api_email",
                "display_name": "ZenDesk API Email",
                "advanced": true,
                "input_types": [],
                "dynamic": false,
                "info": "The ZenDesk API Email",
                "title_case": false,
                "password": true,
                "type": "str"
              },
              "zendesk_api_key": {
                "load_from_db": false,
                "required": false,
                "placeholder": "",
                "show": true,
                "value": "",
                "name": "zendesk_api_key",
                "display_name": "ZenDesk API Key",
                "advanced": true,
                "input_types": [],
                "dynamic": false,
                "info": "The ZenDesk API Key",
                "title_case": false,
                "password": true,
                "type": "str"
              },
              "zendesk_api_subdomain": {
                "load_from_db": false,
                "required": false,
                "placeholder": "",
                "show": true,
                "value": "",
                "name": "zendesk_api_subdomain",
                "display_name": "ZenDesk API Subdomain",
                "advanced": true,
                "input_types": [],
                "dynamic": false,
                "info": "The ZenDesk API Subdomain",
                "title_case": false,
                "password": true,
                "type": "str"
              }
            },
            "description": "Get ZenDesk Ticket Comments",
            "icon": "custom_components",
            "base_classes": [
              "Message"
            ],
            "display_name": "Zenpy Ticket Update",
            "documentation": "",
            "custom_fields": {},
            "output_types": [],
            "pinned": false,
            "conditional_paths": [],
            "frozen": false,
            "outputs": [
              {
                "types": [
                  "Message"
                ],
                "selected": "Message",
                "name": "category_output",
                "display_name": "Category",
                "method": "update_ticket",
                "value": "__UNDEFINED__",
                "cache": true
              }
            ],
            "field_order": [
              "ticket_id",
              "category",
              "category_field_id",
              "zendesk_api_key",
              "zendesk_api_email",
              "zendesk_api_subdomain"
            ],
            "beta": false,
            "edited": true
          },
          "id": "ZenDesk Ticket Comments-cQKbp",
          "description": "Get ZenDesk Ticket Comments",
          "display_name": "Zenpy Ticket Update"
        },
        "selected": false,
        "width": 384,
        "height": 486,
        "positionAbsolute": {
          "x": 2738.121617853553,
          "y": 331.05088099912314
        },
        "dragging": false
      },
      {
        "id": "ZenDesk Ticket Comments-2VpZG",
        "type": "genericNode",
        "position": {
          "x": 628.5648395039048,
          "y": 476.78459206000196
        },
        "data": {
          "type": "ZenDesk Ticket Subject",
          "node": {
            "template": {
              "_type": "Component",
              "code": {
                "type": "code",
                "required": true,
                "placeholder": "",
                "list": false,
                "show": true,
                "multiline": true,
                "value": "# from axiestudio.field_typing import Data\nimport re\nfrom axiestudio.custom import Component\nfrom axiestudio.io import MessageTextInput, Output\nfrom axiestudio.schema import Data\nfrom axiestudio.schema.message import Message\nfrom zenpy import Zenpy\nfrom zenpy.lib.api_objects import Ticket, Comment\n\n\nclass CustomComponent(Component):\n    display_name = \"ZenDesk Ticket Subject\"\n    description = \"Get ZenDesk Ticket Subject\"\n    documentation: str = \"\"\n    icon = \"custom_components\"\n    name = \"ZenDesk Ticket Subject\"\n\n    inputs = [\n        MessageTextInput(name=\"ticket_id\", display_name=\"Ticket ID\", value=\"\"),\n        SecretStrInput(\n            name=\"zendesk_api_key\",\n            display_name=\"ZenDesk API Key\",\n            info=\"The ZenDesk API Key\",\n            advanced=False,\n            value=\"ZENDESK_API_KEY\",\n        ),\n        SecretStrInput(\n            name=\"zendesk_api_email\",\n            display_name=\"ZenDesk API Email\",\n            info=\"The ZenDesk API Email\",\n            advanced=False,\n            value=\"ZENDESK_API_EMAIL\",\n        ),\n        SecretStrInput(\n            name=\"zendesk_api_subdomain\",\n            display_name=\"ZenDesk API Subdomain\",\n            info=\"The ZenDesk API Subdomain\",\n            advanced=False,\n            value=\"ZENDESK_API_SUBDOMAIN\",\n        ),\n    ]\n\n    outputs = [\n        Output(display_name=\"Ticket Subject\", name=\"text\", method=\"build_subject\"),\n    ]\n\n    def build_subject(self) -> Message:\n        credentials = {\n            'email' : self.zendesk_api_email,\n            'token' : self.zendesk_api_key,\n            'subdomain': self.zendesk_api_subdomain\n        }\n        zenpy_client = Zenpy(**credentials)\n        ticket = zenpy_client.tickets(id=self.ticket_id)\n        subject = ticket.subject\n        self.status = subject\n        return Message(text=subject)\n",
                "fileTypes": [],
                "file_path": "",
                "password": false,
                "name": "code",
                "advanced": true,
                "dynamic": true,
                "info": "",
                "load_from_db": false,
                "title_case": false
              },
              "ticket_id": {
                "trace_as_input": true,
                "trace_as_metadata": true,
                "load_from_db": false,
                "list": false,
                "required": false,
                "placeholder": "",
                "show": true,
                "value": "",
                "name": "ticket_id",
                "display_name": "Ticket ID",
                "advanced": false,
                "input_types": [
                  "Message"
                ],
                "dynamic": false,
                "info": "",
                "title_case": false,
                "type": "str"
              },
              "zendesk_api_email": {
                "load_from_db": false,
                "required": false,
                "placeholder": "",
                "show": true,
                "value": "",
                "name": "zendesk_api_email",
                "display_name": "ZenDesk API Email",
                "advanced": true,
                "input_types": [],
                "dynamic": false,
                "info": "The ZenDesk API Email",
                "title_case": false,
                "password": true,
                "type": "str"
              },
              "zendesk_api_key": {
                "load_from_db": false,
                "required": false,
                "placeholder": "",
                "show": true,
                "value": "",
                "name": "zendesk_api_key",
                "display_name": "ZenDesk API Key",
                "advanced": true,
                "input_types": [],
                "dynamic": false,
                "info": "The ZenDesk API Key",
                "title_case": false,
                "password": true,
                "type": "str"
              },
              "zendesk_api_subdomain": {
                "load_from_db": false,
                "required": false,
                "placeholder": "",
                "show": true,
                "value": "",
                "name": "zendesk_api_subdomain",
                "display_name": "ZenDesk API Subdomain",
                "advanced": true,
                "input_types": [],
                "dynamic": false,
                "info": "The ZenDesk API Subdomain",
                "title_case": false,
                "password": true,
                "type": "str"
              }
            },
            "description": "Get ZenDesk Ticket Subject",
            "icon": "custom_components",
            "base_classes": [
              "Message"
            ],
            "display_name": "Zenpy Ticket Subject",
            "documentation": "",
            "custom_fields": {},
            "output_types": [],
            "pinned": false,
            "conditional_paths": [],
            "frozen": false,
            "outputs": [
              {
                "types": [
                  "Message"
                ],
                "selected": "Message",
                "name": "text",
                "display_name": "Ticket Subject",
                "method": "build_subject",
                "value": "__UNDEFINED__",
                "cache": true
              }
            ],
            "field_order": [
              "ticket_id",
              "zendesk_api_key",
              "zendesk_api_email",
              "zendesk_api_subdomain"
            ],
            "beta": false,
            "edited": true
          },
          "id": "ZenDesk Ticket Comments-2VpZG",
          "description": "Get ZenDesk Ticket Subject",
          "display_name": "Zenpy Ticket Subject"
        },
        "selected": false,
        "width": 384,
        "height": 307,
        "positionAbsolute": {
          "x": 628.5648395039048,
          "y": 476.78459206000196
        },
        "dragging": false
      },
      {
        "id": "ChatInput-HMa1b",
        "type": "genericNode",
        "position": {
          "x": 34.66803859836864,
          "y": 232.96322747118046
        },
        "data": {
          "type": "ChatInput",
          "node": {
            "template": {
              "_type": "Component",
              "files": {
                "trace_as_metadata": true,
                "file_path": "",
                "fileTypes": [
                  "txt",
                  "md",
                  "mdx",
                  "csv",
                  "json",
                  "yaml",
                  "yml",
                  "xml",
                  "html",
                  "htm",
                  "pdf",
                  "docx",
                  "py",
                  "sh",
                  "sql",
                  "js",
                  "ts",
                  "tsx",
                  "jpg",
                  "jpeg",
                  "png",
                  "bmp",
                  "image"
                ],
                "list": true,
                "required": false,
                "placeholder": "",
                "show": true,
                "value": "",
                "name": "files",
                "display_name": "Files",
                "advanced": true,
                "dynamic": false,
                "info": "Files to be sent with the message.",
                "title_case": false,
                "type": "file"
              },
              "code": {
                "type": "code",
                "required": true,
                "placeholder": "",
                "list": false,
                "show": true,
                "multiline": true,
                "value": "from axiestudio.base.data.utils import IMG_FILE_TYPES, TEXT_FILE_TYPES\nfrom axiestudio.base.io.chat import ChatComponent\nfrom axiestudio.inputs import BoolInput\nfrom axiestudio.io import DropdownInput, FileInput, MessageTextInput, MultilineInput, Output\nfrom axiestudio.memory import store_message\nfrom axiestudio.schema.message import Message\n\n\nclass ChatInput(ChatComponent):\n    display_name = \"Chat Input\"\n    description = \"Get chat inputs from the Playground.\"\n    icon = \"ChatInput\"\n    name = \"ChatInput\"\n\n    inputs = [\n        MultilineInput(\n            name=\"input_value\",\n            display_name=\"Text\",\n            value=\"\",\n            info=\"Message to be passed as input.\",\n        ),\n        BoolInput(\n            name=\"should_store_message\",\n            display_name=\"Store Messages\",\n            info=\"Store the message in the history.\",\n            value=True,\n            advanced=True,\n        ),\n        DropdownInput(\n            name=\"sender\",\n            display_name=\"Sender Type\",\n            options=[\"Machine\", \"User\"],\n            value=\"User\",\n            info=\"Type of sender.\",\n            advanced=True,\n        ),\n        MessageTextInput(\n            name=\"sender_name\",\n            display_name=\"Sender Name\",\n            info=\"Name of the sender.\",\n            value=\"User\",\n            advanced=True,\n        ),\n        MessageTextInput(\n            name=\"session_id\", display_name=\"Session ID\", info=\"Session ID for the message.\", advanced=True\n        ),\n        FileInput(\n            name=\"files\",\n            display_name=\"Files\",\n            file_types=TEXT_FILE_TYPES + IMG_FILE_TYPES,\n            info=\"Files to be sent with the message.\",\n            advanced=True,\n            is_list=True,\n        ),\n    ]\n    outputs = [\n        Output(display_name=\"Message\", name=\"message\", method=\"message_response\"),\n    ]\n\n    def message_response(self) -> Message:\n        message = Message(\n            text=self.input_value,\n            sender=self.sender,\n            sender_name=self.sender_name,\n            session_id=self.session_id,\n            files=self.files,\n        )\n\n        if (\n            self.session_id\n            and isinstance(message, Message)\n            and isinstance(message.text, str)\n            and self.should_store_message\n        ):\n            store_message(\n                message,\n                flow_id=self.graph.flow_id,\n            )\n            self.message.value = message\n\n        self.status = message\n        return message\n",
                "fileTypes": [],
                "file_path": "",
                "password": false,
                "name": "code",
                "advanced": true,
                "dynamic": true,
                "info": "",
                "load_from_db": false,
                "title_case": false
              },
              "input_value": {
                "trace_as_input": true,
                "multiline": true,
                "trace_as_metadata": true,
                "load_from_db": false,
                "list": false,
                "required": false,
                "placeholder": "",
                "show": true,
                "value": "3393",
                "name": "input_value",
                "display_name": "Text",
                "advanced": false,
                "input_types": [
                  "Message"
                ],
                "dynamic": false,
                "info": "Message to be passed as input.",
                "title_case": false,
                "type": "str"
              },
              "sender": {
                "trace_as_metadata": true,
                "options": [
                  "Machine",
                  "User"
                ],
                "required": false,
                "placeholder": "",
                "show": true,
                "value": "User",
                "name": "sender",
                "display_name": "Sender Type",
                "advanced": true,
                "dynamic": false,
                "info": "Type of sender.",
                "title_case": false,
                "type": "str"
              },
              "sender_name": {
                "trace_as_input": true,
                "trace_as_metadata": true,
                "load_from_db": false,
                "list": false,
                "required": false,
                "placeholder": "",
                "show": true,
                "value": "User",
                "name": "sender_name",
                "display_name": "Sender Name",
                "advanced": true,
                "input_types": [
                  "Message"
                ],
                "dynamic": false,
                "info": "Name of the sender.",
                "title_case": false,
                "type": "str"
              },
              "session_id": {
                "trace_as_input": true,
                "trace_as_metadata": true,
                "load_from_db": false,
                "list": false,
                "required": false,
                "placeholder": "",
                "show": true,
                "value": "",
                "name": "session_id",
                "display_name": "Session ID",
                "advanced": true,
                "input_types": [
                  "Message"
                ],
                "dynamic": false,
                "info": "Session ID for the message.",
                "title_case": false,
                "type": "str"
              },
              "should_store_message": {
                "trace_as_metadata": true,
                "list": false,
                "required": false,
                "placeholder": "",
                "show": true,
                "value": true,
                "name": "should_store_message",
                "display_name": "Store Messages",
                "advanced": true,
                "dynamic": false,
                "info": "Store the message in the history.",
                "title_case": false,
                "type": "bool"
              }
            },
            "description": "Get chat inputs from the Playground.",
            "icon": "ChatInput",
            "base_classes": [
              "Message"
            ],
            "display_name": "Chat Input",
            "documentation": "",
            "custom_fields": {},
            "output_types": [],
            "pinned": false,
            "conditional_paths": [],
            "frozen": false,
            "outputs": [
              {
                "types": [
                  "Message"
                ],
                "selected": "Message",
                "name": "message",
                "display_name": "Message",
                "method": "message_response",
                "value": "__UNDEFINED__",
                "cache": true
              }
            ],
            "field_order": [
              "input_value",
              "should_store_message",
              "sender",
              "sender_name",
              "session_id",
              "files"
            ],
            "beta": false,
            "edited": false
          },
          "id": "ChatInput-HMa1b"
        },
        "selected": false,
        "width": 384,
        "height": 307,
        "positionAbsolute": {
          "x": 34.66803859836864,
          "y": 232.96322747118046
        },
        "dragging": false
      },
      {
        "id": "ChatOutput-xVCc0",
        "type": "genericNode",
        "position": {
          "x": 3248.407067873466,
          "y": 430.9418400022008
        },
        "data": {
          "type": "ChatOutput",
          "node": {
            "template": {
              "_type": "Component",
              "code": {
                "type": "code",
                "required": true,
                "placeholder": "",
                "list": false,
                "show": true,
                "multiline": true,
                "value": "from axiestudio.base.io.chat import ChatComponent\nfrom axiestudio.inputs import BoolInput\nfrom axiestudio.io import DropdownInput, MessageTextInput, Output\nfrom axiestudio.memory import store_message\nfrom axiestudio.schema.message import Message\n\n\nclass ChatOutput(ChatComponent):\n    display_name = \"Chat Output\"\n    description = \"Display a chat message in the Playground.\"\n    icon = \"ChatOutput\"\n    name = \"ChatOutput\"\n\n    inputs = [\n        MessageTextInput(\n            name=\"input_value\",\n            display_name=\"Text\",\n            info=\"Message to be passed as output.\",\n        ),\n        BoolInput(\n            name=\"should_store_message\",\n            display_name=\"Store Messages\",\n            info=\"Store the message in the history.\",\n            value=True,\n            advanced=True,\n        ),\n        DropdownInput(\n            name=\"sender\",\n            display_name=\"Sender Type\",\n            options=[\"Machine\", \"User\"],\n            value=\"Machine\",\n            advanced=True,\n            info=\"Type of sender.\",\n        ),\n        MessageTextInput(\n            name=\"sender_name\", display_name=\"Sender Name\", info=\"Name of the sender.\", value=\"AI\", advanced=True\n        ),\n        MessageTextInput(\n            name=\"session_id\", display_name=\"Session ID\", info=\"Session ID for the message.\", advanced=True\n        ),\n        MessageTextInput(\n            name=\"data_template\",\n            display_name=\"Data Template\",\n            value=\"{text}\",\n            advanced=True,\n            info=\"Template to convert Data to Text. If left empty, it will be dynamically set to the Data's text key.\",\n        ),\n    ]\n    outputs = [\n        Output(display_name=\"Message\", name=\"message\", method=\"message_response\"),\n    ]\n\n    def message_response(self) -> Message:\n        message = Message(\n            text=self.input_value,\n            sender=self.sender,\n            sender_name=self.sender_name,\n            session_id=self.session_id,\n        )\n        if (\n            self.session_id\n            and isinstance(message, Message)\n            and isinstance(message.text, str)\n            and self.should_store_message\n        ):\n            store_message(\n                message,\n                flow_id=self.graph.flow_id,\n            )\n            self.message.value = message\n\n        self.status = message\n        return message\n",
                "fileTypes": [],
                "file_path": "",
                "password": false,
                "name": "code",
                "advanced": true,
                "dynamic": true,
                "info": "",
                "load_from_db": false,
                "title_case": false
              },
              "data_template": {
                "trace_as_input": true,
                "trace_as_metadata": true,
                "load_from_db": false,
                "list": false,
                "required": false,
                "placeholder": "",
                "show": true,
                "value": "{text}",
                "name": "data_template",
                "display_name": "Data Template",
                "advanced": true,
                "input_types": [
                  "Message"
                ],
                "dynamic": false,
                "info": "Template to convert Data to Text. If left empty, it will be dynamically set to the Data's text key.",
                "title_case": false,
                "type": "str"
              },
              "input_value": {
                "trace_as_input": true,
                "trace_as_metadata": true,
                "load_from_db": false,
                "list": false,
                "required": false,
                "placeholder": "",
                "show": true,
                "value": "",
                "name": "input_value",
                "display_name": "Text",
                "advanced": false,
                "input_types": [
                  "Message"
                ],
                "dynamic": false,
                "info": "Message to be passed as output.",
                "title_case": false,
                "type": "str"
              },
              "sender": {
                "trace_as_metadata": true,
                "options": [
                  "Machine",
                  "User"
                ],
                "required": false,
                "placeholder": "",
                "show": true,
                "value": "Machine",
                "name": "sender",
                "display_name": "Sender Type",
                "advanced": true,
                "dynamic": false,
                "info": "Type of sender.",
                "title_case": false,
                "type": "str"
              },
              "sender_name": {
                "trace_as_input": true,
                "trace_as_metadata": true,
                "load_from_db": false,
                "list": false,
                "required": false,
                "placeholder": "",
                "show": true,
                "value": "AI",
                "name": "sender_name",
                "display_name": "Sender Name",
                "advanced": true,
                "input_types": [
                  "Message"
                ],
                "dynamic": false,
                "info": "Name of the sender.",
                "title_case": false,
                "type": "str"
              },
              "session_id": {
                "trace_as_input": true,
                "trace_as_metadata": true,
                "load_from_db": false,
                "list": false,
                "required": false,
                "placeholder": "",
                "show": true,
                "value": "",
                "name": "session_id",
                "display_name": "Session ID",
                "advanced": true,
                "input_types": [
                  "Message"
                ],
                "dynamic": false,
                "info": "Session ID for the message.",
                "title_case": false,
                "type": "str"
              },
              "should_store_message": {
                "trace_as_metadata": true,
                "list": false,
                "required": false,
                "placeholder": "",
                "show": true,
                "value": true,
                "name": "should_store_message",
                "display_name": "Store Messages",
                "advanced": true,
                "dynamic": false,
                "info": "Store the message in the history.",
                "title_case": false,
                "type": "bool"
              }
            },
            "description": "Display a chat message in the Playground.",
            "icon": "ChatOutput",
            "base_classes": [
              "Message"
            ],
            "display_name": "Chat Output",
            "documentation": "",
            "custom_fields": {},
            "output_types": [],
            "pinned": false,
            "conditional_paths": [],
            "frozen": false,
            "outputs": [
              {
                "types": [
                  "Message"
                ],
                "selected": "Message",
                "name": "message",
                "display_name": "Message",
                "method": "message_response",
                "value": "__UNDEFINED__",
                "cache": true
              }
            ],
            "field_order": [
              "input_value",
              "should_store_message",
              "sender",
              "sender_name",
              "session_id",
              "data_template"
            ],
            "beta": false,
            "edited": false
          },
          "id": "ChatOutput-xVCc0"
        },
        "selected": false,
        "width": 384,
        "height": 306,
        "positionAbsolute": {
          "x": 3248.407067873466,
          "y": 430.9418400022008
        },
        "dragging": false
      }
    ],
    "edges": [
      {
        "source": "CustomComponent-J5MQN",
        "sourceHandle": "{œdataTypeœ:œZenDesk Ticket Commentsœ,œidœ:œCustomComponent-J5MQNœ,œnameœ:œcommentsœ,œoutput_typesœ:[œDataœ]}",
        "target": "ParseData-yKmV3",
        "targetHandle": "{œfieldNameœ:œdataœ,œidœ:œParseData-yKmV3œ,œinputTypesœ:[œDataœ],œtypeœ:œotherœ}",
        "data": {
          "targetHandle": {
            "fieldName": "data",
            "id": "ParseData-yKmV3",
            "inputTypes": [
              "Data"
            ],
            "type": "other"
          },
          "sourceHandle": {
            "dataType": "ZenDesk Ticket Comments",
            "id": "CustomComponent-J5MQN",
            "name": "comments",
            "output_types": [
              "Data"
            ]
          }
        },
        "id": "reactflow__edge-CustomComponent-J5MQN{œdataTypeœ:œZenDesk Ticket Commentsœ,œidœ:œCustomComponent-J5MQNœ,œnameœ:œcommentsœ,œoutput_typesœ:[œDataœ]}-ParseData-yKmV3{œfieldNameœ:œdataœ,œidœ:œParseData-yKmV3œ,œinputTypesœ:[œDataœ],œtypeœ:œotherœ}",
        "className": ""
      },
      {
        "source": "Prompt-YbrxB",
        "sourceHandle": "{œdataTypeœ:œPromptœ,œidœ:œPrompt-YbrxBœ,œnameœ:œpromptœ,œoutput_typesœ:[œMessageœ]}",
        "target": "CustomComponent-qz2O3",
        "targetHandle": "{œfieldNameœ:œuser_promptœ,œidœ:œCustomComponent-qz2O3œ,œinputTypesœ:[œMessageœ],œtypeœ:œstrœ}",
        "data": {
          "targetHandle": {
            "fieldName": "user_prompt",
            "id": "CustomComponent-qz2O3",
            "inputTypes": [
              "Message"
            ],
            "type": "str"
          },
          "sourceHandle": {
            "dataType": "Prompt",
            "id": "Prompt-YbrxB",
            "name": "prompt",
            "output_types": [
              "Message"
            ]
          }
        },
        "id": "reactflow__edge-Prompt-YbrxB{œdataTypeœ:œPromptœ,œidœ:œPrompt-YbrxBœ,œnameœ:œpromptœ,œoutput_typesœ:[œMessageœ]}-CustomComponent-qz2O3{œfieldNameœ:œuser_promptœ,œidœ:œCustomComponent-qz2O3œ,œinputTypesœ:[œMessageœ],œtypeœ:œstrœ}",
        "className": ""
      },
      {
        "source": "CustomComponent-J5MQN",
        "sourceHandle": "{œdataTypeœ:œZenDesk Ticket Commentsœ,œidœ:œCustomComponent-J5MQNœ,œnameœ:œcommentsœ,œoutput_typesœ:[œDataœ]}",
        "target": "URL-pFyrY",
        "targetHandle": "{œfieldNameœ:œcommentsœ,œidœ:œURL-pFyrYœ,œinputTypesœ:[œDataœ],œtypeœ:œotherœ}",
        "data": {
          "targetHandle": {
            "fieldName": "comments",
            "id": "URL-pFyrY",
            "inputTypes": [
              "Data"
            ],
            "type": "other"
          },
          "sourceHandle": {
            "dataType": "ZenDesk Ticket Comments",
            "id": "CustomComponent-J5MQN",
            "name": "comments",
            "output_types": [
              "Data"
            ]
          }
        },
        "id": "reactflow__edge-CustomComponent-J5MQN{œdataTypeœ:œZenDesk Ticket Commentsœ,œidœ:œCustomComponent-J5MQNœ,œnameœ:œcommentsœ,œoutput_typesœ:[œDataœ]}-URL-pFyrY{œfieldNameœ:œcommentsœ,œidœ:œURL-pFyrYœ,œinputTypesœ:[œDataœ],œtypeœ:œotherœ}",
        "className": ""
      },
      {
        "source": "URL-pFyrY",
        "sourceHandle": "{œdataTypeœ:œOpenai File IDsœ,œidœ:œURL-pFyrYœ,œnameœ:œdataœ,œoutput_typesœ:[œDataœ]}",
        "target": "CustomComponent-qz2O3",
        "targetHandle": "{œfieldNameœ:œimage_idsœ,œidœ:œCustomComponent-qz2O3œ,œinputTypesœ:[œDataœ],œtypeœ:œotherœ}",
        "data": {
          "targetHandle": {
            "fieldName": "image_ids",
            "id": "CustomComponent-qz2O3",
            "inputTypes": [
              "Data"
            ],
            "type": "other"
          },
          "sourceHandle": {
            "dataType": "Openai File IDs",
            "id": "URL-pFyrY",
            "name": "data",
            "output_types": [
              "Data"
            ]
          }
        },
        "id": "reactflow__edge-URL-pFyrY{œdataTypeœ:œOpenai File IDsœ,œidœ:œURL-pFyrYœ,œnameœ:œdataœ,œoutput_typesœ:[œDataœ]}-CustomComponent-qz2O3{œfieldNameœ:œimage_idsœ,œidœ:œCustomComponent-qz2O3œ,œinputTypesœ:[œDataœ],œtypeœ:œotherœ}",
        "className": ""
      },
      {
        "source": "CustomComponent-qz2O3",
        "sourceHandle": "{œdataTypeœ:œCustomComponentœ,œidœ:œCustomComponent-qz2O3œ,œnameœ:œoutputœ,œoutput_typesœ:[œMessageœ]}",
        "target": "ZenDesk Ticket Comments-cQKbp",
        "targetHandle": "{œfieldNameœ:œcategoryœ,œidœ:œZenDesk Ticket Comments-cQKbpœ,œinputTypesœ:[œMessageœ],œtypeœ:œstrœ}",
        "data": {
          "targetHandle": {
            "fieldName": "category",
            "id": "ZenDesk Ticket Comments-cQKbp",
            "inputTypes": [
              "Message"
            ],
            "type": "str"
          },
          "sourceHandle": {
            "dataType": "CustomComponent",
            "id": "CustomComponent-qz2O3",
            "name": "output",
            "output_types": [
              "Message"
            ]
          }
        },
        "id": "reactflow__edge-CustomComponent-qz2O3{œdataTypeœ:œCustomComponentœ,œidœ:œCustomComponent-qz2O3œ,œnameœ:œoutputœ,œoutput_typesœ:[œMessageœ]}-ZenDesk Ticket Comments-cQKbp{œfieldNameœ:œcategoryœ,œidœ:œZenDesk Ticket Comments-cQKbpœ,œinputTypesœ:[œMessageœ],œtypeœ:œstrœ}",
        "className": ""
      },
      {
        "source": "ParseData-yKmV3",
        "sourceHandle": "{œdataTypeœ:œTicket Comments Plain Bodyœ,œidœ:œParseData-yKmV3œ,œnameœ:œtextœ,œoutput_typesœ:[œMessageœ]}",
        "target": "Prompt-YbrxB",
        "targetHandle": "{œfieldNameœ:œbodyœ,œidœ:œPrompt-YbrxBœ,œinputTypesœ:[œMessageœ,œTextœ],œtypeœ:œstrœ}",
        "data": {
          "targetHandle": {
            "fieldName": "body",
            "id": "Prompt-YbrxB",
            "inputTypes": [
              "Message",
              "Text"
            ],
            "type": "str"
          },
          "sourceHandle": {
            "dataType": "Ticket Comments Plain Body",
            "id": "ParseData-yKmV3",
            "name": "text",
            "output_types": [
              "Message"
            ]
          }
        },
        "id": "reactflow__edge-ParseData-yKmV3{œdataTypeœ:œTicket Comments Plain Bodyœ,œidœ:œParseData-yKmV3œ,œnameœ:œtextœ,œoutput_typesœ:[œMessageœ]}-Prompt-YbrxB{œfieldNameœ:œbodyœ,œidœ:œPrompt-YbrxBœ,œinputTypesœ:[œMessageœ,œTextœ],œtypeœ:œstrœ}",
        "className": ""
      },
      {
        "source": "ZenDesk Ticket Comments-2VpZG",
        "sourceHandle": "{œdataTypeœ:œZenDesk Ticket Subjectœ,œidœ:œZenDesk Ticket Comments-2VpZGœ,œnameœ:œtextœ,œoutput_typesœ:[œMessageœ]}",
        "target": "Prompt-YbrxB",
        "targetHandle": "{œfieldNameœ:œsubjectœ,œidœ:œPrompt-YbrxBœ,œinputTypesœ:[œMessageœ,œTextœ],œtypeœ:œstrœ}",
        "data": {
          "targetHandle": {
            "fieldName": "subject",
            "id": "Prompt-YbrxB",
            "inputTypes": [
              "Message",
              "Text"
            ],
            "type": "str"
          },
          "sourceHandle": {
            "dataType": "ZenDesk Ticket Subject",
            "id": "ZenDesk Ticket Comments-2VpZG",
            "name": "text",
            "output_types": [
              "Message"
            ]
          }
        },
        "id": "reactflow__edge-ZenDesk Ticket Comments-2VpZG{œdataTypeœ:œZenDesk Ticket Subjectœ,œidœ:œZenDesk Ticket Comments-2VpZGœ,œnameœ:œtextœ,œoutput_typesœ:[œMessageœ]}-Prompt-YbrxB{œfieldNameœ:œsubjectœ,œidœ:œPrompt-YbrxBœ,œinputTypesœ:[œMessageœ,œTextœ],œtypeœ:œstrœ}",
        "className": ""
      },
      {
        "source": "ChatInput-HMa1b",
        "sourceHandle": "{œdataTypeœ:œChatInputœ,œidœ:œChatInput-HMa1bœ,œnameœ:œmessageœ,œoutput_typesœ:[œMessageœ]}",
        "target": "CustomComponent-J5MQN",
        "targetHandle": "{œfieldNameœ:œticket_idœ,œidœ:œCustomComponent-J5MQNœ,œinputTypesœ:[œMessageœ],œtypeœ:œstrœ}",
        "data": {
          "targetHandle": {
            "fieldName": "ticket_id",
            "id": "CustomComponent-J5MQN",
            "inputTypes": [
              "Message"
            ],
            "type": "str"
          },
          "sourceHandle": {
            "dataType": "ChatInput",
            "id": "ChatInput-HMa1b",
            "name": "message",
            "output_types": [
              "Message"
            ]
          }
        },
        "id": "reactflow__edge-ChatInput-HMa1b{œdataTypeœ:œChatInputœ,œidœ:œChatInput-HMa1bœ,œnameœ:œmessageœ,œoutput_typesœ:[œMessageœ]}-CustomComponent-J5MQN{œfieldNameœ:œticket_idœ,œidœ:œCustomComponent-J5MQNœ,œinputTypesœ:[œMessageœ],œtypeœ:œstrœ}",
        "className": ""
      },
      {
        "source": "ChatInput-HMa1b",
        "sourceHandle": "{œdataTypeœ:œChatInputœ,œidœ:œChatInput-HMa1bœ,œnameœ:œmessageœ,œoutput_typesœ:[œMessageœ]}",
        "target": "ZenDesk Ticket Comments-2VpZG",
        "targetHandle": "{œfieldNameœ:œticket_idœ,œidœ:œZenDesk Ticket Comments-2VpZGœ,œinputTypesœ:[œMessageœ],œtypeœ:œstrœ}",
        "data": {
          "targetHandle": {
            "fieldName": "ticket_id",
            "id": "ZenDesk Ticket Comments-2VpZG",
            "inputTypes": [
              "Message"
            ],
            "type": "str"
          },
          "sourceHandle": {
            "dataType": "ChatInput",
            "id": "ChatInput-HMa1b",
            "name": "message",
            "output_types": [
              "Message"
            ]
          }
        },
        "id": "reactflow__edge-ChatInput-HMa1b{œdataTypeœ:œChatInputœ,œidœ:œChatInput-HMa1bœ,œnameœ:œmessageœ,œoutput_typesœ:[œMessageœ]}-ZenDesk Ticket Comments-2VpZG{œfieldNameœ:œticket_idœ,œidœ:œZenDesk Ticket Comments-2VpZGœ,œinputTypesœ:[œMessageœ],œtypeœ:œstrœ}",
        "className": ""
      },
      {
        "source": "ChatInput-HMa1b",
        "sourceHandle": "{œdataTypeœ:œChatInputœ,œidœ:œChatInput-HMa1bœ,œnameœ:œmessageœ,œoutput_typesœ:[œMessageœ]}",
        "target": "ZenDesk Ticket Comments-cQKbp",
        "targetHandle": "{œfieldNameœ:œticket_idœ,œidœ:œZenDesk Ticket Comments-cQKbpœ,œinputTypesœ:[œMessageœ],œtypeœ:œstrœ}",
        "data": {
          "targetHandle": {
            "fieldName": "ticket_id",
            "id": "ZenDesk Ticket Comments-cQKbp",
            "inputTypes": [
              "Message"
            ],
            "type": "str"
          },
          "sourceHandle": {
            "dataType": "ChatInput",
            "id": "ChatInput-HMa1b",
            "name": "message",
            "output_types": [
              "Message"
            ]
          }
        },
        "id": "reactflow__edge-ChatInput-HMa1b{œdataTypeœ:œChatInputœ,œidœ:œChatInput-HMa1bœ,œnameœ:œmessageœ,œoutput_typesœ:[œMessageœ]}-ZenDesk Ticket Comments-cQKbp{œfieldNameœ:œticket_idœ,œidœ:œZenDesk Ticket Comments-cQKbpœ,œinputTypesœ:[œMessageœ],œtypeœ:œstrœ}",
        "className": ""
      },
      {
        "source": "ZenDesk Ticket Comments-cQKbp",
        "sourceHandle": "{œdataTypeœ:œZenDesk Ticket Commentsœ,œidœ:œZenDesk Ticket Comments-cQKbpœ,œnameœ:œcategory_outputœ,œoutput_typesœ:[œMessageœ]}",
        "target": "ChatOutput-xVCc0",
        "targetHandle": "{œfieldNameœ:œinput_valueœ,œidœ:œChatOutput-xVCc0œ,œinputTypesœ:[œMessageœ],œtypeœ:œstrœ}",
        "data": {
          "targetHandle": {
            "fieldName": "input_value",
            "id": "ChatOutput-xVCc0",
            "inputTypes": [
              "Message"
            ],
            "type": "str"
          },
          "sourceHandle": {
            "dataType": "ZenDesk Ticket Comments",
            "id": "ZenDesk Ticket Comments-cQKbp",
            "name": "category_output",
            "output_types": [
              "Message"
            ]
          }
        },
        "id": "reactflow__edge-ZenDesk Ticket Comments-cQKbp{œdataTypeœ:œZenDesk Ticket Commentsœ,œidœ:œZenDesk Ticket Comments-cQKbpœ,œnameœ:œcategory_outputœ,œoutput_typesœ:[œMessageœ]}-ChatOutput-xVCc0{œfieldNameœ:œinput_valueœ,œidœ:œChatOutput-xVCc0œ,œinputTypesœ:[œMessageœ],œtypeœ:œstrœ}",
        "className": ""
      }
    ],
    "viewport": {
      "x": 109.68723779806896,
      "y": 220.55383085585663,
      "zoom": 0.5859218756865695
    }
  },
  "metadata": {
    "CustomComponent": {
      "count": 2
    },
    "URL": {
      "count": 1
    },
    "Prompt": {
      "count": 1
    },
    "ParseData": {
      "count": 1
    },
    "ZenDesk Ticket Comments": {
      "count": 2
    },
    "ChatInput": {
      "count": 1
    },
    "ChatOutput": {
      "count": 1
    },
    "total": 9
  },
  "original": {
    "id": "e946a4a4-5c0c-4b4e-bbb0-938662dfb9ae",
    "name": "Ticket Categorization",
    "description": "Find and set the Ticket Category",
    "is_component": false,
    "liked_by_count": "0",
    "downloads_count": "0",
    "metadata": {
      "CustomComponent": {
        "count": 2
      },
      "URL": {
        "count": 1
      },
      "Prompt": {
        "count": 1
      },
      "ParseData": {
        "count": 1
      },
      "ZenDesk Ticket Comments": {
        "count": 2
      },
      "ChatInput": {
        "count": 1
      },
      "ChatOutput": {
        "count": 1
      },
      "total": 9
    },
    "last_tested_version": "1.0.11",
    "private": true,
    "data": {
      "nodes": [
        {
          "id": "CustomComponent-J5MQN",
          "type": "genericNode",
          "position": {
            "x": 646.413841716881,
            "y": 43.24849587121585
          },
          "data": {
            "type": "ZenDesk Ticket Comments",
            "node": {
              "template": {
                "_type": "Component",
                "code": {
                  "type": "code",
                  "required": true,
                  "placeholder": "",
                  "list": false,
                  "show": true,
                  "multiline": true,
                  "value": "# from axiestudio.field_typing import Data\nimport re\nfrom axiestudio.custom import Component\nfrom axiestudio.io import MessageTextInput, Output\nfrom axiestudio.schema import Data\nfrom axiestudio.schema.message import Message\nfrom zenpy import Zenpy\nfrom zenpy.lib.api_objects import Ticket, Comment\n\n\nclass CustomComponent(Component):\n    display_name = \"ZenDesk Ticket Comments\"\n    description = \"Get ZenDesk Ticket Comments\"\n    documentation: str = \"\"\n    icon = \"custom_components\"\n    name = \"ZenDesk Ticket Comments\"\n\n    inputs = [\n        MessageTextInput(name=\"ticket_id\", display_name=\"Ticket ID\", value=\"\"),\n        SecretStrInput(\n            name=\"zendesk_api_key\",\n            display_name=\"ZenDesk API Key\",\n            info=\"The ZenDesk API Key\",\n            advanced=False,\n            value=\"ZENDESK_API_KEY\",\n        ),\n        SecretStrInput(\n            name=\"zendesk_api_email\",\n            display_name=\"ZenDesk API Email\",\n            info=\"The ZenDesk API Email\",\n            advanced=False,\n            value=\"ZENDESK_API_EMAIL\",\n        ),\n        SecretStrInput(\n            name=\"zendesk_api_subdomain\",\n            display_name=\"ZenDesk API Subdomain\",\n            info=\"The ZenDesk API Subdomain\",\n            advanced=False,\n            value=\"ZENDESK_API_SUBDOMAIN\",\n        ),\n    ]\n\n    outputs = [\n        Output(display_name=\"Ticket Comments\", name=\"comments\", method=\"build_comments\"),\n    ]\n\n    def build_comments(self) -> Data:\n        credentials = {\n            'email' : self.zendesk_api_email,\n            'token' : self.zendesk_api_key,\n            'subdomain': self.zendesk_api_subdomain\n        }\n        zenpy_client = Zenpy(**credentials)\n        comments = zenpy_client.tickets.comments(ticket=self.ticket_id)\n        plain_comments = []\n        for comment in comments:\n            #plain_comments.append(comment.plain_body)\n            image_urls = []\n            if comment.attachments:\n                for attachment in comment.attachments:\n                    image_urls.append(attachment.content_url)\n            \n            body = comment.body\n            image_urls_by_regex = []\n            pattern = re.compile(r\"\\((https?:\\/\\/support\\.flowbots\\.ninja\\/attachments\\S+\\.\\w+)\\)?\")\n            image_urls_by_regex += pattern.findall(body)\n            \n            for image_url in image_urls_by_regex:\n                image_urls.append(image_url)\n            \n            plain_comments.append({\n                \"plain_body\": comment.plain_body,\n                \"created\": comment.created,\n                \"author\": str(comment.author),\n                \"name\": comment.author.name,\n                \"image_urls\": image_urls\n            })\n\n        data = Data(value=plain_comments)\n        self.status = data\n        return data\n",
                  "fileTypes": [],
                  "file_path": "",
                  "password": false,
                  "name": "code",
                  "advanced": true,
                  "dynamic": true,
                  "info": "",
                  "load_from_db": false,
                  "title_case": false
                },
                "ticket_id": {
                  "trace_as_input": true,
                  "trace_as_metadata": true,
                  "load_from_db": false,
                  "list": false,
                  "required": false,
                  "placeholder": "",
                  "show": true,
                  "value": "",
                  "name": "ticket_id",
                  "display_name": "Ticket ID",
                  "advanced": false,
                  "input_types": [
                    "Message"
                  ],
                  "dynamic": false,
                  "info": "",
                  "title_case": false,
                  "type": "str"
                },
                "zendesk_api_email": {
                  "load_from_db": false,
                  "required": false,
                  "placeholder": "",
                  "show": true,
                  "value": "",
                  "name": "zendesk_api_email",
                  "display_name": "ZenDesk API Email",
                  "advanced": true,
                  "input_types": [],
                  "dynamic": false,
                  "info": "The ZenDesk API Email",
                  "title_case": false,
                  "password": true,
                  "type": "str"
                },
                "zendesk_api_key": {
                  "load_from_db": false,
                  "required": false,
                  "placeholder": "",
                  "show": true,
                  "value": "",
                  "name": "zendesk_api_key",
                  "display_name": "ZenDesk API Key",
                  "advanced": true,
                  "input_types": [],
                  "dynamic": false,
                  "info": "The ZenDesk API Key",
                  "title_case": false,
                  "password": true,
                  "type": "str"
                },
                "zendesk_api_subdomain": {
                  "load_from_db": false,
                  "required": false,
                  "placeholder": "",
                  "show": true,
                  "value": "",
                  "name": "zendesk_api_subdomain",
                  "display_name": "ZenDesk API Subdomain",
                  "advanced": true,
                  "input_types": [],
                  "dynamic": false,
                  "info": "The ZenDesk API Subdomain",
                  "title_case": false,
                  "password": true,
                  "type": "str"
                }
              },
              "description": "Get ZenDesk Ticket Comments",
              "icon": "custom_components",
              "base_classes": [
                "Data"
              ],
              "display_name": "Zenpy Ticket Comments",
              "documentation": "",
              "custom_fields": {},
              "output_types": [],
              "pinned": false,
              "conditional_paths": [],
              "frozen": false,
              "outputs": [
                {
                  "types": [
                    "Data"
                  ],
                  "selected": "Data",
                  "name": "comments",
                  "display_name": "Ticket Comments",
                  "method": "build_comments",
                  "value": "__UNDEFINED__",
                  "cache": true
                }
              ],
              "field_order": [
                "ticket_id",
                "zendesk_api_key",
                "zendesk_api_email",
                "zendesk_api_subdomain"
              ],
              "beta": false,
              "edited": true
            },
            "id": "CustomComponent-J5MQN",
            "description": "Get ZenDesk Ticket Comments",
            "display_name": "Zenpy Ticket Comments"
          },
          "selected": false,
          "width": 384,
          "height": 307,
          "positionAbsolute": {
            "x": 646.413841716881,
            "y": 43.24849587121585
          },
          "dragging": false
        },
        {
          "id": "URL-pFyrY",
          "type": "genericNode",
          "position": {
            "x": 1309.192361274156,
            "y": -62.732488103563156
          },
          "data": {
            "type": "Openai File IDs",
            "node": {
              "template": {
                "_type": "Component",
                "comments": {
                  "trace_as_input": true,
                  "trace_as_metadata": true,
                  "list": false,
                  "required": false,
                  "placeholder": "",
                  "show": true,
                  "value": "",
                  "name": "comments",
                  "display_name": "Ticket Comments",
                  "advanced": false,
                  "input_types": [
                    "Data"
                  ],
                  "dynamic": false,
                  "info": "Ticket Comments",
                  "title_case": false,
                  "type": "other"
                },
                "code": {
                  "type": "code",
                  "required": true,
                  "placeholder": "",
                  "list": false,
                  "show": true,
                  "multiline": true,
                  "value": "import re\nimport base64\nimport requests\n\nfrom urllib.parse import urlparse\nfrom urllib.parse import parse_qs\n\nfrom langchain_community.document_loaders.web_base import WebBaseLoader\n\nfrom axiestudio.custom import Component\nfrom axiestudio.io import MessageTextInput, Output, DataInput, IntInput\nfrom axiestudio.schema import Data\nfrom axiestudio.inputs import (\n    SecretStrInput,\n)\n\nfrom openai import OpenAI\n\n\nclass URLComponent(Component):\n    display_name = \"Create Openai Image IDs\"\n    description = \"Fetch content from one or more image URLs and create the Openai File IDs.\"\n    icon = \"custom_components\"\n    name = \"Openai File IDs\"\n\n    inputs = [\n        DataInput(\n            name=\"comments\",\n            display_name=\"Ticket Comments\",\n            info=\"Ticket Comments\"\n        ),\n        IntInput(name=\"idx\", display_name=\"Index\", value=0),\n        SecretStrInput(\n            name=\"openai_api_key\",\n            display_name=\"OpenAI API Key\",\n            info=\"The OpenAI API Key to use for the OpenAI model.\",\n            advanced=False,\n            value=\"OPENAI_API_KEY\",\n        ),\n    ]\n\n    outputs = [\n        Output(display_name=\"Openai Image IDs\", name=\"data\", method=\"fetch_content\"),\n    ]\n\n    def ensure_url(self, string: str) -> str:\n        \"\"\"\n        Ensures the given string is a URL by adding 'http://' if it doesn't start with 'http://' or 'https://'.\n        Raises an error if the string is not a valid URL.\n\n        Parameters:\n            string (str): The string to be checked and possibly modified.\n\n        Returns:\n            str: The modified string that is ensured to be a URL.\n\n        Raises:\n            ValueError: If the string is not a valid URL.\n        \"\"\"\n        if not string.startswith((\"http://\", \"https://\")):\n            string = \"http://\" + string\n\n        # Basic URL validation regex\n        url_regex = re.compile(\n            r\"^(https?:\\/\\/)?\"  # optional protocol\n            r\"(www\\.)?\"  # optional www\n            r\"([a-zA-Z0-9.-]+)\"  # domain\n            r\"(\\.[a-zA-Z]{2,})?\"  # top-level domain\n            r\"(:\\d+)?\"  # optional port\n            r\"(\\/[^\\s]*)?$\",  # optional path\n            re.IGNORECASE,\n        )\n\n        if not url_regex.match(string):\n            raise ValueError(f\"Invalid URL: {string}\")\n\n        return string\n\n    def fetch_content(self) -> list[Data]:\n        openai_api_key = self.openai_api_key\n        client = OpenAI(api_key=openai_api_key)\n        \n        urls = self.comments.value[self.idx][\"image_urls\"]\n        if len(urls) <= 0:\n            self.status = []\n            return []\n        \n        image_ids = []\n        \n        for image_url in urls:\n            response = requests.get(image_url)\n            if response.status_code == 200:\n                parsed_url = urlparse(image_url)\n                file_name = parse_qs(parsed_url.query)['name'][0]\n                if file_name.endswith((\".jpeg\", \".jpg\", \".png\", \".gif\", \".webp\")):\n                    file = client.files.create(\n                        file=(f\"{file_name.lower()}\", response.content),\n                        purpose=\"assistants\",\n                    )\n                    image_ids.append(file.id)\n        \n        #urls = [self.ensure_url(url.strip()) for url in self.urls if url.strip()]\n        #loader = WebBaseLoader(web_paths=urls, encoding=\"utf-8\")\n        #docs = loader.load()\n        #data = [Data(content=doc.page_content, **doc.metadata) for doc in docs]\n        data = image_ids\n        self.status = data\n        return data",
                  "fileTypes": [],
                  "file_path": "",
                  "password": false,
                  "name": "code",
                  "advanced": true,
                  "dynamic": true,
                  "info": "",
                  "load_from_db": false,
                  "title_case": false
                },
                "idx": {
                  "trace_as_metadata": true,
                  "list": false,
                  "required": false,
                  "placeholder": "",
                  "show": true,
                  "value": 0,
                  "name": "idx",
                  "display_name": "Index",
                  "advanced": false,
                  "dynamic": false,
                  "info": "",
                  "title_case": false,
                  "type": "int"
                },
                "openai_api_key": {
                  "load_from_db": false,
                  "required": false,
                  "placeholder": "",
                  "show": true,
                  "value": "",
                  "name": "openai_api_key",
                  "display_name": "OpenAI API Key",
                  "advanced": true,
                  "input_types": [],
                  "dynamic": false,
                  "info": "The OpenAI API Key to use for the OpenAI model.",
                  "title_case": false,
                  "password": true,
                  "type": "str"
                }
              },
              "description": "Fetch content from one or more image URLs and create the Openai File IDs.",
              "icon": "custom_components",
              "base_classes": [
                "Data"
              ],
              "display_name": "Openai File IDs",
              "documentation": "",
              "custom_fields": {},
              "output_types": [],
              "pinned": false,
              "conditional_paths": [],
              "frozen": false,
              "outputs": [
                {
                  "types": [
                    "Data"
                  ],
                  "selected": "Data",
                  "name": "data",
                  "display_name": "Openai Image IDs",
                  "method": "fetch_content",
                  "value": "__UNDEFINED__",
                  "cache": true
                }
              ],
              "field_order": [
                "comments",
                "idx",
                "openai_api_key"
              ],
              "beta": false,
              "edited": false
            },
            "id": "URL-pFyrY",
            "description": "Fetch content from one or more image URLs and create the Openai File IDs.",
            "display_name": "Openai File IDs"
          },
          "selected": false,
          "width": 384,
          "height": 375,
          "positionAbsolute": {
            "x": 1309.192361274156,
            "y": -62.732488103563156
          },
          "dragging": false
        },
        {
          "id": "Prompt-YbrxB",
          "type": "genericNode",
          "position": {
            "x": 1719.0392124419304,
            "y": 468.6499727852064
          },
          "data": {
            "type": "Prompt",
            "node": {
              "template": {
                "_type": "Component",
                "code": {
                  "type": "code",
                  "required": true,
                  "placeholder": "",
                  "list": false,
                  "show": true,
                  "multiline": true,
                  "value": "from axiestudio.base.prompts.api_utils import process_prompt_template\nfrom axiestudio.custom import Component\nfrom axiestudio.io import Output, PromptInput\nfrom axiestudio.schema.message import Message\nfrom axiestudio.template.utils import update_template_values\n\n\nclass PromptComponent(Component):\n    display_name: str = \"Prompt\"\n    description: str = \"Create a prompt template with dynamic variables.\"\n    icon = \"prompts\"\n    trace_type = \"prompt\"\n    name = \"Prompt\"\n\n    inputs = [\n        PromptInput(name=\"template\", display_name=\"Template\"),\n    ]\n\n    outputs = [\n        Output(display_name=\"Prompt Message\", name=\"prompt\", method=\"build_prompt\"),\n    ]\n\n    async def build_prompt(\n        self,\n    ) -> Message:\n        prompt = await Message.from_template_and_variables(**self._attributes)\n        self.status = prompt.text\n        return prompt\n\n    def post_code_processing(self, new_frontend_node: dict, current_frontend_node: dict):\n        \"\"\"\n        This function is called after the code validation is done.\n        \"\"\"\n        frontend_node = super().post_code_processing(new_frontend_node, current_frontend_node)\n        template = frontend_node[\"template\"][\"template\"][\"value\"]\n        _ = process_prompt_template(\n            template=template,\n            name=\"template\",\n            custom_fields=frontend_node[\"custom_fields\"],\n            frontend_node_template=frontend_node[\"template\"],\n        )\n        # Now that template is updated, we need to grab any values that were set in the current_frontend_node\n        # and update the frontend_node with those values\n        update_template_values(new_template=frontend_node, previous_template=current_frontend_node[\"template\"])\n        return frontend_node\n",
                  "fileTypes": [],
                  "file_path": "",
                  "password": false,
                  "name": "code",
                  "advanced": true,
                  "dynamic": true,
                  "info": "",
                  "load_from_db": false,
                  "title_case": false
                },
                "template": {
                  "trace_as_input": true,
                  "list": false,
                  "required": false,
                  "placeholder": "",
                  "show": true,
                  "value": "<email_subject>{subject}</email_subject>\n<email_body>{body}</email_body>",
                  "name": "template",
                  "display_name": "Template",
                  "advanced": false,
                  "dynamic": false,
                  "info": "",
                  "title_case": false,
                  "type": "prompt",
                  "load_from_db": false
                },
                "subject": {
                  "field_type": "str",
                  "required": false,
                  "placeholder": "",
                  "list": false,
                  "show": true,
                  "multiline": true,
                  "value": "",
                  "fileTypes": [],
                  "file_path": "",
                  "password": false,
                  "name": "subject",
                  "display_name": "subject",
                  "advanced": false,
                  "input_types": [
                    "Message",
                    "Text"
                  ],
                  "dynamic": false,
                  "info": "",
                  "load_from_db": false,
                  "title_case": false,
                  "type": "str"
                },
                "body": {
                  "field_type": "str",
                  "required": false,
                  "placeholder": "",
                  "list": false,
                  "show": true,
                  "multiline": true,
                  "value": "",
                  "fileTypes": [],
                  "file_path": "",
                  "password": false,
                  "name": "body",
                  "display_name": "body",
                  "advanced": false,
                  "input_types": [
                    "Message",
                    "Text"
                  ],
                  "dynamic": false,
                  "info": "",
                  "load_from_db": false,
                  "title_case": false,
                  "type": "str"
                }
              },
              "description": "Create a prompt template with dynamic variables.",
              "icon": "prompts",
              "base_classes": [
                "Message"
              ],
              "display_name": "Prompt",
              "documentation": "",
              "custom_fields": {
                "template": [
                  "subject",
                  "body"
                ]
              },
              "output_types": [],
              "pinned": false,
              "conditional_paths": [],
              "frozen": false,
              "outputs": [
                {
                  "types": [
                    "Message"
                  ],
                  "selected": "Message",
                  "name": "prompt",
                  "display_name": "Prompt Message",
                  "method": "build_prompt",
                  "value": "__UNDEFINED__",
                  "cache": true
                }
              ],
              "field_order": [
                "template"
              ],
              "beta": false,
              "edited": false
            },
            "id": "Prompt-YbrxB",
            "description": "Create a prompt template with dynamic variables.",
            "display_name": "Prompt"
          },
          "selected": false,
          "width": 384,
          "height": 514,
          "positionAbsolute": {
            "x": 1719.0392124419304,
            "y": 468.6499727852064
          },
          "dragging": false
        },
        {
          "id": "ParseData-yKmV3",
          "type": "genericNode",
          "position": {
            "x": 1185.0546923446082,
            "y": 398.6715927423094
          },
          "data": {
            "type": "Ticket Comments Plain Body",
            "node": {
              "template": {
                "_type": "Component",
                "data": {
                  "trace_as_input": true,
                  "trace_as_metadata": true,
                  "list": false,
                  "required": false,
                  "placeholder": "",
                  "show": true,
                  "value": "",
                  "name": "data",
                  "display_name": "Ticket Comments",
                  "advanced": false,
                  "input_types": [
                    "Data"
                  ],
                  "dynamic": false,
                  "info": "Ticket Comments",
                  "title_case": false,
                  "type": "other"
                },
                "code": {
                  "type": "code",
                  "required": true,
                  "placeholder": "",
                  "list": false,
                  "show": true,
                  "multiline": true,
                  "value": "from axiestudio.custom import Component\nfrom axiestudio.helpers.data import data_to_text\nfrom axiestudio.io import DataInput, MultilineInput, Output, StrInput, IntInput\nfrom axiestudio.schema.message import Message\n\n\nclass ParseDataComponent(Component):\n    display_name = \"Ticket Comments Plain Body\"\n    description = \"Return the Ticket Comments plain body\"\n    icon = \"custom_components\"\n    name = \"Ticket Comments Plain Body\"\n\n    inputs = [\n        DataInput(name=\"data\", display_name=\"Ticket Comments\", info=\"Ticket Comments\"),\n        IntInput(name=\"idx\", display_name=\"Index\", value=\"0\"),\n    ]\n\n    outputs = [\n        Output(display_name=\"Plain Body\", name=\"text\", method=\"parse_data\"),\n    ]\n\n    def parse_data(self) -> Message:\n        plain_body = self.data.value[self.idx][\"plain_body\"]\n        self.status = plain_body\n        return Message(text=plain_body)\n",
                  "fileTypes": [],
                  "file_path": "",
                  "password": false,
                  "name": "code",
                  "advanced": true,
                  "dynamic": true,
                  "info": "",
                  "load_from_db": false,
                  "title_case": false
                },
                "idx": {
                  "trace_as_metadata": true,
                  "list": false,
                  "required": false,
                  "placeholder": "",
                  "show": true,
                  "value": "0",
                  "name": "idx",
                  "display_name": "Index",
                  "advanced": false,
                  "dynamic": false,
                  "info": "",
                  "title_case": false,
                  "type": "int"
                }
              },
              "description": "Return the Ticket Comments plain body",
              "icon": "custom_components",
              "base_classes": [
                "Message"
              ],
              "display_name": "Ticket Comments Plain Body",
              "documentation": "",
              "custom_fields": {},
              "output_types": [],
              "pinned": false,
              "conditional_paths": [],
              "frozen": false,
              "outputs": [
                {
                  "types": [
                    "Message"
                  ],
                  "selected": "Message",
                  "name": "text",
                  "display_name": "Plain Body",
                  "method": "parse_data",
                  "value": "__UNDEFINED__",
                  "cache": true
                }
              ],
              "field_order": [
                "data",
                "idx"
              ],
              "beta": false,
              "edited": true
            },
            "id": "ParseData-yKmV3",
            "description": "Return the Ticket Comments plain body",
            "display_name": "Ticket Comments Plain Body"
          },
          "selected": false,
          "width": 384,
          "height": 347,
          "positionAbsolute": {
            "x": 1185.0546923446082,
            "y": 398.6715927423094
          },
          "dragging": false
        },
        {
          "id": "CustomComponent-qz2O3",
          "type": "genericNode",
          "position": {
            "x": 2226.4319744525233,
            "y": -12.575861974809769
          },
          "data": {
            "type": "CustomComponent",
            "node": {
              "template": {
                "_type": "Component",
                "image_ids": {
                  "trace_as_input": true,
                  "trace_as_metadata": true,
                  "list": false,
                  "required": false,
                  "placeholder": "",
                  "show": true,
                  "value": "",
                  "name": "image_ids",
                  "display_name": "Openai Image IDs",
                  "advanced": false,
                  "input_types": [
                    "Data"
                  ],
                  "dynamic": false,
                  "info": "Image IDs",
                  "title_case": false,
                  "type": "other"
                },
                "assistante_id": {
                  "trace_as_input": true,
                  "trace_as_metadata": true,
                  "load_from_db": false,
                  "list": false,
                  "required": false,
                  "placeholder": "",
                  "show": true,
                  "value": "asst_lxlSo4xA16h9WwBS2gpNAVHt",
                  "name": "assistante_id",
                  "display_name": "Openai Assistante ID",
                  "advanced": false,
                  "input_types": [
                    "Message"
                  ],
                  "dynamic": false,
                  "info": "",
                  "title_case": false,
                  "type": "str"
                },
                "code": {
                  "type": "code",
                  "required": true,
                  "placeholder": "",
                  "list": false,
                  "show": true,
                  "multiline": true,
                  "value": "# from axiestudio.field_typing import Data\nimport os\nimport base64\nfrom pydantic.v1 import SecretStr\nfrom axiestudio.custom import Component\nfrom axiestudio.io import MessageTextInput, Output, DataInput\nfrom axiestudio.schema import Data\nfrom axiestudio.schema.message import Message\nfrom axiestudio.inputs import (\n    SecretStrInput,\n)\nfrom openai import OpenAI\n\nclass CustomComponent(Component):\n    display_name = \"Custom Component\"\n    description = \"Use as a template to create your own component.\"\n    documentation: str = \"http://docs.axiestudio.org/components/custom\"\n    icon = \"custom_components\"\n    name = \"CustomComponent\"\n\n    inputs = [\n        MessageTextInput(name=\"user_prompt\", display_name=\"User Prompy\", value=\"\"),\n        MessageTextInput(name=\"assistante_id\", display_name=\"Openai Assistante ID\", value=\"\"),\n        DataInput(\n            name=\"image_ids\",\n            display_name=\"Openai Image IDs\",\n            info=\"Image IDs\"\n        ),\n        SecretStrInput(\n            name=\"openai_api_key\",\n            display_name=\"OpenAI API Key\",\n            info=\"The OpenAI API Key to use for the OpenAI model.\",\n            advanced=False,\n            value=\"OPENAI_API_KEY\",\n        ),\n    ]\n\n    outputs = [\n        Output(display_name=\"Output\", name=\"output\", method=\"build_output\"),\n    ]\n\n    def build_output(self) -> Message:\n        openai_api_key = self.openai_api_key\n        client = OpenAI(api_key=openai_api_key)\n        \n        image_ids = self.image_ids\n\n        thread = client.beta.threads.create()\n        \n        content = [\n            {\n                \"type\": \"text\",\n                \"text\": self.user_prompt if self.user_prompt else \"empty body\"\n            }\n        ]\n        \n        for image_id in image_ids:\n            content.append({\n                \"type\": \"image_file\",\n                \"image_file\": \n                {\n                    \"file_id\": image_id,\n                    \"detail\": \"low\"\n                }\n            })\n        \n        message = client.beta.threads.messages.create(\n            thread_id=thread.id,\n            role=\"user\",\n            content=content\n        )\n        \n        run = client.beta.threads.runs.create_and_poll(\n            thread_id=thread.id,\n            assistant_id=self.assistante_id\n        )\n        \n        if run.status == 'completed': \n            messages = client.beta.threads.messages.list(\n                thread_id=thread.id\n            )\n            for message in messages:\n                return Message(text=message.content[0].text.value)\n        else:\n            return Message(text=run.status)\n",
                  "fileTypes": [],
                  "file_path": "",
                  "password": false,
                  "name": "code",
                  "advanced": true,
                  "dynamic": true,
                  "info": "",
                  "load_from_db": false,
                  "title_case": false
                },
                "openai_api_key": {
                  "load_from_db": false,
                  "required": false,
                  "placeholder": "",
                  "show": true,
                  "value": "",
                  "name": "openai_api_key",
                  "display_name": "OpenAI API Key",
                  "advanced": true,
                  "input_types": [],
                  "dynamic": false,
                  "info": "The OpenAI API Key to use for the OpenAI model.",
                  "title_case": false,
                  "password": true,
                  "type": "str"
                },
                "user_prompt": {
                  "trace_as_input": true,
                  "trace_as_metadata": true,
                  "load_from_db": false,
                  "list": false,
                  "required": false,
                  "placeholder": "",
                  "show": true,
                  "value": "",
                  "name": "user_prompt",
                  "display_name": "User Prompy",
                  "advanced": false,
                  "input_types": [
                    "Message"
                  ],
                  "dynamic": false,
                  "info": "",
                  "title_case": false,
                  "type": "str"
                }
              },
              "description": "Use as a template to create your own component.",
              "icon": "custom_components",
              "base_classes": [
                "Message"
              ],
              "display_name": "Openai Assistant",
              "documentation": "http://docs.axiestudio.org/components/custom",
              "custom_fields": {},
              "output_types": [],
              "pinned": false,
              "conditional_paths": [],
              "frozen": false,
              "outputs": [
                {
                  "types": [
                    "Message"
                  ],
                  "selected": "Message",
                  "name": "output",
                  "display_name": "Output",
                  "method": "build_output",
                  "value": "__UNDEFINED__",
                  "cache": true
                }
              ],
              "field_order": [
                "user_prompt",
                "assistante_id",
                "image_ids",
                "openai_api_key"
              ],
              "beta": false,
              "edited": true
            },
            "id": "CustomComponent-qz2O3",
            "description": "Use as a template to create your own component.",
            "display_name": "Openai Assistant"
          },
          "selected": false,
          "width": 384,
          "height": 477,
          "positionAbsolute": {
            "x": 2226.4319744525233,
            "y": -12.575861974809769
          },
          "dragging": false
        },
        {
          "id": "ZenDesk Ticket Comments-cQKbp",
          "type": "genericNode",
          "position": {
            "x": 2738.121617853553,
            "y": 331.05088099912314
          },
          "data": {
            "type": "ZenDesk Ticket Comments",
            "node": {
              "template": {
                "_type": "Component",
                "category": {
                  "trace_as_input": true,
                  "trace_as_metadata": true,
                  "load_from_db": false,
                  "list": false,
                  "required": false,
                  "placeholder": "",
                  "show": true,
                  "value": "",
                  "name": "category",
                  "display_name": "Category",
                  "advanced": false,
                  "input_types": [
                    "Message"
                  ],
                  "dynamic": false,
                  "info": "",
                  "title_case": false,
                  "type": "str"
                },
                "category_field_id": {
                  "trace_as_metadata": true,
                  "list": false,
                  "required": false,
                  "placeholder": "",
                  "show": true,
                  "value": "26190819793556",
                  "name": "category_field_id",
                  "display_name": "Category Field ID",
                  "advanced": false,
                  "dynamic": false,
                  "info": "",
                  "title_case": false,
                  "type": "int",
                  "load_from_db": false
                },
                "code": {
                  "type": "code",
                  "required": true,
                  "placeholder": "",
                  "list": false,
                  "show": true,
                  "multiline": true,
                  "value": "# from axiestudio.field_typing import Data\nimport re\nfrom axiestudio.custom import Component\nfrom axiestudio.io import MessageTextInput, Output, IntInput\nfrom axiestudio.schema import Data\nfrom axiestudio.schema.message import Message\nfrom zenpy import Zenpy\nfrom zenpy.lib.api_objects import Ticket, Comment\n\n\nclass CustomComponent(Component):\n    display_name = \"ZenDesk Ticket Comments\"\n    description = \"Get ZenDesk Ticket Comments\"\n    documentation: str = \"\"\n    icon = \"custom_components\"\n    name = \"ZenDesk Ticket Comments\"\n\n    inputs = [\n        MessageTextInput(name=\"ticket_id\", display_name=\"Ticket ID\", value=\"\"),\n        MessageTextInput(name=\"category\", display_name=\"Category\", value=\"\"),\n        IntInput(name=\"category_field_id\", display_name=\"Category Field ID\", value=0),\n        SecretStrInput(\n            name=\"zendesk_api_key\",\n            display_name=\"ZenDesk API Key\",\n            info=\"The ZenDesk API Key\",\n            advanced=False,\n            value=\"ZENDESK_API_KEY\",\n        ),\n        SecretStrInput(\n            name=\"zendesk_api_email\",\n            display_name=\"ZenDesk API Email\",\n            info=\"The ZenDesk API Email\",\n            advanced=False,\n            value=\"ZENDESK_API_EMAIL\",\n        ),\n        SecretStrInput(\n            name=\"zendesk_api_subdomain\",\n            display_name=\"ZenDesk API Subdomain\",\n            info=\"The ZenDesk API Subdomain\",\n            advanced=False,\n            value=\"ZENDESK_API_SUBDOMAIN\",\n        ),\n    ]\n\n    outputs = [\n        Output(display_name=\"Category\", name=\"category_output\", method=\"update_ticket\"),\n    ]\n\n    def update_ticket(self) -> Message:\n        credentials = {\n            'email' : self.zendesk_api_email,\n            'token' : self.zendesk_api_key,\n            'subdomain': self.zendesk_api_subdomain\n        }\n        zenpy_client = Zenpy(**credentials)\n        \n        ticket = zenpy_client.tickets(id=self.ticket_id)\n\n        #ticket.tags.append(self.category)\n        for custom_field in ticket.custom_fields:\n            if self.category_field_id == custom_field[\"id\"]: # category\n                custom_field[\"value\"] = self.category\n        \n        ticket_audit = zenpy_client.tickets.update(ticket)\n        \n        #message = Message(text=str(ticket_audit.ticket.id))\n        message = Message(text=self.category)\n        self.status = message\n        return message\n",
                  "fileTypes": [],
                  "file_path": "",
                  "password": false,
                  "name": "code",
                  "advanced": true,
                  "dynamic": true,
                  "info": "",
                  "load_from_db": false,
                  "title_case": false
                },
                "ticket_id": {
                  "trace_as_input": true,
                  "trace_as_metadata": true,
                  "load_from_db": false,
                  "list": false,
                  "required": false,
                  "placeholder": "",
                  "show": true,
                  "value": "",
                  "name": "ticket_id",
                  "display_name": "Ticket ID",
                  "advanced": false,
                  "input_types": [
                    "Message"
                  ],
                  "dynamic": false,
                  "info": "",
                  "title_case": false,
                  "type": "str"
                },
                "zendesk_api_email": {
                  "load_from_db": false,
                  "required": false,
                  "placeholder": "",
                  "show": true,
                  "value": "",
                  "name": "zendesk_api_email",
                  "display_name": "ZenDesk API Email",
                  "advanced": true,
                  "input_types": [],
                  "dynamic": false,
                  "info": "The ZenDesk API Email",
                  "title_case": false,
                  "password": true,
                  "type": "str"
                },
                "zendesk_api_key": {
                  "load_from_db": false,
                  "required": false,
                  "placeholder": "",
                  "show": true,
                  "value": "",
                  "name": "zendesk_api_key",
                  "display_name": "ZenDesk API Key",
                  "advanced": true,
                  "input_types": [],
                  "dynamic": false,
                  "info": "The ZenDesk API Key",
                  "title_case": false,
                  "password": true,
                  "type": "str"
                },
                "zendesk_api_subdomain": {
                  "load_from_db": false,
                  "required": false,
                  "placeholder": "",
                  "show": true,
                  "value": "",
                  "name": "zendesk_api_subdomain",
                  "display_name": "ZenDesk API Subdomain",
                  "advanced": true,
                  "input_types": [],
                  "dynamic": false,
                  "info": "The ZenDesk API Subdomain",
                  "title_case": false,
                  "password": true,
                  "type": "str"
                }
              },
              "description": "Get ZenDesk Ticket Comments",
              "icon": "custom_components",
              "base_classes": [
                "Message"
              ],
              "display_name": "Zenpy Ticket Update",
              "documentation": "",
              "custom_fields": {},
              "output_types": [],
              "pinned": false,
              "conditional_paths": [],
              "frozen": false,
              "outputs": [
                {
                  "types": [
                    "Message"
                  ],
                  "selected": "Message",
                  "name": "category_output",
                  "display_name": "Category",
                  "method": "update_ticket",
                  "value": "__UNDEFINED__",
                  "cache": true
                }
              ],
              "field_order": [
                "ticket_id",
                "category",
                "category_field_id",
                "zendesk_api_key",
                "zendesk_api_email",
                "zendesk_api_subdomain"
              ],
              "beta": false,
              "edited": true
            },
            "id": "ZenDesk Ticket Comments-cQKbp",
            "description": "Get ZenDesk Ticket Comments",
            "display_name": "Zenpy Ticket Update"
          },
          "selected": false,
          "width": 384,
          "height": 486,
          "positionAbsolute": {
            "x": 2738.121617853553,
            "y": 331.05088099912314
          },
          "dragging": false
        },
        {
          "id": "ZenDesk Ticket Comments-2VpZG",
          "type": "genericNode",
          "position": {
            "x": 628.5648395039048,
            "y": 476.78459206000196
          },
          "data": {
            "type": "ZenDesk Ticket Subject",
            "node": {
              "template": {
                "_type": "Component",
                "code": {
                  "type": "code",
                  "required": true,
                  "placeholder": "",
                  "list": false,
                  "show": true,
                  "multiline": true,
                  "value": "# from axiestudio.field_typing import Data\nimport re\nfrom axiestudio.custom import Component\nfrom axiestudio.io import MessageTextInput, Output\nfrom axiestudio.schema import Data\nfrom axiestudio.schema.message import Message\nfrom zenpy import Zenpy\nfrom zenpy.lib.api_objects import Ticket, Comment\n\n\nclass CustomComponent(Component):\n    display_name = \"ZenDesk Ticket Subject\"\n    description = \"Get ZenDesk Ticket Subject\"\n    documentation: str = \"\"\n    icon = \"custom_components\"\n    name = \"ZenDesk Ticket Subject\"\n\n    inputs = [\n        MessageTextInput(name=\"ticket_id\", display_name=\"Ticket ID\", value=\"\"),\n        SecretStrInput(\n            name=\"zendesk_api_key\",\n            display_name=\"ZenDesk API Key\",\n            info=\"The ZenDesk API Key\",\n            advanced=False,\n            value=\"ZENDESK_API_KEY\",\n        ),\n        SecretStrInput(\n            name=\"zendesk_api_email\",\n            display_name=\"ZenDesk API Email\",\n            info=\"The ZenDesk API Email\",\n            advanced=False,\n            value=\"ZENDESK_API_EMAIL\",\n        ),\n        SecretStrInput(\n            name=\"zendesk_api_subdomain\",\n            display_name=\"ZenDesk API Subdomain\",\n            info=\"The ZenDesk API Subdomain\",\n            advanced=False,\n            value=\"ZENDESK_API_SUBDOMAIN\",\n        ),\n    ]\n\n    outputs = [\n        Output(display_name=\"Ticket Subject\", name=\"text\", method=\"build_subject\"),\n    ]\n\n    def build_subject(self) -> Message:\n        credentials = {\n            'email' : self.zendesk_api_email,\n            'token' : self.zendesk_api_key,\n            'subdomain': self.zendesk_api_subdomain\n        }\n        zenpy_client = Zenpy(**credentials)\n        ticket = zenpy_client.tickets(id=self.ticket_id)\n        subject = ticket.subject\n        self.status = subject\n        return Message(text=subject)\n",
                  "fileTypes": [],
                  "file_path": "",
                  "password": false,
                  "name": "code",
                  "advanced": true,
                  "dynamic": true,
                  "info": "",
                  "load_from_db": false,
                  "title_case": false
                },
                "ticket_id": {
                  "trace_as_input": true,
                  "trace_as_metadata": true,
                  "load_from_db": false,
                  "list": false,
                  "required": false,
                  "placeholder": "",
                  "show": true,
                  "value": "",
                  "name": "ticket_id",
                  "display_name": "Ticket ID",
                  "advanced": false,
                  "input_types": [
                    "Message"
                  ],
                  "dynamic": false,
                  "info": "",
                  "title_case": false,
                  "type": "str"
                },
                "zendesk_api_email": {
                  "load_from_db": false,
                  "required": false,
                  "placeholder": "",
                  "show": true,
                  "value": "",
                  "name": "zendesk_api_email",
                  "display_name": "ZenDesk API Email",
                  "advanced": true,
                  "input_types": [],
                  "dynamic": false,
                  "info": "The ZenDesk API Email",
                  "title_case": false,
                  "password": true,
                  "type": "str"
                },
                "zendesk_api_key": {
                  "load_from_db": false,
                  "required": false,
                  "placeholder": "",
                  "show": true,
                  "value": "",
                  "name": "zendesk_api_key",
                  "display_name": "ZenDesk API Key",
                  "advanced": true,
                  "input_types": [],
                  "dynamic": false,
                  "info": "The ZenDesk API Key",
                  "title_case": false,
                  "password": true,
                  "type": "str"
                },
                "zendesk_api_subdomain": {
                  "load_from_db": false,
                  "required": false,
                  "placeholder": "",
                  "show": true,
                  "value": "",
                  "name": "zendesk_api_subdomain",
                  "display_name": "ZenDesk API Subdomain",
                  "advanced": true,
                  "input_types": [],
                  "dynamic": false,
                  "info": "The ZenDesk API Subdomain",
                  "title_case": false,
                  "password": true,
                  "type": "str"
                }
              },
              "description": "Get ZenDesk Ticket Subject",
              "icon": "custom_components",
              "base_classes": [
                "Message"
              ],
              "display_name": "Zenpy Ticket Subject",
              "documentation": "",
              "custom_fields": {},
              "output_types": [],
              "pinned": false,
              "conditional_paths": [],
              "frozen": false,
              "outputs": [
                {
                  "types": [
                    "Message"
                  ],
                  "selected": "Message",
                  "name": "text",
                  "display_name": "Ticket Subject",
                  "method": "build_subject",
                  "value": "__UNDEFINED__",
                  "cache": true
                }
              ],
              "field_order": [
                "ticket_id",
                "zendesk_api_key",
                "zendesk_api_email",
                "zendesk_api_subdomain"
              ],
              "beta": false,
              "edited": true
            },
            "id": "ZenDesk Ticket Comments-2VpZG",
            "description": "Get ZenDesk Ticket Subject",
            "display_name": "Zenpy Ticket Subject"
          },
          "selected": false,
          "width": 384,
          "height": 307,
          "positionAbsolute": {
            "x": 628.5648395039048,
            "y": 476.78459206000196
          },
          "dragging": false
        },
        {
          "id": "ChatInput-HMa1b",
          "type": "genericNode",
          "position": {
            "x": 34.66803859836864,
            "y": 232.96322747118046
          },
          "data": {
            "type": "ChatInput",
            "node": {
              "template": {
                "_type": "Component",
                "files": {
                  "trace_as_metadata": true,
                  "file_path": "",
                  "fileTypes": [
                    "txt",
                    "md",
                    "mdx",
                    "csv",
                    "json",
                    "yaml",
                    "yml",
                    "xml",
                    "html",
                    "htm",
                    "pdf",
                    "docx",
                    "py",
                    "sh",
                    "sql",
                    "js",
                    "ts",
                    "tsx",
                    "jpg",
                    "jpeg",
                    "png",
                    "bmp",
                    "image"
                  ],
                  "list": true,
                  "required": false,
                  "placeholder": "",
                  "show": true,
                  "value": "",
                  "name": "files",
                  "display_name": "Files",
                  "advanced": true,
                  "dynamic": false,
                  "info": "Files to be sent with the message.",
                  "title_case": false,
                  "type": "file"
                },
                "code": {
                  "type": "code",
                  "required": true,
                  "placeholder": "",
                  "list": false,
                  "show": true,
                  "multiline": true,
                  "value": "from axiestudio.base.data.utils import IMG_FILE_TYPES, TEXT_FILE_TYPES\nfrom axiestudio.base.io.chat import ChatComponent\nfrom axiestudio.inputs import BoolInput\nfrom axiestudio.io import DropdownInput, FileInput, MessageTextInput, MultilineInput, Output\nfrom axiestudio.memory import store_message\nfrom axiestudio.schema.message import Message\n\n\nclass ChatInput(ChatComponent):\n    display_name = \"Chat Input\"\n    description = \"Get chat inputs from the Playground.\"\n    icon = \"ChatInput\"\n    name = \"ChatInput\"\n\n    inputs = [\n        MultilineInput(\n            name=\"input_value\",\n            display_name=\"Text\",\n            value=\"\",\n            info=\"Message to be passed as input.\",\n        ),\n        BoolInput(\n            name=\"should_store_message\",\n            display_name=\"Store Messages\",\n            info=\"Store the message in the history.\",\n            value=True,\n            advanced=True,\n        ),\n        DropdownInput(\n            name=\"sender\",\n            display_name=\"Sender Type\",\n            options=[\"Machine\", \"User\"],\n            value=\"User\",\n            info=\"Type of sender.\",\n            advanced=True,\n        ),\n        MessageTextInput(\n            name=\"sender_name\",\n            display_name=\"Sender Name\",\n            info=\"Name of the sender.\",\n            value=\"User\",\n            advanced=True,\n        ),\n        MessageTextInput(\n            name=\"session_id\", display_name=\"Session ID\", info=\"Session ID for the message.\", advanced=True\n        ),\n        FileInput(\n            name=\"files\",\n            display_name=\"Files\",\n            file_types=TEXT_FILE_TYPES + IMG_FILE_TYPES,\n            info=\"Files to be sent with the message.\",\n            advanced=True,\n            is_list=True,\n        ),\n    ]\n    outputs = [\n        Output(display_name=\"Message\", name=\"message\", method=\"message_response\"),\n    ]\n\n    def message_response(self) -> Message:\n        message = Message(\n            text=self.input_value,\n            sender=self.sender,\n            sender_name=self.sender_name,\n            session_id=self.session_id,\n            files=self.files,\n        )\n\n        if (\n            self.session_id\n            and isinstance(message, Message)\n            and isinstance(message.text, str)\n            and self.should_store_message\n        ):\n            store_message(\n                message,\n                flow_id=self.graph.flow_id,\n            )\n            self.message.value = message\n\n        self.status = message\n        return message\n",
                  "fileTypes": [],
                  "file_path": "",
                  "password": false,
                  "name": "code",
                  "advanced": true,
                  "dynamic": true,
                  "info": "",
                  "load_from_db": false,
                  "title_case": false
                },
                "input_value": {
                  "trace_as_input": true,
                  "multiline": true,
                  "trace_as_metadata": true,
                  "load_from_db": false,
                  "list": false,
                  "required": false,
                  "placeholder": "",
                  "show": true,
                  "value": "3393",
                  "name": "input_value",
                  "display_name": "Text",
                  "advanced": false,
                  "input_types": [
                    "Message"
                  ],
                  "dynamic": false,
                  "info": "Message to be passed as input.",
                  "title_case": false,
                  "type": "str"
                },
                "sender": {
                  "trace_as_metadata": true,
                  "options": [
                    "Machine",
                    "User"
                  ],
                  "required": false,
                  "placeholder": "",
                  "show": true,
                  "value": "User",
                  "name": "sender",
                  "display_name": "Sender Type",
                  "advanced": true,
                  "dynamic": false,
                  "info": "Type of sender.",
                  "title_case": false,
                  "type": "str"
                },
                "sender_name": {
                  "trace_as_input": true,
                  "trace_as_metadata": true,
                  "load_from_db": false,
                  "list": false,
                  "required": false,
                  "placeholder": "",
                  "show": true,
                  "value": "User",
                  "name": "sender_name",
                  "display_name": "Sender Name",
                  "advanced": true,
                  "input_types": [
                    "Message"
                  ],
                  "dynamic": false,
                  "info": "Name of the sender.",
                  "title_case": false,
                  "type": "str"
                },
                "session_id": {
                  "trace_as_input": true,
                  "trace_as_metadata": true,
                  "load_from_db": false,
                  "list": false,
                  "required": false,
                  "placeholder": "",
                  "show": true,
                  "value": "",
                  "name": "session_id",
                  "display_name": "Session ID",
                  "advanced": true,
                  "input_types": [
                    "Message"
                  ],
                  "dynamic": false,
                  "info": "Session ID for the message.",
                  "title_case": false,
                  "type": "str"
                },
                "should_store_message": {
                  "trace_as_metadata": true,
                  "list": false,
                  "required": false,
                  "placeholder": "",
                  "show": true,
                  "value": true,
                  "name": "should_store_message",
                  "display_name": "Store Messages",
                  "advanced": true,
                  "dynamic": false,
                  "info": "Store the message in the history.",
                  "title_case": false,
                  "type": "bool"
                }
              },
              "description": "Get chat inputs from the Playground.",
              "icon": "ChatInput",
              "base_classes": [
                "Message"
              ],
              "display_name": "Chat Input",
              "documentation": "",
              "custom_fields": {},
              "output_types": [],
              "pinned": false,
              "conditional_paths": [],
              "frozen": false,
              "outputs": [
                {
                  "types": [
                    "Message"
                  ],
                  "selected": "Message",
                  "name": "message",
                  "display_name": "Message",
                  "method": "message_response",
                  "value": "__UNDEFINED__",
                  "cache": true
                }
              ],
              "field_order": [
                "input_value",
                "should_store_message",
                "sender",
                "sender_name",
                "session_id",
                "files"
              ],
              "beta": false,
              "edited": false
            },
            "id": "ChatInput-HMa1b"
          },
          "selected": false,
          "width": 384,
          "height": 307,
          "positionAbsolute": {
            "x": 34.66803859836864,
            "y": 232.96322747118046
          },
          "dragging": false
        },
        {
          "id": "ChatOutput-xVCc0",
          "type": "genericNode",
          "position": {
            "x": 3248.407067873466,
            "y": 430.9418400022008
          },
          "data": {
            "type": "ChatOutput",
            "node": {
              "template": {
                "_type": "Component",
                "code": {
                  "type": "code",
                  "required": true,
                  "placeholder": "",
                  "list": false,
                  "show": true,
                  "multiline": true,
                  "value": "from axiestudio.base.io.chat import ChatComponent\nfrom axiestudio.inputs import BoolInput\nfrom axiestudio.io import DropdownInput, MessageTextInput, Output\nfrom axiestudio.memory import store_message\nfrom axiestudio.schema.message import Message\n\n\nclass ChatOutput(ChatComponent):\n    display_name = \"Chat Output\"\n    description = \"Display a chat message in the Playground.\"\n    icon = \"ChatOutput\"\n    name = \"ChatOutput\"\n\n    inputs = [\n        MessageTextInput(\n            name=\"input_value\",\n            display_name=\"Text\",\n            info=\"Message to be passed as output.\",\n        ),\n        BoolInput(\n            name=\"should_store_message\",\n            display_name=\"Store Messages\",\n            info=\"Store the message in the history.\",\n            value=True,\n            advanced=True,\n        ),\n        DropdownInput(\n            name=\"sender\",\n            display_name=\"Sender Type\",\n            options=[\"Machine\", \"User\"],\n            value=\"Machine\",\n            advanced=True,\n            info=\"Type of sender.\",\n        ),\n        MessageTextInput(\n            name=\"sender_name\", display_name=\"Sender Name\", info=\"Name of the sender.\", value=\"AI\", advanced=True\n        ),\n        MessageTextInput(\n            name=\"session_id\", display_name=\"Session ID\", info=\"Session ID for the message.\", advanced=True\n        ),\n        MessageTextInput(\n            name=\"data_template\",\n            display_name=\"Data Template\",\n            value=\"{text}\",\n            advanced=True,\n            info=\"Template to convert Data to Text. If left empty, it will be dynamically set to the Data's text key.\",\n        ),\n    ]\n    outputs = [\n        Output(display_name=\"Message\", name=\"message\", method=\"message_response\"),\n    ]\n\n    def message_response(self) -> Message:\n        message = Message(\n            text=self.input_value,\n            sender=self.sender,\n            sender_name=self.sender_name,\n            session_id=self.session_id,\n        )\n        if (\n            self.session_id\n            and isinstance(message, Message)\n            and isinstance(message.text, str)\n            and self.should_store_message\n        ):\n            store_message(\n                message,\n                flow_id=self.graph.flow_id,\n            )\n            self.message.value = message\n\n        self.status = message\n        return message\n",
                  "fileTypes": [],
                  "file_path": "",
                  "password": false,
                  "name": "code",
                  "advanced": true,
                  "dynamic": true,
                  "info": "",
                  "load_from_db": false,
                  "title_case": false
                },
                "data_template": {
                  "trace_as_input": true,
                  "trace_as_metadata": true,
                  "load_from_db": false,
                  "list": false,
                  "required": false,
                  "placeholder": "",
                  "show": true,
                  "value": "{text}",
                  "name": "data_template",
                  "display_name": "Data Template",
                  "advanced": true,
                  "input_types": [
                    "Message"
                  ],
                  "dynamic": false,
                  "info": "Template to convert Data to Text. If left empty, it will be dynamically set to the Data's text key.",
                  "title_case": false,
                  "type": "str"
                },
                "input_value": {
                  "trace_as_input": true,
                  "trace_as_metadata": true,
                  "load_from_db": false,
                  "list": false,
                  "required": false,
                  "placeholder": "",
                  "show": true,
                  "value": "",
                  "name": "input_value",
                  "display_name": "Text",
                  "advanced": false,
                  "input_types": [
                    "Message"
                  ],
                  "dynamic": false,
                  "info": "Message to be passed as output.",
                  "title_case": false,
                  "type": "str"
                },
                "sender": {
                  "trace_as_metadata": true,
                  "options": [
                    "Machine",
                    "User"
                  ],
                  "required": false,
                  "placeholder": "",
                  "show": true,
                  "value": "Machine",
                  "name": "sender",
                  "display_name": "Sender Type",
                  "advanced": true,
                  "dynamic": false,
                  "info": "Type of sender.",
                  "title_case": false,
                  "type": "str"
                },
                "sender_name": {
                  "trace_as_input": true,
                  "trace_as_metadata": true,
                  "load_from_db": false,
                  "list": false,
                  "required": false,
                  "placeholder": "",
                  "show": true,
                  "value": "AI",
                  "name": "sender_name",
                  "display_name": "Sender Name",
                  "advanced": true,
                  "input_types": [
                    "Message"
                  ],
                  "dynamic": false,
                  "info": "Name of the sender.",
                  "title_case": false,
                  "type": "str"
                },
                "session_id": {
                  "trace_as_input": true,
                  "trace_as_metadata": true,
                  "load_from_db": false,
                  "list": false,
                  "required": false,
                  "placeholder": "",
                  "show": true,
                  "value": "",
                  "name": "session_id",
                  "display_name": "Session ID",
                  "advanced": true,
                  "input_types": [
                    "Message"
                  ],
                  "dynamic": false,
                  "info": "Session ID for the message.",
                  "title_case": false,
                  "type": "str"
                },
                "should_store_message": {
                  "trace_as_metadata": true,
                  "list": false,
                  "required": false,
                  "placeholder": "",
                  "show": true,
                  "value": true,
                  "name": "should_store_message",
                  "display_name": "Store Messages",
                  "advanced": true,
                  "dynamic": false,
                  "info": "Store the message in the history.",
                  "title_case": false,
                  "type": "bool"
                }
              },
              "description": "Display a chat message in the Playground.",
              "icon": "ChatOutput",
              "base_classes": [
                "Message"
              ],
              "display_name": "Chat Output",
              "documentation": "",
              "custom_fields": {},
              "output_types": [],
              "pinned": false,
              "conditional_paths": [],
              "frozen": false,
              "outputs": [
                {
                  "types": [
                    "Message"
                  ],
                  "selected": "Message",
                  "name": "message",
                  "display_name": "Message",
                  "method": "message_response",
                  "value": "__UNDEFINED__",
                  "cache": true
                }
              ],
              "field_order": [
                "input_value",
                "should_store_message",
                "sender",
                "sender_name",
                "session_id",
                "data_template"
              ],
              "beta": false,
              "edited": false
            },
            "id": "ChatOutput-xVCc0"
          },
          "selected": false,
          "width": 384,
          "height": 306,
          "positionAbsolute": {
            "x": 3248.407067873466,
            "y": 430.9418400022008
          },
          "dragging": false
        }
      ],
      "edges": [
        {
          "source": "CustomComponent-J5MQN",
          "sourceHandle": "{œdataTypeœ:œZenDesk Ticket Commentsœ,œidœ:œCustomComponent-J5MQNœ,œnameœ:œcommentsœ,œoutput_typesœ:[œDataœ]}",
          "target": "ParseData-yKmV3",
          "targetHandle": "{œfieldNameœ:œdataœ,œidœ:œParseData-yKmV3œ,œinputTypesœ:[œDataœ],œtypeœ:œotherœ}",
          "data": {
            "targetHandle": {
              "fieldName": "data",
              "id": "ParseData-yKmV3",
              "inputTypes": [
                "Data"
              ],
              "type": "other"
            },
            "sourceHandle": {
              "dataType": "ZenDesk Ticket Comments",
              "id": "CustomComponent-J5MQN",
              "name": "comments",
              "output_types": [
                "Data"
              ]
            }
          },
          "id": "reactflow__edge-CustomComponent-J5MQN{œdataTypeœ:œZenDesk Ticket Commentsœ,œidœ:œCustomComponent-J5MQNœ,œnameœ:œcommentsœ,œoutput_typesœ:[œDataœ]}-ParseData-yKmV3{œfieldNameœ:œdataœ,œidœ:œParseData-yKmV3œ,œinputTypesœ:[œDataœ],œtypeœ:œotherœ}",
          "className": ""
        },
        {
          "source": "Prompt-YbrxB",
          "sourceHandle": "{œdataTypeœ:œPromptœ,œidœ:œPrompt-YbrxBœ,œnameœ:œpromptœ,œoutput_typesœ:[œMessageœ]}",
          "target": "CustomComponent-qz2O3",
          "targetHandle": "{œfieldNameœ:œuser_promptœ,œidœ:œCustomComponent-qz2O3œ,œinputTypesœ:[œMessageœ],œtypeœ:œstrœ}",
          "data": {
            "targetHandle": {
              "fieldName": "user_prompt",
              "id": "CustomComponent-qz2O3",
              "inputTypes": [
                "Message"
              ],
              "type": "str"
            },
            "sourceHandle": {
              "dataType": "Prompt",
              "id": "Prompt-YbrxB",
              "name": "prompt",
              "output_types": [
                "Message"
              ]
            }
          },
          "id": "reactflow__edge-Prompt-YbrxB{œdataTypeœ:œPromptœ,œidœ:œPrompt-YbrxBœ,œnameœ:œpromptœ,œoutput_typesœ:[œMessageœ]}-CustomComponent-qz2O3{œfieldNameœ:œuser_promptœ,œidœ:œCustomComponent-qz2O3œ,œinputTypesœ:[œMessageœ],œtypeœ:œstrœ}",
          "className": ""
        },
        {
          "source": "CustomComponent-J5MQN",
          "sourceHandle": "{œdataTypeœ:œZenDesk Ticket Commentsœ,œidœ:œCustomComponent-J5MQNœ,œnameœ:œcommentsœ,œoutput_typesœ:[œDataœ]}",
          "target": "URL-pFyrY",
          "targetHandle": "{œfieldNameœ:œcommentsœ,œidœ:œURL-pFyrYœ,œinputTypesœ:[œDataœ],œtypeœ:œotherœ}",
          "data": {
            "targetHandle": {
              "fieldName": "comments",
              "id": "URL-pFyrY",
              "inputTypes": [
                "Data"
              ],
              "type": "other"
            },
            "sourceHandle": {
              "dataType": "ZenDesk Ticket Comments",
              "id": "CustomComponent-J5MQN",
              "name": "comments",
              "output_types": [
                "Data"
              ]
            }
          },
          "id": "reactflow__edge-CustomComponent-J5MQN{œdataTypeœ:œZenDesk Ticket Commentsœ,œidœ:œCustomComponent-J5MQNœ,œnameœ:œcommentsœ,œoutput_typesœ:[œDataœ]}-URL-pFyrY{œfieldNameœ:œcommentsœ,œidœ:œURL-pFyrYœ,œinputTypesœ:[œDataœ],œtypeœ:œotherœ}",
          "className": ""
        },
        {
          "source": "URL-pFyrY",
          "sourceHandle": "{œdataTypeœ:œOpenai File IDsœ,œidœ:œURL-pFyrYœ,œnameœ:œdataœ,œoutput_typesœ:[œDataœ]}",
          "target": "CustomComponent-qz2O3",
          "targetHandle": "{œfieldNameœ:œimage_idsœ,œidœ:œCustomComponent-qz2O3œ,œinputTypesœ:[œDataœ],œtypeœ:œotherœ}",
          "data": {
            "targetHandle": {
              "fieldName": "image_ids",
              "id": "CustomComponent-qz2O3",
              "inputTypes": [
                "Data"
              ],
              "type": "other"
            },
            "sourceHandle": {
              "dataType": "Openai File IDs",
              "id": "URL-pFyrY",
              "name": "data",
              "output_types": [
                "Data"
              ]
            }
          },
          "id": "reactflow__edge-URL-pFyrY{œdataTypeœ:œOpenai File IDsœ,œidœ:œURL-pFyrYœ,œnameœ:œdataœ,œoutput_typesœ:[œDataœ]}-CustomComponent-qz2O3{œfieldNameœ:œimage_idsœ,œidœ:œCustomComponent-qz2O3œ,œinputTypesœ:[œDataœ],œtypeœ:œotherœ}",
          "className": ""
        },
        {
          "source": "CustomComponent-qz2O3",
          "sourceHandle": "{œdataTypeœ:œCustomComponentœ,œidœ:œCustomComponent-qz2O3œ,œnameœ:œoutputœ,œoutput_typesœ:[œMessageœ]}",
          "target": "ZenDesk Ticket Comments-cQKbp",
          "targetHandle": "{œfieldNameœ:œcategoryœ,œidœ:œZenDesk Ticket Comments-cQKbpœ,œinputTypesœ:[œMessageœ],œtypeœ:œstrœ}",
          "data": {
            "targetHandle": {
              "fieldName": "category",
              "id": "ZenDesk Ticket Comments-cQKbp",
              "inputTypes": [
                "Message"
              ],
              "type": "str"
            },
            "sourceHandle": {
              "dataType": "CustomComponent",
              "id": "CustomComponent-qz2O3",
              "name": "output",
              "output_types": [
                "Message"
              ]
            }
          },
          "id": "reactflow__edge-CustomComponent-qz2O3{œdataTypeœ:œCustomComponentœ,œidœ:œCustomComponent-qz2O3œ,œnameœ:œoutputœ,œoutput_typesœ:[œMessageœ]}-ZenDesk Ticket Comments-cQKbp{œfieldNameœ:œcategoryœ,œidœ:œZenDesk Ticket Comments-cQKbpœ,œinputTypesœ:[œMessageœ],œtypeœ:œstrœ}",
          "className": ""
        },
        {
          "source": "ParseData-yKmV3",
          "sourceHandle": "{œdataTypeœ:œTicket Comments Plain Bodyœ,œidœ:œParseData-yKmV3œ,œnameœ:œtextœ,œoutput_typesœ:[œMessageœ]}",
          "target": "Prompt-YbrxB",
          "targetHandle": "{œfieldNameœ:œbodyœ,œidœ:œPrompt-YbrxBœ,œinputTypesœ:[œMessageœ,œTextœ],œtypeœ:œstrœ}",
          "data": {
            "targetHandle": {
              "fieldName": "body",
              "id": "Prompt-YbrxB",
              "inputTypes": [
                "Message",
                "Text"
              ],
              "type": "str"
            },
            "sourceHandle": {
              "dataType": "Ticket Comments Plain Body",
              "id": "ParseData-yKmV3",
              "name": "text",
              "output_types": [
                "Message"
              ]
            }
          },
          "id": "reactflow__edge-ParseData-yKmV3{œdataTypeœ:œTicket Comments Plain Bodyœ,œidœ:œParseData-yKmV3œ,œnameœ:œtextœ,œoutput_typesœ:[œMessageœ]}-Prompt-YbrxB{œfieldNameœ:œbodyœ,œidœ:œPrompt-YbrxBœ,œinputTypesœ:[œMessageœ,œTextœ],œtypeœ:œstrœ}",
          "className": ""
        },
        {
          "source": "ZenDesk Ticket Comments-2VpZG",
          "sourceHandle": "{œdataTypeœ:œZenDesk Ticket Subjectœ,œidœ:œZenDesk Ticket Comments-2VpZGœ,œnameœ:œtextœ,œoutput_typesœ:[œMessageœ]}",
          "target": "Prompt-YbrxB",
          "targetHandle": "{œfieldNameœ:œsubjectœ,œidœ:œPrompt-YbrxBœ,œinputTypesœ:[œMessageœ,œTextœ],œtypeœ:œstrœ}",
          "data": {
            "targetHandle": {
              "fieldName": "subject",
              "id": "Prompt-YbrxB",
              "inputTypes": [
                "Message",
                "Text"
              ],
              "type": "str"
            },
            "sourceHandle": {
              "dataType": "ZenDesk Ticket Subject",
              "id": "ZenDesk Ticket Comments-2VpZG",
              "name": "text",
              "output_types": [
                "Message"
              ]
            }
          },
          "id": "reactflow__edge-ZenDesk Ticket Comments-2VpZG{œdataTypeœ:œZenDesk Ticket Subjectœ,œidœ:œZenDesk Ticket Comments-2VpZGœ,œnameœ:œtextœ,œoutput_typesœ:[œMessageœ]}-Prompt-YbrxB{œfieldNameœ:œsubjectœ,œidœ:œPrompt-YbrxBœ,œinputTypesœ:[œMessageœ,œTextœ],œtypeœ:œstrœ}",
          "className": ""
        },
        {
          "source": "ChatInput-HMa1b",
          "sourceHandle": "{œdataTypeœ:œChatInputœ,œidœ:œChatInput-HMa1bœ,œnameœ:œmessageœ,œoutput_typesœ:[œMessageœ]}",
          "target": "CustomComponent-J5MQN",
          "targetHandle": "{œfieldNameœ:œticket_idœ,œidœ:œCustomComponent-J5MQNœ,œinputTypesœ:[œMessageœ],œtypeœ:œstrœ}",
          "data": {
            "targetHandle": {
              "fieldName": "ticket_id",
              "id": "CustomComponent-J5MQN",
              "inputTypes": [
                "Message"
              ],
              "type": "str"
            },
            "sourceHandle": {
              "dataType": "ChatInput",
              "id": "ChatInput-HMa1b",
              "name": "message",
              "output_types": [
                "Message"
              ]
            }
          },
          "id": "reactflow__edge-ChatInput-HMa1b{œdataTypeœ:œChatInputœ,œidœ:œChatInput-HMa1bœ,œnameœ:œmessageœ,œoutput_typesœ:[œMessageœ]}-CustomComponent-J5MQN{œfieldNameœ:œticket_idœ,œidœ:œCustomComponent-J5MQNœ,œinputTypesœ:[œMessageœ],œtypeœ:œstrœ}",
          "className": ""
        },
        {
          "source": "ChatInput-HMa1b",
          "sourceHandle": "{œdataTypeœ:œChatInputœ,œidœ:œChatInput-HMa1bœ,œnameœ:œmessageœ,œoutput_typesœ:[œMessageœ]}",
          "target": "ZenDesk Ticket Comments-2VpZG",
          "targetHandle": "{œfieldNameœ:œticket_idœ,œidœ:œZenDesk Ticket Comments-2VpZGœ,œinputTypesœ:[œMessageœ],œtypeœ:œstrœ}",
          "data": {
            "targetHandle": {
              "fieldName": "ticket_id",
              "id": "ZenDesk Ticket Comments-2VpZG",
              "inputTypes": [
                "Message"
              ],
              "type": "str"
            },
            "sourceHandle": {
              "dataType": "ChatInput",
              "id": "ChatInput-HMa1b",
              "name": "message",
              "output_types": [
                "Message"
              ]
            }
          },
          "id": "reactflow__edge-ChatInput-HMa1b{œdataTypeœ:œChatInputœ,œidœ:œChatInput-HMa1bœ,œnameœ:œmessageœ,œoutput_typesœ:[œMessageœ]}-ZenDesk Ticket Comments-2VpZG{œfieldNameœ:œticket_idœ,œidœ:œZenDesk Ticket Comments-2VpZGœ,œinputTypesœ:[œMessageœ],œtypeœ:œstrœ}",
          "className": ""
        },
        {
          "source": "ChatInput-HMa1b",
          "sourceHandle": "{œdataTypeœ:œChatInputœ,œidœ:œChatInput-HMa1bœ,œnameœ:œmessageœ,œoutput_typesœ:[œMessageœ]}",
          "target": "ZenDesk Ticket Comments-cQKbp",
          "targetHandle": "{œfieldNameœ:œticket_idœ,œidœ:œZenDesk Ticket Comments-cQKbpœ,œinputTypesœ:[œMessageœ],œtypeœ:œstrœ}",
          "data": {
            "targetHandle": {
              "fieldName": "ticket_id",
              "id": "ZenDesk Ticket Comments-cQKbp",
              "inputTypes": [
                "Message"
              ],
              "type": "str"
            },
            "sourceHandle": {
              "dataType": "ChatInput",
              "id": "ChatInput-HMa1b",
              "name": "message",
              "output_types": [
                "Message"
              ]
            }
          },
          "id": "reactflow__edge-ChatInput-HMa1b{œdataTypeœ:œChatInputœ,œidœ:œChatInput-HMa1bœ,œnameœ:œmessageœ,œoutput_typesœ:[œMessageœ]}-ZenDesk Ticket Comments-cQKbp{œfieldNameœ:œticket_idœ,œidœ:œZenDesk Ticket Comments-cQKbpœ,œinputTypesœ:[œMessageœ],œtypeœ:œstrœ}",
          "className": ""
        },
        {
          "source": "ZenDesk Ticket Comments-cQKbp",
          "sourceHandle": "{œdataTypeœ:œZenDesk Ticket Commentsœ,œidœ:œZenDesk Ticket Comments-cQKbpœ,œnameœ:œcategory_outputœ,œoutput_typesœ:[œMessageœ]}",
          "target": "ChatOutput-xVCc0",
          "targetHandle": "{œfieldNameœ:œinput_valueœ,œidœ:œChatOutput-xVCc0œ,œinputTypesœ:[œMessageœ],œtypeœ:œstrœ}",
          "data": {
            "targetHandle": {
              "fieldName": "input_value",
              "id": "ChatOutput-xVCc0",
              "inputTypes": [
                "Message"
              ],
              "type": "str"
            },
            "sourceHandle": {
              "dataType": "ZenDesk Ticket Comments",
              "id": "ZenDesk Ticket Comments-cQKbp",
              "name": "category_output",
              "output_types": [
                "Message"
              ]
            }
          },
          "id": "reactflow__edge-ZenDesk Ticket Comments-cQKbp{œdataTypeœ:œZenDesk Ticket Commentsœ,œidœ:œZenDesk Ticket Comments-cQKbpœ,œnameœ:œcategory_outputœ,œoutput_typesœ:[œMessageœ]}-ChatOutput-xVCc0{œfieldNameœ:œinput_valueœ,œidœ:œChatOutput-xVCc0œ,œinputTypesœ:[œMessageœ],œtypeœ:œstrœ}",
          "className": ""
        }
      ],
      "viewport": {
        "x": 109.68723779806896,
        "y": 220.55383085585663,
        "zoom": 0.5859218756865695
      }
    },
    "date_created": "2024-07-19T21:06:50.586Z",
    "date_updated": "2024-07-19T21:06:50.650Z",
    "status": "Public",
    "sort": null,
    "user_updated": "9d308887-0e67-4bc4-b9c4-e1df042f2367",
    "user_created": {
      "username": "rudmac",
      "first_name": "Rud",
      "last_name": "Mac",
      "id": "9d308887-0e67-4bc4-b9c4-e1df042f2367"
    },
    "tags": []
  },
  "conversion": {
    "converted_at": "2025-08-19T18:09:07.536Z",
    "converted_from": "langflow",
    "converted_to": "axiestudio",
    "conversions_made": 94,
    "converter_version": "1.0.0"
  }
}