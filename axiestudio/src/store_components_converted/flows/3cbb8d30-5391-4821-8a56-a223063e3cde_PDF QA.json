{
  "id": "3cbb8d30-5391-4821-8a56-a223063e3cde",
  "name": "PDF QA",
  "description": "Unleashing Business Potential through Language Engineering. (Converted from Langflow Store for AxieStudio compatibility)",
  "type": "FLOW",
  "is_component": false,
  "author": {
    "username": "Postera",
    "first_name": "Nasitt",
    "last_name": "_",
    "id": "21456395-62ba-46cf-b241-139c70e3ceed",
    "full_name": "Nasitt _"
  },
  "store_url": "https://www.langflow.store/store/component/3cbb8d30-5391-4821-8a56-a223063e3cde",
  "stats": {
    "downloads": 0,
    "likes": 0
  },
  "dates": {
    "created": "2024-05-24T17:11:57.162Z",
    "updated": "2024-05-24T17:11:57.328Z",
    "downloaded": "2025-08-19T17:50:05.059Z"
  },
  "tags": [],
  "technical": {
    "last_tested_version": "0.6.19",
    "private": false,
    "status": "Public"
  },
  "data": {
    "nodes": [
      {
        "id": "Chroma-cjSxZ",
        "type": "genericNode",
        "position": {
          "x": 1433.8816392870156,
          "y": -21.041493418633337
        },
        "data": {
          "type": "Chroma",
          "node": {
            "template": {
              "documents": {
                "type": "Document",
                "required": false,
                "placeholder": "",
                "list": true,
                "show": true,
                "multiline": false,
                "fileTypes": [],
                "file_path": "",
                "password": false,
                "name": "documents",
                "display_name": "Documents",
                "advanced": false,
                "dynamic": false,
                "info": "",
                "title_case": true
              },
              "embedding": {
                "type": "Embeddings",
                "required": true,
                "placeholder": "",
                "list": false,
                "show": true,
                "multiline": false,
                "fileTypes": [],
                "file_path": "",
                "password": false,
                "name": "embedding",
                "display_name": "Embedding",
                "advanced": false,
                "dynamic": false,
                "info": "",
                "title_case": true
              },
              "chroma_server_cors_allow_origins": {
                "type": "str",
                "required": false,
                "placeholder": "",
                "list": false,
                "show": true,
                "multiline": false,
                "fileTypes": [],
                "file_path": "",
                "password": false,
                "name": "chroma_server_cors_allow_origins",
                "display_name": "Server CORS Allow Origins",
                "advanced": true,
                "dynamic": false,
                "info": "",
                "title_case": true
              },
              "chroma_server_grpc_port": {
                "type": "int",
                "required": false,
                "placeholder": "",
                "list": false,
                "show": true,
                "multiline": false,
                "fileTypes": [],
                "file_path": "",
                "password": false,
                "name": "chroma_server_grpc_port",
                "display_name": "Server gRPC Port",
                "advanced": true,
                "dynamic": false,
                "info": "",
                "title_case": true
              },
              "chroma_server_host": {
                "type": "str",
                "required": false,
                "placeholder": "",
                "list": false,
                "show": true,
                "multiline": false,
                "fileTypes": [],
                "file_path": "",
                "password": false,
                "name": "chroma_server_host",
                "display_name": "Server Host",
                "advanced": true,
                "dynamic": false,
                "info": "",
                "title_case": true,
                "value": ""
              },
              "chroma_server_port": {
                "type": "int",
                "required": false,
                "placeholder": "",
                "list": false,
                "show": true,
                "multiline": false,
                "fileTypes": [],
                "file_path": "",
                "password": false,
                "name": "chroma_server_port",
                "display_name": "Server Port",
                "advanced": true,
                "dynamic": false,
                "info": "",
                "title_case": true,
                "value": ""
              },
              "chroma_server_ssl_enabled": {
                "type": "bool",
                "required": true,
                "placeholder": "",
                "list": false,
                "show": true,
                "multiline": false,
                "value": false,
                "fileTypes": [],
                "file_path": "",
                "password": false,
                "name": "chroma_server_ssl_enabled",
                "display_name": "Server SSL Enabled",
                "advanced": true,
                "dynamic": false,
                "info": "",
                "title_case": true
              },
              "code": {
                "type": "code",
                "required": true,
                "placeholder": "",
                "list": false,
                "show": true,
                "multiline": true,
                "value": "from typing import List, Optional, Union\n\nimport chromadb  # type: ignore\nfrom langchain.embeddings.base import Embeddings\nfrom langchain.schema import BaseRetriever, Document\nfrom langchain_community.vectorstores import VectorStore\nfrom langchain_community.vectorstores.chroma import Chroma\nfrom axiestudio import CustomComponent\n\n\nclass ChromaComponent(CustomComponent):\n    \"\"\"\n    A custom component for implementing a Vector Store using Chroma.\n    \"\"\"\n\n    display_name: str = \"Chroma\"\n    description: str = \"Implementation of Vector Store using Chroma\"\n    documentation = \"https://python.langchain.com/docs/integrations/vectorstores/chroma\"\n    beta: bool = True\n\n    def build_config(self):\n        \"\"\"\n        Builds the configuration for the component.\n\n        Returns:\n        - dict: A dictionary containing the configuration options for the component.\n        \"\"\"\n        return {\n            \"collection_name\": {\"display_name\": \"Collection Name\", \"value\": \"axiestudio\"},\n            \"persist\": {\"display_name\": \"Persist\"},\n            \"persist_directory\": {\"display_name\": \"Persist Directory\"},\n            \"code\": {\"advanced\": True, \"display_name\": \"Code\"},\n            \"documents\": {\"display_name\": \"Documents\", \"is_list\": True},\n            \"embedding\": {\"display_name\": \"Embedding\"},\n            \"chroma_server_cors_allow_origins\": {\n                \"display_name\": \"Server CORS Allow Origins\",\n                \"advanced\": True,\n            },\n            \"chroma_server_host\": {\"display_name\": \"Server Host\", \"advanced\": True},\n            \"chroma_server_port\": {\"display_name\": \"Server Port\", \"advanced\": True},\n            \"chroma_server_grpc_port\": {\n                \"display_name\": \"Server gRPC Port\",\n                \"advanced\": True,\n            },\n            \"chroma_server_ssl_enabled\": {\n                \"display_name\": \"Server SSL Enabled\",\n                \"advanced\": True,\n            },\n        }\n\n    def build(\n        self,\n        collection_name: str,\n        persist: bool,\n        embedding: Embeddings,\n        chroma_server_ssl_enabled: bool,\n        persist_directory: Optional[str] = None,\n        documents: Optional[List[Document]] = None,\n        chroma_server_cors_allow_origins: Optional[str] = None,\n        chroma_server_host: Optional[str] = None,\n        chroma_server_port: Optional[int] = None,\n        chroma_server_grpc_port: Optional[int] = None,\n    ) -> Union[VectorStore, BaseRetriever]:\n        \"\"\"\n        Builds the Vector Store or BaseRetriever object.\n\n        Args:\n        - collection_name (str): The name of the collection.\n        - persist_directory (Optional[str]): The directory to persist the Vector Store to.\n        - chroma_server_ssl_enabled (bool): Whether to enable SSL for the Chroma server.\n        - persist (bool): Whether to persist the Vector Store or not.\n        - embedding (Optional[Embeddings]): The embeddings to use for the Vector Store.\n        - documents (Optional[Document]): The documents to use for the Vector Store.\n        - chroma_server_cors_allow_origins (Optional[str]): The CORS allow origins for the Chroma server.\n        - chroma_server_host (Optional[str]): The host for the Chroma server.\n        - chroma_server_port (Optional[int]): The port for the Chroma server.\n        - chroma_server_grpc_port (Optional[int]): The gRPC port for the Chroma server.\n\n        Returns:\n        - Union[VectorStore, BaseRetriever]: The Vector Store or BaseRetriever object.\n        \"\"\"\n\n        # Chroma settings\n        chroma_settings = None\n\n        if chroma_server_host is not None:\n            chroma_settings = chromadb.config.Settings(\n                chroma_server_cors_allow_origins=chroma_server_cors_allow_origins or None,\n                chroma_server_host=chroma_server_host,\n                chroma_server_port=chroma_server_port or None,\n                chroma_server_grpc_port=chroma_server_grpc_port or None,\n                chroma_server_ssl_enabled=chroma_server_ssl_enabled,\n            )\n\n        # If documents, then we need to create a Chroma instance using .from_documents\n        if documents is not None and embedding is not None:\n            if len(documents) == 0:\n                raise ValueError(\"If documents are provided, there must be at least one document.\")\n            return Chroma.from_documents(\n                documents=documents,  # type: ignore\n                persist_directory=persist_directory if persist else None,\n                collection_name=collection_name,\n                embedding=embedding,\n                client_settings=chroma_settings,\n            )\n\n        return Chroma(persist_directory=persist_directory, client_settings=chroma_settings)\n",
                "fileTypes": [],
                "file_path": "",
                "password": false,
                "name": "code",
                "advanced": false,
                "dynamic": true,
                "info": "",
                "title_case": true
              },
              "collection_name": {
                "type": "str",
                "required": true,
                "placeholder": "",
                "list": false,
                "show": true,
                "multiline": false,
                "value": "axiestudio",
                "fileTypes": [],
                "file_path": "",
                "password": false,
                "name": "collection_name",
                "display_name": "Collection Name",
                "advanced": false,
                "dynamic": false,
                "info": "",
                "title_case": true
              },
              "persist": {
                "type": "bool",
                "required": true,
                "placeholder": "",
                "list": false,
                "show": true,
                "multiline": false,
                "value": true,
                "fileTypes": [],
                "file_path": "",
                "password": false,
                "name": "persist",
                "display_name": "Persist",
                "advanced": false,
                "dynamic": false,
                "info": "",
                "title_case": true
              },
              "persist_directory": {
                "type": "str",
                "required": false,
                "placeholder": "",
                "list": false,
                "show": true,
                "multiline": false,
                "fileTypes": [],
                "file_path": "",
                "password": false,
                "name": "persist_directory",
                "display_name": "Persist Directory",
                "advanced": false,
                "dynamic": false,
                "info": "",
                "title_case": true
              },
              "_type": "CustomComponent"
            },
            "description": "Implementation of Vector Store using Chroma",
            "base_classes": [
              "VectorStore",
              "BaseRetriever"
            ],
            "display_name": "Chroma",
            "documentation": "https://python.langchain.com/docs/integrations/vectorstores/chroma",
            "custom_fields": {
              "collection_name": null,
              "persist": null,
              "embedding": null,
              "chroma_server_ssl_enabled": null,
              "persist_directory": null,
              "documents": null,
              "chroma_server_cors_allow_origins": null,
              "chroma_server_host": null,
              "chroma_server_port": null,
              "chroma_server_grpc_port": null
            },
            "output_types": [
              "VectorStore",
              "BaseRetriever"
            ],
            "field_formatters": {},
            "beta": true
          },
          "id": "Chroma-cjSxZ"
        },
        "selected": false,
        "width": 384,
        "height": 641,
        "positionAbsolute": {
          "x": 1433.8816392870156,
          "y": -21.041493418633337
        },
        "dragging": false
      },
      {
        "id": "PyPDFLoader-sXK2e",
        "type": "genericNode",
        "position": {
          "x": -215.76791550854517,
          "y": 53.90956741130543
        },
        "data": {
          "type": "PyPDFLoader",
          "node": {
            "template": {
              "file_path": {
                "type": "file",
                "required": true,
                "placeholder": "",
                "list": false,
                "show": true,
                "multiline": false,
                "value": "",
                "fileTypes": [
                  ".pdf"
                ],
                "file_path": "/home/postera/.cache/axiestudio/9c04f4c9-711c-44d2-897d-f375be383853/db49fb6e8b42cf3da53e461b74d942567678874613768e4e9c40a4be1609f3a5.pdf",
                "password": false,
                "name": "file_path",
                "advanced": false,
                "dynamic": false,
                "info": "",
                "title_case": true
              },
              "metadata": {
                "type": "dict",
                "required": false,
                "placeholder": "",
                "list": false,
                "show": true,
                "multiline": false,
                "value": [
                  {
                    "": ""
                  }
                ],
                "fileTypes": [],
                "file_path": "",
                "password": false,
                "name": "metadata",
                "display_name": "Metadata",
                "advanced": false,
                "dynamic": false,
                "info": "",
                "title_case": true
              },
              "_type": "PyPDFLoader"
            },
            "description": "Load PDF using pypdf into list of documents.",
            "base_classes": [
              "Document"
            ],
            "display_name": "PyPDFLoader",
            "documentation": "https://python.langchain.com/docs/modules/data_connection/document_loaders/how_to/pdf",
            "custom_fields": {},
            "output_types": [
              "Document"
            ],
            "field_formatters": {},
            "beta": false
          },
          "id": "PyPDFLoader-sXK2e"
        },
        "selected": true,
        "width": 384,
        "height": 367,
        "positionAbsolute": {
          "x": -215.76791550854517,
          "y": 53.90956741130543
        },
        "dragging": false
      },
      {
        "id": "CharacterTextSplitter-1zQp1",
        "type": "genericNode",
        "position": {
          "x": 228.0306214017827,
          "y": 1.2670111489058797
        },
        "data": {
          "type": "CharacterTextSplitter",
          "node": {
            "template": {
              "documents": {
                "type": "Document",
                "required": true,
                "placeholder": "",
                "list": true,
                "show": true,
                "multiline": false,
                "value": "",
                "fileTypes": [],
                "file_path": "",
                "password": false,
                "name": "documents",
                "advanced": false,
                "dynamic": false,
                "info": "",
                "title_case": true
              },
              "chunk_overlap": {
                "type": "int",
                "required": true,
                "placeholder": "",
                "list": false,
                "show": true,
                "multiline": false,
                "value": 200,
                "fileTypes": [],
                "file_path": "",
                "password": false,
                "name": "chunk_overlap",
                "display_name": "Chunk Overlap",
                "advanced": false,
                "dynamic": false,
                "info": "",
                "title_case": true
              },
              "chunk_size": {
                "type": "int",
                "required": true,
                "placeholder": "",
                "list": false,
                "show": true,
                "multiline": false,
                "value": 1000,
                "fileTypes": [],
                "file_path": "",
                "password": false,
                "name": "chunk_size",
                "display_name": "Chunk Size",
                "advanced": false,
                "dynamic": false,
                "info": "",
                "title_case": true
              },
              "separator": {
                "type": "str",
                "required": true,
                "placeholder": "",
                "list": false,
                "show": true,
                "multiline": false,
                "value": "\\n",
                "fileTypes": [],
                "file_path": "",
                "password": false,
                "name": "separator",
                "display_name": "Separator",
                "advanced": false,
                "dynamic": false,
                "info": "",
                "title_case": true
              },
              "_type": "CharacterTextSplitter"
            },
            "description": "Splitting text that looks at characters.",
            "base_classes": [
              "Document"
            ],
            "display_name": "CharacterTextSplitter",
            "documentation": "https://python.langchain.com/docs/modules/data_connection/document_transformers/text_splitters/character_text_splitter",
            "custom_fields": {},
            "output_types": [
              "Document"
            ],
            "field_formatters": {},
            "beta": false
          },
          "id": "CharacterTextSplitter-1zQp1"
        },
        "selected": false,
        "width": 384,
        "height": 509,
        "positionAbsolute": {
          "x": 228.0306214017827,
          "y": 1.2670111489058797
        },
        "dragging": false
      },
      {
        "id": "RetrievalQA-jBnHY",
        "type": "genericNode",
        "position": {
          "x": 2062.514008638146,
          "y": -179.02762387798697
        },
        "data": {
          "type": "RetrievalQA",
          "node": {
            "template": {
              "combine_documents_chain": {
                "type": "BaseCombineDocumentsChain",
                "required": true,
                "placeholder": "",
                "list": false,
                "show": true,
                "multiline": false,
                "fileTypes": [],
                "file_path": "",
                "password": false,
                "name": "combine_documents_chain",
                "display_name": "Combine Documents Chain",
                "advanced": false,
                "dynamic": false,
                "info": "",
                "title_case": true
              },
              "memory": {
                "type": "BaseMemory",
                "required": false,
                "placeholder": "",
                "list": false,
                "show": true,
                "multiline": false,
                "fileTypes": [],
                "file_path": "",
                "password": false,
                "name": "memory",
                "display_name": "Memory",
                "advanced": false,
                "dynamic": false,
                "info": "",
                "title_case": true
              },
              "retriever": {
                "type": "BaseRetriever",
                "required": true,
                "placeholder": "",
                "list": false,
                "show": true,
                "multiline": false,
                "fileTypes": [],
                "file_path": "",
                "password": false,
                "name": "retriever",
                "display_name": "Retriever",
                "advanced": false,
                "dynamic": false,
                "info": "",
                "title_case": true
              },
              "code": {
                "type": "code",
                "required": true,
                "placeholder": "",
                "list": false,
                "show": true,
                "multiline": true,
                "value": "from typing import Callable, Optional, Union\n\nfrom langchain.chains.combine_documents.base import BaseCombineDocumentsChain\nfrom langchain.chains.retrieval_qa.base import BaseRetrievalQA, RetrievalQA\nfrom axiestudio import CustomComponent\nfrom axiestudio.field_typing import BaseMemory, BaseRetriever\n\n\nclass RetrievalQAComponent(CustomComponent):\n    display_name = \"RetrievalQA\"\n    description = \"Chain for question-answering against an index.\"\n\n    def build_config(self):\n        return {\n            \"combine_documents_chain\": {\"display_name\": \"Combine Documents Chain\"},\n            \"retriever\": {\"display_name\": \"Retriever\"},\n            \"memory\": {\"display_name\": \"Memory\", \"required\": False},\n            \"input_key\": {\"display_name\": \"Input Key\", \"advanced\": True},\n            \"output_key\": {\"display_name\": \"Output Key\", \"advanced\": True},\n            \"return_source_documents\": {\"display_name\": \"Return Source Documents\"},\n        }\n\n    def build(\n        self,\n        combine_documents_chain: BaseCombineDocumentsChain,\n        retriever: BaseRetriever,\n        memory: Optional[BaseMemory] = None,\n        input_key: str = \"query\",\n        output_key: str = \"result\",\n        return_source_documents: bool = True,\n    ) -> Union[BaseRetrievalQA, Callable]:\n        return RetrievalQA(\n            combine_documents_chain=combine_documents_chain,\n            retriever=retriever,\n            memory=memory,\n            input_key=input_key,\n            output_key=output_key,\n            return_source_documents=return_source_documents,\n        )\n",
                "fileTypes": [],
                "file_path": "",
                "password": false,
                "name": "code",
                "advanced": false,
                "dynamic": true,
                "info": "",
                "title_case": true
              },
              "input_key": {
                "type": "str",
                "required": true,
                "placeholder": "",
                "list": false,
                "show": true,
                "multiline": false,
                "value": "query",
                "fileTypes": [],
                "file_path": "",
                "password": false,
                "name": "input_key",
                "display_name": "Input Key",
                "advanced": true,
                "dynamic": false,
                "info": "",
                "title_case": true
              },
              "output_key": {
                "type": "str",
                "required": true,
                "placeholder": "",
                "list": false,
                "show": true,
                "multiline": false,
                "value": "result",
                "fileTypes": [],
                "file_path": "",
                "password": false,
                "name": "output_key",
                "display_name": "Output Key",
                "advanced": true,
                "dynamic": false,
                "info": "",
                "title_case": true
              },
              "return_source_documents": {
                "type": "bool",
                "required": true,
                "placeholder": "",
                "list": false,
                "show": true,
                "multiline": false,
                "value": true,
                "fileTypes": [],
                "file_path": "",
                "password": false,
                "name": "return_source_documents",
                "display_name": "Return Source Documents",
                "advanced": false,
                "dynamic": false,
                "info": "",
                "title_case": true
              },
              "_type": "CustomComponent"
            },
            "description": "Chain for question-answering against an index.",
            "base_classes": [
              "BaseRetrievalQA",
              "Chain",
              "Callable"
            ],
            "display_name": "RetrievalQA",
            "documentation": "",
            "custom_fields": {
              "combine_documents_chain": null,
              "retriever": null,
              "memory": null,
              "input_key": null,
              "output_key": null,
              "return_source_documents": null
            },
            "output_types": [
              "BaseRetrievalQA",
              "Callable"
            ],
            "field_formatters": {},
            "beta": true
          },
          "id": "RetrievalQA-jBnHY"
        },
        "selected": false,
        "width": 384,
        "height": 501,
        "positionAbsolute": {
          "x": 2062.514008638146,
          "y": -179.02762387798697
        },
        "dragging": false
      },
      {
        "id": "CombineDocsChain-1sV4K",
        "type": "genericNode",
        "position": {
          "x": 1403.7189112273475,
          "y": -470.74401760956636
        },
        "data": {
          "type": "CombineDocsChain",
          "node": {
            "template": {
              "llm": {
                "type": "BaseLanguageModel",
                "required": true,
                "placeholder": "",
                "list": false,
                "show": true,
                "multiline": false,
                "value": "",
                "fileTypes": [],
                "file_path": "",
                "password": false,
                "name": "llm",
                "display_name": "LLM",
                "advanced": false,
                "dynamic": false,
                "info": "",
                "title_case": true
              },
              "chain_type": {
                "type": "str",
                "required": true,
                "placeholder": "",
                "list": true,
                "show": true,
                "multiline": false,
                "value": "stuff",
                "fileTypes": [],
                "file_path": "",
                "password": false,
                "options": [
                  "stuff",
                  "map_reduce",
                  "map_rerank",
                  "refine"
                ],
                "name": "chain_type",
                "advanced": false,
                "dynamic": false,
                "info": "",
                "title_case": true
              },
              "_type": "load_qa_chain"
            },
            "description": "Load question answering chain.",
            "base_classes": [
              "BaseCombineDocumentsChain",
              "Callable"
            ],
            "display_name": "CombineDocsChain",
            "documentation": "",
            "custom_fields": {},
            "output_types": [],
            "field_formatters": {},
            "beta": false
          },
          "id": "CombineDocsChain-1sV4K"
        },
        "selected": false,
        "width": 384,
        "height": 333,
        "positionAbsolute": {
          "x": 1403.7189112273475,
          "y": -470.74401760956636
        },
        "dragging": false
      },
      {
        "id": "ChatOpenAI-WAAco",
        "type": "genericNode",
        "position": {
          "x": 797.0504557644349,
          "y": -657.3236831776978
        },
        "data": {
          "type": "ChatOpenAI",
          "node": {
            "template": {
              "OPENAI_API_KEY": {
                "type": "str",
                "required": false,
                "placeholder": "",
                "list": false,
                "show": true,
                "multiline": false,
                "fileTypes": [],
                "file_path": "",
                "password": true,
                "name": "OPENAI_API_KEY",
                "display_name": "OpenAI API Key",
                "advanced": false,
                "dynamic": false,
                "info": "",
                "title_case": true,
                "value": ""
              },
              "code": {
                "type": "code",
                "required": true,
                "placeholder": "",
                "list": false,
                "show": true,
                "multiline": true,
                "value": "#chatopenai code in axiestudio\r\n\r\nfrom typing import Optional, Union\r\n\r\nfrom langchain.llms import BaseLLM\r\nfrom langchain_community.chat_models.openai import ChatOpenAI\r\n\r\nfrom axiestudio import CustomComponent\r\nfrom axiestudio.field_typing import BaseLanguageModel, NestedDict\r\n\r\n\r\nclass ChatOpenAIComponent(CustomComponent):\r\n    display_name = \"ChatOpenAI\"\r\n    description = \"`OpenAI` Chat large language models API.\"\r\n\r\n    def build_config(self):\r\n        return {\r\n            \"max_tokens\": {\r\n                \"display_name\": \"Max Tokens\",\r\n                \"field_type\": \"int\",\r\n                \"advanced\": False,\r\n                \"required\": False,\r\n            },\r\n            \"model_kwargs\": {\r\n                \"display_name\": \"Model Kwargs\",\r\n                \"field_type\": \"NestedDict\",\r\n                \"advanced\": True,\r\n                \"required\": False,\r\n            },\r\n            \"model_name\": {\r\n                \"display_name\": \"Model Name\",\r\n                \"field_type\": \"str\",\r\n                \"advanced\": False,\r\n                \"required\": False,\r\n                \"options\": [\r\n                    \"gpt-4-turbo-preview\",\r\n                    \"gpt-4-0125-preview\",\r\n                    \"gpt-4-1106-preview\",\r\n                    \"gpt-4-vision-preview\",\r\n                    \"gpt-3.5-turbo-0125\",\r\n                    \"gpt-3.5-turbo-1106\",\r\n                ],\r\n            },\r\n            \"openai_api_base\": {\r\n                \"display_name\": \"OpenAI API Base\",\r\n                \"field_type\": \"str\",\r\n                \"advanced\": False,\r\n                \"required\": False,\r\n                \"info\": (\r\n                    \"The base URL of the OpenAI API. Defaults to https://api.openai.com/v1.\\n\\n\"\r\n                    \"You can change this to use other APIs like JinaChat, LocalAI and Prem.\"\r\n                ),\r\n            },\r\n            \"OPENAI_API_KEY\": {\r\n                \"display_name\": \"OpenAI API Key\",\r\n                \"field_type\": \"str\",\r\n                \"advanced\": False,\r\n                \"required\": False,\r\n                \"password\": True,\r\n            },\r\n            \"temperature\": {\r\n                \"display_name\": \"Temperature\",\r\n                \"field_type\": \"float\",\r\n                \"advanced\": False,\r\n                \"required\": False,\r\n                \"value\": 0.7,\r\n            },\r\n        }\r\n\r\n    def build(\r\n        self,\r\n        max_tokens: Optional[int] = 256,\r\n        model_kwargs: NestedDict = {},\r\n        model_name: str = \"gpt-4-1106-preview\",\r\n        openai_api_base: Optional[str] = None,\r\n        OPENAI_API_KEY: Optional[str] = None,\r\n        temperature: float = 0.7,\r\n    ) -> Union[BaseLanguageModel, BaseLLM]:\r\n        if not openai_api_base:\r\n            openai_api_base = \"https://api.openai.com/v1\"\r\n        return ChatOpenAI(\r\n            max_tokens=max_tokens,\r\n            model_kwargs=model_kwargs,\r\n            model=model_name,\r\n            base_url=openai_api_base,\r\n            api_key=OPENAI_API_KEY,\r\n            temperature=temperature,\r\n        )\r\n",
                "fileTypes": [],
                "file_path": "",
                "password": false,
                "name": "code",
                "advanced": false,
                "dynamic": true,
                "info": "",
                "title_case": true
              },
              "max_tokens": {
                "type": "int",
                "required": false,
                "placeholder": "",
                "list": false,
                "show": true,
                "multiline": false,
                "value": 256,
                "fileTypes": [],
                "file_path": "",
                "password": false,
                "name": "max_tokens",
                "display_name": "Max Tokens",
                "advanced": false,
                "dynamic": false,
                "info": "",
                "title_case": true
              },
              "model_kwargs": {
                "type": "NestedDict",
                "required": false,
                "placeholder": "",
                "list": false,
                "show": true,
                "multiline": false,
                "value": {},
                "fileTypes": [],
                "file_path": "",
                "password": false,
                "name": "model_kwargs",
                "display_name": "Model Kwargs",
                "advanced": true,
                "dynamic": false,
                "info": "",
                "title_case": true
              },
              "model_name": {
                "type": "str",
                "required": false,
                "placeholder": "",
                "list": true,
                "show": true,
                "multiline": false,
                "value": "gpt-4-turbo-preview",
                "fileTypes": [],
                "file_path": "",
                "password": false,
                "options": [
                  "gpt-4-turbo-preview",
                  "gpt-4-0125-preview",
                  "gpt-4-1106-preview",
                  "gpt-4-vision-preview",
                  "gpt-3.5-turbo-0125",
                  "gpt-3.5-turbo-1106"
                ],
                "name": "model_name",
                "display_name": "Model Name",
                "advanced": false,
                "dynamic": false,
                "info": "",
                "title_case": true
              },
              "openai_api_base": {
                "type": "str",
                "required": false,
                "placeholder": "",
                "list": false,
                "show": true,
                "multiline": false,
                "fileTypes": [],
                "file_path": "",
                "password": false,
                "name": "openai_api_base",
                "display_name": "OpenAI API Base",
                "advanced": false,
                "dynamic": false,
                "info": "The base URL of the OpenAI API. Defaults to https://api.openai.com/v1.\n\nYou can change this to use other APIs like JinaChat, LocalAI and Prem.",
                "title_case": true
              },
              "temperature": {
                "type": "float",
                "required": false,
                "placeholder": "",
                "list": false,
                "show": true,
                "multiline": false,
                "value": 0.7,
                "fileTypes": [],
                "file_path": "",
                "password": false,
                "name": "temperature",
                "display_name": "Temperature",
                "advanced": false,
                "dynamic": false,
                "info": "",
                "rangeSpec": {
                  "min": -1,
                  "max": 1,
                  "step": 0.1
                },
                "title_case": true
              },
              "_type": "CustomComponent"
            },
            "description": "`OpenAI` Chat large language models API.",
            "base_classes": [
              "BaseLanguageModel",
              "BaseLanguageModel",
              "BaseLLM"
            ],
            "display_name": "ChatOpenAI",
            "documentation": "",
            "custom_fields": {
              "max_tokens": null,
              "model_kwargs": null,
              "model_name": null,
              "openai_api_base": null,
              "OPENAI_API_KEY": null,
              "temperature": null
            },
            "output_types": [
              "BaseLanguageModel",
              "BaseLLM"
            ],
            "field_formatters": {},
            "beta": true
          },
          "id": "ChatOpenAI-WAAco",
          "description": "`OpenAI` Chat large language models API.",
          "display_name": "ChatOpenAI"
        },
        "selected": false,
        "width": 384,
        "height": 731,
        "positionAbsolute": {
          "x": 797.0504557644349,
          "y": -657.3236831776978
        },
        "dragging": false
      },
      {
        "id": "CohereEmbeddings-Q8XcP",
        "type": "genericNode",
        "position": {
          "x": 455.2250211270756,
          "y": 510.0042403219521
        },
        "data": {
          "type": "CohereEmbeddings",
          "node": {
            "template": {
              "code": {
                "type": "code",
                "required": true,
                "placeholder": "",
                "list": false,
                "show": true,
                "multiline": true,
                "value": "from typing import Optional\r\n\r\nfrom langchain_community.embeddings.cohere import CohereEmbeddings\r\nfrom axiestudio import CustomComponent\r\n\r\nclass CohereEmbeddingsComponent(CustomComponent):\r\n    display_name = \"CohereEmbeddings\"\r\n    description = \"Cohere embedding models.\"\r\n\r\n    def build(\r\n        self,\r\n        cohere_api_key: str,\r\n        request_timeout: Optional[float] = None,\r\n        max_retries: int = 3,\r\n        model: str = \"embed-english-v2.0\",\r\n        truncate: Optional[str] = None,\r\n        user_agent: str = \"langchain\",\r\n    ) -> CohereEmbeddings:\r\n        if not cohere_api_key:\r\n            raise ValueError(\"cohere_api_key is required\")\r\n\r\n        return CohereEmbeddings(\r\n            max_retries=max_retries,\r\n            user_agent=user_agent,\r\n            request_timeout=request_timeout,\r\n            cohere_api_key=cohere_api_key,\r\n            model=model,\r\n            truncate=truncate,\r\n        )",
                "fileTypes": [],
                "file_path": "",
                "password": false,
                "name": "code",
                "advanced": false,
                "dynamic": true,
                "info": "",
                "title_case": true
              },
              "cohere_api_key": {
                "type": "str",
                "required": true,
                "placeholder": "",
                "list": false,
                "show": true,
                "multiline": false,
                "fileTypes": [],
                "file_path": "",
                "password": false,
                "name": "cohere_api_key",
                "advanced": false,
                "dynamic": false,
                "info": "",
                "title_case": true,
                "value": "lmtgFbqO0uXLNYgsaRc3waE06JrxR3vEz2tCakt1"
              },
              "max_retries": {
                "type": "int",
                "required": true,
                "placeholder": "",
                "list": false,
                "show": true,
                "multiline": false,
                "value": 3,
                "fileTypes": [],
                "file_path": "",
                "password": false,
                "name": "max_retries",
                "advanced": false,
                "dynamic": false,
                "info": "",
                "title_case": true
              },
              "model": {
                "type": "str",
                "required": true,
                "placeholder": "",
                "list": false,
                "show": true,
                "multiline": false,
                "value": "embed-english-v2.0",
                "fileTypes": [],
                "file_path": "",
                "password": false,
                "name": "model",
                "advanced": false,
                "dynamic": false,
                "info": "",
                "title_case": true
              },
              "request_timeout": {
                "type": "float",
                "required": false,
                "placeholder": "",
                "list": false,
                "show": true,
                "multiline": false,
                "fileTypes": [],
                "file_path": "",
                "password": false,
                "name": "request_timeout",
                "advanced": false,
                "dynamic": false,
                "info": "",
                "rangeSpec": {
                  "min": -1,
                  "max": 1,
                  "step": 0.1
                },
                "title_case": true
              },
              "truncate": {
                "type": "str",
                "required": false,
                "placeholder": "",
                "list": false,
                "show": true,
                "multiline": false,
                "fileTypes": [],
                "file_path": "",
                "password": false,
                "name": "truncate",
                "advanced": false,
                "dynamic": false,
                "info": "",
                "title_case": true
              },
              "user_agent": {
                "type": "str",
                "required": true,
                "placeholder": "",
                "list": false,
                "show": true,
                "multiline": false,
                "value": "langchain",
                "fileTypes": [],
                "file_path": "",
                "password": false,
                "name": "user_agent",
                "advanced": false,
                "dynamic": false,
                "info": "",
                "title_case": true
              },
              "_type": "CustomComponent"
            },
            "description": "Cohere embedding models.",
            "base_classes": [
              "CohereEmbeddings",
              "Embeddings"
            ],
            "display_name": "CohereEmbeddings",
            "documentation": "",
            "custom_fields": {
              "cohere_api_key": null,
              "request_timeout": null,
              "max_retries": null,
              "model": null,
              "truncate": null,
              "user_agent": null
            },
            "output_types": [
              "CohereEmbeddings"
            ],
            "field_formatters": {},
            "beta": true
          },
          "id": "CohereEmbeddings-Q8XcP",
          "description": "Cohere embedding models.",
          "display_name": "CohereEmbeddings"
        },
        "selected": false,
        "width": 384,
        "height": 829,
        "positionAbsolute": {
          "x": 455.2250211270756,
          "y": 510.0042403219521
        },
        "dragging": false
      }
    ],
    "edges": [
      {
        "source": "CharacterTextSplitter-1zQp1",
        "sourceHandle": "{œbaseClassesœ:[œDocumentœ],œdataTypeœ:œCharacterTextSplitterœ,œidœ:œCharacterTextSplitter-1zQp1œ}",
        "target": "Chroma-cjSxZ",
        "targetHandle": "{œfieldNameœ:œdocumentsœ,œidœ:œChroma-cjSxZœ,œinputTypesœ:null,œtypeœ:œDocumentœ}",
        "data": {
          "targetHandle": {
            "fieldName": "documents",
            "id": "Chroma-cjSxZ",
            "inputTypes": null,
            "type": "Document"
          },
          "sourceHandle": {
            "baseClasses": [
              "Document"
            ],
            "dataType": "CharacterTextSplitter",
            "id": "CharacterTextSplitter-1zQp1"
          }
        },
        "style": {
          "stroke": "#555"
        },
        "className": "stroke-gray-900  stroke-connection",
        "animated": false,
        "id": "reactflow__edge-CharacterTextSplitter-1zQp1{œbaseClassesœ:[œDocumentœ],œdataTypeœ:œCharacterTextSplitterœ,œidœ:œCharacterTextSplitter-1zQp1œ}-Chroma-cjSxZ{œfieldNameœ:œdocumentsœ,œidœ:œChroma-cjSxZœ,œinputTypesœ:null,œtypeœ:œDocumentœ}"
      },
      {
        "source": "PyPDFLoader-sXK2e",
        "sourceHandle": "{œbaseClassesœ:[œDocumentœ],œdataTypeœ:œPyPDFLoaderœ,œidœ:œPyPDFLoader-sXK2eœ}",
        "target": "CharacterTextSplitter-1zQp1",
        "targetHandle": "{œfieldNameœ:œdocumentsœ,œidœ:œCharacterTextSplitter-1zQp1œ,œinputTypesœ:null,œtypeœ:œDocumentœ}",
        "data": {
          "targetHandle": {
            "fieldName": "documents",
            "id": "CharacterTextSplitter-1zQp1",
            "inputTypes": null,
            "type": "Document"
          },
          "sourceHandle": {
            "baseClasses": [
              "Document"
            ],
            "dataType": "PyPDFLoader",
            "id": "PyPDFLoader-sXK2e"
          }
        },
        "style": {
          "stroke": "#555"
        },
        "className": "stroke-gray-900  stroke-connection",
        "animated": false,
        "id": "reactflow__edge-PyPDFLoader-sXK2e{œbaseClassesœ:[œDocumentœ],œdataTypeœ:œPyPDFLoaderœ,œidœ:œPyPDFLoader-sXK2eœ}-CharacterTextSplitter-1zQp1{œfieldNameœ:œdocumentsœ,œidœ:œCharacterTextSplitter-1zQp1œ,œinputTypesœ:null,œtypeœ:œDocumentœ}"
      },
      {
        "source": "Chroma-cjSxZ",
        "sourceHandle": "{œbaseClassesœ:[œVectorStoreœ,œBaseRetrieverœ],œdataTypeœ:œChromaœ,œidœ:œChroma-cjSxZœ}",
        "target": "RetrievalQA-jBnHY",
        "targetHandle": "{œfieldNameœ:œretrieverœ,œidœ:œRetrievalQA-jBnHYœ,œinputTypesœ:null,œtypeœ:œBaseRetrieverœ}",
        "data": {
          "targetHandle": {
            "fieldName": "retriever",
            "id": "RetrievalQA-jBnHY",
            "inputTypes": null,
            "type": "BaseRetriever"
          },
          "sourceHandle": {
            "baseClasses": [
              "VectorStore",
              "BaseRetriever"
            ],
            "dataType": "Chroma",
            "id": "Chroma-cjSxZ"
          }
        },
        "style": {
          "stroke": "#555"
        },
        "className": "stroke-gray-900  stroke-connection",
        "animated": false,
        "id": "reactflow__edge-Chroma-cjSxZ{œbaseClassesœ:[œVectorStoreœ,œBaseRetrieverœ],œdataTypeœ:œChromaœ,œidœ:œChroma-cjSxZœ}-RetrievalQA-jBnHY{œfieldNameœ:œretrieverœ,œidœ:œRetrievalQA-jBnHYœ,œinputTypesœ:null,œtypeœ:œBaseRetrieverœ}",
        "selected": false
      },
      {
        "source": "CombineDocsChain-1sV4K",
        "sourceHandle": "{œbaseClassesœ:[œBaseCombineDocumentsChainœ,œCallableœ],œdataTypeœ:œCombineDocsChainœ,œidœ:œCombineDocsChain-1sV4Kœ}",
        "target": "RetrievalQA-jBnHY",
        "targetHandle": "{œfieldNameœ:œcombine_documents_chainœ,œidœ:œRetrievalQA-jBnHYœ,œinputTypesœ:null,œtypeœ:œBaseCombineDocumentsChainœ}",
        "data": {
          "targetHandle": {
            "fieldName": "combine_documents_chain",
            "id": "RetrievalQA-jBnHY",
            "inputTypes": null,
            "type": "BaseCombineDocumentsChain"
          },
          "sourceHandle": {
            "baseClasses": [
              "BaseCombineDocumentsChain",
              "Callable"
            ],
            "dataType": "CombineDocsChain",
            "id": "CombineDocsChain-1sV4K"
          }
        },
        "style": {
          "stroke": "#555"
        },
        "className": "stroke-gray-900  stroke-connection",
        "animated": false,
        "id": "reactflow__edge-CombineDocsChain-1sV4K{œbaseClassesœ:[œBaseCombineDocumentsChainœ,œCallableœ],œdataTypeœ:œCombineDocsChainœ,œidœ:œCombineDocsChain-1sV4Kœ}-RetrievalQA-jBnHY{œfieldNameœ:œcombine_documents_chainœ,œidœ:œRetrievalQA-jBnHYœ,œinputTypesœ:null,œtypeœ:œBaseCombineDocumentsChainœ}"
      },
      {
        "source": "ChatOpenAI-WAAco",
        "sourceHandle": "{œbaseClassesœ:[œBaseLanguageModelœ,œBaseLanguageModelœ,œBaseLLMœ],œdataTypeœ:œChatOpenAIœ,œidœ:œChatOpenAI-WAAcoœ}",
        "target": "CombineDocsChain-1sV4K",
        "targetHandle": "{œfieldNameœ:œllmœ,œidœ:œCombineDocsChain-1sV4Kœ,œinputTypesœ:null,œtypeœ:œBaseLanguageModelœ}",
        "data": {
          "targetHandle": {
            "fieldName": "llm",
            "id": "CombineDocsChain-1sV4K",
            "inputTypes": null,
            "type": "BaseLanguageModel"
          },
          "sourceHandle": {
            "baseClasses": [
              "BaseLanguageModel",
              "BaseLanguageModel",
              "BaseLLM"
            ],
            "dataType": "ChatOpenAI",
            "id": "ChatOpenAI-WAAco"
          }
        },
        "style": {
          "stroke": "#555"
        },
        "className": "stroke-gray-900  stroke-connection",
        "animated": false,
        "id": "reactflow__edge-ChatOpenAI-WAAco{œbaseClassesœ:[œBaseLanguageModelœ,œBaseLanguageModelœ,œBaseLLMœ],œdataTypeœ:œChatOpenAIœ,œidœ:œChatOpenAI-WAAcoœ}-CombineDocsChain-1sV4K{œfieldNameœ:œllmœ,œidœ:œCombineDocsChain-1sV4Kœ,œinputTypesœ:null,œtypeœ:œBaseLanguageModelœ}"
      },
      {
        "source": "CohereEmbeddings-Q8XcP",
        "sourceHandle": "{œbaseClassesœ:[œCohereEmbeddingsœ,œEmbeddingsœ],œdataTypeœ:œCohereEmbeddingsœ,œidœ:œCohereEmbeddings-Q8XcPœ}",
        "target": "Chroma-cjSxZ",
        "targetHandle": "{œfieldNameœ:œembeddingœ,œidœ:œChroma-cjSxZœ,œinputTypesœ:null,œtypeœ:œEmbeddingsœ}",
        "data": {
          "targetHandle": {
            "fieldName": "embedding",
            "id": "Chroma-cjSxZ",
            "inputTypes": null,
            "type": "Embeddings"
          },
          "sourceHandle": {
            "baseClasses": [
              "CohereEmbeddings",
              "Embeddings"
            ],
            "dataType": "CohereEmbeddings",
            "id": "CohereEmbeddings-Q8XcP"
          }
        },
        "style": {
          "stroke": "#555"
        },
        "className": "stroke-gray-900  stroke-connection",
        "animated": false,
        "id": "reactflow__edge-CohereEmbeddings-Q8XcP{œbaseClassesœ:[œCohereEmbeddingsœ,œEmbeddingsœ],œdataTypeœ:œCohereEmbeddingsœ,œidœ:œCohereEmbeddings-Q8XcPœ}-Chroma-cjSxZ{œfieldNameœ:œembeddingœ,œidœ:œChroma-cjSxZœ,œinputTypesœ:null,œtypeœ:œEmbeddingsœ}"
      }
    ],
    "viewport": {
      "x": 146.22280278780693,
      "y": 147.25233917529113,
      "zoom": 0.6169005530884999
    }
  },
  "metadata": {
    "Chroma": {
      "count": 1
    },
    "PyPDFLoader": {
      "count": 1
    },
    "CharacterTextSplitter": {
      "count": 1
    },
    "RetrievalQA": {
      "count": 1
    },
    "CombineDocsChain": {
      "count": 1
    },
    "ChatOpenAI": {
      "count": 1
    },
    "CohereEmbeddings": {
      "count": 1
    },
    "total": 7
  },
  "original": {
    "id": "3cbb8d30-5391-4821-8a56-a223063e3cde",
    "name": "PDF QA",
    "description": "Unleashing Business Potential through Language Engineering.",
    "is_component": false,
    "liked_by_count": "3",
    "downloads_count": "54",
    "metadata": {
      "Chroma": {
        "count": 1
      },
      "PyPDFLoader": {
        "count": 1
      },
      "CharacterTextSplitter": {
        "count": 1
      },
      "RetrievalQA": {
        "count": 1
      },
      "CombineDocsChain": {
        "count": 1
      },
      "ChatOpenAI": {
        "count": 1
      },
      "CohereEmbeddings": {
        "count": 1
      },
      "total": 7
    },
    "last_tested_version": "0.6.19",
    "private": false,
    "data": {
      "nodes": [
        {
          "id": "Chroma-cjSxZ",
          "type": "genericNode",
          "position": {
            "x": 1433.8816392870156,
            "y": -21.041493418633337
          },
          "data": {
            "type": "Chroma",
            "node": {
              "template": {
                "documents": {
                  "type": "Document",
                  "required": false,
                  "placeholder": "",
                  "list": true,
                  "show": true,
                  "multiline": false,
                  "fileTypes": [],
                  "file_path": "",
                  "password": false,
                  "name": "documents",
                  "display_name": "Documents",
                  "advanced": false,
                  "dynamic": false,
                  "info": "",
                  "title_case": true
                },
                "embedding": {
                  "type": "Embeddings",
                  "required": true,
                  "placeholder": "",
                  "list": false,
                  "show": true,
                  "multiline": false,
                  "fileTypes": [],
                  "file_path": "",
                  "password": false,
                  "name": "embedding",
                  "display_name": "Embedding",
                  "advanced": false,
                  "dynamic": false,
                  "info": "",
                  "title_case": true
                },
                "chroma_server_cors_allow_origins": {
                  "type": "str",
                  "required": false,
                  "placeholder": "",
                  "list": false,
                  "show": true,
                  "multiline": false,
                  "fileTypes": [],
                  "file_path": "",
                  "password": false,
                  "name": "chroma_server_cors_allow_origins",
                  "display_name": "Server CORS Allow Origins",
                  "advanced": true,
                  "dynamic": false,
                  "info": "",
                  "title_case": true
                },
                "chroma_server_grpc_port": {
                  "type": "int",
                  "required": false,
                  "placeholder": "",
                  "list": false,
                  "show": true,
                  "multiline": false,
                  "fileTypes": [],
                  "file_path": "",
                  "password": false,
                  "name": "chroma_server_grpc_port",
                  "display_name": "Server gRPC Port",
                  "advanced": true,
                  "dynamic": false,
                  "info": "",
                  "title_case": true
                },
                "chroma_server_host": {
                  "type": "str",
                  "required": false,
                  "placeholder": "",
                  "list": false,
                  "show": true,
                  "multiline": false,
                  "fileTypes": [],
                  "file_path": "",
                  "password": false,
                  "name": "chroma_server_host",
                  "display_name": "Server Host",
                  "advanced": true,
                  "dynamic": false,
                  "info": "",
                  "title_case": true,
                  "value": ""
                },
                "chroma_server_port": {
                  "type": "int",
                  "required": false,
                  "placeholder": "",
                  "list": false,
                  "show": true,
                  "multiline": false,
                  "fileTypes": [],
                  "file_path": "",
                  "password": false,
                  "name": "chroma_server_port",
                  "display_name": "Server Port",
                  "advanced": true,
                  "dynamic": false,
                  "info": "",
                  "title_case": true,
                  "value": ""
                },
                "chroma_server_ssl_enabled": {
                  "type": "bool",
                  "required": true,
                  "placeholder": "",
                  "list": false,
                  "show": true,
                  "multiline": false,
                  "value": false,
                  "fileTypes": [],
                  "file_path": "",
                  "password": false,
                  "name": "chroma_server_ssl_enabled",
                  "display_name": "Server SSL Enabled",
                  "advanced": true,
                  "dynamic": false,
                  "info": "",
                  "title_case": true
                },
                "code": {
                  "type": "code",
                  "required": true,
                  "placeholder": "",
                  "list": false,
                  "show": true,
                  "multiline": true,
                  "value": "from typing import List, Optional, Union\n\nimport chromadb  # type: ignore\nfrom langchain.embeddings.base import Embeddings\nfrom langchain.schema import BaseRetriever, Document\nfrom langchain_community.vectorstores import VectorStore\nfrom langchain_community.vectorstores.chroma import Chroma\nfrom axiestudio import CustomComponent\n\n\nclass ChromaComponent(CustomComponent):\n    \"\"\"\n    A custom component for implementing a Vector Store using Chroma.\n    \"\"\"\n\n    display_name: str = \"Chroma\"\n    description: str = \"Implementation of Vector Store using Chroma\"\n    documentation = \"https://python.langchain.com/docs/integrations/vectorstores/chroma\"\n    beta: bool = True\n\n    def build_config(self):\n        \"\"\"\n        Builds the configuration for the component.\n\n        Returns:\n        - dict: A dictionary containing the configuration options for the component.\n        \"\"\"\n        return {\n            \"collection_name\": {\"display_name\": \"Collection Name\", \"value\": \"axiestudio\"},\n            \"persist\": {\"display_name\": \"Persist\"},\n            \"persist_directory\": {\"display_name\": \"Persist Directory\"},\n            \"code\": {\"advanced\": True, \"display_name\": \"Code\"},\n            \"documents\": {\"display_name\": \"Documents\", \"is_list\": True},\n            \"embedding\": {\"display_name\": \"Embedding\"},\n            \"chroma_server_cors_allow_origins\": {\n                \"display_name\": \"Server CORS Allow Origins\",\n                \"advanced\": True,\n            },\n            \"chroma_server_host\": {\"display_name\": \"Server Host\", \"advanced\": True},\n            \"chroma_server_port\": {\"display_name\": \"Server Port\", \"advanced\": True},\n            \"chroma_server_grpc_port\": {\n                \"display_name\": \"Server gRPC Port\",\n                \"advanced\": True,\n            },\n            \"chroma_server_ssl_enabled\": {\n                \"display_name\": \"Server SSL Enabled\",\n                \"advanced\": True,\n            },\n        }\n\n    def build(\n        self,\n        collection_name: str,\n        persist: bool,\n        embedding: Embeddings,\n        chroma_server_ssl_enabled: bool,\n        persist_directory: Optional[str] = None,\n        documents: Optional[List[Document]] = None,\n        chroma_server_cors_allow_origins: Optional[str] = None,\n        chroma_server_host: Optional[str] = None,\n        chroma_server_port: Optional[int] = None,\n        chroma_server_grpc_port: Optional[int] = None,\n    ) -> Union[VectorStore, BaseRetriever]:\n        \"\"\"\n        Builds the Vector Store or BaseRetriever object.\n\n        Args:\n        - collection_name (str): The name of the collection.\n        - persist_directory (Optional[str]): The directory to persist the Vector Store to.\n        - chroma_server_ssl_enabled (bool): Whether to enable SSL for the Chroma server.\n        - persist (bool): Whether to persist the Vector Store or not.\n        - embedding (Optional[Embeddings]): The embeddings to use for the Vector Store.\n        - documents (Optional[Document]): The documents to use for the Vector Store.\n        - chroma_server_cors_allow_origins (Optional[str]): The CORS allow origins for the Chroma server.\n        - chroma_server_host (Optional[str]): The host for the Chroma server.\n        - chroma_server_port (Optional[int]): The port for the Chroma server.\n        - chroma_server_grpc_port (Optional[int]): The gRPC port for the Chroma server.\n\n        Returns:\n        - Union[VectorStore, BaseRetriever]: The Vector Store or BaseRetriever object.\n        \"\"\"\n\n        # Chroma settings\n        chroma_settings = None\n\n        if chroma_server_host is not None:\n            chroma_settings = chromadb.config.Settings(\n                chroma_server_cors_allow_origins=chroma_server_cors_allow_origins or None,\n                chroma_server_host=chroma_server_host,\n                chroma_server_port=chroma_server_port or None,\n                chroma_server_grpc_port=chroma_server_grpc_port or None,\n                chroma_server_ssl_enabled=chroma_server_ssl_enabled,\n            )\n\n        # If documents, then we need to create a Chroma instance using .from_documents\n        if documents is not None and embedding is not None:\n            if len(documents) == 0:\n                raise ValueError(\"If documents are provided, there must be at least one document.\")\n            return Chroma.from_documents(\n                documents=documents,  # type: ignore\n                persist_directory=persist_directory if persist else None,\n                collection_name=collection_name,\n                embedding=embedding,\n                client_settings=chroma_settings,\n            )\n\n        return Chroma(persist_directory=persist_directory, client_settings=chroma_settings)\n",
                  "fileTypes": [],
                  "file_path": "",
                  "password": false,
                  "name": "code",
                  "advanced": false,
                  "dynamic": true,
                  "info": "",
                  "title_case": true
                },
                "collection_name": {
                  "type": "str",
                  "required": true,
                  "placeholder": "",
                  "list": false,
                  "show": true,
                  "multiline": false,
                  "value": "axiestudio",
                  "fileTypes": [],
                  "file_path": "",
                  "password": false,
                  "name": "collection_name",
                  "display_name": "Collection Name",
                  "advanced": false,
                  "dynamic": false,
                  "info": "",
                  "title_case": true
                },
                "persist": {
                  "type": "bool",
                  "required": true,
                  "placeholder": "",
                  "list": false,
                  "show": true,
                  "multiline": false,
                  "value": true,
                  "fileTypes": [],
                  "file_path": "",
                  "password": false,
                  "name": "persist",
                  "display_name": "Persist",
                  "advanced": false,
                  "dynamic": false,
                  "info": "",
                  "title_case": true
                },
                "persist_directory": {
                  "type": "str",
                  "required": false,
                  "placeholder": "",
                  "list": false,
                  "show": true,
                  "multiline": false,
                  "fileTypes": [],
                  "file_path": "",
                  "password": false,
                  "name": "persist_directory",
                  "display_name": "Persist Directory",
                  "advanced": false,
                  "dynamic": false,
                  "info": "",
                  "title_case": true
                },
                "_type": "CustomComponent"
              },
              "description": "Implementation of Vector Store using Chroma",
              "base_classes": [
                "VectorStore",
                "BaseRetriever"
              ],
              "display_name": "Chroma",
              "documentation": "https://python.langchain.com/docs/integrations/vectorstores/chroma",
              "custom_fields": {
                "collection_name": null,
                "persist": null,
                "embedding": null,
                "chroma_server_ssl_enabled": null,
                "persist_directory": null,
                "documents": null,
                "chroma_server_cors_allow_origins": null,
                "chroma_server_host": null,
                "chroma_server_port": null,
                "chroma_server_grpc_port": null
              },
              "output_types": [
                "VectorStore",
                "BaseRetriever"
              ],
              "field_formatters": {},
              "beta": true
            },
            "id": "Chroma-cjSxZ"
          },
          "selected": false,
          "width": 384,
          "height": 641,
          "positionAbsolute": {
            "x": 1433.8816392870156,
            "y": -21.041493418633337
          },
          "dragging": false
        },
        {
          "id": "PyPDFLoader-sXK2e",
          "type": "genericNode",
          "position": {
            "x": -215.76791550854517,
            "y": 53.90956741130543
          },
          "data": {
            "type": "PyPDFLoader",
            "node": {
              "template": {
                "file_path": {
                  "type": "file",
                  "required": true,
                  "placeholder": "",
                  "list": false,
                  "show": true,
                  "multiline": false,
                  "value": "",
                  "fileTypes": [
                    ".pdf"
                  ],
                  "file_path": "/home/postera/.cache/axiestudio/9c04f4c9-711c-44d2-897d-f375be383853/db49fb6e8b42cf3da53e461b74d942567678874613768e4e9c40a4be1609f3a5.pdf",
                  "password": false,
                  "name": "file_path",
                  "advanced": false,
                  "dynamic": false,
                  "info": "",
                  "title_case": true
                },
                "metadata": {
                  "type": "dict",
                  "required": false,
                  "placeholder": "",
                  "list": false,
                  "show": true,
                  "multiline": false,
                  "value": [
                    {
                      "": ""
                    }
                  ],
                  "fileTypes": [],
                  "file_path": "",
                  "password": false,
                  "name": "metadata",
                  "display_name": "Metadata",
                  "advanced": false,
                  "dynamic": false,
                  "info": "",
                  "title_case": true
                },
                "_type": "PyPDFLoader"
              },
              "description": "Load PDF using pypdf into list of documents.",
              "base_classes": [
                "Document"
              ],
              "display_name": "PyPDFLoader",
              "documentation": "https://python.langchain.com/docs/modules/data_connection/document_loaders/how_to/pdf",
              "custom_fields": {},
              "output_types": [
                "Document"
              ],
              "field_formatters": {},
              "beta": false
            },
            "id": "PyPDFLoader-sXK2e"
          },
          "selected": true,
          "width": 384,
          "height": 367,
          "positionAbsolute": {
            "x": -215.76791550854517,
            "y": 53.90956741130543
          },
          "dragging": false
        },
        {
          "id": "CharacterTextSplitter-1zQp1",
          "type": "genericNode",
          "position": {
            "x": 228.0306214017827,
            "y": 1.2670111489058797
          },
          "data": {
            "type": "CharacterTextSplitter",
            "node": {
              "template": {
                "documents": {
                  "type": "Document",
                  "required": true,
                  "placeholder": "",
                  "list": true,
                  "show": true,
                  "multiline": false,
                  "value": "",
                  "fileTypes": [],
                  "file_path": "",
                  "password": false,
                  "name": "documents",
                  "advanced": false,
                  "dynamic": false,
                  "info": "",
                  "title_case": true
                },
                "chunk_overlap": {
                  "type": "int",
                  "required": true,
                  "placeholder": "",
                  "list": false,
                  "show": true,
                  "multiline": false,
                  "value": 200,
                  "fileTypes": [],
                  "file_path": "",
                  "password": false,
                  "name": "chunk_overlap",
                  "display_name": "Chunk Overlap",
                  "advanced": false,
                  "dynamic": false,
                  "info": "",
                  "title_case": true
                },
                "chunk_size": {
                  "type": "int",
                  "required": true,
                  "placeholder": "",
                  "list": false,
                  "show": true,
                  "multiline": false,
                  "value": 1000,
                  "fileTypes": [],
                  "file_path": "",
                  "password": false,
                  "name": "chunk_size",
                  "display_name": "Chunk Size",
                  "advanced": false,
                  "dynamic": false,
                  "info": "",
                  "title_case": true
                },
                "separator": {
                  "type": "str",
                  "required": true,
                  "placeholder": "",
                  "list": false,
                  "show": true,
                  "multiline": false,
                  "value": "\\n",
                  "fileTypes": [],
                  "file_path": "",
                  "password": false,
                  "name": "separator",
                  "display_name": "Separator",
                  "advanced": false,
                  "dynamic": false,
                  "info": "",
                  "title_case": true
                },
                "_type": "CharacterTextSplitter"
              },
              "description": "Splitting text that looks at characters.",
              "base_classes": [
                "Document"
              ],
              "display_name": "CharacterTextSplitter",
              "documentation": "https://python.langchain.com/docs/modules/data_connection/document_transformers/text_splitters/character_text_splitter",
              "custom_fields": {},
              "output_types": [
                "Document"
              ],
              "field_formatters": {},
              "beta": false
            },
            "id": "CharacterTextSplitter-1zQp1"
          },
          "selected": false,
          "width": 384,
          "height": 509,
          "positionAbsolute": {
            "x": 228.0306214017827,
            "y": 1.2670111489058797
          },
          "dragging": false
        },
        {
          "id": "RetrievalQA-jBnHY",
          "type": "genericNode",
          "position": {
            "x": 2062.514008638146,
            "y": -179.02762387798697
          },
          "data": {
            "type": "RetrievalQA",
            "node": {
              "template": {
                "combine_documents_chain": {
                  "type": "BaseCombineDocumentsChain",
                  "required": true,
                  "placeholder": "",
                  "list": false,
                  "show": true,
                  "multiline": false,
                  "fileTypes": [],
                  "file_path": "",
                  "password": false,
                  "name": "combine_documents_chain",
                  "display_name": "Combine Documents Chain",
                  "advanced": false,
                  "dynamic": false,
                  "info": "",
                  "title_case": true
                },
                "memory": {
                  "type": "BaseMemory",
                  "required": false,
                  "placeholder": "",
                  "list": false,
                  "show": true,
                  "multiline": false,
                  "fileTypes": [],
                  "file_path": "",
                  "password": false,
                  "name": "memory",
                  "display_name": "Memory",
                  "advanced": false,
                  "dynamic": false,
                  "info": "",
                  "title_case": true
                },
                "retriever": {
                  "type": "BaseRetriever",
                  "required": true,
                  "placeholder": "",
                  "list": false,
                  "show": true,
                  "multiline": false,
                  "fileTypes": [],
                  "file_path": "",
                  "password": false,
                  "name": "retriever",
                  "display_name": "Retriever",
                  "advanced": false,
                  "dynamic": false,
                  "info": "",
                  "title_case": true
                },
                "code": {
                  "type": "code",
                  "required": true,
                  "placeholder": "",
                  "list": false,
                  "show": true,
                  "multiline": true,
                  "value": "from typing import Callable, Optional, Union\n\nfrom langchain.chains.combine_documents.base import BaseCombineDocumentsChain\nfrom langchain.chains.retrieval_qa.base import BaseRetrievalQA, RetrievalQA\nfrom axiestudio import CustomComponent\nfrom axiestudio.field_typing import BaseMemory, BaseRetriever\n\n\nclass RetrievalQAComponent(CustomComponent):\n    display_name = \"RetrievalQA\"\n    description = \"Chain for question-answering against an index.\"\n\n    def build_config(self):\n        return {\n            \"combine_documents_chain\": {\"display_name\": \"Combine Documents Chain\"},\n            \"retriever\": {\"display_name\": \"Retriever\"},\n            \"memory\": {\"display_name\": \"Memory\", \"required\": False},\n            \"input_key\": {\"display_name\": \"Input Key\", \"advanced\": True},\n            \"output_key\": {\"display_name\": \"Output Key\", \"advanced\": True},\n            \"return_source_documents\": {\"display_name\": \"Return Source Documents\"},\n        }\n\n    def build(\n        self,\n        combine_documents_chain: BaseCombineDocumentsChain,\n        retriever: BaseRetriever,\n        memory: Optional[BaseMemory] = None,\n        input_key: str = \"query\",\n        output_key: str = \"result\",\n        return_source_documents: bool = True,\n    ) -> Union[BaseRetrievalQA, Callable]:\n        return RetrievalQA(\n            combine_documents_chain=combine_documents_chain,\n            retriever=retriever,\n            memory=memory,\n            input_key=input_key,\n            output_key=output_key,\n            return_source_documents=return_source_documents,\n        )\n",
                  "fileTypes": [],
                  "file_path": "",
                  "password": false,
                  "name": "code",
                  "advanced": false,
                  "dynamic": true,
                  "info": "",
                  "title_case": true
                },
                "input_key": {
                  "type": "str",
                  "required": true,
                  "placeholder": "",
                  "list": false,
                  "show": true,
                  "multiline": false,
                  "value": "query",
                  "fileTypes": [],
                  "file_path": "",
                  "password": false,
                  "name": "input_key",
                  "display_name": "Input Key",
                  "advanced": true,
                  "dynamic": false,
                  "info": "",
                  "title_case": true
                },
                "output_key": {
                  "type": "str",
                  "required": true,
                  "placeholder": "",
                  "list": false,
                  "show": true,
                  "multiline": false,
                  "value": "result",
                  "fileTypes": [],
                  "file_path": "",
                  "password": false,
                  "name": "output_key",
                  "display_name": "Output Key",
                  "advanced": true,
                  "dynamic": false,
                  "info": "",
                  "title_case": true
                },
                "return_source_documents": {
                  "type": "bool",
                  "required": true,
                  "placeholder": "",
                  "list": false,
                  "show": true,
                  "multiline": false,
                  "value": true,
                  "fileTypes": [],
                  "file_path": "",
                  "password": false,
                  "name": "return_source_documents",
                  "display_name": "Return Source Documents",
                  "advanced": false,
                  "dynamic": false,
                  "info": "",
                  "title_case": true
                },
                "_type": "CustomComponent"
              },
              "description": "Chain for question-answering against an index.",
              "base_classes": [
                "BaseRetrievalQA",
                "Chain",
                "Callable"
              ],
              "display_name": "RetrievalQA",
              "documentation": "",
              "custom_fields": {
                "combine_documents_chain": null,
                "retriever": null,
                "memory": null,
                "input_key": null,
                "output_key": null,
                "return_source_documents": null
              },
              "output_types": [
                "BaseRetrievalQA",
                "Callable"
              ],
              "field_formatters": {},
              "beta": true
            },
            "id": "RetrievalQA-jBnHY"
          },
          "selected": false,
          "width": 384,
          "height": 501,
          "positionAbsolute": {
            "x": 2062.514008638146,
            "y": -179.02762387798697
          },
          "dragging": false
        },
        {
          "id": "CombineDocsChain-1sV4K",
          "type": "genericNode",
          "position": {
            "x": 1403.7189112273475,
            "y": -470.74401760956636
          },
          "data": {
            "type": "CombineDocsChain",
            "node": {
              "template": {
                "llm": {
                  "type": "BaseLanguageModel",
                  "required": true,
                  "placeholder": "",
                  "list": false,
                  "show": true,
                  "multiline": false,
                  "value": "",
                  "fileTypes": [],
                  "file_path": "",
                  "password": false,
                  "name": "llm",
                  "display_name": "LLM",
                  "advanced": false,
                  "dynamic": false,
                  "info": "",
                  "title_case": true
                },
                "chain_type": {
                  "type": "str",
                  "required": true,
                  "placeholder": "",
                  "list": true,
                  "show": true,
                  "multiline": false,
                  "value": "stuff",
                  "fileTypes": [],
                  "file_path": "",
                  "password": false,
                  "options": [
                    "stuff",
                    "map_reduce",
                    "map_rerank",
                    "refine"
                  ],
                  "name": "chain_type",
                  "advanced": false,
                  "dynamic": false,
                  "info": "",
                  "title_case": true
                },
                "_type": "load_qa_chain"
              },
              "description": "Load question answering chain.",
              "base_classes": [
                "BaseCombineDocumentsChain",
                "Callable"
              ],
              "display_name": "CombineDocsChain",
              "documentation": "",
              "custom_fields": {},
              "output_types": [],
              "field_formatters": {},
              "beta": false
            },
            "id": "CombineDocsChain-1sV4K"
          },
          "selected": false,
          "width": 384,
          "height": 333,
          "positionAbsolute": {
            "x": 1403.7189112273475,
            "y": -470.74401760956636
          },
          "dragging": false
        },
        {
          "id": "ChatOpenAI-WAAco",
          "type": "genericNode",
          "position": {
            "x": 797.0504557644349,
            "y": -657.3236831776978
          },
          "data": {
            "type": "ChatOpenAI",
            "node": {
              "template": {
                "OPENAI_API_KEY": {
                  "type": "str",
                  "required": false,
                  "placeholder": "",
                  "list": false,
                  "show": true,
                  "multiline": false,
                  "fileTypes": [],
                  "file_path": "",
                  "password": true,
                  "name": "OPENAI_API_KEY",
                  "display_name": "OpenAI API Key",
                  "advanced": false,
                  "dynamic": false,
                  "info": "",
                  "title_case": true,
                  "value": ""
                },
                "code": {
                  "type": "code",
                  "required": true,
                  "placeholder": "",
                  "list": false,
                  "show": true,
                  "multiline": true,
                  "value": "#chatopenai code in axiestudio\r\n\r\nfrom typing import Optional, Union\r\n\r\nfrom langchain.llms import BaseLLM\r\nfrom langchain_community.chat_models.openai import ChatOpenAI\r\n\r\nfrom axiestudio import CustomComponent\r\nfrom axiestudio.field_typing import BaseLanguageModel, NestedDict\r\n\r\n\r\nclass ChatOpenAIComponent(CustomComponent):\r\n    display_name = \"ChatOpenAI\"\r\n    description = \"`OpenAI` Chat large language models API.\"\r\n\r\n    def build_config(self):\r\n        return {\r\n            \"max_tokens\": {\r\n                \"display_name\": \"Max Tokens\",\r\n                \"field_type\": \"int\",\r\n                \"advanced\": False,\r\n                \"required\": False,\r\n            },\r\n            \"model_kwargs\": {\r\n                \"display_name\": \"Model Kwargs\",\r\n                \"field_type\": \"NestedDict\",\r\n                \"advanced\": True,\r\n                \"required\": False,\r\n            },\r\n            \"model_name\": {\r\n                \"display_name\": \"Model Name\",\r\n                \"field_type\": \"str\",\r\n                \"advanced\": False,\r\n                \"required\": False,\r\n                \"options\": [\r\n                    \"gpt-4-turbo-preview\",\r\n                    \"gpt-4-0125-preview\",\r\n                    \"gpt-4-1106-preview\",\r\n                    \"gpt-4-vision-preview\",\r\n                    \"gpt-3.5-turbo-0125\",\r\n                    \"gpt-3.5-turbo-1106\",\r\n                ],\r\n            },\r\n            \"openai_api_base\": {\r\n                \"display_name\": \"OpenAI API Base\",\r\n                \"field_type\": \"str\",\r\n                \"advanced\": False,\r\n                \"required\": False,\r\n                \"info\": (\r\n                    \"The base URL of the OpenAI API. Defaults to https://api.openai.com/v1.\\n\\n\"\r\n                    \"You can change this to use other APIs like JinaChat, LocalAI and Prem.\"\r\n                ),\r\n            },\r\n            \"OPENAI_API_KEY\": {\r\n                \"display_name\": \"OpenAI API Key\",\r\n                \"field_type\": \"str\",\r\n                \"advanced\": False,\r\n                \"required\": False,\r\n                \"password\": True,\r\n            },\r\n            \"temperature\": {\r\n                \"display_name\": \"Temperature\",\r\n                \"field_type\": \"float\",\r\n                \"advanced\": False,\r\n                \"required\": False,\r\n                \"value\": 0.7,\r\n            },\r\n        }\r\n\r\n    def build(\r\n        self,\r\n        max_tokens: Optional[int] = 256,\r\n        model_kwargs: NestedDict = {},\r\n        model_name: str = \"gpt-4-1106-preview\",\r\n        openai_api_base: Optional[str] = None,\r\n        OPENAI_API_KEY: Optional[str] = None,\r\n        temperature: float = 0.7,\r\n    ) -> Union[BaseLanguageModel, BaseLLM]:\r\n        if not openai_api_base:\r\n            openai_api_base = \"https://api.openai.com/v1\"\r\n        return ChatOpenAI(\r\n            max_tokens=max_tokens,\r\n            model_kwargs=model_kwargs,\r\n            model=model_name,\r\n            base_url=openai_api_base,\r\n            api_key=OPENAI_API_KEY,\r\n            temperature=temperature,\r\n        )\r\n",
                  "fileTypes": [],
                  "file_path": "",
                  "password": false,
                  "name": "code",
                  "advanced": false,
                  "dynamic": true,
                  "info": "",
                  "title_case": true
                },
                "max_tokens": {
                  "type": "int",
                  "required": false,
                  "placeholder": "",
                  "list": false,
                  "show": true,
                  "multiline": false,
                  "value": 256,
                  "fileTypes": [],
                  "file_path": "",
                  "password": false,
                  "name": "max_tokens",
                  "display_name": "Max Tokens",
                  "advanced": false,
                  "dynamic": false,
                  "info": "",
                  "title_case": true
                },
                "model_kwargs": {
                  "type": "NestedDict",
                  "required": false,
                  "placeholder": "",
                  "list": false,
                  "show": true,
                  "multiline": false,
                  "value": {},
                  "fileTypes": [],
                  "file_path": "",
                  "password": false,
                  "name": "model_kwargs",
                  "display_name": "Model Kwargs",
                  "advanced": true,
                  "dynamic": false,
                  "info": "",
                  "title_case": true
                },
                "model_name": {
                  "type": "str",
                  "required": false,
                  "placeholder": "",
                  "list": true,
                  "show": true,
                  "multiline": false,
                  "value": "gpt-4-turbo-preview",
                  "fileTypes": [],
                  "file_path": "",
                  "password": false,
                  "options": [
                    "gpt-4-turbo-preview",
                    "gpt-4-0125-preview",
                    "gpt-4-1106-preview",
                    "gpt-4-vision-preview",
                    "gpt-3.5-turbo-0125",
                    "gpt-3.5-turbo-1106"
                  ],
                  "name": "model_name",
                  "display_name": "Model Name",
                  "advanced": false,
                  "dynamic": false,
                  "info": "",
                  "title_case": true
                },
                "openai_api_base": {
                  "type": "str",
                  "required": false,
                  "placeholder": "",
                  "list": false,
                  "show": true,
                  "multiline": false,
                  "fileTypes": [],
                  "file_path": "",
                  "password": false,
                  "name": "openai_api_base",
                  "display_name": "OpenAI API Base",
                  "advanced": false,
                  "dynamic": false,
                  "info": "The base URL of the OpenAI API. Defaults to https://api.openai.com/v1.\n\nYou can change this to use other APIs like JinaChat, LocalAI and Prem.",
                  "title_case": true
                },
                "temperature": {
                  "type": "float",
                  "required": false,
                  "placeholder": "",
                  "list": false,
                  "show": true,
                  "multiline": false,
                  "value": 0.7,
                  "fileTypes": [],
                  "file_path": "",
                  "password": false,
                  "name": "temperature",
                  "display_name": "Temperature",
                  "advanced": false,
                  "dynamic": false,
                  "info": "",
                  "rangeSpec": {
                    "min": -1,
                    "max": 1,
                    "step": 0.1
                  },
                  "title_case": true
                },
                "_type": "CustomComponent"
              },
              "description": "`OpenAI` Chat large language models API.",
              "base_classes": [
                "BaseLanguageModel",
                "BaseLanguageModel",
                "BaseLLM"
              ],
              "display_name": "ChatOpenAI",
              "documentation": "",
              "custom_fields": {
                "max_tokens": null,
                "model_kwargs": null,
                "model_name": null,
                "openai_api_base": null,
                "OPENAI_API_KEY": null,
                "temperature": null
              },
              "output_types": [
                "BaseLanguageModel",
                "BaseLLM"
              ],
              "field_formatters": {},
              "beta": true
            },
            "id": "ChatOpenAI-WAAco",
            "description": "`OpenAI` Chat large language models API.",
            "display_name": "ChatOpenAI"
          },
          "selected": false,
          "width": 384,
          "height": 731,
          "positionAbsolute": {
            "x": 797.0504557644349,
            "y": -657.3236831776978
          },
          "dragging": false
        },
        {
          "id": "CohereEmbeddings-Q8XcP",
          "type": "genericNode",
          "position": {
            "x": 455.2250211270756,
            "y": 510.0042403219521
          },
          "data": {
            "type": "CohereEmbeddings",
            "node": {
              "template": {
                "code": {
                  "type": "code",
                  "required": true,
                  "placeholder": "",
                  "list": false,
                  "show": true,
                  "multiline": true,
                  "value": "from typing import Optional\r\n\r\nfrom langchain_community.embeddings.cohere import CohereEmbeddings\r\nfrom axiestudio import CustomComponent\r\n\r\nclass CohereEmbeddingsComponent(CustomComponent):\r\n    display_name = \"CohereEmbeddings\"\r\n    description = \"Cohere embedding models.\"\r\n\r\n    def build(\r\n        self,\r\n        cohere_api_key: str,\r\n        request_timeout: Optional[float] = None,\r\n        max_retries: int = 3,\r\n        model: str = \"embed-english-v2.0\",\r\n        truncate: Optional[str] = None,\r\n        user_agent: str = \"langchain\",\r\n    ) -> CohereEmbeddings:\r\n        if not cohere_api_key:\r\n            raise ValueError(\"cohere_api_key is required\")\r\n\r\n        return CohereEmbeddings(\r\n            max_retries=max_retries,\r\n            user_agent=user_agent,\r\n            request_timeout=request_timeout,\r\n            cohere_api_key=cohere_api_key,\r\n            model=model,\r\n            truncate=truncate,\r\n        )",
                  "fileTypes": [],
                  "file_path": "",
                  "password": false,
                  "name": "code",
                  "advanced": false,
                  "dynamic": true,
                  "info": "",
                  "title_case": true
                },
                "cohere_api_key": {
                  "type": "str",
                  "required": true,
                  "placeholder": "",
                  "list": false,
                  "show": true,
                  "multiline": false,
                  "fileTypes": [],
                  "file_path": "",
                  "password": false,
                  "name": "cohere_api_key",
                  "advanced": false,
                  "dynamic": false,
                  "info": "",
                  "title_case": true,
                  "value": "lmtgFbqO0uXLNYgsaRc3waE06JrxR3vEz2tCakt1"
                },
                "max_retries": {
                  "type": "int",
                  "required": true,
                  "placeholder": "",
                  "list": false,
                  "show": true,
                  "multiline": false,
                  "value": 3,
                  "fileTypes": [],
                  "file_path": "",
                  "password": false,
                  "name": "max_retries",
                  "advanced": false,
                  "dynamic": false,
                  "info": "",
                  "title_case": true
                },
                "model": {
                  "type": "str",
                  "required": true,
                  "placeholder": "",
                  "list": false,
                  "show": true,
                  "multiline": false,
                  "value": "embed-english-v2.0",
                  "fileTypes": [],
                  "file_path": "",
                  "password": false,
                  "name": "model",
                  "advanced": false,
                  "dynamic": false,
                  "info": "",
                  "title_case": true
                },
                "request_timeout": {
                  "type": "float",
                  "required": false,
                  "placeholder": "",
                  "list": false,
                  "show": true,
                  "multiline": false,
                  "fileTypes": [],
                  "file_path": "",
                  "password": false,
                  "name": "request_timeout",
                  "advanced": false,
                  "dynamic": false,
                  "info": "",
                  "rangeSpec": {
                    "min": -1,
                    "max": 1,
                    "step": 0.1
                  },
                  "title_case": true
                },
                "truncate": {
                  "type": "str",
                  "required": false,
                  "placeholder": "",
                  "list": false,
                  "show": true,
                  "multiline": false,
                  "fileTypes": [],
                  "file_path": "",
                  "password": false,
                  "name": "truncate",
                  "advanced": false,
                  "dynamic": false,
                  "info": "",
                  "title_case": true
                },
                "user_agent": {
                  "type": "str",
                  "required": true,
                  "placeholder": "",
                  "list": false,
                  "show": true,
                  "multiline": false,
                  "value": "langchain",
                  "fileTypes": [],
                  "file_path": "",
                  "password": false,
                  "name": "user_agent",
                  "advanced": false,
                  "dynamic": false,
                  "info": "",
                  "title_case": true
                },
                "_type": "CustomComponent"
              },
              "description": "Cohere embedding models.",
              "base_classes": [
                "CohereEmbeddings",
                "Embeddings"
              ],
              "display_name": "CohereEmbeddings",
              "documentation": "",
              "custom_fields": {
                "cohere_api_key": null,
                "request_timeout": null,
                "max_retries": null,
                "model": null,
                "truncate": null,
                "user_agent": null
              },
              "output_types": [
                "CohereEmbeddings"
              ],
              "field_formatters": {},
              "beta": true
            },
            "id": "CohereEmbeddings-Q8XcP",
            "description": "Cohere embedding models.",
            "display_name": "CohereEmbeddings"
          },
          "selected": false,
          "width": 384,
          "height": 829,
          "positionAbsolute": {
            "x": 455.2250211270756,
            "y": 510.0042403219521
          },
          "dragging": false
        }
      ],
      "edges": [
        {
          "source": "CharacterTextSplitter-1zQp1",
          "sourceHandle": "{œbaseClassesœ:[œDocumentœ],œdataTypeœ:œCharacterTextSplitterœ,œidœ:œCharacterTextSplitter-1zQp1œ}",
          "target": "Chroma-cjSxZ",
          "targetHandle": "{œfieldNameœ:œdocumentsœ,œidœ:œChroma-cjSxZœ,œinputTypesœ:null,œtypeœ:œDocumentœ}",
          "data": {
            "targetHandle": {
              "fieldName": "documents",
              "id": "Chroma-cjSxZ",
              "inputTypes": null,
              "type": "Document"
            },
            "sourceHandle": {
              "baseClasses": [
                "Document"
              ],
              "dataType": "CharacterTextSplitter",
              "id": "CharacterTextSplitter-1zQp1"
            }
          },
          "style": {
            "stroke": "#555"
          },
          "className": "stroke-gray-900  stroke-connection",
          "animated": false,
          "id": "reactflow__edge-CharacterTextSplitter-1zQp1{œbaseClassesœ:[œDocumentœ],œdataTypeœ:œCharacterTextSplitterœ,œidœ:œCharacterTextSplitter-1zQp1œ}-Chroma-cjSxZ{œfieldNameœ:œdocumentsœ,œidœ:œChroma-cjSxZœ,œinputTypesœ:null,œtypeœ:œDocumentœ}"
        },
        {
          "source": "PyPDFLoader-sXK2e",
          "sourceHandle": "{œbaseClassesœ:[œDocumentœ],œdataTypeœ:œPyPDFLoaderœ,œidœ:œPyPDFLoader-sXK2eœ}",
          "target": "CharacterTextSplitter-1zQp1",
          "targetHandle": "{œfieldNameœ:œdocumentsœ,œidœ:œCharacterTextSplitter-1zQp1œ,œinputTypesœ:null,œtypeœ:œDocumentœ}",
          "data": {
            "targetHandle": {
              "fieldName": "documents",
              "id": "CharacterTextSplitter-1zQp1",
              "inputTypes": null,
              "type": "Document"
            },
            "sourceHandle": {
              "baseClasses": [
                "Document"
              ],
              "dataType": "PyPDFLoader",
              "id": "PyPDFLoader-sXK2e"
            }
          },
          "style": {
            "stroke": "#555"
          },
          "className": "stroke-gray-900  stroke-connection",
          "animated": false,
          "id": "reactflow__edge-PyPDFLoader-sXK2e{œbaseClassesœ:[œDocumentœ],œdataTypeœ:œPyPDFLoaderœ,œidœ:œPyPDFLoader-sXK2eœ}-CharacterTextSplitter-1zQp1{œfieldNameœ:œdocumentsœ,œidœ:œCharacterTextSplitter-1zQp1œ,œinputTypesœ:null,œtypeœ:œDocumentœ}"
        },
        {
          "source": "Chroma-cjSxZ",
          "sourceHandle": "{œbaseClassesœ:[œVectorStoreœ,œBaseRetrieverœ],œdataTypeœ:œChromaœ,œidœ:œChroma-cjSxZœ}",
          "target": "RetrievalQA-jBnHY",
          "targetHandle": "{œfieldNameœ:œretrieverœ,œidœ:œRetrievalQA-jBnHYœ,œinputTypesœ:null,œtypeœ:œBaseRetrieverœ}",
          "data": {
            "targetHandle": {
              "fieldName": "retriever",
              "id": "RetrievalQA-jBnHY",
              "inputTypes": null,
              "type": "BaseRetriever"
            },
            "sourceHandle": {
              "baseClasses": [
                "VectorStore",
                "BaseRetriever"
              ],
              "dataType": "Chroma",
              "id": "Chroma-cjSxZ"
            }
          },
          "style": {
            "stroke": "#555"
          },
          "className": "stroke-gray-900  stroke-connection",
          "animated": false,
          "id": "reactflow__edge-Chroma-cjSxZ{œbaseClassesœ:[œVectorStoreœ,œBaseRetrieverœ],œdataTypeœ:œChromaœ,œidœ:œChroma-cjSxZœ}-RetrievalQA-jBnHY{œfieldNameœ:œretrieverœ,œidœ:œRetrievalQA-jBnHYœ,œinputTypesœ:null,œtypeœ:œBaseRetrieverœ}",
          "selected": false
        },
        {
          "source": "CombineDocsChain-1sV4K",
          "sourceHandle": "{œbaseClassesœ:[œBaseCombineDocumentsChainœ,œCallableœ],œdataTypeœ:œCombineDocsChainœ,œidœ:œCombineDocsChain-1sV4Kœ}",
          "target": "RetrievalQA-jBnHY",
          "targetHandle": "{œfieldNameœ:œcombine_documents_chainœ,œidœ:œRetrievalQA-jBnHYœ,œinputTypesœ:null,œtypeœ:œBaseCombineDocumentsChainœ}",
          "data": {
            "targetHandle": {
              "fieldName": "combine_documents_chain",
              "id": "RetrievalQA-jBnHY",
              "inputTypes": null,
              "type": "BaseCombineDocumentsChain"
            },
            "sourceHandle": {
              "baseClasses": [
                "BaseCombineDocumentsChain",
                "Callable"
              ],
              "dataType": "CombineDocsChain",
              "id": "CombineDocsChain-1sV4K"
            }
          },
          "style": {
            "stroke": "#555"
          },
          "className": "stroke-gray-900  stroke-connection",
          "animated": false,
          "id": "reactflow__edge-CombineDocsChain-1sV4K{œbaseClassesœ:[œBaseCombineDocumentsChainœ,œCallableœ],œdataTypeœ:œCombineDocsChainœ,œidœ:œCombineDocsChain-1sV4Kœ}-RetrievalQA-jBnHY{œfieldNameœ:œcombine_documents_chainœ,œidœ:œRetrievalQA-jBnHYœ,œinputTypesœ:null,œtypeœ:œBaseCombineDocumentsChainœ}"
        },
        {
          "source": "ChatOpenAI-WAAco",
          "sourceHandle": "{œbaseClassesœ:[œBaseLanguageModelœ,œBaseLanguageModelœ,œBaseLLMœ],œdataTypeœ:œChatOpenAIœ,œidœ:œChatOpenAI-WAAcoœ}",
          "target": "CombineDocsChain-1sV4K",
          "targetHandle": "{œfieldNameœ:œllmœ,œidœ:œCombineDocsChain-1sV4Kœ,œinputTypesœ:null,œtypeœ:œBaseLanguageModelœ}",
          "data": {
            "targetHandle": {
              "fieldName": "llm",
              "id": "CombineDocsChain-1sV4K",
              "inputTypes": null,
              "type": "BaseLanguageModel"
            },
            "sourceHandle": {
              "baseClasses": [
                "BaseLanguageModel",
                "BaseLanguageModel",
                "BaseLLM"
              ],
              "dataType": "ChatOpenAI",
              "id": "ChatOpenAI-WAAco"
            }
          },
          "style": {
            "stroke": "#555"
          },
          "className": "stroke-gray-900  stroke-connection",
          "animated": false,
          "id": "reactflow__edge-ChatOpenAI-WAAco{œbaseClassesœ:[œBaseLanguageModelœ,œBaseLanguageModelœ,œBaseLLMœ],œdataTypeœ:œChatOpenAIœ,œidœ:œChatOpenAI-WAAcoœ}-CombineDocsChain-1sV4K{œfieldNameœ:œllmœ,œidœ:œCombineDocsChain-1sV4Kœ,œinputTypesœ:null,œtypeœ:œBaseLanguageModelœ}"
        },
        {
          "source": "CohereEmbeddings-Q8XcP",
          "sourceHandle": "{œbaseClassesœ:[œCohereEmbeddingsœ,œEmbeddingsœ],œdataTypeœ:œCohereEmbeddingsœ,œidœ:œCohereEmbeddings-Q8XcPœ}",
          "target": "Chroma-cjSxZ",
          "targetHandle": "{œfieldNameœ:œembeddingœ,œidœ:œChroma-cjSxZœ,œinputTypesœ:null,œtypeœ:œEmbeddingsœ}",
          "data": {
            "targetHandle": {
              "fieldName": "embedding",
              "id": "Chroma-cjSxZ",
              "inputTypes": null,
              "type": "Embeddings"
            },
            "sourceHandle": {
              "baseClasses": [
                "CohereEmbeddings",
                "Embeddings"
              ],
              "dataType": "CohereEmbeddings",
              "id": "CohereEmbeddings-Q8XcP"
            }
          },
          "style": {
            "stroke": "#555"
          },
          "className": "stroke-gray-900  stroke-connection",
          "animated": false,
          "id": "reactflow__edge-CohereEmbeddings-Q8XcP{œbaseClassesœ:[œCohereEmbeddingsœ,œEmbeddingsœ],œdataTypeœ:œCohereEmbeddingsœ,œidœ:œCohereEmbeddings-Q8XcPœ}-Chroma-cjSxZ{œfieldNameœ:œembeddingœ,œidœ:œChroma-cjSxZœ,œinputTypesœ:null,œtypeœ:œEmbeddingsœ}"
        }
      ],
      "viewport": {
        "x": 146.22280278780693,
        "y": 147.25233917529113,
        "zoom": 0.6169005530884999
      }
    },
    "date_created": "2024-05-24T17:11:57.162Z",
    "date_updated": "2024-05-24T17:11:57.328Z",
    "status": "Public",
    "sort": null,
    "user_updated": "21456395-62ba-46cf-b241-139c70e3ceed",
    "user_created": {
      "username": "Postera",
      "first_name": "Nasitt",
      "last_name": "_",
      "id": "21456395-62ba-46cf-b241-139c70e3ceed"
    },
    "tags": []
  },
  "conversion": {
    "converted_at": "2025-08-19T18:08:56.596Z",
    "converted_from": "langflow",
    "converted_to": "axiestudio",
    "conversions_made": 20,
    "converter_version": "1.0.0"
  }
}