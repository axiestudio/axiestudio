{
  "id": "c954388d-1516-4f96-b907-cacff1922ac8",
  "name": "Memory Chatbot (1)",
  "description": "This project can be used as a starting point for building a Chat experience with user specific memory. You can set a different Session ID to start a new message history. (Converted from Langflow Store for AxieStudio compatibility)",
  "type": "FLOW",
  "is_component": false,
  "author": {
    "username": "Gary",
    "first_name": "Ronggen",
    "last_name": "Liu",
    "id": "ad1487c0-b813-4b19-b022-62070d4f4003",
    "full_name": "Ronggen Liu"
  },
  "store_url": "https://www.langflow.store/store/component/c954388d-1516-4f96-b907-cacff1922ac8",
  "stats": {
    "downloads": 0,
    "likes": 0
  },
  "dates": {
    "created": "2024-06-18T09:32:47.748Z",
    "updated": "2024-06-18T09:32:47.783Z",
    "downloaded": "2025-08-19T17:50:05.600Z"
  },
  "tags": [],
  "technical": {
    "last_tested_version": "1.0.0a61",
    "private": false,
    "status": "Public"
  },
  "data": {
    "nodes": [
      {
        "data": {
          "id": "ChatInput-egtaY",
          "node": {
            "base_classes": [
              "Text",
              "object",
              "Record",
              "str"
            ],
            "beta": false,
            "custom_fields": {
              "input_value": null,
              "return_record": null,
              "sender": null,
              "sender_name": null,
              "session_id": null
            },
            "description": "Get chat inputs from the Playground.",
            "display_name": "Chat Input",
            "documentation": "",
            "field_formatters": {},
            "field_order": [],
            "frozen": false,
            "icon": "ChatInput",
            "output_types": [
              "Message",
              "Text"
            ],
            "template": {
              "_type": "CustomComponent",
              "code": {
                "advanced": true,
                "dynamic": true,
                "fileTypes": [],
                "file_path": "",
                "info": "",
                "list": false,
                "load_from_db": false,
                "multiline": true,
                "name": "code",
                "password": false,
                "placeholder": "",
                "required": true,
                "show": true,
                "title_case": false,
                "type": "code",
                "value": "from typing import Optional\n\nfrom axiestudio.base.io.chat import ChatComponent\nfrom axiestudio.schema.message import Message\nfrom axiestudio.field_typing import Text\nfrom typing import Union\n\n\nclass ChatInput(ChatComponent):\n    display_name = \"Chat Input\"\n    description = \"Get chat inputs from the Playground.\"\n    icon = \"ChatInput\"\n\n    def build_config(self):\n        build_config = super().build_config()\n        build_config[\"input_value\"] = {\n            \"input_types\": [],\n            \"display_name\": \"Text\",\n            \"multiline\": True,\n        }\n        build_config[\"return_message\"] = {\n            \"display_name\": \"Return Record\",\n            \"advanced\": True,\n        }\n\n        return build_config\n\n    def build(\n        self,\n        sender: Optional[str] = \"User\",\n        sender_name: Optional[str] = \"User\",\n        input_value: Optional[str] = None,\n        files: Optional[list[str]] = None,\n        session_id: Optional[str] = None,\n        return_message: Optional[bool] = True,\n    ) -> Union[Message, Text]:\n        return super().build_with_record(\n            sender=sender,\n            sender_name=sender_name,\n            input_value=input_value,\n            files=files,\n            session_id=session_id,\n            return_message=return_message,\n        )\n"
              },
              "input_value": {
                "advanced": false,
                "display_name": "Text",
                "dynamic": false,
                "fileTypes": [],
                "file_path": "",
                "info": "",
                "input_types": [],
                "list": false,
                "load_from_db": false,
                "multiline": true,
                "name": "input_value",
                "password": false,
                "placeholder": "",
                "required": false,
                "show": true,
                "title_case": false,
                "type": "str",
                "value": "do you know his name?"
              },
              "sender": {
                "advanced": true,
                "display_name": "Sender Type",
                "dynamic": false,
                "fileTypes": [],
                "file_path": "",
                "info": "",
                "input_types": [
                  "Text"
                ],
                "list": true,
                "load_from_db": false,
                "multiline": false,
                "name": "sender",
                "options": [
                  "Machine",
                  "User"
                ],
                "password": false,
                "placeholder": "",
                "required": false,
                "show": true,
                "title_case": false,
                "type": "str",
                "value": "User"
              },
              "sender_name": {
                "advanced": false,
                "display_name": "Sender Name",
                "dynamic": false,
                "fileTypes": [],
                "file_path": "",
                "info": "",
                "input_types": [
                  "Text"
                ],
                "list": false,
                "load_from_db": false,
                "multiline": false,
                "name": "sender_name",
                "password": false,
                "placeholder": "",
                "required": false,
                "show": true,
                "title_case": false,
                "type": "str",
                "value": "User"
              },
              "session_id": {
                "advanced": false,
                "display_name": "Session ID",
                "dynamic": false,
                "fileTypes": [],
                "file_path": "",
                "info": "If provided, the message will be stored in the memory.",
                "input_types": [
                  "Text"
                ],
                "list": false,
                "load_from_db": false,
                "multiline": false,
                "name": "session_id",
                "password": false,
                "placeholder": "",
                "required": false,
                "show": true,
                "title_case": false,
                "type": "str",
                "value": "MySessionID"
              }
            }
          },
          "type": "ChatInput"
        },
        "dragging": false,
        "height": 485,
        "id": "ChatInput-egtaY",
        "position": {
          "x": 1283.2700598313072,
          "y": 982.5953650473145
        },
        "positionAbsolute": {
          "x": 1283.2700598313072,
          "y": 982.5953650473145
        },
        "selected": false,
        "type": "genericNode",
        "width": 384
      },
      {
        "data": {
          "id": "ChatOutput-S6qCc",
          "node": {
            "base_classes": [
              "Text",
              "object",
              "Record",
              "str"
            ],
            "beta": false,
            "custom_fields": {
              "input_value": null,
              "return_record": null,
              "sender": null,
              "sender_name": null,
              "session_id": null
            },
            "description": "Display a chat message in the Playground.",
            "display_name": "Chat Output",
            "documentation": "",
            "field_formatters": {},
            "field_order": [],
            "frozen": false,
            "icon": "ChatOutput",
            "output_types": [
              "Message",
              "Text"
            ],
            "template": {
              "_type": "CustomComponent",
              "code": {
                "advanced": true,
                "dynamic": true,
                "fileTypes": [],
                "file_path": "",
                "info": "",
                "list": false,
                "load_from_db": false,
                "multiline": true,
                "name": "code",
                "password": false,
                "placeholder": "",
                "required": true,
                "show": true,
                "title_case": false,
                "type": "code",
                "value": "from typing import Optional, Union\n\nfrom axiestudio.base.io.chat import ChatComponent\nfrom axiestudio.field_typing import Text\nfrom axiestudio.schema.message import Message\n\n\nclass ChatOutput(ChatComponent):\n    display_name = \"Chat Output\"\n    description = \"Display a chat message in the Playground.\"\n    icon = \"ChatOutput\"\n\n    def build(\n        self,\n        sender: Optional[str] = \"Machine\",\n        sender_name: Optional[str] = \"AI\",\n        input_value: Optional[str] = None,\n        session_id: Optional[str] = None,\n        files: Optional[list[str]] = None,\n        return_message: Optional[bool] = False,\n    ) -> Union[Message, Text]:\n        return super().build_with_record(\n            sender=sender,\n            sender_name=sender_name,\n            input_value=input_value,\n            session_id=session_id,\n            files=files,\n            return_message=return_message,\n        )\n"
              },
              "input_value": {
                "advanced": false,
                "display_name": "Text",
                "dynamic": false,
                "fileTypes": [],
                "file_path": "",
                "info": "",
                "input_types": [
                  "Text"
                ],
                "list": false,
                "load_from_db": false,
                "multiline": true,
                "name": "input_value",
                "password": false,
                "placeholder": "",
                "required": false,
                "show": true,
                "title_case": false,
                "type": "str"
              },
              "sender": {
                "advanced": true,
                "display_name": "Sender Type",
                "dynamic": false,
                "fileTypes": [],
                "file_path": "",
                "info": "",
                "input_types": [
                  "Text"
                ],
                "list": true,
                "load_from_db": false,
                "multiline": false,
                "name": "sender",
                "options": [
                  "Machine",
                  "User"
                ],
                "password": false,
                "placeholder": "",
                "required": false,
                "show": true,
                "title_case": false,
                "type": "str",
                "value": "Machine"
              },
              "sender_name": {
                "advanced": false,
                "display_name": "Sender Name",
                "dynamic": false,
                "fileTypes": [],
                "file_path": "",
                "info": "",
                "input_types": [
                  "Text"
                ],
                "list": false,
                "load_from_db": false,
                "multiline": false,
                "name": "sender_name",
                "password": false,
                "placeholder": "",
                "required": false,
                "show": true,
                "title_case": false,
                "type": "str",
                "value": "AI"
              },
              "session_id": {
                "advanced": false,
                "display_name": "Session ID",
                "dynamic": false,
                "fileTypes": [],
                "file_path": "",
                "info": "If provided, the message will be stored in the memory.",
                "input_types": [
                  "Text"
                ],
                "list": false,
                "load_from_db": false,
                "multiline": false,
                "name": "session_id",
                "password": false,
                "placeholder": "",
                "required": false,
                "show": true,
                "title_case": false,
                "type": "str",
                "value": "MySessionID"
              }
            }
          },
          "type": "ChatOutput"
        },
        "dragging": false,
        "height": 485,
        "id": "ChatOutput-S6qCc",
        "position": {
          "x": 3154.916355514023,
          "y": 851.051882666333
        },
        "positionAbsolute": {
          "x": 3154.916355514023,
          "y": 851.051882666333
        },
        "selected": false,
        "type": "genericNode",
        "width": 384
      },
      {
        "data": {
          "description": "Retrieves stored chat messages given a specific Session ID.",
          "display_name": "Chat Memory",
          "id": "MemoryComponent-hcDw8",
          "node": {
            "base_classes": [
              "str",
              "Text",
              "object"
            ],
            "beta": true,
            "custom_fields": {
              "n_messages": null,
              "order": null,
              "record_template": null,
              "sender": null,
              "sender_name": null,
              "session_id": null
            },
            "description": "Retrieves stored chat messages given a specific Session ID.",
            "display_name": "Chat Memory",
            "documentation": "",
            "field_formatters": {},
            "field_order": [],
            "frozen": false,
            "icon": "history",
            "output_types": [
              "Text"
            ],
            "template": {
              "_type": "CustomComponent",
              "code": {
                "advanced": true,
                "dynamic": true,
                "fileTypes": [],
                "file_path": "",
                "info": "",
                "list": false,
                "load_from_db": false,
                "multiline": true,
                "name": "code",
                "password": false,
                "placeholder": "",
                "required": true,
                "show": true,
                "title_case": false,
                "type": "code",
                "value": "from typing import Optional\n\nfrom axiestudio.base.memory.memory import BaseMemoryComponent\nfrom axiestudio.field_typing import Text\nfrom axiestudio.helpers.record import messages_to_text\nfrom axiestudio.memory import get_messages\nfrom axiestudio.schema.message import Message\n\n\nclass MemoryComponent(BaseMemoryComponent):\n    display_name = \"Chat Memory\"\n    description = \"Retrieves stored chat messages given a specific Session ID.\"\n    beta: bool = True\n    icon = \"history\"\n\n    def build_config(self):\n        return {\n            \"sender\": {\n                \"options\": [\"Machine\", \"User\", \"Machine and User\"],\n                \"display_name\": \"Sender Type\",\n            },\n            \"sender_name\": {\"display_name\": \"Sender Name\", \"advanced\": True},\n            \"n_messages\": {\n                \"display_name\": \"Number of Messages\",\n                \"info\": \"Number of messages to retrieve.\",\n            },\n            \"session_id\": {\n                \"display_name\": \"Session ID\",\n                \"info\": \"Session ID of the chat history.\",\n                \"input_types\": [\"Text\"],\n            },\n            \"order\": {\n                \"options\": [\"Ascending\", \"Descending\"],\n                \"display_name\": \"Order\",\n                \"info\": \"Order of the messages.\",\n                \"advanced\": True,\n            },\n            \"record_template\": {\n                \"display_name\": \"Record Template\",\n                \"multiline\": True,\n                \"info\": \"Template to convert Record to Text. If left empty, it will be dynamically set to the Record's text key.\",\n                \"advanced\": True,\n            },\n        }\n\n    def get_messages(self, **kwargs) -> list[Message]:\n        # Validate kwargs by checking if it contains the correct keys\n        if \"sender\" not in kwargs:\n            kwargs[\"sender\"] = None\n        if \"sender_name\" not in kwargs:\n            kwargs[\"sender_name\"] = None\n        if \"session_id\" not in kwargs:\n            kwargs[\"session_id\"] = None\n        if \"limit\" not in kwargs:\n            kwargs[\"limit\"] = 5\n        if \"order\" not in kwargs:\n            kwargs[\"order\"] = \"Descending\"\n\n        kwargs[\"order\"] = \"DESC\" if kwargs[\"order\"] == \"Descending\" else \"ASC\"\n        if kwargs[\"sender\"] == \"Machine and User\":\n            kwargs[\"sender\"] = None\n        return get_messages(**kwargs)\n\n    def build(\n        self,\n        sender: Optional[str] = \"Machine and User\",\n        sender_name: Optional[str] = None,\n        session_id: Optional[str] = None,\n        n_messages: int = 5,\n        order: Optional[str] = \"Descending\",\n        record_template: Optional[str] = \"{sender_name}: {text}\",\n    ) -> Text:\n        messages = self.get_messages(\n            sender=sender,\n            sender_name=sender_name,\n            session_id=session_id,\n            limit=n_messages,\n            order=order,\n        )\n        messages_str = messages_to_text(template=record_template or \"\", messages=messages)\n        self.status = messages_str\n        return messages_str\n"
              },
              "n_messages": {
                "advanced": false,
                "display_name": "Number of Messages",
                "dynamic": false,
                "fileTypes": [],
                "file_path": "",
                "info": "Number of messages to retrieve.",
                "list": false,
                "load_from_db": false,
                "multiline": false,
                "name": "n_messages",
                "password": false,
                "placeholder": "",
                "required": false,
                "show": true,
                "title_case": false,
                "type": "int",
                "value": 5
              },
              "order": {
                "advanced": true,
                "display_name": "Order",
                "dynamic": false,
                "fileTypes": [],
                "file_path": "",
                "info": "Order of the messages.",
                "input_types": [
                  "Text"
                ],
                "list": true,
                "load_from_db": false,
                "multiline": false,
                "name": "order",
                "options": [
                  "Ascending",
                  "Descending"
                ],
                "password": false,
                "placeholder": "",
                "required": false,
                "show": true,
                "title_case": false,
                "type": "str",
                "value": "Descending"
              },
              "record_template": {
                "advanced": true,
                "display_name": "Record Template",
                "dynamic": false,
                "fileTypes": [],
                "file_path": "",
                "info": "Template to convert Record to Text. If left empty, it will be dynamically set to the Record's text key.",
                "input_types": [
                  "Text"
                ],
                "list": false,
                "load_from_db": false,
                "multiline": true,
                "name": "record_template",
                "password": false,
                "placeholder": "",
                "required": false,
                "show": true,
                "title_case": false,
                "type": "str",
                "value": "{sender_name}: {text}"
              },
              "sender": {
                "advanced": false,
                "display_name": "Sender Type",
                "dynamic": false,
                "fileTypes": [],
                "file_path": "",
                "info": "",
                "input_types": [
                  "Text"
                ],
                "list": true,
                "load_from_db": false,
                "multiline": false,
                "name": "sender",
                "options": [
                  "Machine",
                  "User",
                  "Machine and User"
                ],
                "password": false,
                "placeholder": "",
                "required": false,
                "show": true,
                "title_case": false,
                "type": "str",
                "value": "Machine and User"
              },
              "sender_name": {
                "advanced": true,
                "display_name": "Sender Name",
                "dynamic": false,
                "fileTypes": [],
                "file_path": "",
                "info": "",
                "input_types": [
                  "Text"
                ],
                "list": false,
                "load_from_db": false,
                "multiline": false,
                "name": "sender_name",
                "password": false,
                "placeholder": "",
                "required": false,
                "show": true,
                "title_case": false,
                "type": "str"
              },
              "session_id": {
                "advanced": false,
                "display_name": "Session ID",
                "dynamic": false,
                "fileTypes": [],
                "file_path": "",
                "info": "Session ID of the chat history.",
                "input_types": [
                  "Text"
                ],
                "list": false,
                "load_from_db": false,
                "multiline": false,
                "name": "session_id",
                "password": false,
                "placeholder": "",
                "required": false,
                "show": true,
                "title_case": false,
                "type": "str",
                "value": "MySessionID"
              }
            }
          },
          "type": "MemoryComponent"
        },
        "dragging": false,
        "height": 505,
        "id": "MemoryComponent-hcDw8",
        "position": {
          "x": 1289.9606870058817,
          "y": 442.16804561053766
        },
        "positionAbsolute": {
          "x": 1289.9606870058817,
          "y": 442.16804561053766
        },
        "selected": false,
        "type": "genericNode",
        "width": 384
      },
      {
        "data": {
          "description": "Create a prompt template with dynamic variables.",
          "display_name": "Prompt",
          "id": "Prompt-Gu53S",
          "node": {
            "base_classes": [
              "object",
              "str",
              "Text"
            ],
            "beta": false,
            "custom_fields": {
              "template": [
                "Context",
                "UserMessage"
              ]
            },
            "description": "Create a prompt template with dynamic variables.",
            "display_name": "Prompt",
            "documentation": "",
            "error": null,
            "field_formatters": {},
            "field_order": [],
            "frozen": false,
            "full_path": null,
            "icon": "prompts",
            "is_composition": null,
            "is_input": null,
            "is_output": null,
            "name": "",
            "output_types": [
              "Prompt"
            ],
            "template": {
              "Context": {
                "advanced": false,
                "display_name": "Context",
                "dynamic": false,
                "field_type": "str",
                "fileTypes": [],
                "file_path": "",
                "info": "",
                "input_types": [
                  "Document",
                  "Message",
                  "Record",
                  "Text"
                ],
                "list": false,
                "load_from_db": false,
                "multiline": true,
                "name": "Context",
                "password": false,
                "placeholder": "",
                "required": false,
                "show": true,
                "title_case": false,
                "type": "str",
                "value": ""
              },
              "UserMessage": {
                "advanced": false,
                "display_name": "UserMessage",
                "dynamic": false,
                "field_type": "str",
                "fileTypes": [],
                "file_path": "",
                "info": "",
                "input_types": [
                  "Document",
                  "Message",
                  "Record",
                  "Text"
                ],
                "list": false,
                "load_from_db": false,
                "multiline": true,
                "name": "UserMessage",
                "password": false,
                "placeholder": "",
                "required": false,
                "show": true,
                "title_case": false,
                "type": "str",
                "value": ""
              },
              "_type": "CustomComponent",
              "code": {
                "advanced": true,
                "dynamic": true,
                "fileTypes": [],
                "file_path": "",
                "info": "",
                "list": false,
                "load_from_db": false,
                "multiline": true,
                "name": "code",
                "password": false,
                "placeholder": "",
                "required": true,
                "show": true,
                "title_case": false,
                "type": "code",
                "value": "from axiestudio.custom import CustomComponent\nfrom axiestudio.field_typing import TemplateField\nfrom axiestudio.field_typing.prompt import Prompt\n\n\nclass PromptComponent(CustomComponent):\n    display_name: str = \"Prompt\"\n    description: str = \"Create a prompt template with dynamic variables.\"\n    icon = \"prompts\"\n\n    def build_config(self):\n        return {\n            \"template\": TemplateField(display_name=\"Template\"),\n            \"code\": TemplateField(advanced=True),\n        }\n\n    async def build(\n        self,\n        template: Prompt,\n        **kwargs,\n    ) -> Prompt:\n        prompt = await Prompt.from_template_and_variables(template, kwargs)\n        self.status = prompt.format_text()\n        return prompt\n"
              },
              "template": {
                "advanced": false,
                "display_name": "Template",
                "dynamic": false,
                "fileTypes": [],
                "file_path": "",
                "info": "",
                "input_types": [
                  "Text"
                ],
                "list": false,
                "load_from_db": false,
                "multiline": false,
                "name": "template",
                "password": false,
                "placeholder": "",
                "required": false,
                "show": true,
                "title_case": false,
                "type": "prompt",
                "value": "Previous messages:\n{Context}\n\nUser: {UserMessage}\nAI: "
              }
            }
          },
          "type": "Prompt"
        },
        "dragging": false,
        "height": 513,
        "id": "Prompt-Gu53S",
        "position": {
          "x": 1890.2582485007167,
          "y": 753.3797365481901
        },
        "positionAbsolute": {
          "x": 1890.2582485007167,
          "y": 753.3797365481901
        },
        "selected": false,
        "type": "genericNode",
        "width": 384
      },
      {
        "data": {
          "id": "OpenAIModel-Wb2ko",
          "node": {
            "base_classes": [
              "str",
              "object",
              "Text"
            ],
            "beta": false,
            "custom_fields": {
              "input_value": null,
              "max_tokens": null,
              "model_kwargs": null,
              "model_name": null,
              "openai_api_base": null,
              "openai_api_key": null,
              "stream": null,
              "system_message": null,
              "temperature": null
            },
            "description": "Generates text using OpenAI LLMs.",
            "display_name": "OpenAI",
            "documentation": "",
            "field_formatters": {},
            "field_order": [
              "max_tokens",
              "model_kwargs",
              "model_name",
              "openai_api_base",
              "openai_api_key",
              "temperature",
              "input_value",
              "system_message",
              "stream"
            ],
            "frozen": false,
            "icon": "OpenAI",
            "output_types": [
              "Text"
            ],
            "template": {
              "_type": "CustomComponent",
              "code": {
                "advanced": true,
                "dynamic": true,
                "fileTypes": [],
                "file_path": "",
                "info": "",
                "list": false,
                "load_from_db": false,
                "multiline": true,
                "name": "code",
                "password": false,
                "placeholder": "",
                "required": true,
                "show": true,
                "title_case": false,
                "type": "code",
                "value": "from typing import Optional\n\nfrom langchain_openai import ChatOpenAI\nfrom pydantic.v1 import SecretStr\n\nfrom axiestudio.base.constants import STREAM_INFO_TEXT\nfrom axiestudio.base.models.model import LCModelComponent\nfrom axiestudio.base.models.openai_constants import MODEL_NAMES\nfrom axiestudio.field_typing import NestedDict, Text\n\n\nclass OpenAIModelComponent(LCModelComponent):\n    display_name = \"OpenAI\"\n    description = \"Generates text using OpenAI LLMs.\"\n    icon = \"OpenAI\"\n\n    field_order = [\n        \"max_tokens\",\n        \"model_kwargs\",\n        \"model_name\",\n        \"openai_api_base\",\n        \"openai_api_key\",\n        \"temperature\",\n        \"input_value\",\n        \"system_message\",\n        \"stream\",\n    ]\n\n    def build_config(self):\n        return {\n            \"input_value\": {\"display_name\": \"Input\", \"input_types\": [\"Text\", \"Record\", \"Prompt\"]},\n            \"max_tokens\": {\n                \"display_name\": \"Max Tokens\",\n                \"advanced\": True,\n                \"info\": \"The maximum number of tokens to generate. Set to 0 for unlimited tokens.\",\n            },\n            \"model_kwargs\": {\n                \"display_name\": \"Model Kwargs\",\n                \"advanced\": True,\n            },\n            \"model_name\": {\n                \"display_name\": \"Model Name\",\n                \"advanced\": False,\n                \"options\": MODEL_NAMES,\n            },\n            \"openai_api_base\": {\n                \"display_name\": \"OpenAI API Base\",\n                \"advanced\": True,\n                \"info\": (\n                    \"The base URL of the OpenAI API. Defaults to https://api.openai.com/v1.\\n\\n\"\n                    \"You can change this to use other APIs like JinaChat, LocalAI and Prem.\"\n                ),\n            },\n            \"openai_api_key\": {\n                \"display_name\": \"OpenAI API Key\",\n                \"info\": \"The OpenAI API Key to use for the OpenAI model.\",\n                \"advanced\": False,\n                \"password\": True,\n            },\n            \"temperature\": {\n                \"display_name\": \"Temperature\",\n                \"advanced\": False,\n                \"value\": 0.1,\n            },\n            \"stream\": {\n                \"display_name\": \"Stream\",\n                \"info\": STREAM_INFO_TEXT,\n                \"advanced\": True,\n            },\n            \"system_message\": {\n                \"display_name\": \"System Message\",\n                \"info\": \"System message to pass to the model.\",\n                \"advanced\": True,\n            },\n        }\n\n    def build(\n        self,\n        input_value: Text,\n        openai_api_key: str,\n        temperature: float = 0.1,\n        model_name: str = \"gpt-3.5-turbo\",\n        max_tokens: Optional[int] = 256,\n        model_kwargs: NestedDict = {},\n        openai_api_base: Optional[str] = None,\n        stream: bool = False,\n        system_message: Optional[str] = None,\n    ) -> Text:\n        if not openai_api_base:\n            openai_api_base = \"https://api.openai.com/v1\"\n        if openai_api_key:\n            api_key = SecretStr(openai_api_key)\n        else:\n            api_key = None\n\n        output = ChatOpenAI(\n            max_tokens=max_tokens or None,\n            model_kwargs=model_kwargs,\n            model=model_name,\n            base_url=openai_api_base,\n            api_key=api_key,\n            temperature=temperature,\n        )\n\n        return self.get_chat_result(output, stream, input_value, system_message)\n"
              },
              "input_value": {
                "advanced": false,
                "display_name": "Input",
                "dynamic": false,
                "fileTypes": [],
                "file_path": "",
                "info": "",
                "input_types": [
                  "Text",
                  "Record",
                  "Prompt"
                ],
                "list": false,
                "load_from_db": false,
                "multiline": false,
                "name": "input_value",
                "password": false,
                "placeholder": "",
                "required": true,
                "show": true,
                "title_case": false,
                "type": "str"
              },
              "max_tokens": {
                "advanced": true,
                "display_name": "Max Tokens",
                "dynamic": false,
                "fileTypes": [],
                "file_path": "",
                "info": "The maximum number of tokens to generate. Set to 0 for unlimited tokens.",
                "list": false,
                "load_from_db": false,
                "multiline": false,
                "name": "max_tokens",
                "password": false,
                "placeholder": "",
                "required": false,
                "show": true,
                "title_case": false,
                "type": "int",
                "value": 256
              },
              "model_kwargs": {
                "advanced": true,
                "display_name": "Model Kwargs",
                "dynamic": false,
                "fileTypes": [],
                "file_path": "",
                "info": "",
                "list": false,
                "load_from_db": false,
                "multiline": false,
                "name": "model_kwargs",
                "password": false,
                "placeholder": "",
                "required": false,
                "show": true,
                "title_case": false,
                "type": "NestedDict",
                "value": {}
              },
              "model_name": {
                "advanced": false,
                "display_name": "Model Name",
                "dynamic": false,
                "fileTypes": [],
                "file_path": "",
                "info": "",
                "input_types": [
                  "Text"
                ],
                "list": true,
                "load_from_db": false,
                "multiline": false,
                "name": "model_name",
                "options": [
                  "gpt-4o",
                  "gpt-4-turbo",
                  "gpt-4-turbo-preview",
                  "gpt-3.5-turbo",
                  "gpt-3.5-turbo-0125"
                ],
                "password": false,
                "placeholder": "",
                "required": false,
                "show": true,
                "title_case": false,
                "type": "str",
                "value": "gpt-3.5-turbo"
              },
              "openai_api_base": {
                "advanced": true,
                "display_name": "OpenAI API Base",
                "dynamic": false,
                "fileTypes": [],
                "file_path": "",
                "info": "The base URL of the OpenAI API. Defaults to https://api.openai.com/v1.\n\nYou can change this to use other APIs like JinaChat, LocalAI and Prem.",
                "input_types": [
                  "Text"
                ],
                "list": false,
                "load_from_db": false,
                "multiline": false,
                "name": "openai_api_base",
                "password": false,
                "placeholder": "",
                "required": false,
                "show": true,
                "title_case": false,
                "type": "str"
              },
              "openai_api_key": {
                "advanced": false,
                "display_name": "OpenAI API Key",
                "dynamic": false,
                "fileTypes": [],
                "file_path": "",
                "info": "The OpenAI API Key to use for the OpenAI model.",
                "input_types": [
                  "Text"
                ],
                "list": false,
                "load_from_db": false,
                "multiline": false,
                "name": "openai_api_key",
                "password": true,
                "placeholder": "",
                "required": true,
                "show": true,
                "title_case": false,
                "type": "str",
                "value": ""
              },
              "stream": {
                "advanced": true,
                "display_name": "Stream",
                "dynamic": false,
                "fileTypes": [],
                "file_path": "",
                "info": "Stream the response from the model. Streaming works only in Chat.",
                "list": false,
                "load_from_db": false,
                "multiline": false,
                "name": "stream",
                "password": false,
                "placeholder": "",
                "required": false,
                "show": true,
                "title_case": false,
                "type": "bool",
                "value": false
              },
              "system_message": {
                "advanced": true,
                "display_name": "System Message",
                "dynamic": false,
                "fileTypes": [],
                "file_path": "",
                "info": "System message to pass to the model.",
                "input_types": [
                  "Text"
                ],
                "list": false,
                "load_from_db": false,
                "multiline": false,
                "name": "system_message",
                "password": false,
                "placeholder": "",
                "required": false,
                "show": true,
                "title_case": false,
                "type": "str"
              },
              "temperature": {
                "advanced": false,
                "display_name": "Temperature",
                "dynamic": false,
                "fileTypes": [],
                "file_path": "",
                "info": "",
                "list": false,
                "load_from_db": false,
                "multiline": false,
                "name": "temperature",
                "password": false,
                "placeholder": "",
                "rangeSpec": {
                  "max": 1,
                  "min": -1,
                  "step": 0.1,
                  "step_type": "float"
                },
                "required": false,
                "show": true,
                "title_case": false,
                "type": "float",
                "value": "0.2"
              }
            }
          },
          "type": "OpenAIModel"
        },
        "dragging": false,
        "height": 571,
        "id": "OpenAIModel-Wb2ko",
        "position": {
          "x": 2561.5850334731617,
          "y": 553.2745131130916
        },
        "positionAbsolute": {
          "x": 2561.5850334731617,
          "y": 553.2745131130916
        },
        "selected": false,
        "type": "genericNode",
        "width": 384
      }
    ],
    "edges": [
      {
        "className": "",
        "data": {
          "sourceHandle": {
            "baseClasses": [
              "str",
              "object",
              "Text"
            ],
            "dataType": "OpenAIModel",
            "id": "OpenAIModel-Wb2ko"
          },
          "targetHandle": {
            "fieldName": "input_value",
            "id": "ChatOutput-S6qCc",
            "inputTypes": [
              "Text"
            ],
            "type": "str"
          }
        },
        "id": "reactflow__edge-OpenAIModel-Wb2ko{œbaseClassesœ:[œstrœ,œobjectœ,œTextœ],œdataTypeœ:œOpenAIModelœ,œidœ:œOpenAIModel-Wb2koœ}-ChatOutput-S6qCc{œfieldNameœ:œinput_valueœ,œidœ:œChatOutput-S6qCcœ,œinputTypesœ:[œTextœ],œtypeœ:œstrœ}",
        "source": "OpenAIModel-Wb2ko",
        "sourceHandle": "{œbaseClassesœ:[œstrœ,œobjectœ,œTextœ],œdataTypeœ:œOpenAIModelœ,œidœ:œOpenAIModel-Wb2koœ}",
        "style": {
          "stroke": "#555"
        },
        "target": "ChatOutput-S6qCc",
        "targetHandle": "{œfieldNameœ:œinput_valueœ,œidœ:œChatOutput-S6qCcœ,œinputTypesœ:[œTextœ],œtypeœ:œstrœ}"
      },
      {
        "className": "",
        "data": {
          "sourceHandle": {
            "baseClasses": [
              "object",
              "str",
              "Text"
            ],
            "dataType": "Prompt",
            "id": "Prompt-Gu53S"
          },
          "targetHandle": {
            "fieldName": "input_value",
            "id": "OpenAIModel-Wb2ko",
            "inputTypes": [
              "Text",
              "Record",
              "Prompt"
            ],
            "type": "str"
          }
        },
        "id": "reactflow__edge-Prompt-Gu53S{œbaseClassesœ:[œobjectœ,œstrœ,œTextœ],œdataTypeœ:œPromptœ,œidœ:œPrompt-Gu53Sœ}-OpenAIModel-Wb2ko{œfieldNameœ:œinput_valueœ,œidœ:œOpenAIModel-Wb2koœ,œinputTypesœ:[œTextœ,œRecordœ,œPromptœ],œtypeœ:œstrœ}",
        "source": "Prompt-Gu53S",
        "sourceHandle": "{œbaseClassesœ:[œobjectœ,œstrœ,œTextœ],œdataTypeœ:œPromptœ,œidœ:œPrompt-Gu53Sœ}",
        "target": "OpenAIModel-Wb2ko",
        "targetHandle": "{œfieldNameœ:œinput_valueœ,œidœ:œOpenAIModel-Wb2koœ,œinputTypesœ:[œTextœ,œRecordœ,œPromptœ],œtypeœ:œstrœ}"
      },
      {
        "className": "",
        "data": {
          "sourceHandle": {
            "baseClasses": [
              "Text",
              "object",
              "Record",
              "str"
            ],
            "dataType": "ChatInput",
            "id": "ChatInput-egtaY"
          },
          "targetHandle": {
            "fieldName": "UserMessage",
            "id": "Prompt-Gu53S",
            "inputTypes": [
              "Document",
              "Message",
              "Record",
              "Text"
            ],
            "type": "str"
          }
        },
        "id": "reactflow__edge-ChatInput-egtaY{œbaseClassesœ:[œTextœ,œobjectœ,œRecordœ,œstrœ],œdataTypeœ:œChatInputœ,œidœ:œChatInput-egtaYœ}-Prompt-Gu53S{œfieldNameœ:œUserMessageœ,œidœ:œPrompt-Gu53Sœ,œinputTypesœ:[œDocumentœ,œMessageœ,œRecordœ,œTextœ],œtypeœ:œstrœ}",
        "source": "ChatInput-egtaY",
        "sourceHandle": "{œbaseClassesœ:[œTextœ,œobjectœ,œRecordœ,œstrœ],œdataTypeœ:œChatInputœ,œidœ:œChatInput-egtaYœ}",
        "target": "Prompt-Gu53S",
        "targetHandle": "{œfieldNameœ:œUserMessageœ,œidœ:œPrompt-Gu53Sœ,œinputTypesœ:[œDocumentœ,œMessageœ,œRecordœ,œTextœ],œtypeœ:œstrœ}"
      },
      {
        "className": "",
        "data": {
          "sourceHandle": {
            "baseClasses": [
              "str",
              "Text",
              "object"
            ],
            "dataType": "MemoryComponent",
            "id": "MemoryComponent-hcDw8"
          },
          "targetHandle": {
            "fieldName": "Context",
            "id": "Prompt-Gu53S",
            "inputTypes": [
              "Document",
              "Message",
              "Record",
              "Text"
            ],
            "type": "str"
          }
        },
        "id": "reactflow__edge-MemoryComponent-hcDw8{œbaseClassesœ:[œstrœ,œTextœ,œobjectœ],œdataTypeœ:œMemoryComponentœ,œidœ:œMemoryComponent-hcDw8œ}-Prompt-Gu53S{œfieldNameœ:œContextœ,œidœ:œPrompt-Gu53Sœ,œinputTypesœ:[œDocumentœ,œMessageœ,œRecordœ,œTextœ],œtypeœ:œstrœ}",
        "source": "MemoryComponent-hcDw8",
        "sourceHandle": "{œbaseClassesœ:[œstrœ,œTextœ,œobjectœ],œdataTypeœ:œMemoryComponentœ,œidœ:œMemoryComponent-hcDw8œ}",
        "target": "Prompt-Gu53S",
        "targetHandle": "{œfieldNameœ:œContextœ,œidœ:œPrompt-Gu53Sœ,œinputTypesœ:[œDocumentœ,œMessageœ,œRecordœ,œTextœ],œtypeœ:œstrœ}"
      }
    ],
    "viewport": {
      "x": -1642.7663322630392,
      "y": -408.77857081083084,
      "zoom": 0.6991025838150547
    }
  },
  "metadata": {
    "ChatInput": {
      "count": 1
    },
    "ChatOutput": {
      "count": 1
    },
    "MemoryComponent": {
      "count": 1
    },
    "Prompt": {
      "count": 1
    },
    "OpenAIModel": {
      "count": 1
    },
    "total": 5
  },
  "original": {
    "id": "c954388d-1516-4f96-b907-cacff1922ac8",
    "name": "Memory Chatbot (1)",
    "description": "This project can be used as a starting point for building a Chat experience with user specific memory. You can set a different Session ID to start a new message history.",
    "is_component": false,
    "liked_by_count": "1",
    "downloads_count": "17",
    "metadata": {
      "ChatInput": {
        "count": 1
      },
      "ChatOutput": {
        "count": 1
      },
      "MemoryComponent": {
        "count": 1
      },
      "Prompt": {
        "count": 1
      },
      "OpenAIModel": {
        "count": 1
      },
      "total": 5
    },
    "last_tested_version": "1.0.0a61",
    "private": false,
    "data": {
      "nodes": [
        {
          "data": {
            "id": "ChatInput-egtaY",
            "node": {
              "base_classes": [
                "Text",
                "object",
                "Record",
                "str"
              ],
              "beta": false,
              "custom_fields": {
                "input_value": null,
                "return_record": null,
                "sender": null,
                "sender_name": null,
                "session_id": null
              },
              "description": "Get chat inputs from the Playground.",
              "display_name": "Chat Input",
              "documentation": "",
              "field_formatters": {},
              "field_order": [],
              "frozen": false,
              "icon": "ChatInput",
              "output_types": [
                "Message",
                "Text"
              ],
              "template": {
                "_type": "CustomComponent",
                "code": {
                  "advanced": true,
                  "dynamic": true,
                  "fileTypes": [],
                  "file_path": "",
                  "info": "",
                  "list": false,
                  "load_from_db": false,
                  "multiline": true,
                  "name": "code",
                  "password": false,
                  "placeholder": "",
                  "required": true,
                  "show": true,
                  "title_case": false,
                  "type": "code",
                  "value": "from typing import Optional\n\nfrom axiestudio.base.io.chat import ChatComponent\nfrom axiestudio.schema.message import Message\nfrom axiestudio.field_typing import Text\nfrom typing import Union\n\n\nclass ChatInput(ChatComponent):\n    display_name = \"Chat Input\"\n    description = \"Get chat inputs from the Playground.\"\n    icon = \"ChatInput\"\n\n    def build_config(self):\n        build_config = super().build_config()\n        build_config[\"input_value\"] = {\n            \"input_types\": [],\n            \"display_name\": \"Text\",\n            \"multiline\": True,\n        }\n        build_config[\"return_message\"] = {\n            \"display_name\": \"Return Record\",\n            \"advanced\": True,\n        }\n\n        return build_config\n\n    def build(\n        self,\n        sender: Optional[str] = \"User\",\n        sender_name: Optional[str] = \"User\",\n        input_value: Optional[str] = None,\n        files: Optional[list[str]] = None,\n        session_id: Optional[str] = None,\n        return_message: Optional[bool] = True,\n    ) -> Union[Message, Text]:\n        return super().build_with_record(\n            sender=sender,\n            sender_name=sender_name,\n            input_value=input_value,\n            files=files,\n            session_id=session_id,\n            return_message=return_message,\n        )\n"
                },
                "input_value": {
                  "advanced": false,
                  "display_name": "Text",
                  "dynamic": false,
                  "fileTypes": [],
                  "file_path": "",
                  "info": "",
                  "input_types": [],
                  "list": false,
                  "load_from_db": false,
                  "multiline": true,
                  "name": "input_value",
                  "password": false,
                  "placeholder": "",
                  "required": false,
                  "show": true,
                  "title_case": false,
                  "type": "str",
                  "value": "do you know his name?"
                },
                "sender": {
                  "advanced": true,
                  "display_name": "Sender Type",
                  "dynamic": false,
                  "fileTypes": [],
                  "file_path": "",
                  "info": "",
                  "input_types": [
                    "Text"
                  ],
                  "list": true,
                  "load_from_db": false,
                  "multiline": false,
                  "name": "sender",
                  "options": [
                    "Machine",
                    "User"
                  ],
                  "password": false,
                  "placeholder": "",
                  "required": false,
                  "show": true,
                  "title_case": false,
                  "type": "str",
                  "value": "User"
                },
                "sender_name": {
                  "advanced": false,
                  "display_name": "Sender Name",
                  "dynamic": false,
                  "fileTypes": [],
                  "file_path": "",
                  "info": "",
                  "input_types": [
                    "Text"
                  ],
                  "list": false,
                  "load_from_db": false,
                  "multiline": false,
                  "name": "sender_name",
                  "password": false,
                  "placeholder": "",
                  "required": false,
                  "show": true,
                  "title_case": false,
                  "type": "str",
                  "value": "User"
                },
                "session_id": {
                  "advanced": false,
                  "display_name": "Session ID",
                  "dynamic": false,
                  "fileTypes": [],
                  "file_path": "",
                  "info": "If provided, the message will be stored in the memory.",
                  "input_types": [
                    "Text"
                  ],
                  "list": false,
                  "load_from_db": false,
                  "multiline": false,
                  "name": "session_id",
                  "password": false,
                  "placeholder": "",
                  "required": false,
                  "show": true,
                  "title_case": false,
                  "type": "str",
                  "value": "MySessionID"
                }
              }
            },
            "type": "ChatInput"
          },
          "dragging": false,
          "height": 485,
          "id": "ChatInput-egtaY",
          "position": {
            "x": 1283.2700598313072,
            "y": 982.5953650473145
          },
          "positionAbsolute": {
            "x": 1283.2700598313072,
            "y": 982.5953650473145
          },
          "selected": false,
          "type": "genericNode",
          "width": 384
        },
        {
          "data": {
            "id": "ChatOutput-S6qCc",
            "node": {
              "base_classes": [
                "Text",
                "object",
                "Record",
                "str"
              ],
              "beta": false,
              "custom_fields": {
                "input_value": null,
                "return_record": null,
                "sender": null,
                "sender_name": null,
                "session_id": null
              },
              "description": "Display a chat message in the Playground.",
              "display_name": "Chat Output",
              "documentation": "",
              "field_formatters": {},
              "field_order": [],
              "frozen": false,
              "icon": "ChatOutput",
              "output_types": [
                "Message",
                "Text"
              ],
              "template": {
                "_type": "CustomComponent",
                "code": {
                  "advanced": true,
                  "dynamic": true,
                  "fileTypes": [],
                  "file_path": "",
                  "info": "",
                  "list": false,
                  "load_from_db": false,
                  "multiline": true,
                  "name": "code",
                  "password": false,
                  "placeholder": "",
                  "required": true,
                  "show": true,
                  "title_case": false,
                  "type": "code",
                  "value": "from typing import Optional, Union\n\nfrom axiestudio.base.io.chat import ChatComponent\nfrom axiestudio.field_typing import Text\nfrom axiestudio.schema.message import Message\n\n\nclass ChatOutput(ChatComponent):\n    display_name = \"Chat Output\"\n    description = \"Display a chat message in the Playground.\"\n    icon = \"ChatOutput\"\n\n    def build(\n        self,\n        sender: Optional[str] = \"Machine\",\n        sender_name: Optional[str] = \"AI\",\n        input_value: Optional[str] = None,\n        session_id: Optional[str] = None,\n        files: Optional[list[str]] = None,\n        return_message: Optional[bool] = False,\n    ) -> Union[Message, Text]:\n        return super().build_with_record(\n            sender=sender,\n            sender_name=sender_name,\n            input_value=input_value,\n            session_id=session_id,\n            files=files,\n            return_message=return_message,\n        )\n"
                },
                "input_value": {
                  "advanced": false,
                  "display_name": "Text",
                  "dynamic": false,
                  "fileTypes": [],
                  "file_path": "",
                  "info": "",
                  "input_types": [
                    "Text"
                  ],
                  "list": false,
                  "load_from_db": false,
                  "multiline": true,
                  "name": "input_value",
                  "password": false,
                  "placeholder": "",
                  "required": false,
                  "show": true,
                  "title_case": false,
                  "type": "str"
                },
                "sender": {
                  "advanced": true,
                  "display_name": "Sender Type",
                  "dynamic": false,
                  "fileTypes": [],
                  "file_path": "",
                  "info": "",
                  "input_types": [
                    "Text"
                  ],
                  "list": true,
                  "load_from_db": false,
                  "multiline": false,
                  "name": "sender",
                  "options": [
                    "Machine",
                    "User"
                  ],
                  "password": false,
                  "placeholder": "",
                  "required": false,
                  "show": true,
                  "title_case": false,
                  "type": "str",
                  "value": "Machine"
                },
                "sender_name": {
                  "advanced": false,
                  "display_name": "Sender Name",
                  "dynamic": false,
                  "fileTypes": [],
                  "file_path": "",
                  "info": "",
                  "input_types": [
                    "Text"
                  ],
                  "list": false,
                  "load_from_db": false,
                  "multiline": false,
                  "name": "sender_name",
                  "password": false,
                  "placeholder": "",
                  "required": false,
                  "show": true,
                  "title_case": false,
                  "type": "str",
                  "value": "AI"
                },
                "session_id": {
                  "advanced": false,
                  "display_name": "Session ID",
                  "dynamic": false,
                  "fileTypes": [],
                  "file_path": "",
                  "info": "If provided, the message will be stored in the memory.",
                  "input_types": [
                    "Text"
                  ],
                  "list": false,
                  "load_from_db": false,
                  "multiline": false,
                  "name": "session_id",
                  "password": false,
                  "placeholder": "",
                  "required": false,
                  "show": true,
                  "title_case": false,
                  "type": "str",
                  "value": "MySessionID"
                }
              }
            },
            "type": "ChatOutput"
          },
          "dragging": false,
          "height": 485,
          "id": "ChatOutput-S6qCc",
          "position": {
            "x": 3154.916355514023,
            "y": 851.051882666333
          },
          "positionAbsolute": {
            "x": 3154.916355514023,
            "y": 851.051882666333
          },
          "selected": false,
          "type": "genericNode",
          "width": 384
        },
        {
          "data": {
            "description": "Retrieves stored chat messages given a specific Session ID.",
            "display_name": "Chat Memory",
            "id": "MemoryComponent-hcDw8",
            "node": {
              "base_classes": [
                "str",
                "Text",
                "object"
              ],
              "beta": true,
              "custom_fields": {
                "n_messages": null,
                "order": null,
                "record_template": null,
                "sender": null,
                "sender_name": null,
                "session_id": null
              },
              "description": "Retrieves stored chat messages given a specific Session ID.",
              "display_name": "Chat Memory",
              "documentation": "",
              "field_formatters": {},
              "field_order": [],
              "frozen": false,
              "icon": "history",
              "output_types": [
                "Text"
              ],
              "template": {
                "_type": "CustomComponent",
                "code": {
                  "advanced": true,
                  "dynamic": true,
                  "fileTypes": [],
                  "file_path": "",
                  "info": "",
                  "list": false,
                  "load_from_db": false,
                  "multiline": true,
                  "name": "code",
                  "password": false,
                  "placeholder": "",
                  "required": true,
                  "show": true,
                  "title_case": false,
                  "type": "code",
                  "value": "from typing import Optional\n\nfrom axiestudio.base.memory.memory import BaseMemoryComponent\nfrom axiestudio.field_typing import Text\nfrom axiestudio.helpers.record import messages_to_text\nfrom axiestudio.memory import get_messages\nfrom axiestudio.schema.message import Message\n\n\nclass MemoryComponent(BaseMemoryComponent):\n    display_name = \"Chat Memory\"\n    description = \"Retrieves stored chat messages given a specific Session ID.\"\n    beta: bool = True\n    icon = \"history\"\n\n    def build_config(self):\n        return {\n            \"sender\": {\n                \"options\": [\"Machine\", \"User\", \"Machine and User\"],\n                \"display_name\": \"Sender Type\",\n            },\n            \"sender_name\": {\"display_name\": \"Sender Name\", \"advanced\": True},\n            \"n_messages\": {\n                \"display_name\": \"Number of Messages\",\n                \"info\": \"Number of messages to retrieve.\",\n            },\n            \"session_id\": {\n                \"display_name\": \"Session ID\",\n                \"info\": \"Session ID of the chat history.\",\n                \"input_types\": [\"Text\"],\n            },\n            \"order\": {\n                \"options\": [\"Ascending\", \"Descending\"],\n                \"display_name\": \"Order\",\n                \"info\": \"Order of the messages.\",\n                \"advanced\": True,\n            },\n            \"record_template\": {\n                \"display_name\": \"Record Template\",\n                \"multiline\": True,\n                \"info\": \"Template to convert Record to Text. If left empty, it will be dynamically set to the Record's text key.\",\n                \"advanced\": True,\n            },\n        }\n\n    def get_messages(self, **kwargs) -> list[Message]:\n        # Validate kwargs by checking if it contains the correct keys\n        if \"sender\" not in kwargs:\n            kwargs[\"sender\"] = None\n        if \"sender_name\" not in kwargs:\n            kwargs[\"sender_name\"] = None\n        if \"session_id\" not in kwargs:\n            kwargs[\"session_id\"] = None\n        if \"limit\" not in kwargs:\n            kwargs[\"limit\"] = 5\n        if \"order\" not in kwargs:\n            kwargs[\"order\"] = \"Descending\"\n\n        kwargs[\"order\"] = \"DESC\" if kwargs[\"order\"] == \"Descending\" else \"ASC\"\n        if kwargs[\"sender\"] == \"Machine and User\":\n            kwargs[\"sender\"] = None\n        return get_messages(**kwargs)\n\n    def build(\n        self,\n        sender: Optional[str] = \"Machine and User\",\n        sender_name: Optional[str] = None,\n        session_id: Optional[str] = None,\n        n_messages: int = 5,\n        order: Optional[str] = \"Descending\",\n        record_template: Optional[str] = \"{sender_name}: {text}\",\n    ) -> Text:\n        messages = self.get_messages(\n            sender=sender,\n            sender_name=sender_name,\n            session_id=session_id,\n            limit=n_messages,\n            order=order,\n        )\n        messages_str = messages_to_text(template=record_template or \"\", messages=messages)\n        self.status = messages_str\n        return messages_str\n"
                },
                "n_messages": {
                  "advanced": false,
                  "display_name": "Number of Messages",
                  "dynamic": false,
                  "fileTypes": [],
                  "file_path": "",
                  "info": "Number of messages to retrieve.",
                  "list": false,
                  "load_from_db": false,
                  "multiline": false,
                  "name": "n_messages",
                  "password": false,
                  "placeholder": "",
                  "required": false,
                  "show": true,
                  "title_case": false,
                  "type": "int",
                  "value": 5
                },
                "order": {
                  "advanced": true,
                  "display_name": "Order",
                  "dynamic": false,
                  "fileTypes": [],
                  "file_path": "",
                  "info": "Order of the messages.",
                  "input_types": [
                    "Text"
                  ],
                  "list": true,
                  "load_from_db": false,
                  "multiline": false,
                  "name": "order",
                  "options": [
                    "Ascending",
                    "Descending"
                  ],
                  "password": false,
                  "placeholder": "",
                  "required": false,
                  "show": true,
                  "title_case": false,
                  "type": "str",
                  "value": "Descending"
                },
                "record_template": {
                  "advanced": true,
                  "display_name": "Record Template",
                  "dynamic": false,
                  "fileTypes": [],
                  "file_path": "",
                  "info": "Template to convert Record to Text. If left empty, it will be dynamically set to the Record's text key.",
                  "input_types": [
                    "Text"
                  ],
                  "list": false,
                  "load_from_db": false,
                  "multiline": true,
                  "name": "record_template",
                  "password": false,
                  "placeholder": "",
                  "required": false,
                  "show": true,
                  "title_case": false,
                  "type": "str",
                  "value": "{sender_name}: {text}"
                },
                "sender": {
                  "advanced": false,
                  "display_name": "Sender Type",
                  "dynamic": false,
                  "fileTypes": [],
                  "file_path": "",
                  "info": "",
                  "input_types": [
                    "Text"
                  ],
                  "list": true,
                  "load_from_db": false,
                  "multiline": false,
                  "name": "sender",
                  "options": [
                    "Machine",
                    "User",
                    "Machine and User"
                  ],
                  "password": false,
                  "placeholder": "",
                  "required": false,
                  "show": true,
                  "title_case": false,
                  "type": "str",
                  "value": "Machine and User"
                },
                "sender_name": {
                  "advanced": true,
                  "display_name": "Sender Name",
                  "dynamic": false,
                  "fileTypes": [],
                  "file_path": "",
                  "info": "",
                  "input_types": [
                    "Text"
                  ],
                  "list": false,
                  "load_from_db": false,
                  "multiline": false,
                  "name": "sender_name",
                  "password": false,
                  "placeholder": "",
                  "required": false,
                  "show": true,
                  "title_case": false,
                  "type": "str"
                },
                "session_id": {
                  "advanced": false,
                  "display_name": "Session ID",
                  "dynamic": false,
                  "fileTypes": [],
                  "file_path": "",
                  "info": "Session ID of the chat history.",
                  "input_types": [
                    "Text"
                  ],
                  "list": false,
                  "load_from_db": false,
                  "multiline": false,
                  "name": "session_id",
                  "password": false,
                  "placeholder": "",
                  "required": false,
                  "show": true,
                  "title_case": false,
                  "type": "str",
                  "value": "MySessionID"
                }
              }
            },
            "type": "MemoryComponent"
          },
          "dragging": false,
          "height": 505,
          "id": "MemoryComponent-hcDw8",
          "position": {
            "x": 1289.9606870058817,
            "y": 442.16804561053766
          },
          "positionAbsolute": {
            "x": 1289.9606870058817,
            "y": 442.16804561053766
          },
          "selected": false,
          "type": "genericNode",
          "width": 384
        },
        {
          "data": {
            "description": "Create a prompt template with dynamic variables.",
            "display_name": "Prompt",
            "id": "Prompt-Gu53S",
            "node": {
              "base_classes": [
                "object",
                "str",
                "Text"
              ],
              "beta": false,
              "custom_fields": {
                "template": [
                  "Context",
                  "UserMessage"
                ]
              },
              "description": "Create a prompt template with dynamic variables.",
              "display_name": "Prompt",
              "documentation": "",
              "error": null,
              "field_formatters": {},
              "field_order": [],
              "frozen": false,
              "full_path": null,
              "icon": "prompts",
              "is_composition": null,
              "is_input": null,
              "is_output": null,
              "name": "",
              "output_types": [
                "Prompt"
              ],
              "template": {
                "Context": {
                  "advanced": false,
                  "display_name": "Context",
                  "dynamic": false,
                  "field_type": "str",
                  "fileTypes": [],
                  "file_path": "",
                  "info": "",
                  "input_types": [
                    "Document",
                    "Message",
                    "Record",
                    "Text"
                  ],
                  "list": false,
                  "load_from_db": false,
                  "multiline": true,
                  "name": "Context",
                  "password": false,
                  "placeholder": "",
                  "required": false,
                  "show": true,
                  "title_case": false,
                  "type": "str",
                  "value": ""
                },
                "UserMessage": {
                  "advanced": false,
                  "display_name": "UserMessage",
                  "dynamic": false,
                  "field_type": "str",
                  "fileTypes": [],
                  "file_path": "",
                  "info": "",
                  "input_types": [
                    "Document",
                    "Message",
                    "Record",
                    "Text"
                  ],
                  "list": false,
                  "load_from_db": false,
                  "multiline": true,
                  "name": "UserMessage",
                  "password": false,
                  "placeholder": "",
                  "required": false,
                  "show": true,
                  "title_case": false,
                  "type": "str",
                  "value": ""
                },
                "_type": "CustomComponent",
                "code": {
                  "advanced": true,
                  "dynamic": true,
                  "fileTypes": [],
                  "file_path": "",
                  "info": "",
                  "list": false,
                  "load_from_db": false,
                  "multiline": true,
                  "name": "code",
                  "password": false,
                  "placeholder": "",
                  "required": true,
                  "show": true,
                  "title_case": false,
                  "type": "code",
                  "value": "from axiestudio.custom import CustomComponent\nfrom axiestudio.field_typing import TemplateField\nfrom axiestudio.field_typing.prompt import Prompt\n\n\nclass PromptComponent(CustomComponent):\n    display_name: str = \"Prompt\"\n    description: str = \"Create a prompt template with dynamic variables.\"\n    icon = \"prompts\"\n\n    def build_config(self):\n        return {\n            \"template\": TemplateField(display_name=\"Template\"),\n            \"code\": TemplateField(advanced=True),\n        }\n\n    async def build(\n        self,\n        template: Prompt,\n        **kwargs,\n    ) -> Prompt:\n        prompt = await Prompt.from_template_and_variables(template, kwargs)\n        self.status = prompt.format_text()\n        return prompt\n"
                },
                "template": {
                  "advanced": false,
                  "display_name": "Template",
                  "dynamic": false,
                  "fileTypes": [],
                  "file_path": "",
                  "info": "",
                  "input_types": [
                    "Text"
                  ],
                  "list": false,
                  "load_from_db": false,
                  "multiline": false,
                  "name": "template",
                  "password": false,
                  "placeholder": "",
                  "required": false,
                  "show": true,
                  "title_case": false,
                  "type": "prompt",
                  "value": "Previous messages:\n{Context}\n\nUser: {UserMessage}\nAI: "
                }
              }
            },
            "type": "Prompt"
          },
          "dragging": false,
          "height": 513,
          "id": "Prompt-Gu53S",
          "position": {
            "x": 1890.2582485007167,
            "y": 753.3797365481901
          },
          "positionAbsolute": {
            "x": 1890.2582485007167,
            "y": 753.3797365481901
          },
          "selected": false,
          "type": "genericNode",
          "width": 384
        },
        {
          "data": {
            "id": "OpenAIModel-Wb2ko",
            "node": {
              "base_classes": [
                "str",
                "object",
                "Text"
              ],
              "beta": false,
              "custom_fields": {
                "input_value": null,
                "max_tokens": null,
                "model_kwargs": null,
                "model_name": null,
                "openai_api_base": null,
                "openai_api_key": null,
                "stream": null,
                "system_message": null,
                "temperature": null
              },
              "description": "Generates text using OpenAI LLMs.",
              "display_name": "OpenAI",
              "documentation": "",
              "field_formatters": {},
              "field_order": [
                "max_tokens",
                "model_kwargs",
                "model_name",
                "openai_api_base",
                "openai_api_key",
                "temperature",
                "input_value",
                "system_message",
                "stream"
              ],
              "frozen": false,
              "icon": "OpenAI",
              "output_types": [
                "Text"
              ],
              "template": {
                "_type": "CustomComponent",
                "code": {
                  "advanced": true,
                  "dynamic": true,
                  "fileTypes": [],
                  "file_path": "",
                  "info": "",
                  "list": false,
                  "load_from_db": false,
                  "multiline": true,
                  "name": "code",
                  "password": false,
                  "placeholder": "",
                  "required": true,
                  "show": true,
                  "title_case": false,
                  "type": "code",
                  "value": "from typing import Optional\n\nfrom langchain_openai import ChatOpenAI\nfrom pydantic.v1 import SecretStr\n\nfrom axiestudio.base.constants import STREAM_INFO_TEXT\nfrom axiestudio.base.models.model import LCModelComponent\nfrom axiestudio.base.models.openai_constants import MODEL_NAMES\nfrom axiestudio.field_typing import NestedDict, Text\n\n\nclass OpenAIModelComponent(LCModelComponent):\n    display_name = \"OpenAI\"\n    description = \"Generates text using OpenAI LLMs.\"\n    icon = \"OpenAI\"\n\n    field_order = [\n        \"max_tokens\",\n        \"model_kwargs\",\n        \"model_name\",\n        \"openai_api_base\",\n        \"openai_api_key\",\n        \"temperature\",\n        \"input_value\",\n        \"system_message\",\n        \"stream\",\n    ]\n\n    def build_config(self):\n        return {\n            \"input_value\": {\"display_name\": \"Input\", \"input_types\": [\"Text\", \"Record\", \"Prompt\"]},\n            \"max_tokens\": {\n                \"display_name\": \"Max Tokens\",\n                \"advanced\": True,\n                \"info\": \"The maximum number of tokens to generate. Set to 0 for unlimited tokens.\",\n            },\n            \"model_kwargs\": {\n                \"display_name\": \"Model Kwargs\",\n                \"advanced\": True,\n            },\n            \"model_name\": {\n                \"display_name\": \"Model Name\",\n                \"advanced\": False,\n                \"options\": MODEL_NAMES,\n            },\n            \"openai_api_base\": {\n                \"display_name\": \"OpenAI API Base\",\n                \"advanced\": True,\n                \"info\": (\n                    \"The base URL of the OpenAI API. Defaults to https://api.openai.com/v1.\\n\\n\"\n                    \"You can change this to use other APIs like JinaChat, LocalAI and Prem.\"\n                ),\n            },\n            \"openai_api_key\": {\n                \"display_name\": \"OpenAI API Key\",\n                \"info\": \"The OpenAI API Key to use for the OpenAI model.\",\n                \"advanced\": False,\n                \"password\": True,\n            },\n            \"temperature\": {\n                \"display_name\": \"Temperature\",\n                \"advanced\": False,\n                \"value\": 0.1,\n            },\n            \"stream\": {\n                \"display_name\": \"Stream\",\n                \"info\": STREAM_INFO_TEXT,\n                \"advanced\": True,\n            },\n            \"system_message\": {\n                \"display_name\": \"System Message\",\n                \"info\": \"System message to pass to the model.\",\n                \"advanced\": True,\n            },\n        }\n\n    def build(\n        self,\n        input_value: Text,\n        openai_api_key: str,\n        temperature: float = 0.1,\n        model_name: str = \"gpt-3.5-turbo\",\n        max_tokens: Optional[int] = 256,\n        model_kwargs: NestedDict = {},\n        openai_api_base: Optional[str] = None,\n        stream: bool = False,\n        system_message: Optional[str] = None,\n    ) -> Text:\n        if not openai_api_base:\n            openai_api_base = \"https://api.openai.com/v1\"\n        if openai_api_key:\n            api_key = SecretStr(openai_api_key)\n        else:\n            api_key = None\n\n        output = ChatOpenAI(\n            max_tokens=max_tokens or None,\n            model_kwargs=model_kwargs,\n            model=model_name,\n            base_url=openai_api_base,\n            api_key=api_key,\n            temperature=temperature,\n        )\n\n        return self.get_chat_result(output, stream, input_value, system_message)\n"
                },
                "input_value": {
                  "advanced": false,
                  "display_name": "Input",
                  "dynamic": false,
                  "fileTypes": [],
                  "file_path": "",
                  "info": "",
                  "input_types": [
                    "Text",
                    "Record",
                    "Prompt"
                  ],
                  "list": false,
                  "load_from_db": false,
                  "multiline": false,
                  "name": "input_value",
                  "password": false,
                  "placeholder": "",
                  "required": true,
                  "show": true,
                  "title_case": false,
                  "type": "str"
                },
                "max_tokens": {
                  "advanced": true,
                  "display_name": "Max Tokens",
                  "dynamic": false,
                  "fileTypes": [],
                  "file_path": "",
                  "info": "The maximum number of tokens to generate. Set to 0 for unlimited tokens.",
                  "list": false,
                  "load_from_db": false,
                  "multiline": false,
                  "name": "max_tokens",
                  "password": false,
                  "placeholder": "",
                  "required": false,
                  "show": true,
                  "title_case": false,
                  "type": "int",
                  "value": 256
                },
                "model_kwargs": {
                  "advanced": true,
                  "display_name": "Model Kwargs",
                  "dynamic": false,
                  "fileTypes": [],
                  "file_path": "",
                  "info": "",
                  "list": false,
                  "load_from_db": false,
                  "multiline": false,
                  "name": "model_kwargs",
                  "password": false,
                  "placeholder": "",
                  "required": false,
                  "show": true,
                  "title_case": false,
                  "type": "NestedDict",
                  "value": {}
                },
                "model_name": {
                  "advanced": false,
                  "display_name": "Model Name",
                  "dynamic": false,
                  "fileTypes": [],
                  "file_path": "",
                  "info": "",
                  "input_types": [
                    "Text"
                  ],
                  "list": true,
                  "load_from_db": false,
                  "multiline": false,
                  "name": "model_name",
                  "options": [
                    "gpt-4o",
                    "gpt-4-turbo",
                    "gpt-4-turbo-preview",
                    "gpt-3.5-turbo",
                    "gpt-3.5-turbo-0125"
                  ],
                  "password": false,
                  "placeholder": "",
                  "required": false,
                  "show": true,
                  "title_case": false,
                  "type": "str",
                  "value": "gpt-3.5-turbo"
                },
                "openai_api_base": {
                  "advanced": true,
                  "display_name": "OpenAI API Base",
                  "dynamic": false,
                  "fileTypes": [],
                  "file_path": "",
                  "info": "The base URL of the OpenAI API. Defaults to https://api.openai.com/v1.\n\nYou can change this to use other APIs like JinaChat, LocalAI and Prem.",
                  "input_types": [
                    "Text"
                  ],
                  "list": false,
                  "load_from_db": false,
                  "multiline": false,
                  "name": "openai_api_base",
                  "password": false,
                  "placeholder": "",
                  "required": false,
                  "show": true,
                  "title_case": false,
                  "type": "str"
                },
                "openai_api_key": {
                  "advanced": false,
                  "display_name": "OpenAI API Key",
                  "dynamic": false,
                  "fileTypes": [],
                  "file_path": "",
                  "info": "The OpenAI API Key to use for the OpenAI model.",
                  "input_types": [
                    "Text"
                  ],
                  "list": false,
                  "load_from_db": false,
                  "multiline": false,
                  "name": "openai_api_key",
                  "password": true,
                  "placeholder": "",
                  "required": true,
                  "show": true,
                  "title_case": false,
                  "type": "str",
                  "value": ""
                },
                "stream": {
                  "advanced": true,
                  "display_name": "Stream",
                  "dynamic": false,
                  "fileTypes": [],
                  "file_path": "",
                  "info": "Stream the response from the model. Streaming works only in Chat.",
                  "list": false,
                  "load_from_db": false,
                  "multiline": false,
                  "name": "stream",
                  "password": false,
                  "placeholder": "",
                  "required": false,
                  "show": true,
                  "title_case": false,
                  "type": "bool",
                  "value": false
                },
                "system_message": {
                  "advanced": true,
                  "display_name": "System Message",
                  "dynamic": false,
                  "fileTypes": [],
                  "file_path": "",
                  "info": "System message to pass to the model.",
                  "input_types": [
                    "Text"
                  ],
                  "list": false,
                  "load_from_db": false,
                  "multiline": false,
                  "name": "system_message",
                  "password": false,
                  "placeholder": "",
                  "required": false,
                  "show": true,
                  "title_case": false,
                  "type": "str"
                },
                "temperature": {
                  "advanced": false,
                  "display_name": "Temperature",
                  "dynamic": false,
                  "fileTypes": [],
                  "file_path": "",
                  "info": "",
                  "list": false,
                  "load_from_db": false,
                  "multiline": false,
                  "name": "temperature",
                  "password": false,
                  "placeholder": "",
                  "rangeSpec": {
                    "max": 1,
                    "min": -1,
                    "step": 0.1,
                    "step_type": "float"
                  },
                  "required": false,
                  "show": true,
                  "title_case": false,
                  "type": "float",
                  "value": "0.2"
                }
              }
            },
            "type": "OpenAIModel"
          },
          "dragging": false,
          "height": 571,
          "id": "OpenAIModel-Wb2ko",
          "position": {
            "x": 2561.5850334731617,
            "y": 553.2745131130916
          },
          "positionAbsolute": {
            "x": 2561.5850334731617,
            "y": 553.2745131130916
          },
          "selected": false,
          "type": "genericNode",
          "width": 384
        }
      ],
      "edges": [
        {
          "className": "",
          "data": {
            "sourceHandle": {
              "baseClasses": [
                "str",
                "object",
                "Text"
              ],
              "dataType": "OpenAIModel",
              "id": "OpenAIModel-Wb2ko"
            },
            "targetHandle": {
              "fieldName": "input_value",
              "id": "ChatOutput-S6qCc",
              "inputTypes": [
                "Text"
              ],
              "type": "str"
            }
          },
          "id": "reactflow__edge-OpenAIModel-Wb2ko{œbaseClassesœ:[œstrœ,œobjectœ,œTextœ],œdataTypeœ:œOpenAIModelœ,œidœ:œOpenAIModel-Wb2koœ}-ChatOutput-S6qCc{œfieldNameœ:œinput_valueœ,œidœ:œChatOutput-S6qCcœ,œinputTypesœ:[œTextœ],œtypeœ:œstrœ}",
          "source": "OpenAIModel-Wb2ko",
          "sourceHandle": "{œbaseClassesœ:[œstrœ,œobjectœ,œTextœ],œdataTypeœ:œOpenAIModelœ,œidœ:œOpenAIModel-Wb2koœ}",
          "style": {
            "stroke": "#555"
          },
          "target": "ChatOutput-S6qCc",
          "targetHandle": "{œfieldNameœ:œinput_valueœ,œidœ:œChatOutput-S6qCcœ,œinputTypesœ:[œTextœ],œtypeœ:œstrœ}"
        },
        {
          "className": "",
          "data": {
            "sourceHandle": {
              "baseClasses": [
                "object",
                "str",
                "Text"
              ],
              "dataType": "Prompt",
              "id": "Prompt-Gu53S"
            },
            "targetHandle": {
              "fieldName": "input_value",
              "id": "OpenAIModel-Wb2ko",
              "inputTypes": [
                "Text",
                "Record",
                "Prompt"
              ],
              "type": "str"
            }
          },
          "id": "reactflow__edge-Prompt-Gu53S{œbaseClassesœ:[œobjectœ,œstrœ,œTextœ],œdataTypeœ:œPromptœ,œidœ:œPrompt-Gu53Sœ}-OpenAIModel-Wb2ko{œfieldNameœ:œinput_valueœ,œidœ:œOpenAIModel-Wb2koœ,œinputTypesœ:[œTextœ,œRecordœ,œPromptœ],œtypeœ:œstrœ}",
          "source": "Prompt-Gu53S",
          "sourceHandle": "{œbaseClassesœ:[œobjectœ,œstrœ,œTextœ],œdataTypeœ:œPromptœ,œidœ:œPrompt-Gu53Sœ}",
          "target": "OpenAIModel-Wb2ko",
          "targetHandle": "{œfieldNameœ:œinput_valueœ,œidœ:œOpenAIModel-Wb2koœ,œinputTypesœ:[œTextœ,œRecordœ,œPromptœ],œtypeœ:œstrœ}"
        },
        {
          "className": "",
          "data": {
            "sourceHandle": {
              "baseClasses": [
                "Text",
                "object",
                "Record",
                "str"
              ],
              "dataType": "ChatInput",
              "id": "ChatInput-egtaY"
            },
            "targetHandle": {
              "fieldName": "UserMessage",
              "id": "Prompt-Gu53S",
              "inputTypes": [
                "Document",
                "Message",
                "Record",
                "Text"
              ],
              "type": "str"
            }
          },
          "id": "reactflow__edge-ChatInput-egtaY{œbaseClassesœ:[œTextœ,œobjectœ,œRecordœ,œstrœ],œdataTypeœ:œChatInputœ,œidœ:œChatInput-egtaYœ}-Prompt-Gu53S{œfieldNameœ:œUserMessageœ,œidœ:œPrompt-Gu53Sœ,œinputTypesœ:[œDocumentœ,œMessageœ,œRecordœ,œTextœ],œtypeœ:œstrœ}",
          "source": "ChatInput-egtaY",
          "sourceHandle": "{œbaseClassesœ:[œTextœ,œobjectœ,œRecordœ,œstrœ],œdataTypeœ:œChatInputœ,œidœ:œChatInput-egtaYœ}",
          "target": "Prompt-Gu53S",
          "targetHandle": "{œfieldNameœ:œUserMessageœ,œidœ:œPrompt-Gu53Sœ,œinputTypesœ:[œDocumentœ,œMessageœ,œRecordœ,œTextœ],œtypeœ:œstrœ}"
        },
        {
          "className": "",
          "data": {
            "sourceHandle": {
              "baseClasses": [
                "str",
                "Text",
                "object"
              ],
              "dataType": "MemoryComponent",
              "id": "MemoryComponent-hcDw8"
            },
            "targetHandle": {
              "fieldName": "Context",
              "id": "Prompt-Gu53S",
              "inputTypes": [
                "Document",
                "Message",
                "Record",
                "Text"
              ],
              "type": "str"
            }
          },
          "id": "reactflow__edge-MemoryComponent-hcDw8{œbaseClassesœ:[œstrœ,œTextœ,œobjectœ],œdataTypeœ:œMemoryComponentœ,œidœ:œMemoryComponent-hcDw8œ}-Prompt-Gu53S{œfieldNameœ:œContextœ,œidœ:œPrompt-Gu53Sœ,œinputTypesœ:[œDocumentœ,œMessageœ,œRecordœ,œTextœ],œtypeœ:œstrœ}",
          "source": "MemoryComponent-hcDw8",
          "sourceHandle": "{œbaseClassesœ:[œstrœ,œTextœ,œobjectœ],œdataTypeœ:œMemoryComponentœ,œidœ:œMemoryComponent-hcDw8œ}",
          "target": "Prompt-Gu53S",
          "targetHandle": "{œfieldNameœ:œContextœ,œidœ:œPrompt-Gu53Sœ,œinputTypesœ:[œDocumentœ,œMessageœ,œRecordœ,œTextœ],œtypeœ:œstrœ}"
        }
      ],
      "viewport": {
        "x": -1642.7663322630392,
        "y": -408.77857081083084,
        "zoom": 0.6991025838150547
      }
    },
    "date_created": "2024-06-18T09:32:47.748Z",
    "date_updated": "2024-06-18T09:32:47.783Z",
    "status": "Public",
    "sort": null,
    "user_updated": "ad1487c0-b813-4b19-b022-62070d4f4003",
    "user_created": {
      "username": "Gary",
      "first_name": "Ronggen",
      "last_name": "Liu",
      "id": "ad1487c0-b813-4b19-b022-62070d4f4003"
    },
    "tags": []
  },
  "conversion": {
    "converted_at": "2025-08-19T18:09:05.400Z",
    "converted_from": "langflow",
    "converted_to": "axiestudio",
    "conversions_made": 36,
    "converter_version": "1.0.0"
  }
}