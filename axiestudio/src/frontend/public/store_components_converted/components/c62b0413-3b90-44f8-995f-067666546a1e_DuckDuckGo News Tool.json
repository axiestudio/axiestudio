{
  "id": "c62b0413-3b90-44f8-995f-067666546a1e",
  "name": "DuckDuckGo News Tool",
  "description": "Call DuckDuckGo News API. (Converted from Langflow Store for AxieStudio compatibility)",
  "type": "COMPONENT",
  "is_component": true,
  "author": {
    "username": "ADRIEL",
    "first_name": "Adriel",
    "last_name": "Moraes",
    "id": "e91c63f0-2b81-4896-a293-f22d8720f207",
    "full_name": "Adriel Moraes"
  },
  "store_url": "https://www.langflow.store/store/component/c62b0413-3b90-44f8-995f-067666546a1e",
  "stats": {
    "downloads": 0,
    "likes": 0
  },
  "dates": {
    "created": "2024-08-11T21:17:42.471Z",
    "updated": "2024-08-11T21:24:28.719Z",
    "downloaded": "2025-08-19T17:50:06.426Z"
  },
  "tags": [],
  "technical": {
    "last_tested_version": "1.0.14",
    "private": false,
    "status": "Public"
  },
  "data": {
    "edges": [],
    "nodes": [
      {
        "data": {
          "type": "DuckDuckGoNewsAPI",
          "node": {
            "template": {
              "_type": "Component",
              "code": {
                "type": "code",
                "required": true,
                "placeholder": "",
                "list": false,
                "show": true,
                "multiline": true,
                "value": "from typing import Union\n\nfrom langchain_core.tools import Tool\n\nfrom axiestudio.base.langchain_utilities.model import LCToolComponent\nfrom axiestudio.inputs import SecretStrInput, MultilineInput, IntInput\nfrom axiestudio.schema import Data\n\n\nclass GoogleSearchAPIComponent(LCToolComponent):\n    display_name = \"DuckDuckGo News API\"\n    description = \"Call DuckDuckGo News API.\"\n    name = \"DuckDuckGoNewsAPI\"\n\n    inputs = [\n        MultilineInput(\n            name=\"input_value\",\n            display_name=\"Search\",\n        )\n    ]\n\n    def run_model(self) -> Union[Data, list[Data]]:\n        wrapper = self._build_wrapper()\n        results = wrapper.invoke(self.input_value)\n        #print(50 * \"#\")\n        #print(type(results))\n        #print(\"debug print\", results)\n        #print(50 * \"#\")\n        # Step 1: Split the string into individual entries based on \"], [\" which separates them\n        entries = results.strip(\"[]\").split(\"], [\")\n        \n        # Step 2: Convert each entry into a dictionary\n        results_converted = []\n        for entry in entries:\n            # Use regex to find all key-value pairs\n            pairs = re.findall(r'(\\w+):\\s(.*?)(?=, \\w+:|$)', entry)\n            \n            # Convert the list of pairs into a dictionary\n            entry_dict = {key: value.strip() for key, value in pairs}\n            \n            # Append the dictionary to the converted list\n            results_converted.append(entry_dict)\n        #print(50 * \"#\")\n        #print(type(results_converted))\n        #print(\"debug print\", results_converted)\n        #print(50 * \"#\")\n        data = [Data(data=result, text=\"{}, {}, {}\".format(result[\"title\"], result[\"snippet\"], result[\"link\"])) for result in results_converted]\n        self.status = data\n        return data\n\n    def build_tool(self) -> Tool:\n        wrapper = self._build_wrapper()\n        return Tool(\n            name=\"duckduckgo_news\",\n            description=\"DuckDuckGo for recent News.\",\n            func=wrapper.run,\n        )\n\n    def _build_wrapper(self):\n        try:\n            from langchain_community.tools import DuckDuckGoSearchResults  # type: ignore\n        except ImportError:\n            raise ImportError(\"Please install duckduckgo-search to use DuckDuckGoSearchResults.\")\n        return DuckDuckGoSearchResults(backend=\"news\")\n",
                "fileTypes": [],
                "file_path": "",
                "password": false,
                "name": "code",
                "advanced": true,
                "dynamic": true,
                "info": "",
                "load_from_db": false,
                "title_case": false
              },
              "input_value": {
                "trace_as_input": true,
                "multiline": true,
                "trace_as_metadata": true,
                "load_from_db": false,
                "list": false,
                "required": false,
                "placeholder": "",
                "show": true,
                "value": "nvidia",
                "name": "input_value",
                "display_name": "Search",
                "advanced": false,
                "input_types": [
                  "Message"
                ],
                "dynamic": false,
                "info": "",
                "title_case": false,
                "type": "str",
                "_input_type": "MultilineInput"
              }
            },
            "description": "Call DuckDuckGo News API.",
            "base_classes": [
              "Data",
              "Tool"
            ],
            "display_name": "DuckDuckGo News Tool",
            "documentation": "",
            "custom_fields": {},
            "output_types": [],
            "pinned": false,
            "conditional_paths": [],
            "frozen": false,
            "outputs": [
              {
                "types": [
                  "Data"
                ],
                "selected": "Data",
                "name": "api_run_model",
                "display_name": "Data",
                "method": "run_model",
                "value": "__UNDEFINED__",
                "cache": true
              },
              {
                "types": [
                  "Tool"
                ],
                "selected": "Tool",
                "name": "api_build_tool",
                "display_name": "Tool",
                "method": "build_tool",
                "value": "__UNDEFINED__",
                "cache": true
              }
            ],
            "field_order": [
              "input_value"
            ],
            "beta": false,
            "edited": true,
            "official": false
          },
          "id": "DuckDuckGoNewsAPI-lNlv2"
        },
        "id": "DuckDuckGoNewsAPI-lNlv2",
        "position": {
          "x": 0,
          "y": 0
        },
        "type": "genericNode"
      }
    ],
    "viewport": {
      "x": 1,
      "y": 1,
      "zoom": 1
    }
  },
  "metadata": {
    "DuckDuckGoNewsAPI": {
      "count": 1
    },
    "total": 1
  },
  "original": {
    "id": "c62b0413-3b90-44f8-995f-067666546a1e",
    "name": "DuckDuckGo News Tool",
    "description": "Call DuckDuckGo News API.",
    "is_component": true,
    "liked_by_count": "13",
    "downloads_count": "60",
    "metadata": {
      "DuckDuckGoNewsAPI": {
        "count": 1
      },
      "total": 1
    },
    "last_tested_version": "1.0.14",
    "private": false,
    "data": {
      "edges": [],
      "nodes": [
        {
          "data": {
            "type": "DuckDuckGoNewsAPI",
            "node": {
              "template": {
                "_type": "Component",
                "code": {
                  "type": "code",
                  "required": true,
                  "placeholder": "",
                  "list": false,
                  "show": true,
                  "multiline": true,
                  "value": "from typing import Union\n\nfrom langchain_core.tools import Tool\n\nfrom axiestudio.base.langchain_utilities.model import LCToolComponent\nfrom axiestudio.inputs import SecretStrInput, MultilineInput, IntInput\nfrom axiestudio.schema import Data\n\n\nclass GoogleSearchAPIComponent(LCToolComponent):\n    display_name = \"DuckDuckGo News API\"\n    description = \"Call DuckDuckGo News API.\"\n    name = \"DuckDuckGoNewsAPI\"\n\n    inputs = [\n        MultilineInput(\n            name=\"input_value\",\n            display_name=\"Search\",\n        )\n    ]\n\n    def run_model(self) -> Union[Data, list[Data]]:\n        wrapper = self._build_wrapper()\n        results = wrapper.invoke(self.input_value)\n        #print(50 * \"#\")\n        #print(type(results))\n        #print(\"debug print\", results)\n        #print(50 * \"#\")\n        # Step 1: Split the string into individual entries based on \"], [\" which separates them\n        entries = results.strip(\"[]\").split(\"], [\")\n        \n        # Step 2: Convert each entry into a dictionary\n        results_converted = []\n        for entry in entries:\n            # Use regex to find all key-value pairs\n            pairs = re.findall(r'(\\w+):\\s(.*?)(?=, \\w+:|$)', entry)\n            \n            # Convert the list of pairs into a dictionary\n            entry_dict = {key: value.strip() for key, value in pairs}\n            \n            # Append the dictionary to the converted list\n            results_converted.append(entry_dict)\n        #print(50 * \"#\")\n        #print(type(results_converted))\n        #print(\"debug print\", results_converted)\n        #print(50 * \"#\")\n        data = [Data(data=result, text=\"{}, {}, {}\".format(result[\"title\"], result[\"snippet\"], result[\"link\"])) for result in results_converted]\n        self.status = data\n        return data\n\n    def build_tool(self) -> Tool:\n        wrapper = self._build_wrapper()\n        return Tool(\n            name=\"duckduckgo_news\",\n            description=\"DuckDuckGo for recent News.\",\n            func=wrapper.run,\n        )\n\n    def _build_wrapper(self):\n        try:\n            from langchain_community.tools import DuckDuckGoSearchResults  # type: ignore\n        except ImportError:\n            raise ImportError(\"Please install duckduckgo-search to use DuckDuckGoSearchResults.\")\n        return DuckDuckGoSearchResults(backend=\"news\")\n",
                  "fileTypes": [],
                  "file_path": "",
                  "password": false,
                  "name": "code",
                  "advanced": true,
                  "dynamic": true,
                  "info": "",
                  "load_from_db": false,
                  "title_case": false
                },
                "input_value": {
                  "trace_as_input": true,
                  "multiline": true,
                  "trace_as_metadata": true,
                  "load_from_db": false,
                  "list": false,
                  "required": false,
                  "placeholder": "",
                  "show": true,
                  "value": "nvidia",
                  "name": "input_value",
                  "display_name": "Search",
                  "advanced": false,
                  "input_types": [
                    "Message"
                  ],
                  "dynamic": false,
                  "info": "",
                  "title_case": false,
                  "type": "str",
                  "_input_type": "MultilineInput"
                }
              },
              "description": "Call DuckDuckGo News API.",
              "base_classes": [
                "Data",
                "Tool"
              ],
              "display_name": "DuckDuckGo News Tool",
              "documentation": "",
              "custom_fields": {},
              "output_types": [],
              "pinned": false,
              "conditional_paths": [],
              "frozen": false,
              "outputs": [
                {
                  "types": [
                    "Data"
                  ],
                  "selected": "Data",
                  "name": "api_run_model",
                  "display_name": "Data",
                  "method": "run_model",
                  "value": "__UNDEFINED__",
                  "cache": true
                },
                {
                  "types": [
                    "Tool"
                  ],
                  "selected": "Tool",
                  "name": "api_build_tool",
                  "display_name": "Tool",
                  "method": "build_tool",
                  "value": "__UNDEFINED__",
                  "cache": true
                }
              ],
              "field_order": [
                "input_value"
              ],
              "beta": false,
              "edited": true,
              "official": false
            },
            "id": "DuckDuckGoNewsAPI-lNlv2"
          },
          "id": "DuckDuckGoNewsAPI-lNlv2",
          "position": {
            "x": 0,
            "y": 0
          },
          "type": "genericNode"
        }
      ],
      "viewport": {
        "x": 1,
        "y": 1,
        "zoom": 1
      }
    },
    "date_created": "2024-08-11T21:17:42.471Z",
    "date_updated": "2024-08-11T21:24:28.719Z",
    "status": "Public",
    "sort": null,
    "user_updated": "e91c63f0-2b81-4896-a293-f22d8720f207",
    "user_created": {
      "username": "ADRIEL",
      "first_name": "Adriel",
      "last_name": "Moraes",
      "id": "e91c63f0-2b81-4896-a293-f22d8720f207"
    },
    "tags": []
  },
  "conversion": {
    "converted_at": "2025-08-19T18:09:11.711Z",
    "converted_from": "langflow",
    "converted_to": "axiestudio",
    "conversions_made": 6,
    "converter_version": "1.0.0"
  }
}