{
  "id": "7a5d4c07-0ca0-45c3-9490-79130484c8c9",
  "name": "REST API Connector",
  "description": "Perform REST API requests with multiple URLs, custom headers, parameters, HTTP methods, and authentication. (Converted from Langflow Store for AxieStudio compatibility)",
  "type": "COMPONENT",
  "is_component": true,
  "author": {
    "username": "viniciossilva3",
    "first_name": "Vinicios",
    "last_name": "Batista Da Silva",
    "id": "6a3a88e2-cc6b-4f37-aebb-a747c97c7489",
    "full_name": "Vinicios Batista Da Silva"
  },
  "store_url": "https://www.langflow.store/store/component/7a5d4c07-0ca0-45c3-9490-79130484c8c9",
  "stats": {
    "downloads": 0,
    "likes": 0
  },
  "dates": {
    "created": "2024-08-19T13:14:50.911Z",
    "updated": "2024-09-13T19:42:26.483Z",
    "downloaded": "2025-08-19T17:50:05.933Z"
  },
  "tags": [],
  "technical": {
    "last_tested_version": "1.0.18",
    "private": false,
    "status": "Public"
  },
  "data": {
    "edges": [],
    "nodes": [
      {
        "data": {
          "type": "RESTAPIConnector",
          "node": {
            "template": {
              "_type": "Component",
              "api_key": {
                "load_from_db": false,
                "required": false,
                "placeholder": "",
                "show": true,
                "name": "api_key",
                "value": "",
                "display_name": "API Key",
                "advanced": false,
                "input_types": [
                  "Message"
                ],
                "dynamic": false,
                "info": "",
                "title_case": false,
                "password": true,
                "type": "str",
                "_input_type": "SecretStrInput"
              },
              "auth_type": {
                "trace_as_metadata": true,
                "options": [
                  "None",
                  "Basic",
                  "Bearer"
                ],
                "combobox": false,
                "required": false,
                "placeholder": "",
                "show": true,
                "name": "auth_type",
                "value": "None",
                "display_name": "Authentication Type",
                "advanced": false,
                "dynamic": false,
                "info": "Choose the type of authentication for the request.",
                "title_case": false,
                "type": "str",
                "_input_type": "DropdownInput"
              },
              "body": {
                "trace_as_input": true,
                "trace_as_metadata": true,
                "list": false,
                "required": false,
                "placeholder": "",
                "show": true,
                "name": "body",
                "value": {},
                "display_name": "Body Parameters",
                "advanced": false,
                "input_types": [
                  "Data"
                ],
                "dynamic": false,
                "info": "Body parameters for POST, PUT, PATCH requests.",
                "title_case": false,
                "type": "NestedDict",
                "_input_type": "NestedDictInput"
              },
              "code": {
                "type": "code",
                "required": true,
                "placeholder": "",
                "list": false,
                "show": true,
                "multiline": true,
                "value": "import json\nfrom typing import Any, Dict, List, Optional\nfrom urllib.parse import parse_qsl, urlencode, urlparse, urlunparse\n\nimport requests\nfrom loguru import logger\nfrom axiestudio.custom import Component\nfrom axiestudio.io import DataInput, DropdownInput, IntInput, MessageTextInput, MultilineInput, NestedDictInput, Output, SecretStrInput, StrInput\nfrom axiestudio.schema import Data\nfrom axiestudio.schema.dotdict import dotdict\n\nclass RESTAPIConnector(Component):\n    display_name = \"REST API Connector\"\n    description = (\n        \"This component enables making advanced REST API requests to one or more URLs. \"\n        \"You can configure headers, body, and query parameters dynamically and externally, as well as manage \"\n        \"timeouts and choose from various HTTP methods. Additionally, you can parse a cURL command \"\n        \"to auto-fill these fields.\"\n    )\n    icon = \"Globe\"\n    name = \"RESTAPIConnector\"\n\n    inputs = [\n        MessageTextInput(\n            name=\"urls\",\n            display_name=\"URLs\",\n            is_list=True,\n            info=\"Enter one or more URLs, separated by commas.\",\n        ),\n        DropdownInput(\n            name=\"method\",\n            display_name=\"HTTP Method\",\n            options=[\"GET\", \"POST\", \"PUT\", \"PATCH\", \"DELETE\"],\n            value=\"GET\",\n            info=\"Select the HTTP method for the request.\",\n        ),\n        IntInput(\n            name=\"timeout\",\n            display_name=\"Timeout (seconds)\",\n            value=5,\n            info=\"Specify the timeout duration for the request.\",\n        ),\n        SecretStrInput(\n            name=\"api_key\",\n            display_name=\"API Key\",\n            value=\"None\",\n            advanced=True,\n        ),\n        DropdownInput(\n            name=\"auth_type\",\n            display_name=\"Authentication Type\",\n            options=[\"None\", \"Basic\", \"Bearer\"],\n            value=\"None\",\n            advanced=True,\n            info=\"Choose the type of authentication for the request.\",\n        ),\n        StrInput(\n            name=\"username\",\n            display_name=\"Username (for Basic Auth)\",\n            advanced=True,\n            value=\"\",\n        ),\n        SecretStrInput(\n            name=\"password\",\n            display_name=\"Password (for Basic Auth)\",\n            advanced=True,\n            value=\"None\",\n        ),\n        NestedDictInput(\n            name=\"headers\",\n            display_name=\"Custom Headers\",\n            info=\"Headers to include with the request.\",\n            input_types=[\"Data\"],\n            advanced=True,\n        ),\n        NestedDictInput(\n            name=\"body\",\n            display_name=\"Body Parameters\",\n            info=\"Body parameters for POST, PUT, PATCH requests.\",\n            input_types=[\"Data\"],\n            advanced=True,\n        ),\n        NestedDictInput(\n            name=\"query_params\",\n            display_name=\"Query Parameters\",\n            info=\"Query parameters to append to the URL.\",\n            input_types=[\"Data\"],\n            advanced=True,\n        ),\n        MultilineInput(\n            name=\"curl\",\n            display_name=\"cURL Command\",\n            info=\"Paste a cURL command to auto-fill fields.\",\n            advanced=True,\n        ),\n    ]\n\n    outputs = [\n        Output(display_name=\"Response Data\", name=\"data\", method=\"make_requests\"),\n    ]\n\n    def parse_curl(self, curl: str, build_config: dotdict) -> dotdict:\n        try:\n            # Parse cURL command into components\n            parsed = parse_context(curl)\n            build_config[\"urls\"][\"value\"] = [parsed.url]\n            build_config[\"method\"][\"value\"] = parsed.method.upper()\n            build_config[\"headers\"][\"value\"] = dict(parsed.headers)\n\n            if parsed.data:\n                try:\n                    json_data = json.loads(parsed.data)\n                    build_config[\"body\"][\"value\"] = json_data\n                except json.JSONDecodeError as e:\n                    logger.error(f\"Error decoding JSON data: {e}\")\n            else:\n                build_config[\"body\"][\"value\"] = {}\n        except Exception as exc:\n            logger.error(f\"Error parsing cURL: {exc}\")\n            raise ValueError(f\"Error parsing cURL: {exc}\")\n        return build_config\n\n    def update_build_config(self, build_config: dotdict, field_value: Any, field_name: Optional[str] = None):\n        if field_name == \"curl\" and field_value:\n            build_config = self.parse_curl(field_value, build_config)\n        return build_config\n\n    def make_request(\n        self,\n        method: str,\n        url: str,\n        headers: Optional[dict] = None,\n        body: Optional[dict] = None,\n        timeout: int = 5,\n        auth: Optional[Any] = None,  # Adding auth parameter\n    ) -> Data:\n        method = method.upper()\n        if method not in [\"GET\", \"POST\", \"PATCH\", \"PUT\", \"DELETE\"]:\n            raise ValueError(f\"Unsupported method: {method}\")\n\n        try:\n            response = requests.request(\n                method, url, headers=headers, json=body, timeout=timeout, auth=auth\n            )\n            try:\n                result = response.json()\n            except json.JSONDecodeError:\n                result = response.text\n            return Data(\n                data={\n                    \"source\": url,\n                    \"headers\": headers,\n                    \"status_code\": response.status_code,\n                    \"result\": result,\n                },\n            )\n        except requests.exceptions.Timeout:\n            return Data(\n                data={\n                    \"source\": url,\n                    \"headers\": headers,\n                    \"status_code\": 408,\n                    \"error\": \"Request timed out\",\n                },\n            )\n        except requests.exceptions.RequestException as exc:\n            return Data(\n                data={\n                    \"source\": url,\n                    \"headers\": headers,\n                    \"status_code\": 500,\n                    \"error\": str(exc),\n                },\n            )\n\n    def add_query_params(self, url: str, params: dict) -> str:\n        url_parts = list(urlparse(url))\n        query = dict(parse_qsl(url_parts[4]))\n        query.update(params)\n        url_parts[4] = urlencode(query)\n        return urlunparse(url_parts)\n\n    def make_requests(self) -> List[Data]:\n        method = self.method or \"GET\"\n        urls = [url.strip() for url in self.urls if url.strip()] if self.urls else []\n        headers = self.headers.data if isinstance(self.headers, Data) else self.headers or {}\n        body = self.body.data if isinstance(self.body, Data) else self.body or {}\n        timeout = self.timeout or 5\n        query_params = self.query_params.data if isinstance(self.query_params, Data) else {}\n        auth = None\n        # Handling Authentication\n        if self.auth_type == \"Bearer\" and self.api_key:\n            headers[\"Authorization\"] = f\"Bearer {self.api_key}\"\n        elif self.auth_type == \"Basic\" and self.username and self.password:\n            from requests.auth import HTTPBasicAuth\n            auth = HTTPBasicAuth(self.username, self.password)\n        else:\n            auth = None\n\n        bodies = [body] * len(urls)\n        urls = [self.add_query_params(url, query_params) for url in urls]\n\n        if not urls:\n            logger.warning(\"No URLs provided; returning empty result set.\")\n            return []\n\n        results = [\n            self.make_request(method, url, headers, rec, timeout, auth=auth) for url, rec in zip(urls, bodies)\n        ]\n        self.status = results\n        return results",
                "fileTypes": [],
                "file_path": "",
                "password": false,
                "name": "code",
                "advanced": true,
                "dynamic": true,
                "info": "",
                "load_from_db": false,
                "title_case": false
              },
              "curl": {
                "trace_as_input": true,
                "multiline": true,
                "trace_as_metadata": true,
                "load_from_db": false,
                "list": false,
                "required": false,
                "placeholder": "",
                "show": true,
                "name": "curl",
                "value": "",
                "display_name": "cURL Command",
                "advanced": true,
                "input_types": [
                  "Message"
                ],
                "dynamic": false,
                "info": "Paste a cURL command to auto-fill fields.",
                "title_case": false,
                "type": "str",
                "_input_type": "MultilineInput"
              },
              "headers": {
                "trace_as_input": true,
                "trace_as_metadata": true,
                "list": false,
                "required": false,
                "placeholder": "",
                "show": true,
                "name": "headers",
                "value": {},
                "display_name": "Custom Headers",
                "advanced": false,
                "input_types": [
                  "Data"
                ],
                "dynamic": false,
                "info": "Headers to include with the request.",
                "title_case": false,
                "type": "NestedDict",
                "_input_type": "NestedDictInput"
              },
              "method": {
                "trace_as_metadata": true,
                "options": [
                  "GET",
                  "POST",
                  "PUT",
                  "PATCH",
                  "DELETE"
                ],
                "combobox": false,
                "required": false,
                "placeholder": "",
                "show": true,
                "name": "method",
                "value": "GET",
                "display_name": "HTTP Method",
                "advanced": false,
                "dynamic": false,
                "info": "Select the HTTP method for the request.",
                "title_case": false,
                "type": "str",
                "_input_type": "DropdownInput"
              },
              "password": {
                "load_from_db": false,
                "required": false,
                "placeholder": "",
                "show": true,
                "name": "password",
                "value": "",
                "display_name": "Password (for Basic Auth)",
                "advanced": false,
                "input_types": [
                  "Message"
                ],
                "dynamic": false,
                "info": "",
                "title_case": false,
                "password": true,
                "type": "str",
                "_input_type": "SecretStrInput"
              },
              "query_params": {
                "trace_as_input": true,
                "trace_as_metadata": true,
                "list": false,
                "required": false,
                "placeholder": "",
                "show": true,
                "name": "query_params",
                "value": {},
                "display_name": "Query Parameters",
                "advanced": false,
                "input_types": [
                  "Data"
                ],
                "dynamic": false,
                "info": "Query parameters to append to the URL.",
                "title_case": false,
                "type": "NestedDict",
                "_input_type": "NestedDictInput"
              },
              "timeout": {
                "trace_as_metadata": true,
                "list": false,
                "required": false,
                "placeholder": "",
                "show": true,
                "name": "timeout",
                "value": 5,
                "display_name": "Timeout (seconds)",
                "advanced": false,
                "dynamic": false,
                "info": "Specify the timeout duration for the request.",
                "title_case": false,
                "type": "int",
                "_input_type": "IntInput"
              },
              "urls": {
                "trace_as_input": true,
                "trace_as_metadata": true,
                "load_from_db": false,
                "list": true,
                "required": false,
                "placeholder": "",
                "show": true,
                "name": "urls",
                "value": [
                  "https://echo.hoppscotch.io",
                  "https://httpbin.org/get"
                ],
                "display_name": "URLs",
                "advanced": false,
                "input_types": [
                  "Message"
                ],
                "dynamic": false,
                "info": "Enter one or more URLs, separated by commas.",
                "title_case": false,
                "type": "str",
                "_input_type": "MessageTextInput"
              },
              "username": {
                "trace_as_metadata": true,
                "load_from_db": false,
                "list": false,
                "required": false,
                "placeholder": "",
                "show": true,
                "name": "username",
                "value": "",
                "display_name": "Username (for Basic Auth)",
                "advanced": false,
                "dynamic": false,
                "info": "",
                "title_case": false,
                "type": "str",
                "_input_type": "StrInput"
              }
            },
            "description": "Perform REST API requests with multiple URLs, custom headers, parameters, HTTP methods, and authentication.",
            "icon": "Globe",
            "base_classes": [
              "Data"
            ],
            "display_name": "REST API Connector",
            "documentation": "",
            "custom_fields": {},
            "output_types": [],
            "pinned": false,
            "conditional_paths": [],
            "frozen": false,
            "outputs": [
              {
                "types": [
                  "Data"
                ],
                "selected": "Data",
                "name": "data",
                "display_name": "Response Data",
                "method": "make_requests",
                "value": "__UNDEFINED__",
                "cache": true
              }
            ],
            "field_order": [
              "urls",
              "method",
              "timeout",
              "api_key",
              "auth_type",
              "username",
              "password",
              "headers",
              "body",
              "query_params",
              "curl"
            ],
            "beta": false,
            "edited": true,
            "lf_version": "1.0.18",
            "official": false
          },
          "id": "RESTAPIConnector-hYOew"
        },
        "id": "RESTAPIConnector-hYOew",
        "position": {
          "x": 0,
          "y": 0
        },
        "type": "genericNode"
      }
    ],
    "viewport": {
      "x": 1,
      "y": 1,
      "zoom": 1
    }
  },
  "metadata": {
    "RESTAPIConnector": {
      "count": 1
    },
    "total": 1
  },
  "original": {
    "id": "7a5d4c07-0ca0-45c3-9490-79130484c8c9",
    "name": "REST API Connector",
    "description": "Perform REST API requests with multiple URLs, custom headers, parameters, HTTP methods, and authentication.",
    "is_component": true,
    "liked_by_count": "37",
    "downloads_count": "401",
    "metadata": {
      "RESTAPIConnector": {
        "count": 1
      },
      "total": 1
    },
    "last_tested_version": "1.0.18",
    "private": false,
    "data": {
      "edges": [],
      "nodes": [
        {
          "data": {
            "type": "RESTAPIConnector",
            "node": {
              "template": {
                "_type": "Component",
                "api_key": {
                  "load_from_db": false,
                  "required": false,
                  "placeholder": "",
                  "show": true,
                  "name": "api_key",
                  "value": "",
                  "display_name": "API Key",
                  "advanced": false,
                  "input_types": [
                    "Message"
                  ],
                  "dynamic": false,
                  "info": "",
                  "title_case": false,
                  "password": true,
                  "type": "str",
                  "_input_type": "SecretStrInput"
                },
                "auth_type": {
                  "trace_as_metadata": true,
                  "options": [
                    "None",
                    "Basic",
                    "Bearer"
                  ],
                  "combobox": false,
                  "required": false,
                  "placeholder": "",
                  "show": true,
                  "name": "auth_type",
                  "value": "None",
                  "display_name": "Authentication Type",
                  "advanced": false,
                  "dynamic": false,
                  "info": "Choose the type of authentication for the request.",
                  "title_case": false,
                  "type": "str",
                  "_input_type": "DropdownInput"
                },
                "body": {
                  "trace_as_input": true,
                  "trace_as_metadata": true,
                  "list": false,
                  "required": false,
                  "placeholder": "",
                  "show": true,
                  "name": "body",
                  "value": {},
                  "display_name": "Body Parameters",
                  "advanced": false,
                  "input_types": [
                    "Data"
                  ],
                  "dynamic": false,
                  "info": "Body parameters for POST, PUT, PATCH requests.",
                  "title_case": false,
                  "type": "NestedDict",
                  "_input_type": "NestedDictInput"
                },
                "code": {
                  "type": "code",
                  "required": true,
                  "placeholder": "",
                  "list": false,
                  "show": true,
                  "multiline": true,
                  "value": "import json\nfrom typing import Any, Dict, List, Optional\nfrom urllib.parse import parse_qsl, urlencode, urlparse, urlunparse\n\nimport requests\nfrom loguru import logger\nfrom axiestudio.custom import Component\nfrom axiestudio.io import DataInput, DropdownInput, IntInput, MessageTextInput, MultilineInput, NestedDictInput, Output, SecretStrInput, StrInput\nfrom axiestudio.schema import Data\nfrom axiestudio.schema.dotdict import dotdict\n\nclass RESTAPIConnector(Component):\n    display_name = \"REST API Connector\"\n    description = (\n        \"This component enables making advanced REST API requests to one or more URLs. \"\n        \"You can configure headers, body, and query parameters dynamically and externally, as well as manage \"\n        \"timeouts and choose from various HTTP methods. Additionally, you can parse a cURL command \"\n        \"to auto-fill these fields.\"\n    )\n    icon = \"Globe\"\n    name = \"RESTAPIConnector\"\n\n    inputs = [\n        MessageTextInput(\n            name=\"urls\",\n            display_name=\"URLs\",\n            is_list=True,\n            info=\"Enter one or more URLs, separated by commas.\",\n        ),\n        DropdownInput(\n            name=\"method\",\n            display_name=\"HTTP Method\",\n            options=[\"GET\", \"POST\", \"PUT\", \"PATCH\", \"DELETE\"],\n            value=\"GET\",\n            info=\"Select the HTTP method for the request.\",\n        ),\n        IntInput(\n            name=\"timeout\",\n            display_name=\"Timeout (seconds)\",\n            value=5,\n            info=\"Specify the timeout duration for the request.\",\n        ),\n        SecretStrInput(\n            name=\"api_key\",\n            display_name=\"API Key\",\n            value=\"None\",\n            advanced=True,\n        ),\n        DropdownInput(\n            name=\"auth_type\",\n            display_name=\"Authentication Type\",\n            options=[\"None\", \"Basic\", \"Bearer\"],\n            value=\"None\",\n            advanced=True,\n            info=\"Choose the type of authentication for the request.\",\n        ),\n        StrInput(\n            name=\"username\",\n            display_name=\"Username (for Basic Auth)\",\n            advanced=True,\n            value=\"\",\n        ),\n        SecretStrInput(\n            name=\"password\",\n            display_name=\"Password (for Basic Auth)\",\n            advanced=True,\n            value=\"None\",\n        ),\n        NestedDictInput(\n            name=\"headers\",\n            display_name=\"Custom Headers\",\n            info=\"Headers to include with the request.\",\n            input_types=[\"Data\"],\n            advanced=True,\n        ),\n        NestedDictInput(\n            name=\"body\",\n            display_name=\"Body Parameters\",\n            info=\"Body parameters for POST, PUT, PATCH requests.\",\n            input_types=[\"Data\"],\n            advanced=True,\n        ),\n        NestedDictInput(\n            name=\"query_params\",\n            display_name=\"Query Parameters\",\n            info=\"Query parameters to append to the URL.\",\n            input_types=[\"Data\"],\n            advanced=True,\n        ),\n        MultilineInput(\n            name=\"curl\",\n            display_name=\"cURL Command\",\n            info=\"Paste a cURL command to auto-fill fields.\",\n            advanced=True,\n        ),\n    ]\n\n    outputs = [\n        Output(display_name=\"Response Data\", name=\"data\", method=\"make_requests\"),\n    ]\n\n    def parse_curl(self, curl: str, build_config: dotdict) -> dotdict:\n        try:\n            # Parse cURL command into components\n            parsed = parse_context(curl)\n            build_config[\"urls\"][\"value\"] = [parsed.url]\n            build_config[\"method\"][\"value\"] = parsed.method.upper()\n            build_config[\"headers\"][\"value\"] = dict(parsed.headers)\n\n            if parsed.data:\n                try:\n                    json_data = json.loads(parsed.data)\n                    build_config[\"body\"][\"value\"] = json_data\n                except json.JSONDecodeError as e:\n                    logger.error(f\"Error decoding JSON data: {e}\")\n            else:\n                build_config[\"body\"][\"value\"] = {}\n        except Exception as exc:\n            logger.error(f\"Error parsing cURL: {exc}\")\n            raise ValueError(f\"Error parsing cURL: {exc}\")\n        return build_config\n\n    def update_build_config(self, build_config: dotdict, field_value: Any, field_name: Optional[str] = None):\n        if field_name == \"curl\" and field_value:\n            build_config = self.parse_curl(field_value, build_config)\n        return build_config\n\n    def make_request(\n        self,\n        method: str,\n        url: str,\n        headers: Optional[dict] = None,\n        body: Optional[dict] = None,\n        timeout: int = 5,\n        auth: Optional[Any] = None,  # Adding auth parameter\n    ) -> Data:\n        method = method.upper()\n        if method not in [\"GET\", \"POST\", \"PATCH\", \"PUT\", \"DELETE\"]:\n            raise ValueError(f\"Unsupported method: {method}\")\n\n        try:\n            response = requests.request(\n                method, url, headers=headers, json=body, timeout=timeout, auth=auth\n            )\n            try:\n                result = response.json()\n            except json.JSONDecodeError:\n                result = response.text\n            return Data(\n                data={\n                    \"source\": url,\n                    \"headers\": headers,\n                    \"status_code\": response.status_code,\n                    \"result\": result,\n                },\n            )\n        except requests.exceptions.Timeout:\n            return Data(\n                data={\n                    \"source\": url,\n                    \"headers\": headers,\n                    \"status_code\": 408,\n                    \"error\": \"Request timed out\",\n                },\n            )\n        except requests.exceptions.RequestException as exc:\n            return Data(\n                data={\n                    \"source\": url,\n                    \"headers\": headers,\n                    \"status_code\": 500,\n                    \"error\": str(exc),\n                },\n            )\n\n    def add_query_params(self, url: str, params: dict) -> str:\n        url_parts = list(urlparse(url))\n        query = dict(parse_qsl(url_parts[4]))\n        query.update(params)\n        url_parts[4] = urlencode(query)\n        return urlunparse(url_parts)\n\n    def make_requests(self) -> List[Data]:\n        method = self.method or \"GET\"\n        urls = [url.strip() for url in self.urls if url.strip()] if self.urls else []\n        headers = self.headers.data if isinstance(self.headers, Data) else self.headers or {}\n        body = self.body.data if isinstance(self.body, Data) else self.body or {}\n        timeout = self.timeout or 5\n        query_params = self.query_params.data if isinstance(self.query_params, Data) else {}\n        auth = None\n        # Handling Authentication\n        if self.auth_type == \"Bearer\" and self.api_key:\n            headers[\"Authorization\"] = f\"Bearer {self.api_key}\"\n        elif self.auth_type == \"Basic\" and self.username and self.password:\n            from requests.auth import HTTPBasicAuth\n            auth = HTTPBasicAuth(self.username, self.password)\n        else:\n            auth = None\n\n        bodies = [body] * len(urls)\n        urls = [self.add_query_params(url, query_params) for url in urls]\n\n        if not urls:\n            logger.warning(\"No URLs provided; returning empty result set.\")\n            return []\n\n        results = [\n            self.make_request(method, url, headers, rec, timeout, auth=auth) for url, rec in zip(urls, bodies)\n        ]\n        self.status = results\n        return results",
                  "fileTypes": [],
                  "file_path": "",
                  "password": false,
                  "name": "code",
                  "advanced": true,
                  "dynamic": true,
                  "info": "",
                  "load_from_db": false,
                  "title_case": false
                },
                "curl": {
                  "trace_as_input": true,
                  "multiline": true,
                  "trace_as_metadata": true,
                  "load_from_db": false,
                  "list": false,
                  "required": false,
                  "placeholder": "",
                  "show": true,
                  "name": "curl",
                  "value": "",
                  "display_name": "cURL Command",
                  "advanced": true,
                  "input_types": [
                    "Message"
                  ],
                  "dynamic": false,
                  "info": "Paste a cURL command to auto-fill fields.",
                  "title_case": false,
                  "type": "str",
                  "_input_type": "MultilineInput"
                },
                "headers": {
                  "trace_as_input": true,
                  "trace_as_metadata": true,
                  "list": false,
                  "required": false,
                  "placeholder": "",
                  "show": true,
                  "name": "headers",
                  "value": {},
                  "display_name": "Custom Headers",
                  "advanced": false,
                  "input_types": [
                    "Data"
                  ],
                  "dynamic": false,
                  "info": "Headers to include with the request.",
                  "title_case": false,
                  "type": "NestedDict",
                  "_input_type": "NestedDictInput"
                },
                "method": {
                  "trace_as_metadata": true,
                  "options": [
                    "GET",
                    "POST",
                    "PUT",
                    "PATCH",
                    "DELETE"
                  ],
                  "combobox": false,
                  "required": false,
                  "placeholder": "",
                  "show": true,
                  "name": "method",
                  "value": "GET",
                  "display_name": "HTTP Method",
                  "advanced": false,
                  "dynamic": false,
                  "info": "Select the HTTP method for the request.",
                  "title_case": false,
                  "type": "str",
                  "_input_type": "DropdownInput"
                },
                "password": {
                  "load_from_db": false,
                  "required": false,
                  "placeholder": "",
                  "show": true,
                  "name": "password",
                  "value": "",
                  "display_name": "Password (for Basic Auth)",
                  "advanced": false,
                  "input_types": [
                    "Message"
                  ],
                  "dynamic": false,
                  "info": "",
                  "title_case": false,
                  "password": true,
                  "type": "str",
                  "_input_type": "SecretStrInput"
                },
                "query_params": {
                  "trace_as_input": true,
                  "trace_as_metadata": true,
                  "list": false,
                  "required": false,
                  "placeholder": "",
                  "show": true,
                  "name": "query_params",
                  "value": {},
                  "display_name": "Query Parameters",
                  "advanced": false,
                  "input_types": [
                    "Data"
                  ],
                  "dynamic": false,
                  "info": "Query parameters to append to the URL.",
                  "title_case": false,
                  "type": "NestedDict",
                  "_input_type": "NestedDictInput"
                },
                "timeout": {
                  "trace_as_metadata": true,
                  "list": false,
                  "required": false,
                  "placeholder": "",
                  "show": true,
                  "name": "timeout",
                  "value": 5,
                  "display_name": "Timeout (seconds)",
                  "advanced": false,
                  "dynamic": false,
                  "info": "Specify the timeout duration for the request.",
                  "title_case": false,
                  "type": "int",
                  "_input_type": "IntInput"
                },
                "urls": {
                  "trace_as_input": true,
                  "trace_as_metadata": true,
                  "load_from_db": false,
                  "list": true,
                  "required": false,
                  "placeholder": "",
                  "show": true,
                  "name": "urls",
                  "value": [
                    "https://echo.hoppscotch.io",
                    "https://httpbin.org/get"
                  ],
                  "display_name": "URLs",
                  "advanced": false,
                  "input_types": [
                    "Message"
                  ],
                  "dynamic": false,
                  "info": "Enter one or more URLs, separated by commas.",
                  "title_case": false,
                  "type": "str",
                  "_input_type": "MessageTextInput"
                },
                "username": {
                  "trace_as_metadata": true,
                  "load_from_db": false,
                  "list": false,
                  "required": false,
                  "placeholder": "",
                  "show": true,
                  "name": "username",
                  "value": "",
                  "display_name": "Username (for Basic Auth)",
                  "advanced": false,
                  "dynamic": false,
                  "info": "",
                  "title_case": false,
                  "type": "str",
                  "_input_type": "StrInput"
                }
              },
              "description": "Perform REST API requests with multiple URLs, custom headers, parameters, HTTP methods, and authentication.",
              "icon": "Globe",
              "base_classes": [
                "Data"
              ],
              "display_name": "REST API Connector",
              "documentation": "",
              "custom_fields": {},
              "output_types": [],
              "pinned": false,
              "conditional_paths": [],
              "frozen": false,
              "outputs": [
                {
                  "types": [
                    "Data"
                  ],
                  "selected": "Data",
                  "name": "data",
                  "display_name": "Response Data",
                  "method": "make_requests",
                  "value": "__UNDEFINED__",
                  "cache": true
                }
              ],
              "field_order": [
                "urls",
                "method",
                "timeout",
                "api_key",
                "auth_type",
                "username",
                "password",
                "headers",
                "body",
                "query_params",
                "curl"
              ],
              "beta": false,
              "edited": true,
              "lf_version": "1.0.18",
              "official": false
            },
            "id": "RESTAPIConnector-hYOew"
          },
          "id": "RESTAPIConnector-hYOew",
          "position": {
            "x": 0,
            "y": 0
          },
          "type": "genericNode"
        }
      ],
      "viewport": {
        "x": 1,
        "y": 1,
        "zoom": 1
      }
    },
    "date_created": "2024-08-19T13:14:50.911Z",
    "date_updated": "2024-09-13T19:42:26.483Z",
    "status": "Public",
    "sort": null,
    "user_updated": "6a3a88e2-cc6b-4f37-aebb-a747c97c7489",
    "user_created": {
      "username": "viniciossilva3",
      "first_name": "Vinicios",
      "last_name": "Batista Da Silva",
      "id": "6a3a88e2-cc6b-4f37-aebb-a747c97c7489"
    },
    "tags": []
  },
  "conversion": {
    "converted_at": "2025-08-19T18:09:10.693Z",
    "converted_from": "langflow",
    "converted_to": "axiestudio",
    "conversions_made": 8,
    "converter_version": "1.0.0"
  }
}