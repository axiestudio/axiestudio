{
  "id": "133e062a-8a71-4153-b7b4-b05b548e816b",
  "name": "Image fetch",
  "description": "Searches for images using DuckDuckGo. (Converted from Langflow Store for AxieStudio compatibility)",
  "type": "COMPONENT",
  "is_component": true,
  "author": {
    "username": "MaiconAvila",
    "first_name": "Maicon",
    "last_name": "Avila",
    "id": "3268b71d-fa12-4716-b1a3-0ea7d33e3f92",
    "full_name": "Maicon Avila"
  },
  "store_url": "https://www.langflow.store/store/component/133e062a-8a71-4153-b7b4-b05b548e816b",
  "stats": {
    "downloads": 0,
    "likes": 0
  },
  "dates": {
    "created": "2024-12-09T09:55:42.565Z",
    "updated": "2024-12-09T09:55:42.596Z",
    "downloaded": "2025-08-19T17:50:07.299Z"
  },
  "tags": [],
  "technical": {
    "last_tested_version": "1.1.1",
    "private": false,
    "status": "Public"
  },
  "data": {
    "edges": [],
    "nodes": [
      {
        "data": {
          "node": {
            "template": {
              "_type": "Component",
              "code": {
                "type": "code",
                "required": true,
                "placeholder": "",
                "list": false,
                "show": true,
                "multiline": true,
                "value": "from axiestudio.custom import Component\r\nfrom axiestudio.io import MessageTextInput, Output\r\nfrom axiestudio.schema import Data\r\nfrom duckduckgo_search import DDGS\r\n\r\n\r\nclass DuckDuckGoImageSearchComponent(Component):\r\n    display_name = \"DuckDuckGo Image Search\"\r\n    description = \"Searches for images using DuckDuckGo.\"\r\n    documentation: str = \"https://github.com/deedy5/duckduckgo-search\"\r\n    icon = \"search\"\r\n    name = \"DuckDuckGoImageSearch\"\r\n\r\n    inputs = [\r\n        MessageTextInput(\r\n            name=\"query\",\r\n            display_name=\"Search Query\",\r\n            info=\"Enter the search term for DuckDuckGo Image Search.\",\r\n            value=\"Example Search\",\r\n            tool_mode=True,\r\n        ),\r\n        MessageTextInput(\r\n            name=\"max_results\",\r\n            display_name=\"Max Results\",\r\n            info=\"Enter the maximum number of image results to retrieve.\",\r\n            value=\"5\",\r\n        ),\r\n    ]\r\n\r\n    outputs = [\r\n        Output(display_name=\"Image Results\", name=\"output\", method=\"build_output\"),\r\n    ]\r\n\r\n    def build_output(self) -> Data:\r\n        query = self.query.strip()\r\n        max_results = int(self.max_results)\r\n\r\n        if not query:\r\n            return Data(value=\"Error: Query is empty.\")\r\n\r\n        try:\r\n            results = []\r\n            with DDGS() as ddgs:\r\n                for result in ddgs.images(query, max_results=max_results):\r\n                    results.append(result[\"image\"])\r\n\r\n            if results:\r\n                self.status = f\"Found {len(results)} images.\"\r\n                return Data(value=results)\r\n            else:\r\n                self.status = \"No images found.\"\r\n                return Data(value=\"No images found.\")\r\n\r\n        except Exception as e:\r\n            self.status = f\"Error: {str(e)}\"\r\n            return Data(value=f\"Error during search: {str(e)}\")\r\n",
                "fileTypes": [],
                "file_path": "",
                "password": false,
                "name": "code",
                "advanced": true,
                "dynamic": true,
                "info": "",
                "load_from_db": false,
                "title_case": false
              },
              "max_results": {
                "tool_mode": false,
                "trace_as_input": true,
                "trace_as_metadata": true,
                "load_from_db": false,
                "list": false,
                "required": false,
                "placeholder": "",
                "show": true,
                "name": "max_results",
                "value": "5",
                "display_name": "Max Results",
                "advanced": false,
                "input_types": [
                  "Message"
                ],
                "dynamic": false,
                "info": "Enter the maximum number of image results to retrieve.",
                "title_case": false,
                "type": "str",
                "_input_type": "MessageTextInput"
              },
              "query": {
                "tool_mode": true,
                "trace_as_input": true,
                "trace_as_metadata": true,
                "load_from_db": false,
                "list": false,
                "required": false,
                "placeholder": "",
                "show": true,
                "name": "query",
                "value": "",
                "display_name": "Search Query",
                "advanced": false,
                "input_types": [
                  "Message"
                ],
                "dynamic": false,
                "info": "Enter the search term for DuckDuckGo Image Search.",
                "title_case": false,
                "type": "str",
                "_input_type": "MessageTextInput"
              }
            },
            "description": "Searches for images using DuckDuckGo.",
            "icon": "search",
            "base_classes": [
              "Data"
            ],
            "display_name": "Image fetch",
            "documentation": "https://github.com/deedy5/duckduckgo-search",
            "custom_fields": {},
            "output_types": [],
            "pinned": false,
            "conditional_paths": [],
            "frozen": false,
            "outputs": [
              {
                "types": [
                  "Tool"
                ],
                "selected": "Tool",
                "name": "component_as_tool",
                "hidden": null,
                "display_name": "Toolset",
                "method": "to_toolkit",
                "value": "__UNDEFINED__",
                "cache": true,
                "required_inputs": null
              }
            ],
            "field_order": [
              "query",
              "max_results"
            ],
            "beta": false,
            "legacy": false,
            "edited": true,
            "metadata": {},
            "tool_mode": false,
            "lf_version": "1.1.1",
            "official": false
          },
          "type": "CustomComponent",
          "id": "CustomComponent-SBlpx"
        },
        "id": "CustomComponent-SBlpx",
        "position": {
          "x": 0,
          "y": 0
        },
        "type": "genericNode"
      }
    ],
    "viewport": {
      "x": 1,
      "y": 1,
      "zoom": 1
    }
  },
  "metadata": {
    "CustomComponent": {
      "count": 1
    },
    "total": 1
  },
  "original": {
    "id": "133e062a-8a71-4153-b7b4-b05b548e816b",
    "name": "Image fetch",
    "description": "Searches for images using DuckDuckGo.",
    "is_component": true,
    "liked_by_count": "5",
    "downloads_count": "36",
    "metadata": {
      "CustomComponent": {
        "count": 1
      },
      "total": 1
    },
    "last_tested_version": "1.1.1",
    "private": false,
    "data": {
      "edges": [],
      "nodes": [
        {
          "data": {
            "node": {
              "template": {
                "_type": "Component",
                "code": {
                  "type": "code",
                  "required": true,
                  "placeholder": "",
                  "list": false,
                  "show": true,
                  "multiline": true,
                  "value": "from axiestudio.custom import Component\r\nfrom axiestudio.io import MessageTextInput, Output\r\nfrom axiestudio.schema import Data\r\nfrom duckduckgo_search import DDGS\r\n\r\n\r\nclass DuckDuckGoImageSearchComponent(Component):\r\n    display_name = \"DuckDuckGo Image Search\"\r\n    description = \"Searches for images using DuckDuckGo.\"\r\n    documentation: str = \"https://github.com/deedy5/duckduckgo-search\"\r\n    icon = \"search\"\r\n    name = \"DuckDuckGoImageSearch\"\r\n\r\n    inputs = [\r\n        MessageTextInput(\r\n            name=\"query\",\r\n            display_name=\"Search Query\",\r\n            info=\"Enter the search term for DuckDuckGo Image Search.\",\r\n            value=\"Example Search\",\r\n            tool_mode=True,\r\n        ),\r\n        MessageTextInput(\r\n            name=\"max_results\",\r\n            display_name=\"Max Results\",\r\n            info=\"Enter the maximum number of image results to retrieve.\",\r\n            value=\"5\",\r\n        ),\r\n    ]\r\n\r\n    outputs = [\r\n        Output(display_name=\"Image Results\", name=\"output\", method=\"build_output\"),\r\n    ]\r\n\r\n    def build_output(self) -> Data:\r\n        query = self.query.strip()\r\n        max_results = int(self.max_results)\r\n\r\n        if not query:\r\n            return Data(value=\"Error: Query is empty.\")\r\n\r\n        try:\r\n            results = []\r\n            with DDGS() as ddgs:\r\n                for result in ddgs.images(query, max_results=max_results):\r\n                    results.append(result[\"image\"])\r\n\r\n            if results:\r\n                self.status = f\"Found {len(results)} images.\"\r\n                return Data(value=results)\r\n            else:\r\n                self.status = \"No images found.\"\r\n                return Data(value=\"No images found.\")\r\n\r\n        except Exception as e:\r\n            self.status = f\"Error: {str(e)}\"\r\n            return Data(value=f\"Error during search: {str(e)}\")\r\n",
                  "fileTypes": [],
                  "file_path": "",
                  "password": false,
                  "name": "code",
                  "advanced": true,
                  "dynamic": true,
                  "info": "",
                  "load_from_db": false,
                  "title_case": false
                },
                "max_results": {
                  "tool_mode": false,
                  "trace_as_input": true,
                  "trace_as_metadata": true,
                  "load_from_db": false,
                  "list": false,
                  "required": false,
                  "placeholder": "",
                  "show": true,
                  "name": "max_results",
                  "value": "5",
                  "display_name": "Max Results",
                  "advanced": false,
                  "input_types": [
                    "Message"
                  ],
                  "dynamic": false,
                  "info": "Enter the maximum number of image results to retrieve.",
                  "title_case": false,
                  "type": "str",
                  "_input_type": "MessageTextInput"
                },
                "query": {
                  "tool_mode": true,
                  "trace_as_input": true,
                  "trace_as_metadata": true,
                  "load_from_db": false,
                  "list": false,
                  "required": false,
                  "placeholder": "",
                  "show": true,
                  "name": "query",
                  "value": "",
                  "display_name": "Search Query",
                  "advanced": false,
                  "input_types": [
                    "Message"
                  ],
                  "dynamic": false,
                  "info": "Enter the search term for DuckDuckGo Image Search.",
                  "title_case": false,
                  "type": "str",
                  "_input_type": "MessageTextInput"
                }
              },
              "description": "Searches for images using DuckDuckGo.",
              "icon": "search",
              "base_classes": [
                "Data"
              ],
              "display_name": "Image fetch",
              "documentation": "https://github.com/deedy5/duckduckgo-search",
              "custom_fields": {},
              "output_types": [],
              "pinned": false,
              "conditional_paths": [],
              "frozen": false,
              "outputs": [
                {
                  "types": [
                    "Tool"
                  ],
                  "selected": "Tool",
                  "name": "component_as_tool",
                  "hidden": null,
                  "display_name": "Toolset",
                  "method": "to_toolkit",
                  "value": "__UNDEFINED__",
                  "cache": true,
                  "required_inputs": null
                }
              ],
              "field_order": [
                "query",
                "max_results"
              ],
              "beta": false,
              "legacy": false,
              "edited": true,
              "metadata": {},
              "tool_mode": false,
              "lf_version": "1.1.1",
              "official": false
            },
            "type": "CustomComponent",
            "id": "CustomComponent-SBlpx"
          },
          "id": "CustomComponent-SBlpx",
          "position": {
            "x": 0,
            "y": 0
          },
          "type": "genericNode"
        }
      ],
      "viewport": {
        "x": 1,
        "y": 1,
        "zoom": 1
      }
    },
    "date_created": "2024-12-09T09:55:42.565Z",
    "date_updated": "2024-12-09T09:55:42.596Z",
    "status": "Public",
    "sort": null,
    "user_updated": "3268b71d-fa12-4716-b1a3-0ea7d33e3f92",
    "user_created": {
      "username": "MaiconAvila",
      "first_name": "Maicon",
      "last_name": "Avila",
      "id": "3268b71d-fa12-4716-b1a3-0ea7d33e3f92"
    },
    "tags": []
  },
  "conversion": {
    "converted_at": "2025-08-19T18:09:09.003Z",
    "converted_from": "langflow",
    "converted_to": "axiestudio",
    "conversions_made": 6,
    "converter_version": "1.0.0"
  }
}