{
  "id": "0b63e4c3-c3db-4f85-b34b-13b923995a6d",
  "name": "Dynamic Key-Value Dictionary",
  "description": "Dynamically create and edit a dictionary with a specified number of key-value pairs. Configure the number of fields and provide custom keys and values to build a flexible and customized dictionary. (Converted from Langflow Store for AxieStudio compatibility)",
  "type": "COMPONENT",
  "is_component": true,
  "author": {
    "username": "wesjacob26",
    "first_name": "Wesley",
    "last_name": "jacob",
    "id": "05b1d2d9-7cf7-491d-abca-cc03d1419e05",
    "full_name": "Wesley jacob"
  },
  "store_url": "https://www.langflow.store/store/component/0b63e4c3-c3db-4f85-b34b-13b923995a6d",
  "stats": {
    "downloads": 0,
    "likes": 0
  },
  "dates": {
    "created": "2024-06-26T15:12:04.156Z",
    "updated": "2024-06-26T15:12:04.229Z",
    "downloaded": "2025-08-19T17:50:05.073Z"
  },
  "tags": [],
  "technical": {
    "last_tested_version": "1.0.5",
    "private": false,
    "status": "Public"
  },
  "data": {
    "edges": [],
    "nodes": [
      {
        "data": {
          "type": "CustomComponent",
          "node": {
            "template": {
              "_type": "CustomComponent",
              "code": {
                "type": "code",
                "required": true,
                "placeholder": "",
                "list": false,
                "show": true,
                "multiline": true,
                "value": "from typing import Any\n\nfrom axiestudio import CustomComponent\nfrom axiestudio.schema import Data\nfrom axiestudio.schema.dotdict import dotdict\nfrom axiestudio.template.field.base import Input\nfrom axiestudio.field_typing.range_spec import RangeSpec\n\n\nclass EditDictionaryComponent(CustomComponent):\n    display_name = \"Dynamic Key-Value Dictionary\"\n    description = \"Dynamically create and edit a dictionary with a specified number of key-value pairs. Configure the number of fields and provide custom keys and values to build a flexible and customized dictionary.\"\n    field_order = [\"number_of_fields\"]\n\n    def update_build_config(self, build_config: dotdict, field_value: Any, field_name: str | None = None):\n        if field_name == \"number_of_fields\":\n            default_keys = [\"code\", \"_type\", \"number_of_fields\"]\n            try:\n                field_value_int = int(field_value)\n            except TypeError:\n                return build_config\n            \n            existing_fields = {}\n            if field_value_int > 10:\n                build_config[\"number_of_fields\"][\"value\"] = 10\n                raise ValueError(\"Number of fields cannot exceed 10.\")\n            if len(build_config) > len(default_keys) + field_value_int:\n                for key in build_config.copy():\n                    if key not in default_keys:\n                        existing_fields[key] = build_config.pop(key)\n\n            for i in range(1, field_value_int + 1):\n                key = f\"field_{i}_key\"\n                if key in existing_fields:\n                    field = existing_fields[key]\n                    build_config[key] = field\n                else:\n                    field = Input(\n                        display_name=f\"Field {i} Key\",\n                        name=key,\n                        info=f\"Key for field {i}.\",\n                        field_type=\"str\",\n                    )\n                    value_field = Input(\n                        display_name=f\"Field {i} Value\",\n                        name=f\"field_{i}_value\",\n                        info=f\"Value for field {i}.\",\n                        field_type=\"str\",\n                    )\n                    build_config[field.name] = field.to_dict()\n                    build_config[value_field.name] = value_field.to_dict()\n\n            build_config[\"number_of_fields\"][\"value\"] = field_value_int\n        return build_config\n\n    def build_config(self):\n        return {\n            \"number_of_fields\": {\n                \"display_name\": \"Number of Fields\",\n                \"info\": \"Number of fields to be added to the record.\",\n                \"real_time_refresh\": True,\n                \"rangeSpec\": RangeSpec(min=1, max=10, step=1, step_type=\"int\"),\n            }\n        }\n\n    def build(self, number_of_fields: int = 0, **kwargs) -> Data:\n        result = {}\n        for i in range(1, number_of_fields + 1):\n            key = kwargs.get(f\"field_{i}_key\")\n            value = kwargs.get(f\"field_{i}_value\")\n            if key and value:\n                result[key] = value\n        \n        record = Data(data=result)\n        self.status = record\n        return record",
                "fileTypes": [],
                "file_path": "",
                "password": false,
                "name": "code",
                "advanced": true,
                "dynamic": true,
                "info": "",
                "load_from_db": false,
                "title_case": false
              },
              "number_of_fields": {
                "type": "int",
                "required": false,
                "placeholder": "",
                "list": false,
                "show": true,
                "multiline": false,
                "value": 2,
                "fileTypes": [],
                "file_path": "",
                "password": false,
                "name": "number_of_fields",
                "display_name": "Number of Fields",
                "advanced": false,
                "dynamic": false,
                "info": "Number of fields to be added to the record.",
                "real_time_refresh": true,
                "load_from_db": false,
                "title_case": false
              },
              "field_1_key": {
                "type": "str",
                "required": false,
                "placeholder": "",
                "list": false,
                "show": true,
                "multiline": false,
                "fileTypes": [],
                "file_path": "",
                "password": false,
                "name": "field_1_key",
                "display_name": "Field 1 Key",
                "advanced": false,
                "dynamic": false,
                "info": "Key for field 1.",
                "load_from_db": false,
                "title_case": false,
                "input_types": [
                  "Text"
                ]
              },
              "field_1_value": {
                "type": "str",
                "required": false,
                "placeholder": "",
                "list": false,
                "show": true,
                "multiline": false,
                "fileTypes": [],
                "file_path": "",
                "password": false,
                "name": "field_1_value",
                "display_name": "Field 1 Value",
                "advanced": false,
                "dynamic": false,
                "info": "Value for field 1.",
                "load_from_db": false,
                "title_case": false,
                "input_types": [
                  "Text"
                ]
              },
              "field_2_key": {
                "type": "str",
                "required": false,
                "placeholder": "",
                "list": false,
                "show": true,
                "multiline": false,
                "fileTypes": [],
                "file_path": "",
                "password": false,
                "name": "field_2_key",
                "display_name": "Field 2 Key",
                "advanced": false,
                "dynamic": false,
                "info": "Key for field 2.",
                "load_from_db": false,
                "title_case": false,
                "input_types": [
                  "Text"
                ]
              },
              "field_2_value": {
                "type": "str",
                "required": false,
                "placeholder": "",
                "list": false,
                "show": true,
                "multiline": false,
                "fileTypes": [],
                "file_path": "",
                "password": false,
                "name": "field_2_value",
                "display_name": "Field 2 Value",
                "advanced": false,
                "dynamic": false,
                "info": "Value for field 2.",
                "load_from_db": false,
                "title_case": false,
                "input_types": [
                  "Text"
                ]
              }
            },
            "description": "Dynamically create and edit a dictionary with a specified number of key-value pairs. Configure the number of fields and provide custom keys and values to build a flexible and customized dictionary.",
            "base_classes": [
              "Data"
            ],
            "display_name": "Dynamic Key-Value Dictionary",
            "documentation": "",
            "custom_fields": {
              "number_of_fields": null
            },
            "output_types": [
              "Data"
            ],
            "pinned": false,
            "conditional_paths": [],
            "frozen": false,
            "outputs": [
              {
                "types": [
                  "Data"
                ],
                "selected": "Data",
                "name": "data",
                "hidden": null,
                "display_name": "Data",
                "method": null,
                "value": "__UNDEFINED__",
                "cache": true
              }
            ],
            "field_order": [
              "number_of_fields"
            ],
            "beta": false,
            "edited": true,
            "official": false
          },
          "id": "CustomComponent-5HuYw",
          "description": "Dynamically create and edit a dictionary with a specified number of key-value pairs. Configure the number of fields and provide custom keys and values to build a flexible and customized dictionary.",
          "display_name": "Custom Component"
        },
        "id": "CustomComponent-5HuYw",
        "position": {
          "x": 0,
          "y": 0
        },
        "type": "genericNode"
      }
    ],
    "viewport": {
      "x": 1,
      "y": 1,
      "zoom": 1
    }
  },
  "metadata": {
    "CustomComponent": {
      "count": 1
    },
    "total": 1
  },
  "original": {
    "id": "0b63e4c3-c3db-4f85-b34b-13b923995a6d",
    "name": "Dynamic Key-Value Dictionary",
    "description": "Dynamically create and edit a dictionary with a specified number of key-value pairs. Configure the number of fields and provide custom keys and values to build a flexible and customized dictionary.",
    "is_component": true,
    "liked_by_count": "4",
    "downloads_count": "53",
    "metadata": {
      "CustomComponent": {
        "count": 1
      },
      "total": 1
    },
    "last_tested_version": "1.0.5",
    "private": false,
    "data": {
      "edges": [],
      "nodes": [
        {
          "data": {
            "type": "CustomComponent",
            "node": {
              "template": {
                "_type": "CustomComponent",
                "code": {
                  "type": "code",
                  "required": true,
                  "placeholder": "",
                  "list": false,
                  "show": true,
                  "multiline": true,
                  "value": "from typing import Any\n\nfrom axiestudio import CustomComponent\nfrom axiestudio.schema import Data\nfrom axiestudio.schema.dotdict import dotdict\nfrom axiestudio.template.field.base import Input\nfrom axiestudio.field_typing.range_spec import RangeSpec\n\n\nclass EditDictionaryComponent(CustomComponent):\n    display_name = \"Dynamic Key-Value Dictionary\"\n    description = \"Dynamically create and edit a dictionary with a specified number of key-value pairs. Configure the number of fields and provide custom keys and values to build a flexible and customized dictionary.\"\n    field_order = [\"number_of_fields\"]\n\n    def update_build_config(self, build_config: dotdict, field_value: Any, field_name: str | None = None):\n        if field_name == \"number_of_fields\":\n            default_keys = [\"code\", \"_type\", \"number_of_fields\"]\n            try:\n                field_value_int = int(field_value)\n            except TypeError:\n                return build_config\n            \n            existing_fields = {}\n            if field_value_int > 10:\n                build_config[\"number_of_fields\"][\"value\"] = 10\n                raise ValueError(\"Number of fields cannot exceed 10.\")\n            if len(build_config) > len(default_keys) + field_value_int:\n                for key in build_config.copy():\n                    if key not in default_keys:\n                        existing_fields[key] = build_config.pop(key)\n\n            for i in range(1, field_value_int + 1):\n                key = f\"field_{i}_key\"\n                if key in existing_fields:\n                    field = existing_fields[key]\n                    build_config[key] = field\n                else:\n                    field = Input(\n                        display_name=f\"Field {i} Key\",\n                        name=key,\n                        info=f\"Key for field {i}.\",\n                        field_type=\"str\",\n                    )\n                    value_field = Input(\n                        display_name=f\"Field {i} Value\",\n                        name=f\"field_{i}_value\",\n                        info=f\"Value for field {i}.\",\n                        field_type=\"str\",\n                    )\n                    build_config[field.name] = field.to_dict()\n                    build_config[value_field.name] = value_field.to_dict()\n\n            build_config[\"number_of_fields\"][\"value\"] = field_value_int\n        return build_config\n\n    def build_config(self):\n        return {\n            \"number_of_fields\": {\n                \"display_name\": \"Number of Fields\",\n                \"info\": \"Number of fields to be added to the record.\",\n                \"real_time_refresh\": True,\n                \"rangeSpec\": RangeSpec(min=1, max=10, step=1, step_type=\"int\"),\n            }\n        }\n\n    def build(self, number_of_fields: int = 0, **kwargs) -> Data:\n        result = {}\n        for i in range(1, number_of_fields + 1):\n            key = kwargs.get(f\"field_{i}_key\")\n            value = kwargs.get(f\"field_{i}_value\")\n            if key and value:\n                result[key] = value\n        \n        record = Data(data=result)\n        self.status = record\n        return record",
                  "fileTypes": [],
                  "file_path": "",
                  "password": false,
                  "name": "code",
                  "advanced": true,
                  "dynamic": true,
                  "info": "",
                  "load_from_db": false,
                  "title_case": false
                },
                "number_of_fields": {
                  "type": "int",
                  "required": false,
                  "placeholder": "",
                  "list": false,
                  "show": true,
                  "multiline": false,
                  "value": 2,
                  "fileTypes": [],
                  "file_path": "",
                  "password": false,
                  "name": "number_of_fields",
                  "display_name": "Number of Fields",
                  "advanced": false,
                  "dynamic": false,
                  "info": "Number of fields to be added to the record.",
                  "real_time_refresh": true,
                  "load_from_db": false,
                  "title_case": false
                },
                "field_1_key": {
                  "type": "str",
                  "required": false,
                  "placeholder": "",
                  "list": false,
                  "show": true,
                  "multiline": false,
                  "fileTypes": [],
                  "file_path": "",
                  "password": false,
                  "name": "field_1_key",
                  "display_name": "Field 1 Key",
                  "advanced": false,
                  "dynamic": false,
                  "info": "Key for field 1.",
                  "load_from_db": false,
                  "title_case": false,
                  "input_types": [
                    "Text"
                  ]
                },
                "field_1_value": {
                  "type": "str",
                  "required": false,
                  "placeholder": "",
                  "list": false,
                  "show": true,
                  "multiline": false,
                  "fileTypes": [],
                  "file_path": "",
                  "password": false,
                  "name": "field_1_value",
                  "display_name": "Field 1 Value",
                  "advanced": false,
                  "dynamic": false,
                  "info": "Value for field 1.",
                  "load_from_db": false,
                  "title_case": false,
                  "input_types": [
                    "Text"
                  ]
                },
                "field_2_key": {
                  "type": "str",
                  "required": false,
                  "placeholder": "",
                  "list": false,
                  "show": true,
                  "multiline": false,
                  "fileTypes": [],
                  "file_path": "",
                  "password": false,
                  "name": "field_2_key",
                  "display_name": "Field 2 Key",
                  "advanced": false,
                  "dynamic": false,
                  "info": "Key for field 2.",
                  "load_from_db": false,
                  "title_case": false,
                  "input_types": [
                    "Text"
                  ]
                },
                "field_2_value": {
                  "type": "str",
                  "required": false,
                  "placeholder": "",
                  "list": false,
                  "show": true,
                  "multiline": false,
                  "fileTypes": [],
                  "file_path": "",
                  "password": false,
                  "name": "field_2_value",
                  "display_name": "Field 2 Value",
                  "advanced": false,
                  "dynamic": false,
                  "info": "Value for field 2.",
                  "load_from_db": false,
                  "title_case": false,
                  "input_types": [
                    "Text"
                  ]
                }
              },
              "description": "Dynamically create and edit a dictionary with a specified number of key-value pairs. Configure the number of fields and provide custom keys and values to build a flexible and customized dictionary.",
              "base_classes": [
                "Data"
              ],
              "display_name": "Dynamic Key-Value Dictionary",
              "documentation": "",
              "custom_fields": {
                "number_of_fields": null
              },
              "output_types": [
                "Data"
              ],
              "pinned": false,
              "conditional_paths": [],
              "frozen": false,
              "outputs": [
                {
                  "types": [
                    "Data"
                  ],
                  "selected": "Data",
                  "name": "data",
                  "hidden": null,
                  "display_name": "Data",
                  "method": null,
                  "value": "__UNDEFINED__",
                  "cache": true
                }
              ],
              "field_order": [
                "number_of_fields"
              ],
              "beta": false,
              "edited": true,
              "official": false
            },
            "id": "CustomComponent-5HuYw",
            "description": "Dynamically create and edit a dictionary with a specified number of key-value pairs. Configure the number of fields and provide custom keys and values to build a flexible and customized dictionary.",
            "display_name": "Custom Component"
          },
          "id": "CustomComponent-5HuYw",
          "position": {
            "x": 0,
            "y": 0
          },
          "type": "genericNode"
        }
      ],
      "viewport": {
        "x": 1,
        "y": 1,
        "zoom": 1
      }
    },
    "date_created": "2024-06-26T15:12:04.156Z",
    "date_updated": "2024-06-26T15:12:04.229Z",
    "status": "Public",
    "sort": null,
    "user_updated": "05b1d2d9-7cf7-491d-abca-cc03d1419e05",
    "user_created": {
      "username": "wesjacob26",
      "first_name": "Wesley",
      "last_name": "jacob",
      "id": "05b1d2d9-7cf7-491d-abca-cc03d1419e05"
    },
    "tags": []
  },
  "conversion": {
    "converted_at": "2025-08-19T18:09:08.894Z",
    "converted_from": "langflow",
    "converted_to": "axiestudio",
    "conversions_made": 10,
    "converter_version": "1.0.0"
  }
}