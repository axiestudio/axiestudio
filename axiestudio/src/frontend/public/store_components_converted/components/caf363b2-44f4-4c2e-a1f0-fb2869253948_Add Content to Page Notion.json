{
  "id": "caf363b2-44f4-4c2e-a1f0-fb2869253948",
  "name": "Add Content to Page [Notion]",
  "description": "Convert markdown text to Notion blocks and append them to a Notion page. (Converted from Langflow Store for AxieStudio compatibility)",
  "type": "COMPONENT",
  "is_component": true,
  "author": {
    "username": "NamastexLabs",
    "first_name": "Felipe",
    "last_name": "Rosa",
    "id": "37095b75-b1f7-4e35-aea6-bcc9bbf1e2c7",
    "full_name": "Felipe Rosa"
  },
  "store_url": "https://www.langflow.store/store/component/caf363b2-44f4-4c2e-a1f0-fb2869253948",
  "stats": {
    "downloads": 0,
    "likes": 0
  },
  "dates": {
    "created": "2024-08-22T21:48:13.012Z",
    "updated": "2024-08-22T21:48:26.525Z",
    "downloaded": "2025-08-19T17:50:06.796Z"
  },
  "tags": [],
  "technical": {
    "last_tested_version": "1.0.15",
    "private": false,
    "status": "Public"
  },
  "data": {
    "edges": [],
    "nodes": [
      {
        "data": {
          "type": "AddContentToPage",
          "node": {
            "template": {
              "_type": "Component",
              "block_id": {
                "trace_as_metadata": true,
                "load_from_db": false,
                "list": false,
                "required": false,
                "placeholder": "",
                "show": true,
                "name": "block_id",
                "value": "",
                "display_name": "Page/Block ID",
                "advanced": true,
                "dynamic": false,
                "info": "The ID of the page/block to add the content.",
                "title_case": false,
                "type": "str",
                "_input_type": "StrInput"
              },
              "code": {
                "type": "code",
                "required": true,
                "placeholder": "",
                "list": false,
                "show": true,
                "multiline": true,
                "value": "import json\r\nfrom typing import List, Dict, Any\r\nfrom markdown import markdown\r\nfrom bs4 import BeautifulSoup\r\nimport requests\r\n\r\nfrom axiestudio.base.langchain_utilities.model import LCToolComponent\r\nfrom axiestudio.inputs import SecretStrInput, StrInput, MultilineInput\r\nfrom axiestudio.schema import Data\r\nfrom axiestudio.field_typing import Tool\r\nfrom langchain.tools import StructuredTool\r\nfrom pydantic import BaseModel, Field\r\n\r\nclass AddContentToPage(LCToolComponent):\r\n    display_name: str = \"Add Content to Page [Notion]\"\r\n    description: str = \"Convert markdown text to Notion blocks and append them to a Notion page.\"\r\n    documentation: str = \"https://developers.notion.com/reference/patch-block-children\"\r\n    icon = \"NotionDirectoryLoader\"\r\n\r\n    inputs = [\r\n        MultilineInput(\r\n            name=\"markdown_text\",\r\n            display_name=\"Markdown Text\",\r\n            info=\"The markdown text to convert to Notion blocks.\",\r\n        ),\r\n        StrInput(\r\n            name=\"block_id\",\r\n            display_name=\"Page/Block ID\",\r\n            info=\"The ID of the page/block to add the content.\",\r\n        ),\r\n        SecretStrInput(\r\n            name=\"notion_secret\",\r\n            display_name=\"Notion Secret\",\r\n            info=\"The Notion integration token.\",\r\n            required=True,\r\n        ),\r\n    ]\r\n\r\n    class AddContentToPageSchema(BaseModel):\r\n        markdown_text: str = Field(..., description=\"The markdown text to convert to Notion blocks.\")\r\n        block_id: str = Field(..., description=\"The ID of the page/block to add the content.\")\r\n\r\n    def run_model(self) -> Data:\r\n        result = self._add_content_to_page(self.markdown_text, self.block_id)\r\n        return Data(data=result, text=json.dumps(result))\r\n\r\n    def build_tool(self) -> Tool:\r\n        return StructuredTool.from_function(\r\n            name=\"add_content_to_notion_page\",\r\n            description=\"Convert markdown text to Notion blocks and append them to a Notion page.\",\r\n            func=self._add_content_to_page,\r\n            args_schema=self.AddContentToPageSchema,\r\n        )\r\n\r\n    def _add_content_to_page(self, markdown_text: str, block_id: str) -> Union[Dict[str, Any], str]:\r\n        try:\r\n            html_text = markdown(markdown_text)\r\n            soup = BeautifulSoup(html_text, 'html.parser')\r\n            blocks = self.process_node(soup)\r\n\r\n            url = f\"https://api.notion.com/v1/blocks/{block_id}/children\"\r\n            headers = {\r\n                \"Authorization\": f\"Bearer {self.notion_secret}\",\r\n                \"Content-Type\": \"application/json\",\r\n                \"Notion-Version\": \"2022-06-28\",\r\n            }\r\n\r\n            data = {\r\n                \"children\": blocks,\r\n            }\r\n\r\n            response = requests.patch(url, headers=headers, json=data)\r\n            response.raise_for_status()\r\n\r\n            return response.json()\r\n        except requests.exceptions.RequestException as e:\r\n            error_message = f\"Error: Failed to add content to Notion page. {str(e)}\"\r\n            if hasattr(e, 'response') and e.response is not None:\r\n                error_message += f\" Status code: {e.response.status_code}, Response: {e.response.text}\"\r\n            return error_message\r\n        except Exception as e:\r\n            return f\"Error: An unexpected error occurred while adding content to Notion page. {str(e)}\"\r\n\r\n\r\n    def process_node(self, node):\r\n        blocks = []\r\n        if isinstance(node, str):\r\n            text = node.strip()\r\n            if text:\r\n                if text.startswith('#'):\r\n                    heading_level = text.count('#', 0, 6)\r\n                    heading_text = text[heading_level:].strip()\r\n                    if heading_level == 1:\r\n                        blocks.append(self.create_block('heading_1', heading_text))\r\n                    elif heading_level == 2:\r\n                        blocks.append(self.create_block('heading_2', heading_text))\r\n                    elif heading_level == 3:\r\n                        blocks.append(self.create_block('heading_3', heading_text))\r\n                else:\r\n                    blocks.append(self.create_block('paragraph', text))\r\n        elif node.name == 'h1':\r\n            blocks.append(self.create_block('heading_1', node.get_text(strip=True)))\r\n        elif node.name == 'h2':\r\n            blocks.append(self.create_block('heading_2', node.get_text(strip=True)))\r\n        elif node.name == 'h3':\r\n            blocks.append(self.create_block('heading_3', node.get_text(strip=True)))\r\n        elif node.name == 'p':\r\n            code_node = node.find('code')\r\n            if code_node:\r\n                code_text = code_node.get_text()\r\n                language, code = self.extract_language_and_code(code_text)\r\n                blocks.append(self.create_block('code', code, language=language))\r\n            elif self.is_table(str(node)):\r\n                blocks.extend(self.process_table(node))\r\n            else:\r\n                blocks.append(self.create_block('paragraph', node.get_text(strip=True)))\r\n        elif node.name == 'ul':\r\n            blocks.extend(self.process_list(node, 'bulleted_list_item'))\r\n        elif node.name == 'ol':\r\n            blocks.extend(self.process_list(node, 'numbered_list_item'))\r\n        elif node.name == 'blockquote':\r\n            blocks.append(self.create_block('quote', node.get_text(strip=True)))\r\n        elif node.name == 'hr':\r\n            blocks.append(self.create_block('divider', ''))\r\n        elif node.name == 'img':\r\n            blocks.append(self.create_block('image', '', image_url=node.get('src')))\r\n        elif node.name == 'a':\r\n            blocks.append(self.create_block('bookmark', node.get_text(strip=True), link_url=node.get('href')))\r\n        elif node.name == 'table':\r\n            blocks.extend(self.process_table(node))\r\n\r\n        for child in node.children:\r\n            if isinstance(child, str):\r\n                continue\r\n            blocks.extend(self.process_node(child))\r\n\r\n        return blocks\r\n\r\n    def extract_language_and_code(self, code_text):\r\n        lines = code_text.split('\\n')\r\n        language = lines[0].strip()\r\n        code = '\\n'.join(lines[1:]).strip()\r\n        return language, code\r\n\r\n    def is_code_block(self, text):\r\n        return text.startswith('```')\r\n\r\n    def extract_code_block(self, text):\r\n        lines = text.split('\\n')\r\n        language = lines[0].strip('`').strip()\r\n        code = '\\n'.join(lines[1:]).strip('`').strip()\r\n        return language, code\r\n    \r\n    def is_table(self, text):\r\n        rows = text.split('\\n')\r\n        if len(rows) < 2:\r\n            return False\r\n\r\n        has_separator = False\r\n        for i, row in enumerate(rows):\r\n            if '|' in row:\r\n                cells = [cell.strip() for cell in row.split('|')]\r\n                cells = [cell for cell in cells if cell]  # Remove empty cells\r\n                if i == 1 and all(set(cell) <= set('-|') for cell in cells):\r\n                    has_separator = True\r\n                elif not cells:\r\n                    return False\r\n\r\n        return has_separator and len(rows) >= 3\r\n\r\n    def process_list(self, node, list_type):\r\n        blocks = []\r\n        for item in node.find_all('li'):\r\n            item_text = item.get_text(strip=True)\r\n            checked = item_text.startswith('[x]')\r\n            is_checklist = item_text.startswith('[ ]') or checked\r\n\r\n            if is_checklist:\r\n                item_text = item_text.replace('[x]', '').replace('[ ]', '').strip()\r\n                blocks.append(self.create_block('to_do', item_text, checked=checked))\r\n            else:\r\n                blocks.append(self.create_block(list_type, item_text))\r\n        return blocks\r\n\r\n    def process_table(self, node):\r\n        blocks = []\r\n        header_row = node.find('thead').find('tr') if node.find('thead') else None\r\n        body_rows = node.find('tbody').find_all('tr') if node.find('tbody') else []\r\n\r\n        if header_row or body_rows:\r\n            table_width = max(len(header_row.find_all(['th', 'td'])) if header_row else 0,\r\n                            max(len(row.find_all(['th', 'td'])) for row in body_rows))\r\n\r\n            table_block = self.create_block('table', '', table_width=table_width, has_column_header=bool(header_row))\r\n            blocks.append(table_block)\r\n\r\n            if header_row:\r\n                header_cells = [cell.get_text(strip=True) for cell in header_row.find_all(['th', 'td'])]\r\n                header_row_block = self.create_block('table_row', header_cells)\r\n                blocks.append(header_row_block)\r\n\r\n            for row in body_rows:\r\n                cells = [cell.get_text(strip=True) for cell in row.find_all(['th', 'td'])]\r\n                row_block = self.create_block('table_row', cells)\r\n                blocks.append(row_block)\r\n\r\n        return blocks\r\n    \r\n    def create_block(self, block_type: str, content: str, **kwargs) -> Dict[str, Any]:\r\n        block = {\r\n            \"object\": \"block\",\r\n            \"type\": block_type,\r\n            block_type: {},\r\n        }\r\n\r\n        if block_type in [\"paragraph\", \"heading_1\", \"heading_2\", \"heading_3\", \"bulleted_list_item\", \"numbered_list_item\", \"quote\"]:\r\n            block[block_type][\"rich_text\"] = [\r\n                {\r\n                    \"type\": \"text\",\r\n                    \"text\": {\r\n                        \"content\": content,\r\n                    },\r\n                }\r\n            ]\r\n        elif block_type == 'to_do':\r\n            block[block_type][\"rich_text\"] = [\r\n                {\r\n                    \"type\": \"text\",\r\n                    \"text\": {\r\n                        \"content\": content,\r\n                    },\r\n                }\r\n            ]\r\n            block[block_type]['checked'] = kwargs.get('checked', False)\r\n        elif block_type == 'code':\r\n            block[block_type]['rich_text'] = [\r\n                {\r\n                    \"type\": \"text\",\r\n                    \"text\": {\r\n                        \"content\": content,\r\n                    },\r\n                }\r\n            ]\r\n            block[block_type]['language'] = kwargs.get('language', 'plain text')\r\n        elif block_type == 'image':\r\n            block[block_type] = {\r\n                \"type\": \"external\",\r\n                \"external\": {\r\n                    \"url\": kwargs.get('image_url', '')\r\n                }\r\n            }\r\n        elif block_type == 'divider':\r\n            pass\r\n        elif block_type == 'bookmark':\r\n            block[block_type]['url'] = kwargs.get('link_url', '')\r\n        elif block_type == 'table':\r\n            block[block_type]['table_width'] = kwargs.get('table_width', 0)\r\n            block[block_type]['has_column_header'] = kwargs.get('has_column_header', False)\r\n            block[block_type]['has_row_header'] = kwargs.get('has_row_header', False)\r\n        elif block_type == 'table_row':\r\n            block[block_type]['cells'] = [[{'type': 'text', 'text': {'content': cell}} for cell in content]]\r\n\r\n        return block\r\n\t\t\r\n\t\t\r\n\r\n\r\n",
                "fileTypes": [],
                "file_path": "",
                "password": false,
                "name": "code",
                "advanced": true,
                "dynamic": true,
                "info": "",
                "load_from_db": false,
                "title_case": false
              },
              "markdown_text": {
                "trace_as_input": true,
                "multiline": true,
                "trace_as_metadata": true,
                "load_from_db": false,
                "list": false,
                "required": false,
                "placeholder": "",
                "show": true,
                "name": "markdown_text",
                "value": "",
                "display_name": "Markdown Text",
                "advanced": true,
                "input_types": [
                  "Message"
                ],
                "dynamic": false,
                "info": "The markdown text to convert to Notion blocks.",
                "title_case": false,
                "type": "str",
                "_input_type": "MultilineInput"
              },
              "notion_secret": {
                "load_from_db": true,
                "required": true,
                "placeholder": "",
                "show": true,
                "name": "notion_secret",
                "value": "",
                "display_name": "Notion Secret",
                "advanced": false,
                "input_types": [
                  "Message"
                ],
                "dynamic": false,
                "info": "The Notion integration token.",
                "title_case": false,
                "password": true,
                "type": "str",
                "_input_type": "SecretStrInput"
              }
            },
            "description": "Convert markdown text to Notion blocks and append them to a Notion page.",
            "icon": "NotionDirectoryLoader",
            "base_classes": [
              "Data",
              "list",
              "Sequence",
              "Tool"
            ],
            "display_name": "Add Content to Page [Notion]",
            "documentation": "https://developers.notion.com/reference/patch-block-children",
            "custom_fields": {},
            "output_types": [],
            "pinned": false,
            "conditional_paths": [],
            "frozen": false,
            "outputs": [
              {
                "types": [
                  "Data",
                  "list"
                ],
                "selected": "Data",
                "name": "api_run_model",
                "display_name": "Data",
                "method": "run_model",
                "value": "__UNDEFINED__",
                "cache": true,
                "hidden": true
              },
              {
                "types": [
                  "Tool",
                  "Sequence"
                ],
                "selected": "Tool",
                "name": "api_build_tool",
                "display_name": "Tool",
                "method": "build_tool",
                "value": "__UNDEFINED__",
                "cache": true
              }
            ],
            "field_order": [
              "markdown_text",
              "block_id",
              "notion_secret"
            ],
            "beta": false,
            "edited": true,
            "lf_version": "1.0.15",
            "official": false
          },
          "id": "AddContentToPage-MG1Og"
        },
        "id": "AddContentToPage-MG1Og",
        "position": {
          "x": 0,
          "y": 0
        },
        "type": "genericNode"
      }
    ],
    "viewport": {
      "x": 1,
      "y": 1,
      "zoom": 1
    }
  },
  "metadata": {
    "AddContentToPage": {
      "count": 1
    },
    "total": 1
  },
  "original": {
    "id": "caf363b2-44f4-4c2e-a1f0-fb2869253948",
    "name": "Add Content to Page [Notion]",
    "description": "Convert markdown text to Notion blocks and append them to a Notion page.",
    "is_component": true,
    "liked_by_count": "1",
    "downloads_count": "35",
    "metadata": {
      "AddContentToPage": {
        "count": 1
      },
      "total": 1
    },
    "last_tested_version": "1.0.15",
    "private": false,
    "data": {
      "edges": [],
      "nodes": [
        {
          "data": {
            "type": "AddContentToPage",
            "node": {
              "template": {
                "_type": "Component",
                "block_id": {
                  "trace_as_metadata": true,
                  "load_from_db": false,
                  "list": false,
                  "required": false,
                  "placeholder": "",
                  "show": true,
                  "name": "block_id",
                  "value": "",
                  "display_name": "Page/Block ID",
                  "advanced": true,
                  "dynamic": false,
                  "info": "The ID of the page/block to add the content.",
                  "title_case": false,
                  "type": "str",
                  "_input_type": "StrInput"
                },
                "code": {
                  "type": "code",
                  "required": true,
                  "placeholder": "",
                  "list": false,
                  "show": true,
                  "multiline": true,
                  "value": "import json\r\nfrom typing import List, Dict, Any\r\nfrom markdown import markdown\r\nfrom bs4 import BeautifulSoup\r\nimport requests\r\n\r\nfrom axiestudio.base.langchain_utilities.model import LCToolComponent\r\nfrom axiestudio.inputs import SecretStrInput, StrInput, MultilineInput\r\nfrom axiestudio.schema import Data\r\nfrom axiestudio.field_typing import Tool\r\nfrom langchain.tools import StructuredTool\r\nfrom pydantic import BaseModel, Field\r\n\r\nclass AddContentToPage(LCToolComponent):\r\n    display_name: str = \"Add Content to Page [Notion]\"\r\n    description: str = \"Convert markdown text to Notion blocks and append them to a Notion page.\"\r\n    documentation: str = \"https://developers.notion.com/reference/patch-block-children\"\r\n    icon = \"NotionDirectoryLoader\"\r\n\r\n    inputs = [\r\n        MultilineInput(\r\n            name=\"markdown_text\",\r\n            display_name=\"Markdown Text\",\r\n            info=\"The markdown text to convert to Notion blocks.\",\r\n        ),\r\n        StrInput(\r\n            name=\"block_id\",\r\n            display_name=\"Page/Block ID\",\r\n            info=\"The ID of the page/block to add the content.\",\r\n        ),\r\n        SecretStrInput(\r\n            name=\"notion_secret\",\r\n            display_name=\"Notion Secret\",\r\n            info=\"The Notion integration token.\",\r\n            required=True,\r\n        ),\r\n    ]\r\n\r\n    class AddContentToPageSchema(BaseModel):\r\n        markdown_text: str = Field(..., description=\"The markdown text to convert to Notion blocks.\")\r\n        block_id: str = Field(..., description=\"The ID of the page/block to add the content.\")\r\n\r\n    def run_model(self) -> Data:\r\n        result = self._add_content_to_page(self.markdown_text, self.block_id)\r\n        return Data(data=result, text=json.dumps(result))\r\n\r\n    def build_tool(self) -> Tool:\r\n        return StructuredTool.from_function(\r\n            name=\"add_content_to_notion_page\",\r\n            description=\"Convert markdown text to Notion blocks and append them to a Notion page.\",\r\n            func=self._add_content_to_page,\r\n            args_schema=self.AddContentToPageSchema,\r\n        )\r\n\r\n    def _add_content_to_page(self, markdown_text: str, block_id: str) -> Union[Dict[str, Any], str]:\r\n        try:\r\n            html_text = markdown(markdown_text)\r\n            soup = BeautifulSoup(html_text, 'html.parser')\r\n            blocks = self.process_node(soup)\r\n\r\n            url = f\"https://api.notion.com/v1/blocks/{block_id}/children\"\r\n            headers = {\r\n                \"Authorization\": f\"Bearer {self.notion_secret}\",\r\n                \"Content-Type\": \"application/json\",\r\n                \"Notion-Version\": \"2022-06-28\",\r\n            }\r\n\r\n            data = {\r\n                \"children\": blocks,\r\n            }\r\n\r\n            response = requests.patch(url, headers=headers, json=data)\r\n            response.raise_for_status()\r\n\r\n            return response.json()\r\n        except requests.exceptions.RequestException as e:\r\n            error_message = f\"Error: Failed to add content to Notion page. {str(e)}\"\r\n            if hasattr(e, 'response') and e.response is not None:\r\n                error_message += f\" Status code: {e.response.status_code}, Response: {e.response.text}\"\r\n            return error_message\r\n        except Exception as e:\r\n            return f\"Error: An unexpected error occurred while adding content to Notion page. {str(e)}\"\r\n\r\n\r\n    def process_node(self, node):\r\n        blocks = []\r\n        if isinstance(node, str):\r\n            text = node.strip()\r\n            if text:\r\n                if text.startswith('#'):\r\n                    heading_level = text.count('#', 0, 6)\r\n                    heading_text = text[heading_level:].strip()\r\n                    if heading_level == 1:\r\n                        blocks.append(self.create_block('heading_1', heading_text))\r\n                    elif heading_level == 2:\r\n                        blocks.append(self.create_block('heading_2', heading_text))\r\n                    elif heading_level == 3:\r\n                        blocks.append(self.create_block('heading_3', heading_text))\r\n                else:\r\n                    blocks.append(self.create_block('paragraph', text))\r\n        elif node.name == 'h1':\r\n            blocks.append(self.create_block('heading_1', node.get_text(strip=True)))\r\n        elif node.name == 'h2':\r\n            blocks.append(self.create_block('heading_2', node.get_text(strip=True)))\r\n        elif node.name == 'h3':\r\n            blocks.append(self.create_block('heading_3', node.get_text(strip=True)))\r\n        elif node.name == 'p':\r\n            code_node = node.find('code')\r\n            if code_node:\r\n                code_text = code_node.get_text()\r\n                language, code = self.extract_language_and_code(code_text)\r\n                blocks.append(self.create_block('code', code, language=language))\r\n            elif self.is_table(str(node)):\r\n                blocks.extend(self.process_table(node))\r\n            else:\r\n                blocks.append(self.create_block('paragraph', node.get_text(strip=True)))\r\n        elif node.name == 'ul':\r\n            blocks.extend(self.process_list(node, 'bulleted_list_item'))\r\n        elif node.name == 'ol':\r\n            blocks.extend(self.process_list(node, 'numbered_list_item'))\r\n        elif node.name == 'blockquote':\r\n            blocks.append(self.create_block('quote', node.get_text(strip=True)))\r\n        elif node.name == 'hr':\r\n            blocks.append(self.create_block('divider', ''))\r\n        elif node.name == 'img':\r\n            blocks.append(self.create_block('image', '', image_url=node.get('src')))\r\n        elif node.name == 'a':\r\n            blocks.append(self.create_block('bookmark', node.get_text(strip=True), link_url=node.get('href')))\r\n        elif node.name == 'table':\r\n            blocks.extend(self.process_table(node))\r\n\r\n        for child in node.children:\r\n            if isinstance(child, str):\r\n                continue\r\n            blocks.extend(self.process_node(child))\r\n\r\n        return blocks\r\n\r\n    def extract_language_and_code(self, code_text):\r\n        lines = code_text.split('\\n')\r\n        language = lines[0].strip()\r\n        code = '\\n'.join(lines[1:]).strip()\r\n        return language, code\r\n\r\n    def is_code_block(self, text):\r\n        return text.startswith('```')\r\n\r\n    def extract_code_block(self, text):\r\n        lines = text.split('\\n')\r\n        language = lines[0].strip('`').strip()\r\n        code = '\\n'.join(lines[1:]).strip('`').strip()\r\n        return language, code\r\n    \r\n    def is_table(self, text):\r\n        rows = text.split('\\n')\r\n        if len(rows) < 2:\r\n            return False\r\n\r\n        has_separator = False\r\n        for i, row in enumerate(rows):\r\n            if '|' in row:\r\n                cells = [cell.strip() for cell in row.split('|')]\r\n                cells = [cell for cell in cells if cell]  # Remove empty cells\r\n                if i == 1 and all(set(cell) <= set('-|') for cell in cells):\r\n                    has_separator = True\r\n                elif not cells:\r\n                    return False\r\n\r\n        return has_separator and len(rows) >= 3\r\n\r\n    def process_list(self, node, list_type):\r\n        blocks = []\r\n        for item in node.find_all('li'):\r\n            item_text = item.get_text(strip=True)\r\n            checked = item_text.startswith('[x]')\r\n            is_checklist = item_text.startswith('[ ]') or checked\r\n\r\n            if is_checklist:\r\n                item_text = item_text.replace('[x]', '').replace('[ ]', '').strip()\r\n                blocks.append(self.create_block('to_do', item_text, checked=checked))\r\n            else:\r\n                blocks.append(self.create_block(list_type, item_text))\r\n        return blocks\r\n\r\n    def process_table(self, node):\r\n        blocks = []\r\n        header_row = node.find('thead').find('tr') if node.find('thead') else None\r\n        body_rows = node.find('tbody').find_all('tr') if node.find('tbody') else []\r\n\r\n        if header_row or body_rows:\r\n            table_width = max(len(header_row.find_all(['th', 'td'])) if header_row else 0,\r\n                            max(len(row.find_all(['th', 'td'])) for row in body_rows))\r\n\r\n            table_block = self.create_block('table', '', table_width=table_width, has_column_header=bool(header_row))\r\n            blocks.append(table_block)\r\n\r\n            if header_row:\r\n                header_cells = [cell.get_text(strip=True) for cell in header_row.find_all(['th', 'td'])]\r\n                header_row_block = self.create_block('table_row', header_cells)\r\n                blocks.append(header_row_block)\r\n\r\n            for row in body_rows:\r\n                cells = [cell.get_text(strip=True) for cell in row.find_all(['th', 'td'])]\r\n                row_block = self.create_block('table_row', cells)\r\n                blocks.append(row_block)\r\n\r\n        return blocks\r\n    \r\n    def create_block(self, block_type: str, content: str, **kwargs) -> Dict[str, Any]:\r\n        block = {\r\n            \"object\": \"block\",\r\n            \"type\": block_type,\r\n            block_type: {},\r\n        }\r\n\r\n        if block_type in [\"paragraph\", \"heading_1\", \"heading_2\", \"heading_3\", \"bulleted_list_item\", \"numbered_list_item\", \"quote\"]:\r\n            block[block_type][\"rich_text\"] = [\r\n                {\r\n                    \"type\": \"text\",\r\n                    \"text\": {\r\n                        \"content\": content,\r\n                    },\r\n                }\r\n            ]\r\n        elif block_type == 'to_do':\r\n            block[block_type][\"rich_text\"] = [\r\n                {\r\n                    \"type\": \"text\",\r\n                    \"text\": {\r\n                        \"content\": content,\r\n                    },\r\n                }\r\n            ]\r\n            block[block_type]['checked'] = kwargs.get('checked', False)\r\n        elif block_type == 'code':\r\n            block[block_type]['rich_text'] = [\r\n                {\r\n                    \"type\": \"text\",\r\n                    \"text\": {\r\n                        \"content\": content,\r\n                    },\r\n                }\r\n            ]\r\n            block[block_type]['language'] = kwargs.get('language', 'plain text')\r\n        elif block_type == 'image':\r\n            block[block_type] = {\r\n                \"type\": \"external\",\r\n                \"external\": {\r\n                    \"url\": kwargs.get('image_url', '')\r\n                }\r\n            }\r\n        elif block_type == 'divider':\r\n            pass\r\n        elif block_type == 'bookmark':\r\n            block[block_type]['url'] = kwargs.get('link_url', '')\r\n        elif block_type == 'table':\r\n            block[block_type]['table_width'] = kwargs.get('table_width', 0)\r\n            block[block_type]['has_column_header'] = kwargs.get('has_column_header', False)\r\n            block[block_type]['has_row_header'] = kwargs.get('has_row_header', False)\r\n        elif block_type == 'table_row':\r\n            block[block_type]['cells'] = [[{'type': 'text', 'text': {'content': cell}} for cell in content]]\r\n\r\n        return block\r\n\t\t\r\n\t\t\r\n\r\n\r\n",
                  "fileTypes": [],
                  "file_path": "",
                  "password": false,
                  "name": "code",
                  "advanced": true,
                  "dynamic": true,
                  "info": "",
                  "load_from_db": false,
                  "title_case": false
                },
                "markdown_text": {
                  "trace_as_input": true,
                  "multiline": true,
                  "trace_as_metadata": true,
                  "load_from_db": false,
                  "list": false,
                  "required": false,
                  "placeholder": "",
                  "show": true,
                  "name": "markdown_text",
                  "value": "",
                  "display_name": "Markdown Text",
                  "advanced": true,
                  "input_types": [
                    "Message"
                  ],
                  "dynamic": false,
                  "info": "The markdown text to convert to Notion blocks.",
                  "title_case": false,
                  "type": "str",
                  "_input_type": "MultilineInput"
                },
                "notion_secret": {
                  "load_from_db": true,
                  "required": true,
                  "placeholder": "",
                  "show": true,
                  "name": "notion_secret",
                  "value": "",
                  "display_name": "Notion Secret",
                  "advanced": false,
                  "input_types": [
                    "Message"
                  ],
                  "dynamic": false,
                  "info": "The Notion integration token.",
                  "title_case": false,
                  "password": true,
                  "type": "str",
                  "_input_type": "SecretStrInput"
                }
              },
              "description": "Convert markdown text to Notion blocks and append them to a Notion page.",
              "icon": "NotionDirectoryLoader",
              "base_classes": [
                "Data",
                "list",
                "Sequence",
                "Tool"
              ],
              "display_name": "Add Content to Page [Notion]",
              "documentation": "https://developers.notion.com/reference/patch-block-children",
              "custom_fields": {},
              "output_types": [],
              "pinned": false,
              "conditional_paths": [],
              "frozen": false,
              "outputs": [
                {
                  "types": [
                    "Data",
                    "list"
                  ],
                  "selected": "Data",
                  "name": "api_run_model",
                  "display_name": "Data",
                  "method": "run_model",
                  "value": "__UNDEFINED__",
                  "cache": true,
                  "hidden": true
                },
                {
                  "types": [
                    "Tool",
                    "Sequence"
                  ],
                  "selected": "Tool",
                  "name": "api_build_tool",
                  "display_name": "Tool",
                  "method": "build_tool",
                  "value": "__UNDEFINED__",
                  "cache": true
                }
              ],
              "field_order": [
                "markdown_text",
                "block_id",
                "notion_secret"
              ],
              "beta": false,
              "edited": true,
              "lf_version": "1.0.15",
              "official": false
            },
            "id": "AddContentToPage-MG1Og"
          },
          "id": "AddContentToPage-MG1Og",
          "position": {
            "x": 0,
            "y": 0
          },
          "type": "genericNode"
        }
      ],
      "viewport": {
        "x": 1,
        "y": 1,
        "zoom": 1
      }
    },
    "date_created": "2024-08-22T21:48:13.012Z",
    "date_updated": "2024-08-22T21:48:26.525Z",
    "status": "Public",
    "sort": null,
    "user_updated": "37095b75-b1f7-4e35-aea6-bcc9bbf1e2c7",
    "user_created": {
      "username": "NamastexLabs",
      "first_name": "Felipe",
      "last_name": "Rosa",
      "id": "37095b75-b1f7-4e35-aea6-bcc9bbf1e2c7"
    },
    "tags": []
  },
  "conversion": {
    "converted_at": "2025-08-19T18:09:11.837Z",
    "converted_from": "langflow",
    "converted_to": "axiestudio",
    "conversions_made": 8,
    "converter_version": "1.0.0"
  }
}