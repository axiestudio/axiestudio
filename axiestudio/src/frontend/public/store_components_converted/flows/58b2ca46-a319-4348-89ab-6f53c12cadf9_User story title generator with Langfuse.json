{
  "id": "58b2ca46-a319-4348-89ab-6f53c12cadf9",
  "name": "User story title generator with Langfuse",
  "description": "Generating Title for User Story - Need Langfuse integration (Converted from Langflow Store for AxieStudio compatibility)",
  "type": "FLOW",
  "is_component": false,
  "author": {
    "username": "wiresky",
    "first_name": "Nguyen",
    "last_name": "Nam",
    "id": "dc599610-3065-4b5b-94ed-de108ec210dd",
    "full_name": "Nguyen Nam"
  },
  "store_url": "https://www.langflow.store/store/component/58b2ca46-a319-4348-89ab-6f53c12cadf9",
  "stats": {
    "downloads": 0,
    "likes": 0
  },
  "dates": {
    "created": "2024-04-26T08:34:07.306Z",
    "updated": "2024-04-30T04:10:31.905Z",
    "downloaded": "2025-08-19T17:50:05.269Z"
  },
  "tags": [],
  "technical": {
    "last_tested_version": "0.6.18",
    "private": true,
    "status": "Public"
  },
  "data": {
    "nodes": [
      {
        "id": "LLMChain-aFfIy",
        "type": "genericNode",
        "position": {
          "x": 1189.5693728861045,
          "y": 447.0584627246769
        },
        "data": {
          "type": "LLMChain",
          "node": {
            "template": {
              "llm": {
                "type": "BaseLanguageModel",
                "required": true,
                "placeholder": "",
                "list": false,
                "show": true,
                "multiline": false,
                "fileTypes": [],
                "file_path": "",
                "password": false,
                "name": "llm",
                "display_name": "LLM",
                "advanced": false,
                "dynamic": false,
                "info": "",
                "title_case": true
              },
              "memory": {
                "type": "BaseMemory",
                "required": false,
                "placeholder": "",
                "list": false,
                "show": true,
                "multiline": false,
                "fileTypes": [],
                "file_path": "",
                "password": false,
                "name": "memory",
                "display_name": "Memory",
                "advanced": false,
                "dynamic": false,
                "info": "",
                "title_case": true
              },
              "prompt": {
                "type": "BasePromptTemplate",
                "required": true,
                "placeholder": "",
                "list": false,
                "show": true,
                "multiline": false,
                "fileTypes": [],
                "file_path": "",
                "password": false,
                "name": "prompt",
                "display_name": "Prompt",
                "advanced": false,
                "dynamic": false,
                "info": "",
                "title_case": true
              },
              "code": {
                "type": "code",
                "required": true,
                "placeholder": "",
                "list": false,
                "show": true,
                "multiline": true,
                "value": "from typing import Callable, Optional, Union\n\nfrom langchain.chains import LLMChain\n\nfrom axiestudio import CustomComponent\nfrom axiestudio.field_typing import (\n    BaseLanguageModel,\n    BaseMemory,\n    BasePromptTemplate,\n    Chain,\n)\n\n\nclass LLMChainComponent(CustomComponent):\n    display_name = \"LLMChain\"\n    description = \"Chain to run queries against LLMs\"\n\n    def build_config(self):\n        return {\n            \"prompt\": {\"display_name\": \"Prompt\"},\n            \"llm\": {\"display_name\": \"LLM\"},\n            \"memory\": {\"display_name\": \"Memory\"},\n            \"code\": {\"show\": False},\n        }\n\n    def build(\n        self,\n        prompt: BasePromptTemplate,\n        llm: BaseLanguageModel,\n        memory: Optional[BaseMemory] = None,\n    ) -> Union[Chain, Callable, LLMChain]:\n        return LLMChain(prompt=prompt, llm=llm, memory=memory)\n",
                "fileTypes": [],
                "file_path": "",
                "password": false,
                "name": "code",
                "advanced": false,
                "dynamic": true,
                "info": "",
                "title_case": true
              },
              "_type": "CustomComponent"
            },
            "description": "Chain to run queries against LLMs",
            "base_classes": [
              "Chain",
              "Callable",
              "Chain",
              "LLMChain"
            ],
            "display_name": "LLMChain",
            "documentation": "",
            "custom_fields": {
              "prompt": null,
              "llm": null,
              "memory": null
            },
            "output_types": [
              "Chain",
              "Callable",
              "LLMChain"
            ],
            "field_formatters": {},
            "beta": true
          },
          "id": "LLMChain-aFfIy"
        },
        "selected": false,
        "width": 384,
        "height": 425
      },
      {
        "id": "ChatOpenAI-Yhylk",
        "type": "genericNode",
        "position": {
          "x": 618.2270936873742,
          "y": -370.54554388973787
        },
        "data": {
          "type": "ChatOpenAI",
          "node": {
            "template": {
              "code": {
                "type": "code",
                "required": true,
                "placeholder": "",
                "list": false,
                "show": true,
                "multiline": true,
                "value": "from typing import Optional, Union\n\nfrom langchain.llms import BaseLLM\nfrom langchain_community.chat_models.openai import ChatOpenAI\n\nfrom axiestudio import CustomComponent\nfrom axiestudio.field_typing import BaseLanguageModel, NestedDict\n\n\nclass ChatOpenAIComponent(CustomComponent):\n    display_name = \"ChatOpenAI\"\n    description = \"`OpenAI` Chat large language models API.\"\n\n    def build_config(self):\n        return {\n            \"max_tokens\": {\n                \"display_name\": \"Max Tokens\",\n                \"field_type\": \"int\",\n                \"advanced\": False,\n                \"required\": False,\n            },\n            \"model_kwargs\": {\n                \"display_name\": \"Model Kwargs\",\n                \"field_type\": \"NestedDict\",\n                \"advanced\": True,\n                \"required\": False,\n            },\n            \"model_name\": {\n                \"display_name\": \"Model Name\",\n                \"field_type\": \"str\",\n                \"advanced\": False,\n                \"required\": False,\n                \"options\": [\n                    \"gpt-4-turbo-preview\",\n                    \"gpt-4-0125-preview\",\n                    \"gpt-4-1106-preview\",\n                    \"gpt-4-vision-preview\",\n                    \"gpt-3.5-turbo-0125\",\n                    \"gpt-3.5-turbo-1106\",\n                ],\n            },\n            \"openai_api_base\": {\n                \"display_name\": \"OpenAI API Base\",\n                \"field_type\": \"str\",\n                \"advanced\": False,\n                \"required\": False,\n                \"info\": (\n                    \"The base URL of the OpenAI API. Defaults to https://api.openai.com/v1.\\n\\n\"\n                    \"You can change this to use other APIs like JinaChat, LocalAI and Prem.\"\n                ),\n            },\n            \"openai_api_key\": {\n                \"display_name\": \"OpenAI API Key\",\n                \"field_type\": \"str\",\n                \"advanced\": False,\n                \"required\": False,\n                \"password\": True,\n            },\n            \"temperature\": {\n                \"display_name\": \"Temperature\",\n                \"field_type\": \"float\",\n                \"advanced\": False,\n                \"required\": False,\n                \"value\": 0.7,\n            },\n        }\n\n    def build(\n        self,\n        max_tokens: Optional[int] = 256,\n        model_kwargs: NestedDict = {},\n        model_name: str = \"gpt-4-1106-preview\",\n        openai_api_base: Optional[str] = None,\n        openai_api_key: Optional[str] = None,\n        temperature: float = 0.7,\n    ) -> Union[BaseLanguageModel, BaseLLM]:\n        if not openai_api_base:\n            openai_api_base = \"https://api.openai.com/v1\"\n        return ChatOpenAI(\n            max_tokens=max_tokens,\n            model_kwargs=model_kwargs,\n            model=model_name,\n            base_url=openai_api_base,\n            api_key=openai_api_key,\n            temperature=temperature,\n        )\n",
                "fileTypes": [],
                "file_path": "",
                "password": false,
                "name": "code",
                "advanced": false,
                "dynamic": true,
                "info": "",
                "title_case": true
              },
              "max_tokens": {
                "type": "int",
                "required": false,
                "placeholder": "",
                "list": false,
                "show": true,
                "multiline": false,
                "value": "1024",
                "fileTypes": [],
                "file_path": "",
                "password": false,
                "name": "max_tokens",
                "display_name": "Max Tokens",
                "advanced": false,
                "dynamic": false,
                "info": "",
                "title_case": true
              },
              "model_kwargs": {
                "type": "NestedDict",
                "required": false,
                "placeholder": "",
                "list": false,
                "show": true,
                "multiline": false,
                "value": {},
                "fileTypes": [],
                "file_path": "",
                "password": false,
                "name": "model_kwargs",
                "display_name": "Model Kwargs",
                "advanced": true,
                "dynamic": false,
                "info": "",
                "title_case": true
              },
              "model_name": {
                "type": "str",
                "required": false,
                "placeholder": "",
                "list": true,
                "show": true,
                "multiline": false,
                "value": "gpt-3.5-turbo-0125",
                "fileTypes": [],
                "file_path": "",
                "password": false,
                "options": [
                  "gpt-4-turbo-preview",
                  "gpt-4-0125-preview",
                  "gpt-4-1106-preview",
                  "gpt-4-vision-preview",
                  "gpt-3.5-turbo-0125",
                  "gpt-3.5-turbo-1106"
                ],
                "name": "model_name",
                "display_name": "Model Name",
                "advanced": false,
                "dynamic": false,
                "info": "",
                "title_case": true
              },
              "openai_api_base": {
                "type": "str",
                "required": false,
                "placeholder": "",
                "list": false,
                "show": true,
                "multiline": false,
                "fileTypes": [],
                "file_path": "",
                "password": false,
                "name": "openai_api_base",
                "display_name": "OpenAI API Base",
                "advanced": false,
                "dynamic": false,
                "info": "The base URL of the OpenAI API. Defaults to https://api.openai.com/v1.\n\nYou can change this to use other APIs like JinaChat, LocalAI and Prem.",
                "title_case": true
              },
              "openai_api_key": {
                "type": "str",
                "required": false,
                "placeholder": "",
                "list": false,
                "show": true,
                "multiline": false,
                "fileTypes": [],
                "file_path": "",
                "password": true,
                "name": "openai_api_key",
                "display_name": "OpenAI API Key",
                "advanced": false,
                "dynamic": false,
                "info": "",
                "title_case": true,
                "value": ""
              },
              "temperature": {
                "type": "float",
                "required": false,
                "placeholder": "",
                "list": false,
                "show": true,
                "multiline": false,
                "value": "0.7",
                "fileTypes": [],
                "file_path": "",
                "password": false,
                "name": "temperature",
                "display_name": "Temperature",
                "advanced": false,
                "dynamic": false,
                "info": "",
                "rangeSpec": {
                  "min": -1,
                  "max": 1,
                  "step": 0.1
                },
                "title_case": true
              },
              "_type": "CustomComponent"
            },
            "description": "`OpenAI` Chat large language models API.",
            "base_classes": [
              "BaseLanguageModel",
              "BaseLLM",
              "BaseLanguageModel"
            ],
            "display_name": "ChatOpenAI",
            "documentation": "",
            "custom_fields": {
              "max_tokens": null,
              "model_kwargs": null,
              "model_name": null,
              "openai_api_base": null,
              "openai_api_key": null,
              "temperature": null
            },
            "output_types": [
              "BaseLanguageModel",
              "BaseLLM"
            ],
            "field_formatters": {},
            "beta": true
          },
          "id": "ChatOpenAI-Yhylk"
        },
        "selected": false,
        "width": 384,
        "height": 731,
        "positionAbsolute": {
          "x": 618.2270936873742,
          "y": -370.54554388973787
        },
        "dragging": false
      },
      {
        "id": "ChatPromptTemplate-Mmxhr",
        "type": "genericNode",
        "position": {
          "x": 665.0906897557862,
          "y": 662.8695206718493
        },
        "data": {
          "type": "ChatPromptTemplate",
          "node": {
            "template": {
              "messages": {
                "type": "BaseMessagePromptTemplate",
                "required": true,
                "placeholder": "",
                "list": true,
                "show": true,
                "multiline": false,
                "fileTypes": [],
                "password": false,
                "name": "messages",
                "advanced": false,
                "dynamic": true,
                "info": "",
                "title_case": true
              },
              "output_parser": {
                "type": "BaseOutputParser",
                "required": false,
                "placeholder": "",
                "list": false,
                "show": false,
                "multiline": false,
                "fileTypes": [],
                "password": false,
                "name": "output_parser",
                "advanced": false,
                "dynamic": true,
                "info": "",
                "title_case": true
              },
              "input_types": {
                "type": "dict",
                "required": false,
                "placeholder": "",
                "list": false,
                "show": false,
                "multiline": false,
                "fileTypes": [],
                "password": false,
                "name": "input_types",
                "advanced": false,
                "dynamic": true,
                "info": "",
                "title_case": true
              },
              "input_variables": {
                "type": "str",
                "required": true,
                "placeholder": "",
                "list": true,
                "show": false,
                "multiline": false,
                "fileTypes": [],
                "password": false,
                "name": "input_variables",
                "advanced": false,
                "dynamic": true,
                "info": "",
                "title_case": true
              },
              "metadata": {
                "type": "dict",
                "required": false,
                "placeholder": "",
                "list": false,
                "show": false,
                "multiline": false,
                "fileTypes": [],
                "password": false,
                "name": "metadata",
                "advanced": false,
                "dynamic": true,
                "info": "",
                "title_case": true
              },
              "name": {
                "type": "str",
                "required": false,
                "placeholder": "",
                "list": false,
                "show": false,
                "multiline": false,
                "fileTypes": [],
                "password": false,
                "name": "name",
                "advanced": false,
                "dynamic": true,
                "info": "",
                "title_case": true
              },
              "partial_variables": {
                "type": "dict",
                "required": false,
                "placeholder": "",
                "list": false,
                "show": false,
                "multiline": false,
                "fileTypes": [],
                "password": false,
                "name": "partial_variables",
                "advanced": false,
                "dynamic": true,
                "info": "",
                "title_case": true
              },
              "tags": {
                "type": "str",
                "required": false,
                "placeholder": "",
                "list": true,
                "show": false,
                "multiline": false,
                "fileTypes": [],
                "password": false,
                "name": "tags",
                "advanced": false,
                "dynamic": true,
                "info": "",
                "title_case": true
              },
              "validate_template": {
                "type": "bool",
                "required": false,
                "placeholder": "",
                "list": false,
                "show": false,
                "multiline": false,
                "value": false,
                "fileTypes": [],
                "password": false,
                "name": "validate_template",
                "advanced": false,
                "dynamic": true,
                "info": "",
                "title_case": true
              },
              "_type": "ChatPromptTemplate"
            },
            "description": "Prompt template for chat models.",
            "base_classes": [
              "BasePromptTemplate",
              "BaseChatPromptTemplate",
              "ChatPromptTemplate"
            ],
            "display_name": "ChatPromptTemplate",
            "documentation": "https://python.langchain.com/docs/modules/model_io/models/chat/how_to/prompts",
            "custom_fields": {},
            "output_types": [],
            "field_formatters": {},
            "beta": false
          },
          "id": "ChatPromptTemplate-Mmxhr"
        },
        "selected": false,
        "width": 384,
        "height": 243,
        "positionAbsolute": {
          "x": 665.0906897557862,
          "y": 662.8695206718493
        },
        "dragging": false
      },
      {
        "id": "SystemMessagePromptTemplate-fhxwY",
        "type": "genericNode",
        "position": {
          "x": -33.02687199758117,
          "y": 308.49351585796325
        },
        "data": {
          "type": "SystemMessagePromptTemplate",
          "node": {
            "template": {
              "additional_kwargs": {
                "type": "dict",
                "required": false,
                "placeholder": "",
                "list": false,
                "show": false,
                "multiline": false,
                "fileTypes": [],
                "password": false,
                "name": "additional_kwargs",
                "advanced": true,
                "dynamic": true,
                "info": "",
                "title_case": true
              },
              "prompt": {
                "type": "prompt",
                "required": true,
                "placeholder": "",
                "list": true,
                "show": true,
                "multiline": true,
                "value": "## Instructions\n{Instructions}\n\n## EXAMPLES:\n\n{Examples}",
                "fileTypes": [],
                "password": false,
                "name": "prompt",
                "advanced": false,
                "dynamic": true,
                "info": "",
                "title_case": true
              },
              "_type": "SystemMessagePromptTemplate",
              "Instructions": {
                "type": "str",
                "required": false,
                "placeholder": "",
                "list": false,
                "show": true,
                "multiline": true,
                "value": "",
                "fileTypes": [],
                "file_path": "",
                "password": false,
                "name": "Instructions",
                "display_name": "Instructions",
                "advanced": false,
                "input_types": [
                  "Document",
                  "BaseOutputParser"
                ],
                "dynamic": false,
                "info": "",
                "title_case": true
              },
              "Examples": {
                "type": "str",
                "required": false,
                "placeholder": "",
                "list": false,
                "show": true,
                "multiline": true,
                "value": "",
                "fileTypes": [],
                "file_path": "",
                "password": false,
                "name": "Examples",
                "display_name": "Examples",
                "advanced": false,
                "input_types": [
                  "Document",
                  "BaseOutputParser"
                ],
                "dynamic": false,
                "info": "",
                "title_case": true
              }
            },
            "description": "System message prompt template.",
            "icon": null,
            "base_classes": [
              "_StringImageMessagePromptTemplate",
              "BaseMessagePromptTemplate",
              "SystemMessagePromptTemplate"
            ],
            "name": "",
            "display_name": "SystemMessagePromptTemplate",
            "documentation": "https://python.langchain.com/docs/modules/model_io/models/chat/how_to/prompts",
            "custom_fields": {
              "": [
                "Instructions",
                "Examples"
              ]
            },
            "output_types": [],
            "full_path": null,
            "field_formatters": {},
            "beta": false,
            "error": null
          },
          "id": "SystemMessagePromptTemplate-fhxwY",
          "description": "System message prompt template.",
          "display_name": "SystemMessagePromptTemplate"
        },
        "selected": false,
        "width": 384,
        "height": 469,
        "positionAbsolute": {
          "x": -33.02687199758117,
          "y": 308.49351585796325
        },
        "dragging": true
      },
      {
        "id": "Data-ffK41",
        "type": "genericNode",
        "position": {
          "x": -1169.5419109541263,
          "y": 37.39856857051487
        },
        "data": {
          "type": "Data",
          "node": {
            "template": {
              "code": {
                "type": "code",
                "required": true,
                "placeholder": "",
                "list": false,
                "show": true,
                "multiline": true,
                "value": "from axiestudio import CustomComponent\nfrom langchain_core.prompts import ChatPromptTemplate\nfrom langfuse import Langfuse\nimport os\n\nclass PromptRetrieverToString(CustomComponent):\n    display_name: str = \"PromptRetrieverToString\"\n    documentation: str = \"http://docs.axiestudio.org/components/custom\"\n    description: str = \"Get prompt from Langfuse and return the prompt string\"\n\n    def build_config(self):\n        return {\"prompt_name\": {\"display_name\": \"Prompt name\"}}\n\n    def build(self, prompt_name: str) -> str:\n\n        langfuse = Langfuse()\n        langfuse_prompt = langfuse.get_prompt(prompt_name)\n        langchain_prompt = langfuse_prompt.get_langchain_prompt()\n    \n        return langchain_prompt\n",
                "fileTypes": [],
                "file_path": "",
                "password": false,
                "name": "code",
                "advanced": false,
                "dynamic": true,
                "info": "",
                "title_case": true
              },
              "prompt_name": {
                "type": "str",
                "required": true,
                "placeholder": "",
                "list": false,
                "show": true,
                "multiline": false,
                "fileTypes": [],
                "file_path": "",
                "password": false,
                "name": "prompt_name",
                "display_name": "Prompt name",
                "advanced": false,
                "dynamic": false,
                "info": "",
                "title_case": true,
                "value": "generate_title_example_01"
              },
              "_type": "CustomComponent"
            },
            "description": "Get prompt from Langfuse and return the prompt string",
            "base_classes": [
              "str"
            ],
            "display_name": "PromptRetrieverToString",
            "documentation": "http://docs.axiestudio.org/components/custom",
            "custom_fields": {
              "prompt_name": null
            },
            "output_types": [
              "str"
            ],
            "field_formatters": {},
            "beta": true
          },
          "id": "Data-ffK41",
          "description": "Get prompt from Langfuse and return the prompt string",
          "display_name": "PromptRetrieverToString"
        },
        "selected": false,
        "width": 384,
        "height": 395,
        "positionAbsolute": {
          "x": -1169.5419109541263,
          "y": 37.39856857051487
        },
        "dragging": false
      },
      {
        "id": "Data-UG3iG",
        "type": "genericNode",
        "position": {
          "x": -1185.0879413206048,
          "y": 472.75610821374335
        },
        "data": {
          "type": "Data",
          "node": {
            "template": {
              "code": {
                "type": "code",
                "required": true,
                "placeholder": "",
                "list": false,
                "show": true,
                "multiline": true,
                "value": "from axiestudio import CustomComponent\nfrom langchain_core.prompts import ChatPromptTemplate\nfrom langfuse import Langfuse\nimport os\n\nclass PromptRetrieverToString(CustomComponent):\n    display_name: str = \"PromptRetrieverToString\"\n    documentation: str = \"http://docs.axiestudio.org/components/custom\"\n    description: str = \"Get prompt from Langfuse and return the prompt string\"\n\n    def build_config(self):\n        return {\"prompt_name\": {\"display_name\": \"Prompt name\"}}\n\n    def build(self, prompt_name: str) -> str:\n      \n        langfuse = Langfuse()\n        langfuse_prompt = langfuse.get_prompt(prompt_name)\n        langchain_prompt = langfuse_prompt.get_langchain_prompt()\n    \n        return langchain_prompt\n",
                "fileTypes": [],
                "file_path": "",
                "password": false,
                "name": "code",
                "advanced": false,
                "dynamic": true,
                "info": "",
                "title_case": true
              },
              "prompt_name": {
                "type": "str",
                "required": true,
                "placeholder": "",
                "list": false,
                "show": true,
                "multiline": false,
                "fileTypes": [],
                "file_path": "",
                "password": false,
                "name": "prompt_name",
                "display_name": "Prompt name",
                "advanced": false,
                "dynamic": false,
                "info": "",
                "title_case": true,
                "value": "generate_title_example_02"
              },
              "_type": "CustomComponent"
            },
            "description": "Get prompt from Langfuse and return the prompt string",
            "base_classes": [
              "str"
            ],
            "display_name": "PromptRetrieverToString",
            "documentation": "http://docs.axiestudio.org/components/custom",
            "custom_fields": {
              "prompt_name": null
            },
            "output_types": [
              "str"
            ],
            "field_formatters": {},
            "beta": true
          },
          "id": "Data-UG3iG",
          "description": "Get prompt from Langfuse and return the prompt string",
          "display_name": "PromptRetrieverToString"
        },
        "selected": true,
        "width": 384,
        "height": 395,
        "positionAbsolute": {
          "x": -1185.0879413206048,
          "y": 472.75610821374335
        },
        "dragging": false
      },
      {
        "id": "Data-Ufx9N",
        "type": "genericNode",
        "position": {
          "x": -605.2706995672617,
          "y": 105.65794605828094
        },
        "data": {
          "type": "Data",
          "node": {
            "template": {
              "code": {
                "type": "code",
                "required": true,
                "placeholder": "",
                "list": false,
                "show": true,
                "multiline": true,
                "value": "from axiestudio import CustomComponent\r\nfrom langchain_core.prompts import PromptTemplate\r\nfrom axiestudio.field_typing import Prompt, TemplateField\r\n\r\n\r\nclass TextCombiner(CustomComponent):\r\n    display_name: str = \"TextCombiner\"\r\n    description: str = \"Combine text inputs into one text output. Use {} to set an input handle.\"\r\n    icon = \"prompts\"\r\n\r\n    def build_config(self):\r\n        return {\r\n            \"template\": TemplateField(display_name=\"Template\"),\r\n        }\r\n\r\n    def build(\r\n        self,\r\n        template: Prompt,\r\n        **kwargs,\r\n    ) -> str:\r\n\r\n        prompt_template = PromptTemplate.from_template(str(template))\r\n        kwargs = {k: \"\\n\".join(v) if isinstance(v, list) else v for k, v in kwargs.items()}\r\n        try:\r\n            formated_prompt = prompt_template.format(**kwargs)\r\n        except Exception as exc:\r\n            raise ValueError(f\"Error formatting prompt: {exc}\") from exc\r\n        self.status = f'Prompt:\\n\"{formated_prompt}\"'\r\n        return formated_prompt\r\n",
                "fileTypes": [],
                "file_path": "",
                "password": false,
                "name": "code",
                "advanced": false,
                "dynamic": true,
                "info": "",
                "title_case": true
              },
              "template": {
                "type": "prompt",
                "required": false,
                "placeholder": "",
                "list": false,
                "show": true,
                "multiline": false,
                "value": "{example1}\n\n{example2}",
                "fileTypes": [],
                "file_path": "",
                "password": false,
                "name": "template",
                "display_name": "Template",
                "advanced": false,
                "dynamic": false,
                "info": "",
                "title_case": true
              },
              "_type": "CustomComponent",
              "example1": {
                "type": "str",
                "required": false,
                "placeholder": "",
                "list": false,
                "show": true,
                "multiline": true,
                "value": "",
                "fileTypes": [],
                "file_path": "",
                "password": false,
                "name": "example1",
                "display_name": "example1",
                "advanced": false,
                "input_types": [
                  "Document",
                  "BaseOutputParser"
                ],
                "dynamic": false,
                "info": "",
                "title_case": true
              },
              "example2": {
                "type": "str",
                "required": false,
                "placeholder": "",
                "list": false,
                "show": true,
                "multiline": true,
                "value": "",
                "fileTypes": [],
                "file_path": "",
                "password": false,
                "name": "example2",
                "display_name": "example2",
                "advanced": false,
                "input_types": [
                  "Document",
                  "BaseOutputParser"
                ],
                "dynamic": false,
                "info": "",
                "title_case": true
              }
            },
            "description": "Combine text inputs into one text output. Use {} to set an input handle.",
            "icon": "prompts",
            "base_classes": [
              "str"
            ],
            "name": "",
            "display_name": "TextCombiner",
            "documentation": "",
            "custom_fields": {
              "template": [
                "example1",
                "example2"
              ]
            },
            "output_types": [
              "str"
            ],
            "full_path": null,
            "field_formatters": {},
            "beta": true,
            "error": null
          },
          "id": "Data-Ufx9N",
          "description": "Combine text inputs into one text output. Use {} to set an input handle.",
          "display_name": "TextCombiner"
        },
        "selected": false,
        "width": 384,
        "height": 575,
        "positionAbsolute": {
          "x": -605.2706995672617,
          "y": 105.65794605828094
        },
        "dragging": false
      },
      {
        "id": "Data-hhWQO",
        "type": "genericNode",
        "position": {
          "x": -662.9912348781617,
          "y": 751.5185526722547
        },
        "data": {
          "type": "Data",
          "node": {
            "template": {
              "code": {
                "type": "code",
                "required": true,
                "placeholder": "",
                "list": false,
                "show": true,
                "multiline": true,
                "value": "from axiestudio import CustomComponent\nfrom langchain_core.prompts import ChatPromptTemplate\nfrom langfuse import Langfuse\nimport os\n\nclass PromptRetrieverToString(CustomComponent):\n    display_name: str = \"PromptRetrieverToString\"\n    documentation: str = \"http://docs.axiestudio.org/components/custom\"\n    description: str = \"Get prompt from Langfuse and return the prompt string\"\n\n    def build_config(self):\n        return {\"prompt_name\": {\"display_name\": \"Prompt name\"}}\n\n    def build(self, prompt_name: str) -> str:\n        \n        langfuse = Langfuse()\n        langfuse_prompt = langfuse.get_prompt(prompt_name)\n        langchain_prompt = langfuse_prompt.get_langchain_prompt()\n    \n        return langchain_prompt\n",
                "fileTypes": [],
                "file_path": "",
                "password": false,
                "name": "code",
                "advanced": false,
                "dynamic": true,
                "info": "",
                "title_case": true
              },
              "prompt_name": {
                "type": "str",
                "required": true,
                "placeholder": "",
                "list": false,
                "show": true,
                "multiline": false,
                "fileTypes": [],
                "file_path": "",
                "password": false,
                "name": "prompt_name",
                "display_name": "Prompt name",
                "advanced": false,
                "dynamic": false,
                "info": "",
                "title_case": true,
                "value": "generate_title_instruction"
              },
              "_type": "CustomComponent"
            },
            "description": "Get prompt from Langfuse and return the prompt string",
            "base_classes": [
              "str"
            ],
            "display_name": "PromptRetrieverToString",
            "documentation": "http://docs.axiestudio.org/components/custom",
            "custom_fields": {
              "prompt_name": null
            },
            "output_types": [
              "str"
            ],
            "field_formatters": {},
            "beta": true,
            "official": false
          },
          "id": "Data-hhWQO"
        },
        "selected": false,
        "width": 384,
        "height": 395,
        "positionAbsolute": {
          "x": -662.9912348781617,
          "y": 751.5185526722547
        },
        "dragging": false
      },
      {
        "id": "HumanMessagePromptTemplate-tKfpj",
        "type": "genericNode",
        "position": {
          "x": -39.25792649939888,
          "y": 993.9803095768473
        },
        "data": {
          "type": "HumanMessagePromptTemplate",
          "node": {
            "template": {
              "additional_kwargs": {
                "type": "dict",
                "required": false,
                "placeholder": "",
                "list": false,
                "show": false,
                "multiline": false,
                "fileTypes": [],
                "password": false,
                "name": "additional_kwargs",
                "advanced": true,
                "dynamic": true,
                "info": "",
                "title_case": true
              },
              "prompt": {
                "type": "prompt",
                "required": true,
                "placeholder": "",
                "list": true,
                "show": true,
                "multiline": true,
                "value": "{input_text}",
                "fileTypes": [],
                "password": false,
                "name": "prompt",
                "advanced": false,
                "dynamic": true,
                "info": "",
                "title_case": true
              },
              "_type": "HumanMessagePromptTemplate",
              "input_text": {
                "type": "str",
                "required": false,
                "placeholder": "",
                "list": false,
                "show": true,
                "multiline": true,
                "value": "",
                "fileTypes": [],
                "file_path": "",
                "password": false,
                "name": "input_text",
                "display_name": "input_text",
                "advanced": false,
                "input_types": [
                  "Document",
                  "BaseOutputParser"
                ],
                "dynamic": false,
                "info": "",
                "title_case": true
              }
            },
            "description": "Human message prompt template. This is a message sent from the user.",
            "icon": null,
            "base_classes": [
              "_StringImageMessagePromptTemplate",
              "HumanMessagePromptTemplate",
              "BaseMessagePromptTemplate"
            ],
            "name": "",
            "display_name": "HumanMessagePromptTemplate",
            "documentation": "https://python.langchain.com/docs/modules/model_io/models/chat/how_to/prompts",
            "custom_fields": {
              "": [
                "input_text"
              ]
            },
            "output_types": [],
            "full_path": null,
            "field_formatters": {},
            "beta": false,
            "error": null
          },
          "id": "HumanMessagePromptTemplate-tKfpj",
          "description": "Human message prompt template. This is a message sent from the user.",
          "display_name": "HumanMessagePromptTemplate"
        },
        "selected": false,
        "width": 384,
        "height": 395,
        "positionAbsolute": {
          "x": -39.25792649939888,
          "y": 993.9803095768473
        },
        "dragging": false
      },
      {
        "id": "Data-xl3uV",
        "type": "genericNode",
        "position": {
          "x": -668.8497367406259,
          "y": 1258.5888307099174
        },
        "data": {
          "type": "Data",
          "node": {
            "template": {
              "code": {
                "type": "code",
                "required": true,
                "placeholder": "",
                "list": false,
                "show": true,
                "multiline": true,
                "value": "from axiestudio import CustomComponent\n\nclass TextPlaceholder(CustomComponent):\n    display_name: str = \"TextPlaceholder\"\n    documentation: str = \"http://docs.axiestudio.org/components/custom\"\n    description: str = \"Plain text placeholder\"\n\n    def build_config(self):\n        return {\"param\": {\"display_name\": \"Content\", \"multiline\":True}}\n\n    def build(self, param: str) -> str:\n        return param\n",
                "fileTypes": [],
                "file_path": "",
                "password": false,
                "name": "code",
                "advanced": false,
                "dynamic": true,
                "info": "",
                "title_case": true
              },
              "param": {
                "type": "str",
                "required": true,
                "placeholder": "",
                "list": false,
                "show": true,
                "multiline": true,
                "fileTypes": [],
                "file_path": "",
                "password": false,
                "name": "param",
                "display_name": "Content",
                "advanced": false,
                "dynamic": false,
                "info": "",
                "title_case": true,
                "value": "{\n    \"User story\": {\n        \"Description\": \"The Notification Service requires an update to include the requirement of disabling the webhook. Specifically, when the service receives a HTTP error code that indicates the unavailability of the webhook target, the webhook should be automatically disabled.\\n\\nCurrently, the webhook behavior is such that each new notification will attempt to be delivered, even if the webhook target is unavailable. This results in the target receiving numerous notifications that are destined to fail. This can lead to issues such as support notification spam.\\n\\nTo address this, the Notification Service should be enhanced to include a check for the enabled status of the webhook target as part of the process of looking up the notification webhook target. This will ensure that notifications are only sent to enabled webhook targets, preventing unnecessary delivery attempts and reducing the risk of support notification spam.\\n\\nThe specific list of error codes that will result in the webhook target being disabled will be provided under the Acceptance Criteria section.\\n\\nAny notifications that are attempted to be sent when the webhook target is disabled will immediately be changed to 'Undeliverable' status.\\n\\nWhen a webhook target is disabled, an alert should be raised to the run support team.\",\n        \"In-scope\": [\n            \"Create status toggle to enable/disable individual webhooks\",\n            \"Automatically disable webhook when appropriate HTTP error code received\",\n            \"Check webhook enabled/disabled status when looking up webhook targets\",\n            \"Change status of any notifications to be sent to disabled webhook targets to 'undeliverable'\",\n            \"Raise an alert when a webhook target is disabled\"\n        ],\n        \"Out-of-scope\": [\n            \"Implementing a user interface for managing webhooks\",\n            \"Creating a logging system for tracking webhook status changes\",\n            \"Integrating with external systems to retrieve error codes\",\n            \"Implementing a notification retry mechanism for temporarily unavailable webhooks\",\n            \"Providing a user interface for managing alerts\",\n            \"Implementing a notification queue system for handling undeliverable notifications\"\n        ],\n        \"Unknowns\": [\n            \"What are the specific HTTP error codes that will result in the webhook target being disabled?\",\n            \"How will the webhook be automatically disabled when the appropriate HTTP error code is received?\",\n            \"How will the enabled/disabled status of the webhook target be checked when looking up webhook targets?\",\n            \"How will the status of notifications be changed to 'Undeliverable' when the webhook target is disabled?\",\n            \"How will the alert be raised to the run support team when a webhook target is disabled?\"\n        ],\n        \"Acceptance Criteria\": {\n            \"Scenarios\": [\n                {\n                    \"Scenario\": \"Disabling webhook on HTTP error code\",\n                    \"Given\": \"The Notification Service is attempting to deliver a notification\",\n                    \"When\": \"The service receives a HTTP error code indicating the unavailability of the webhook target\",\n                    \"Then\": [\n                        \"The webhook target should be automatically disabled\",\n                        \"The notification status should be changed to 'Undeliverable'\",\n                        \"An alert should be raised to the run support team\"\n                    ]\n                },\n                {\n                    \"Scenario\": \"Preventing delivery attempts to disabled webhook targets\",\n                    \"Given\": \"The Notification Service is attempting to deliver a notification\",\n                    \"When\": [\n                        \"The service looks up the notification webhook target\",\n                        \"The webhook target is disabled\"\n                    ],\n                    \"Then\": [\n                        \"The notification should not be sent to the disabled webhook target\",\n                        \"The notification status should be changed to 'Undeliverable'\"\n                    ]\n                },\n                {\n                    \"Scenario\": \"Alerting the run support team on webhook target disablement\",\n                    \"Given\": \"A webhook target is disabled\",\n                    \"When\": \"The webhook target is disabled\",\n                    \"Then\": \"An alert should be raised to the run support team\"\n                }\n            ]\n        }\n    }\n}"
              },
              "_type": "CustomComponent"
            },
            "description": "Plain text placeholder",
            "base_classes": [
              "str"
            ],
            "display_name": "TextPlaceholder",
            "documentation": "http://docs.axiestudio.org/components/custom",
            "custom_fields": {
              "param": null
            },
            "output_types": [
              "str"
            ],
            "field_formatters": {},
            "beta": true,
            "official": false
          },
          "id": "Data-xl3uV"
        },
        "selected": false,
        "width": 384,
        "height": 367,
        "dragging": false
      }
    ],
    "edges": [
      {
        "source": "ChatOpenAI-Yhylk",
        "sourceHandle": "{œbaseClassesœ:[œBaseLanguageModelœ,œBaseLLMœ,œBaseLanguageModelœ],œdataTypeœ:œChatOpenAIœ,œidœ:œChatOpenAI-Yhylkœ}",
        "target": "LLMChain-aFfIy",
        "targetHandle": "{œfieldNameœ:œllmœ,œidœ:œLLMChain-aFfIyœ,œinputTypesœ:null,œtypeœ:œBaseLanguageModelœ}",
        "data": {
          "targetHandle": {
            "fieldName": "llm",
            "id": "LLMChain-aFfIy",
            "inputTypes": null,
            "type": "BaseLanguageModel"
          },
          "sourceHandle": {
            "baseClasses": [
              "BaseLanguageModel",
              "BaseLLM",
              "BaseLanguageModel"
            ],
            "dataType": "ChatOpenAI",
            "id": "ChatOpenAI-Yhylk"
          }
        },
        "style": {
          "stroke": "#555"
        },
        "className": "stroke-gray-900  stroke-connection",
        "animated": false,
        "id": "reactflow__edge-ChatOpenAI-Yhylk{œbaseClassesœ:[œBaseLanguageModelœ,œBaseLLMœ,œBaseLanguageModelœ],œdataTypeœ:œChatOpenAIœ,œidœ:œChatOpenAI-Yhylkœ}-LLMChain-aFfIy{œfieldNameœ:œllmœ,œidœ:œLLMChain-aFfIyœ,œinputTypesœ:null,œtypeœ:œBaseLanguageModelœ}"
      },
      {
        "source": "ChatPromptTemplate-Mmxhr",
        "sourceHandle": "{œbaseClassesœ:[œBasePromptTemplateœ,œBaseChatPromptTemplateœ,œChatPromptTemplateœ],œdataTypeœ:œChatPromptTemplateœ,œidœ:œChatPromptTemplate-Mmxhrœ}",
        "target": "LLMChain-aFfIy",
        "targetHandle": "{œfieldNameœ:œpromptœ,œidœ:œLLMChain-aFfIyœ,œinputTypesœ:null,œtypeœ:œBasePromptTemplateœ}",
        "data": {
          "targetHandle": {
            "fieldName": "prompt",
            "id": "LLMChain-aFfIy",
            "inputTypes": null,
            "type": "BasePromptTemplate"
          },
          "sourceHandle": {
            "baseClasses": [
              "BasePromptTemplate",
              "BaseChatPromptTemplate",
              "ChatPromptTemplate"
            ],
            "dataType": "ChatPromptTemplate",
            "id": "ChatPromptTemplate-Mmxhr"
          }
        },
        "style": {
          "stroke": "#555"
        },
        "className": "stroke-gray-900  stroke-connection",
        "animated": false,
        "id": "reactflow__edge-ChatPromptTemplate-Mmxhr{œbaseClassesœ:[œBasePromptTemplateœ,œBaseChatPromptTemplateœ,œChatPromptTemplateœ],œdataTypeœ:œChatPromptTemplateœ,œidœ:œChatPromptTemplate-Mmxhrœ}-LLMChain-aFfIy{œfieldNameœ:œpromptœ,œidœ:œLLMChain-aFfIyœ,œinputTypesœ:null,œtypeœ:œBasePromptTemplateœ}"
      },
      {
        "source": "SystemMessagePromptTemplate-fhxwY",
        "sourceHandle": "{œbaseClassesœ:[œ_StringImageMessagePromptTemplateœ,œBaseMessagePromptTemplateœ,œSystemMessagePromptTemplateœ],œdataTypeœ:œSystemMessagePromptTemplateœ,œidœ:œSystemMessagePromptTemplate-fhxwYœ}",
        "target": "ChatPromptTemplate-Mmxhr",
        "targetHandle": "{œfieldNameœ:œmessagesœ,œidœ:œChatPromptTemplate-Mmxhrœ,œinputTypesœ:null,œtypeœ:œBaseMessagePromptTemplateœ}",
        "data": {
          "targetHandle": {
            "fieldName": "messages",
            "id": "ChatPromptTemplate-Mmxhr",
            "inputTypes": null,
            "type": "BaseMessagePromptTemplate"
          },
          "sourceHandle": {
            "baseClasses": [
              "_StringImageMessagePromptTemplate",
              "BaseMessagePromptTemplate",
              "SystemMessagePromptTemplate"
            ],
            "dataType": "SystemMessagePromptTemplate",
            "id": "SystemMessagePromptTemplate-fhxwY"
          }
        },
        "style": {
          "stroke": "#555"
        },
        "className": "stroke-gray-900  stroke-connection",
        "animated": false,
        "id": "reactflow__edge-SystemMessagePromptTemplate-fhxwY{œbaseClassesœ:[œ_StringImageMessagePromptTemplateœ,œBaseMessagePromptTemplateœ,œSystemMessagePromptTemplateœ],œdataTypeœ:œSystemMessagePromptTemplateœ,œidœ:œSystemMessagePromptTemplate-fhxwYœ}-ChatPromptTemplate-Mmxhr{œfieldNameœ:œmessagesœ,œidœ:œChatPromptTemplate-Mmxhrœ,œinputTypesœ:null,œtypeœ:œBaseMessagePromptTemplateœ}"
      },
      {
        "source": "Data-ffK41",
        "sourceHandle": "{œbaseClassesœ:[œstrœ],œdataTypeœ:œDataœ,œidœ:œData-ffK41œ}",
        "target": "Data-Ufx9N",
        "targetHandle": "{œfieldNameœ:œexample1œ,œidœ:œData-Ufx9Nœ,œinputTypesœ:[œDocumentœ,œBaseOutputParserœ],œtypeœ:œstrœ}",
        "data": {
          "targetHandle": {
            "fieldName": "example1",
            "id": "Data-Ufx9N",
            "inputTypes": [
              "Document",
              "BaseOutputParser"
            ],
            "type": "str"
          },
          "sourceHandle": {
            "baseClasses": [
              "str"
            ],
            "dataType": "Data",
            "id": "Data-ffK41"
          }
        },
        "style": {
          "stroke": "#555"
        },
        "className": "stroke-gray-900  stroke-connection",
        "animated": false,
        "id": "reactflow__edge-Data-ffK41{œbaseClassesœ:[œstrœ],œdataTypeœ:œDataœ,œidœ:œData-ffK41œ}-Data-Ufx9N{œfieldNameœ:œexample1œ,œidœ:œData-Ufx9Nœ,œinputTypesœ:[œDocumentœ,œBaseOutputParserœ],œtypeœ:œstrœ}"
      },
      {
        "source": "Data-UG3iG",
        "sourceHandle": "{œbaseClassesœ:[œstrœ],œdataTypeœ:œDataœ,œidœ:œData-UG3iGœ}",
        "target": "Data-Ufx9N",
        "targetHandle": "{œfieldNameœ:œexample2œ,œidœ:œData-Ufx9Nœ,œinputTypesœ:[œDocumentœ,œBaseOutputParserœ],œtypeœ:œstrœ}",
        "data": {
          "targetHandle": {
            "fieldName": "example2",
            "id": "Data-Ufx9N",
            "inputTypes": [
              "Document",
              "BaseOutputParser"
            ],
            "type": "str"
          },
          "sourceHandle": {
            "baseClasses": [
              "str"
            ],
            "dataType": "Data",
            "id": "Data-UG3iG"
          }
        },
        "style": {
          "stroke": "#555"
        },
        "className": "stroke-gray-900  stroke-connection",
        "animated": false,
        "id": "reactflow__edge-Data-UG3iG{œbaseClassesœ:[œstrœ],œdataTypeœ:œDataœ,œidœ:œData-UG3iGœ}-Data-Ufx9N{œfieldNameœ:œexample2œ,œidœ:œData-Ufx9Nœ,œinputTypesœ:[œDocumentœ,œBaseOutputParserœ],œtypeœ:œstrœ}"
      },
      {
        "source": "Data-Ufx9N",
        "sourceHandle": "{œbaseClassesœ:[œstrœ],œdataTypeœ:œDataœ,œidœ:œData-Ufx9Nœ}",
        "target": "SystemMessagePromptTemplate-fhxwY",
        "targetHandle": "{œfieldNameœ:œExamplesœ,œidœ:œSystemMessagePromptTemplate-fhxwYœ,œinputTypesœ:[œDocumentœ,œBaseOutputParserœ],œtypeœ:œstrœ}",
        "data": {
          "targetHandle": {
            "fieldName": "Examples",
            "id": "SystemMessagePromptTemplate-fhxwY",
            "inputTypes": [
              "Document",
              "BaseOutputParser"
            ],
            "type": "str"
          },
          "sourceHandle": {
            "baseClasses": [
              "str"
            ],
            "dataType": "Data",
            "id": "Data-Ufx9N"
          }
        },
        "style": {
          "stroke": "#555"
        },
        "className": "stroke-gray-900  stroke-connection",
        "animated": false,
        "id": "reactflow__edge-Data-Ufx9N{œbaseClassesœ:[œstrœ],œdataTypeœ:œDataœ,œidœ:œData-Ufx9Nœ}-SystemMessagePromptTemplate-fhxwY{œfieldNameœ:œExamplesœ,œidœ:œSystemMessagePromptTemplate-fhxwYœ,œinputTypesœ:[œDocumentœ,œBaseOutputParserœ],œtypeœ:œstrœ}"
      },
      {
        "source": "Data-hhWQO",
        "sourceHandle": "{œbaseClassesœ:[œstrœ],œdataTypeœ:œDataœ,œidœ:œData-hhWQOœ}",
        "target": "SystemMessagePromptTemplate-fhxwY",
        "targetHandle": "{œfieldNameœ:œInstructionsœ,œidœ:œSystemMessagePromptTemplate-fhxwYœ,œinputTypesœ:[œDocumentœ,œBaseOutputParserœ],œtypeœ:œstrœ}",
        "data": {
          "targetHandle": {
            "fieldName": "Instructions",
            "id": "SystemMessagePromptTemplate-fhxwY",
            "inputTypes": [
              "Document",
              "BaseOutputParser"
            ],
            "type": "str"
          },
          "sourceHandle": {
            "baseClasses": [
              "str"
            ],
            "dataType": "Data",
            "id": "Data-hhWQO"
          }
        },
        "style": {
          "stroke": "#555"
        },
        "className": "stroke-gray-900  stroke-connection",
        "animated": false,
        "id": "reactflow__edge-Data-hhWQO{œbaseClassesœ:[œstrœ],œdataTypeœ:œDataœ,œidœ:œData-hhWQOœ}-SystemMessagePromptTemplate-fhxwY{œfieldNameœ:œInstructionsœ,œidœ:œSystemMessagePromptTemplate-fhxwYœ,œinputTypesœ:[œDocumentœ,œBaseOutputParserœ],œtypeœ:œstrœ}"
      },
      {
        "source": "HumanMessagePromptTemplate-tKfpj",
        "sourceHandle": "{œbaseClassesœ:[œ_StringImageMessagePromptTemplateœ,œHumanMessagePromptTemplateœ,œBaseMessagePromptTemplateœ],œdataTypeœ:œHumanMessagePromptTemplateœ,œidœ:œHumanMessagePromptTemplate-tKfpjœ}",
        "target": "ChatPromptTemplate-Mmxhr",
        "targetHandle": "{œfieldNameœ:œmessagesœ,œidœ:œChatPromptTemplate-Mmxhrœ,œinputTypesœ:null,œtypeœ:œBaseMessagePromptTemplateœ}",
        "data": {
          "targetHandle": {
            "fieldName": "messages",
            "id": "ChatPromptTemplate-Mmxhr",
            "inputTypes": null,
            "type": "BaseMessagePromptTemplate"
          },
          "sourceHandle": {
            "baseClasses": [
              "_StringImageMessagePromptTemplate",
              "HumanMessagePromptTemplate",
              "BaseMessagePromptTemplate"
            ],
            "dataType": "HumanMessagePromptTemplate",
            "id": "HumanMessagePromptTemplate-tKfpj"
          }
        },
        "style": {
          "stroke": "#555"
        },
        "className": "stroke-gray-900  stroke-connection",
        "animated": false,
        "id": "reactflow__edge-HumanMessagePromptTemplate-tKfpj{œbaseClassesœ:[œ_StringImageMessagePromptTemplateœ,œHumanMessagePromptTemplateœ,œBaseMessagePromptTemplateœ],œdataTypeœ:œHumanMessagePromptTemplateœ,œidœ:œHumanMessagePromptTemplate-tKfpjœ}-ChatPromptTemplate-Mmxhr{œfieldNameœ:œmessagesœ,œidœ:œChatPromptTemplate-Mmxhrœ,œinputTypesœ:null,œtypeœ:œBaseMessagePromptTemplateœ}"
      },
      {
        "source": "Data-xl3uV",
        "sourceHandle": "{œbaseClassesœ:[œstrœ],œdataTypeœ:œDataœ,œidœ:œData-xl3uVœ}",
        "target": "HumanMessagePromptTemplate-tKfpj",
        "targetHandle": "{œfieldNameœ:œinput_textœ,œidœ:œHumanMessagePromptTemplate-tKfpjœ,œinputTypesœ:[œDocumentœ,œBaseOutputParserœ],œtypeœ:œstrœ}",
        "data": {
          "targetHandle": {
            "fieldName": "input_text",
            "id": "HumanMessagePromptTemplate-tKfpj",
            "inputTypes": [
              "Document",
              "BaseOutputParser"
            ],
            "type": "str"
          },
          "sourceHandle": {
            "baseClasses": [
              "str"
            ],
            "dataType": "Data",
            "id": "Data-xl3uV"
          }
        },
        "style": {
          "stroke": "#555"
        },
        "className": "stroke-foreground  stroke-connection",
        "animated": false,
        "id": "reactflow__edge-Data-xl3uV{œbaseClassesœ:[œstrœ],œdataTypeœ:œDataœ,œidœ:œData-xl3uVœ}-HumanMessagePromptTemplate-tKfpj{œfieldNameœ:œinput_textœ,œidœ:œHumanMessagePromptTemplate-tKfpjœ,œinputTypesœ:[œDocumentœ,œBaseOutputParserœ],œtypeœ:œstrœ}"
      }
    ],
    "viewport": {
      "x": 808.3539141522356,
      "y": -144.01294764058844,
      "zoom": 0.7123041133715465
    }
  },
  "metadata": {
    "LLMChain": {
      "count": 1
    },
    "ChatOpenAI": {
      "count": 1
    },
    "ChatPromptTemplate": {
      "count": 1
    },
    "SystemMessagePromptTemplate": {
      "count": 1
    },
    "Data": {
      "count": 5
    },
    "HumanMessagePromptTemplate": {
      "count": 1
    },
    "total": 10
  },
  "original": {
    "id": "58b2ca46-a319-4348-89ab-6f53c12cadf9",
    "name": "User story title generator with Langfuse",
    "description": "Generating Title for User Story - Need Langfuse integration",
    "is_component": false,
    "liked_by_count": "0",
    "downloads_count": "7",
    "metadata": {
      "LLMChain": {
        "count": 1
      },
      "ChatOpenAI": {
        "count": 1
      },
      "ChatPromptTemplate": {
        "count": 1
      },
      "SystemMessagePromptTemplate": {
        "count": 1
      },
      "Data": {
        "count": 5
      },
      "HumanMessagePromptTemplate": {
        "count": 1
      },
      "total": 10
    },
    "last_tested_version": "0.6.18",
    "private": true,
    "data": {
      "nodes": [
        {
          "id": "LLMChain-aFfIy",
          "type": "genericNode",
          "position": {
            "x": 1189.5693728861045,
            "y": 447.0584627246769
          },
          "data": {
            "type": "LLMChain",
            "node": {
              "template": {
                "llm": {
                  "type": "BaseLanguageModel",
                  "required": true,
                  "placeholder": "",
                  "list": false,
                  "show": true,
                  "multiline": false,
                  "fileTypes": [],
                  "file_path": "",
                  "password": false,
                  "name": "llm",
                  "display_name": "LLM",
                  "advanced": false,
                  "dynamic": false,
                  "info": "",
                  "title_case": true
                },
                "memory": {
                  "type": "BaseMemory",
                  "required": false,
                  "placeholder": "",
                  "list": false,
                  "show": true,
                  "multiline": false,
                  "fileTypes": [],
                  "file_path": "",
                  "password": false,
                  "name": "memory",
                  "display_name": "Memory",
                  "advanced": false,
                  "dynamic": false,
                  "info": "",
                  "title_case": true
                },
                "prompt": {
                  "type": "BasePromptTemplate",
                  "required": true,
                  "placeholder": "",
                  "list": false,
                  "show": true,
                  "multiline": false,
                  "fileTypes": [],
                  "file_path": "",
                  "password": false,
                  "name": "prompt",
                  "display_name": "Prompt",
                  "advanced": false,
                  "dynamic": false,
                  "info": "",
                  "title_case": true
                },
                "code": {
                  "type": "code",
                  "required": true,
                  "placeholder": "",
                  "list": false,
                  "show": true,
                  "multiline": true,
                  "value": "from typing import Callable, Optional, Union\n\nfrom langchain.chains import LLMChain\n\nfrom axiestudio import CustomComponent\nfrom axiestudio.field_typing import (\n    BaseLanguageModel,\n    BaseMemory,\n    BasePromptTemplate,\n    Chain,\n)\n\n\nclass LLMChainComponent(CustomComponent):\n    display_name = \"LLMChain\"\n    description = \"Chain to run queries against LLMs\"\n\n    def build_config(self):\n        return {\n            \"prompt\": {\"display_name\": \"Prompt\"},\n            \"llm\": {\"display_name\": \"LLM\"},\n            \"memory\": {\"display_name\": \"Memory\"},\n            \"code\": {\"show\": False},\n        }\n\n    def build(\n        self,\n        prompt: BasePromptTemplate,\n        llm: BaseLanguageModel,\n        memory: Optional[BaseMemory] = None,\n    ) -> Union[Chain, Callable, LLMChain]:\n        return LLMChain(prompt=prompt, llm=llm, memory=memory)\n",
                  "fileTypes": [],
                  "file_path": "",
                  "password": false,
                  "name": "code",
                  "advanced": false,
                  "dynamic": true,
                  "info": "",
                  "title_case": true
                },
                "_type": "CustomComponent"
              },
              "description": "Chain to run queries against LLMs",
              "base_classes": [
                "Chain",
                "Callable",
                "Chain",
                "LLMChain"
              ],
              "display_name": "LLMChain",
              "documentation": "",
              "custom_fields": {
                "prompt": null,
                "llm": null,
                "memory": null
              },
              "output_types": [
                "Chain",
                "Callable",
                "LLMChain"
              ],
              "field_formatters": {},
              "beta": true
            },
            "id": "LLMChain-aFfIy"
          },
          "selected": false,
          "width": 384,
          "height": 425
        },
        {
          "id": "ChatOpenAI-Yhylk",
          "type": "genericNode",
          "position": {
            "x": 618.2270936873742,
            "y": -370.54554388973787
          },
          "data": {
            "type": "ChatOpenAI",
            "node": {
              "template": {
                "code": {
                  "type": "code",
                  "required": true,
                  "placeholder": "",
                  "list": false,
                  "show": true,
                  "multiline": true,
                  "value": "from typing import Optional, Union\n\nfrom langchain.llms import BaseLLM\nfrom langchain_community.chat_models.openai import ChatOpenAI\n\nfrom axiestudio import CustomComponent\nfrom axiestudio.field_typing import BaseLanguageModel, NestedDict\n\n\nclass ChatOpenAIComponent(CustomComponent):\n    display_name = \"ChatOpenAI\"\n    description = \"`OpenAI` Chat large language models API.\"\n\n    def build_config(self):\n        return {\n            \"max_tokens\": {\n                \"display_name\": \"Max Tokens\",\n                \"field_type\": \"int\",\n                \"advanced\": False,\n                \"required\": False,\n            },\n            \"model_kwargs\": {\n                \"display_name\": \"Model Kwargs\",\n                \"field_type\": \"NestedDict\",\n                \"advanced\": True,\n                \"required\": False,\n            },\n            \"model_name\": {\n                \"display_name\": \"Model Name\",\n                \"field_type\": \"str\",\n                \"advanced\": False,\n                \"required\": False,\n                \"options\": [\n                    \"gpt-4-turbo-preview\",\n                    \"gpt-4-0125-preview\",\n                    \"gpt-4-1106-preview\",\n                    \"gpt-4-vision-preview\",\n                    \"gpt-3.5-turbo-0125\",\n                    \"gpt-3.5-turbo-1106\",\n                ],\n            },\n            \"openai_api_base\": {\n                \"display_name\": \"OpenAI API Base\",\n                \"field_type\": \"str\",\n                \"advanced\": False,\n                \"required\": False,\n                \"info\": (\n                    \"The base URL of the OpenAI API. Defaults to https://api.openai.com/v1.\\n\\n\"\n                    \"You can change this to use other APIs like JinaChat, LocalAI and Prem.\"\n                ),\n            },\n            \"openai_api_key\": {\n                \"display_name\": \"OpenAI API Key\",\n                \"field_type\": \"str\",\n                \"advanced\": False,\n                \"required\": False,\n                \"password\": True,\n            },\n            \"temperature\": {\n                \"display_name\": \"Temperature\",\n                \"field_type\": \"float\",\n                \"advanced\": False,\n                \"required\": False,\n                \"value\": 0.7,\n            },\n        }\n\n    def build(\n        self,\n        max_tokens: Optional[int] = 256,\n        model_kwargs: NestedDict = {},\n        model_name: str = \"gpt-4-1106-preview\",\n        openai_api_base: Optional[str] = None,\n        openai_api_key: Optional[str] = None,\n        temperature: float = 0.7,\n    ) -> Union[BaseLanguageModel, BaseLLM]:\n        if not openai_api_base:\n            openai_api_base = \"https://api.openai.com/v1\"\n        return ChatOpenAI(\n            max_tokens=max_tokens,\n            model_kwargs=model_kwargs,\n            model=model_name,\n            base_url=openai_api_base,\n            api_key=openai_api_key,\n            temperature=temperature,\n        )\n",
                  "fileTypes": [],
                  "file_path": "",
                  "password": false,
                  "name": "code",
                  "advanced": false,
                  "dynamic": true,
                  "info": "",
                  "title_case": true
                },
                "max_tokens": {
                  "type": "int",
                  "required": false,
                  "placeholder": "",
                  "list": false,
                  "show": true,
                  "multiline": false,
                  "value": "1024",
                  "fileTypes": [],
                  "file_path": "",
                  "password": false,
                  "name": "max_tokens",
                  "display_name": "Max Tokens",
                  "advanced": false,
                  "dynamic": false,
                  "info": "",
                  "title_case": true
                },
                "model_kwargs": {
                  "type": "NestedDict",
                  "required": false,
                  "placeholder": "",
                  "list": false,
                  "show": true,
                  "multiline": false,
                  "value": {},
                  "fileTypes": [],
                  "file_path": "",
                  "password": false,
                  "name": "model_kwargs",
                  "display_name": "Model Kwargs",
                  "advanced": true,
                  "dynamic": false,
                  "info": "",
                  "title_case": true
                },
                "model_name": {
                  "type": "str",
                  "required": false,
                  "placeholder": "",
                  "list": true,
                  "show": true,
                  "multiline": false,
                  "value": "gpt-3.5-turbo-0125",
                  "fileTypes": [],
                  "file_path": "",
                  "password": false,
                  "options": [
                    "gpt-4-turbo-preview",
                    "gpt-4-0125-preview",
                    "gpt-4-1106-preview",
                    "gpt-4-vision-preview",
                    "gpt-3.5-turbo-0125",
                    "gpt-3.5-turbo-1106"
                  ],
                  "name": "model_name",
                  "display_name": "Model Name",
                  "advanced": false,
                  "dynamic": false,
                  "info": "",
                  "title_case": true
                },
                "openai_api_base": {
                  "type": "str",
                  "required": false,
                  "placeholder": "",
                  "list": false,
                  "show": true,
                  "multiline": false,
                  "fileTypes": [],
                  "file_path": "",
                  "password": false,
                  "name": "openai_api_base",
                  "display_name": "OpenAI API Base",
                  "advanced": false,
                  "dynamic": false,
                  "info": "The base URL of the OpenAI API. Defaults to https://api.openai.com/v1.\n\nYou can change this to use other APIs like JinaChat, LocalAI and Prem.",
                  "title_case": true
                },
                "openai_api_key": {
                  "type": "str",
                  "required": false,
                  "placeholder": "",
                  "list": false,
                  "show": true,
                  "multiline": false,
                  "fileTypes": [],
                  "file_path": "",
                  "password": true,
                  "name": "openai_api_key",
                  "display_name": "OpenAI API Key",
                  "advanced": false,
                  "dynamic": false,
                  "info": "",
                  "title_case": true,
                  "value": ""
                },
                "temperature": {
                  "type": "float",
                  "required": false,
                  "placeholder": "",
                  "list": false,
                  "show": true,
                  "multiline": false,
                  "value": "0.7",
                  "fileTypes": [],
                  "file_path": "",
                  "password": false,
                  "name": "temperature",
                  "display_name": "Temperature",
                  "advanced": false,
                  "dynamic": false,
                  "info": "",
                  "rangeSpec": {
                    "min": -1,
                    "max": 1,
                    "step": 0.1
                  },
                  "title_case": true
                },
                "_type": "CustomComponent"
              },
              "description": "`OpenAI` Chat large language models API.",
              "base_classes": [
                "BaseLanguageModel",
                "BaseLLM",
                "BaseLanguageModel"
              ],
              "display_name": "ChatOpenAI",
              "documentation": "",
              "custom_fields": {
                "max_tokens": null,
                "model_kwargs": null,
                "model_name": null,
                "openai_api_base": null,
                "openai_api_key": null,
                "temperature": null
              },
              "output_types": [
                "BaseLanguageModel",
                "BaseLLM"
              ],
              "field_formatters": {},
              "beta": true
            },
            "id": "ChatOpenAI-Yhylk"
          },
          "selected": false,
          "width": 384,
          "height": 731,
          "positionAbsolute": {
            "x": 618.2270936873742,
            "y": -370.54554388973787
          },
          "dragging": false
        },
        {
          "id": "ChatPromptTemplate-Mmxhr",
          "type": "genericNode",
          "position": {
            "x": 665.0906897557862,
            "y": 662.8695206718493
          },
          "data": {
            "type": "ChatPromptTemplate",
            "node": {
              "template": {
                "messages": {
                  "type": "BaseMessagePromptTemplate",
                  "required": true,
                  "placeholder": "",
                  "list": true,
                  "show": true,
                  "multiline": false,
                  "fileTypes": [],
                  "password": false,
                  "name": "messages",
                  "advanced": false,
                  "dynamic": true,
                  "info": "",
                  "title_case": true
                },
                "output_parser": {
                  "type": "BaseOutputParser",
                  "required": false,
                  "placeholder": "",
                  "list": false,
                  "show": false,
                  "multiline": false,
                  "fileTypes": [],
                  "password": false,
                  "name": "output_parser",
                  "advanced": false,
                  "dynamic": true,
                  "info": "",
                  "title_case": true
                },
                "input_types": {
                  "type": "dict",
                  "required": false,
                  "placeholder": "",
                  "list": false,
                  "show": false,
                  "multiline": false,
                  "fileTypes": [],
                  "password": false,
                  "name": "input_types",
                  "advanced": false,
                  "dynamic": true,
                  "info": "",
                  "title_case": true
                },
                "input_variables": {
                  "type": "str",
                  "required": true,
                  "placeholder": "",
                  "list": true,
                  "show": false,
                  "multiline": false,
                  "fileTypes": [],
                  "password": false,
                  "name": "input_variables",
                  "advanced": false,
                  "dynamic": true,
                  "info": "",
                  "title_case": true
                },
                "metadata": {
                  "type": "dict",
                  "required": false,
                  "placeholder": "",
                  "list": false,
                  "show": false,
                  "multiline": false,
                  "fileTypes": [],
                  "password": false,
                  "name": "metadata",
                  "advanced": false,
                  "dynamic": true,
                  "info": "",
                  "title_case": true
                },
                "name": {
                  "type": "str",
                  "required": false,
                  "placeholder": "",
                  "list": false,
                  "show": false,
                  "multiline": false,
                  "fileTypes": [],
                  "password": false,
                  "name": "name",
                  "advanced": false,
                  "dynamic": true,
                  "info": "",
                  "title_case": true
                },
                "partial_variables": {
                  "type": "dict",
                  "required": false,
                  "placeholder": "",
                  "list": false,
                  "show": false,
                  "multiline": false,
                  "fileTypes": [],
                  "password": false,
                  "name": "partial_variables",
                  "advanced": false,
                  "dynamic": true,
                  "info": "",
                  "title_case": true
                },
                "tags": {
                  "type": "str",
                  "required": false,
                  "placeholder": "",
                  "list": true,
                  "show": false,
                  "multiline": false,
                  "fileTypes": [],
                  "password": false,
                  "name": "tags",
                  "advanced": false,
                  "dynamic": true,
                  "info": "",
                  "title_case": true
                },
                "validate_template": {
                  "type": "bool",
                  "required": false,
                  "placeholder": "",
                  "list": false,
                  "show": false,
                  "multiline": false,
                  "value": false,
                  "fileTypes": [],
                  "password": false,
                  "name": "validate_template",
                  "advanced": false,
                  "dynamic": true,
                  "info": "",
                  "title_case": true
                },
                "_type": "ChatPromptTemplate"
              },
              "description": "Prompt template for chat models.",
              "base_classes": [
                "BasePromptTemplate",
                "BaseChatPromptTemplate",
                "ChatPromptTemplate"
              ],
              "display_name": "ChatPromptTemplate",
              "documentation": "https://python.langchain.com/docs/modules/model_io/models/chat/how_to/prompts",
              "custom_fields": {},
              "output_types": [],
              "field_formatters": {},
              "beta": false
            },
            "id": "ChatPromptTemplate-Mmxhr"
          },
          "selected": false,
          "width": 384,
          "height": 243,
          "positionAbsolute": {
            "x": 665.0906897557862,
            "y": 662.8695206718493
          },
          "dragging": false
        },
        {
          "id": "SystemMessagePromptTemplate-fhxwY",
          "type": "genericNode",
          "position": {
            "x": -33.02687199758117,
            "y": 308.49351585796325
          },
          "data": {
            "type": "SystemMessagePromptTemplate",
            "node": {
              "template": {
                "additional_kwargs": {
                  "type": "dict",
                  "required": false,
                  "placeholder": "",
                  "list": false,
                  "show": false,
                  "multiline": false,
                  "fileTypes": [],
                  "password": false,
                  "name": "additional_kwargs",
                  "advanced": true,
                  "dynamic": true,
                  "info": "",
                  "title_case": true
                },
                "prompt": {
                  "type": "prompt",
                  "required": true,
                  "placeholder": "",
                  "list": true,
                  "show": true,
                  "multiline": true,
                  "value": "## Instructions\n{Instructions}\n\n## EXAMPLES:\n\n{Examples}",
                  "fileTypes": [],
                  "password": false,
                  "name": "prompt",
                  "advanced": false,
                  "dynamic": true,
                  "info": "",
                  "title_case": true
                },
                "_type": "SystemMessagePromptTemplate",
                "Instructions": {
                  "type": "str",
                  "required": false,
                  "placeholder": "",
                  "list": false,
                  "show": true,
                  "multiline": true,
                  "value": "",
                  "fileTypes": [],
                  "file_path": "",
                  "password": false,
                  "name": "Instructions",
                  "display_name": "Instructions",
                  "advanced": false,
                  "input_types": [
                    "Document",
                    "BaseOutputParser"
                  ],
                  "dynamic": false,
                  "info": "",
                  "title_case": true
                },
                "Examples": {
                  "type": "str",
                  "required": false,
                  "placeholder": "",
                  "list": false,
                  "show": true,
                  "multiline": true,
                  "value": "",
                  "fileTypes": [],
                  "file_path": "",
                  "password": false,
                  "name": "Examples",
                  "display_name": "Examples",
                  "advanced": false,
                  "input_types": [
                    "Document",
                    "BaseOutputParser"
                  ],
                  "dynamic": false,
                  "info": "",
                  "title_case": true
                }
              },
              "description": "System message prompt template.",
              "icon": null,
              "base_classes": [
                "_StringImageMessagePromptTemplate",
                "BaseMessagePromptTemplate",
                "SystemMessagePromptTemplate"
              ],
              "name": "",
              "display_name": "SystemMessagePromptTemplate",
              "documentation": "https://python.langchain.com/docs/modules/model_io/models/chat/how_to/prompts",
              "custom_fields": {
                "": [
                  "Instructions",
                  "Examples"
                ]
              },
              "output_types": [],
              "full_path": null,
              "field_formatters": {},
              "beta": false,
              "error": null
            },
            "id": "SystemMessagePromptTemplate-fhxwY",
            "description": "System message prompt template.",
            "display_name": "SystemMessagePromptTemplate"
          },
          "selected": false,
          "width": 384,
          "height": 469,
          "positionAbsolute": {
            "x": -33.02687199758117,
            "y": 308.49351585796325
          },
          "dragging": true
        },
        {
          "id": "Data-ffK41",
          "type": "genericNode",
          "position": {
            "x": -1169.5419109541263,
            "y": 37.39856857051487
          },
          "data": {
            "type": "Data",
            "node": {
              "template": {
                "code": {
                  "type": "code",
                  "required": true,
                  "placeholder": "",
                  "list": false,
                  "show": true,
                  "multiline": true,
                  "value": "from axiestudio import CustomComponent\nfrom langchain_core.prompts import ChatPromptTemplate\nfrom langfuse import Langfuse\nimport os\n\nclass PromptRetrieverToString(CustomComponent):\n    display_name: str = \"PromptRetrieverToString\"\n    documentation: str = \"http://docs.axiestudio.org/components/custom\"\n    description: str = \"Get prompt from Langfuse and return the prompt string\"\n\n    def build_config(self):\n        return {\"prompt_name\": {\"display_name\": \"Prompt name\"}}\n\n    def build(self, prompt_name: str) -> str:\n\n        langfuse = Langfuse()\n        langfuse_prompt = langfuse.get_prompt(prompt_name)\n        langchain_prompt = langfuse_prompt.get_langchain_prompt()\n    \n        return langchain_prompt\n",
                  "fileTypes": [],
                  "file_path": "",
                  "password": false,
                  "name": "code",
                  "advanced": false,
                  "dynamic": true,
                  "info": "",
                  "title_case": true
                },
                "prompt_name": {
                  "type": "str",
                  "required": true,
                  "placeholder": "",
                  "list": false,
                  "show": true,
                  "multiline": false,
                  "fileTypes": [],
                  "file_path": "",
                  "password": false,
                  "name": "prompt_name",
                  "display_name": "Prompt name",
                  "advanced": false,
                  "dynamic": false,
                  "info": "",
                  "title_case": true,
                  "value": "generate_title_example_01"
                },
                "_type": "CustomComponent"
              },
              "description": "Get prompt from Langfuse and return the prompt string",
              "base_classes": [
                "str"
              ],
              "display_name": "PromptRetrieverToString",
              "documentation": "http://docs.axiestudio.org/components/custom",
              "custom_fields": {
                "prompt_name": null
              },
              "output_types": [
                "str"
              ],
              "field_formatters": {},
              "beta": true
            },
            "id": "Data-ffK41",
            "description": "Get prompt from Langfuse and return the prompt string",
            "display_name": "PromptRetrieverToString"
          },
          "selected": false,
          "width": 384,
          "height": 395,
          "positionAbsolute": {
            "x": -1169.5419109541263,
            "y": 37.39856857051487
          },
          "dragging": false
        },
        {
          "id": "Data-UG3iG",
          "type": "genericNode",
          "position": {
            "x": -1185.0879413206048,
            "y": 472.75610821374335
          },
          "data": {
            "type": "Data",
            "node": {
              "template": {
                "code": {
                  "type": "code",
                  "required": true,
                  "placeholder": "",
                  "list": false,
                  "show": true,
                  "multiline": true,
                  "value": "from axiestudio import CustomComponent\nfrom langchain_core.prompts import ChatPromptTemplate\nfrom langfuse import Langfuse\nimport os\n\nclass PromptRetrieverToString(CustomComponent):\n    display_name: str = \"PromptRetrieverToString\"\n    documentation: str = \"http://docs.axiestudio.org/components/custom\"\n    description: str = \"Get prompt from Langfuse and return the prompt string\"\n\n    def build_config(self):\n        return {\"prompt_name\": {\"display_name\": \"Prompt name\"}}\n\n    def build(self, prompt_name: str) -> str:\n      \n        langfuse = Langfuse()\n        langfuse_prompt = langfuse.get_prompt(prompt_name)\n        langchain_prompt = langfuse_prompt.get_langchain_prompt()\n    \n        return langchain_prompt\n",
                  "fileTypes": [],
                  "file_path": "",
                  "password": false,
                  "name": "code",
                  "advanced": false,
                  "dynamic": true,
                  "info": "",
                  "title_case": true
                },
                "prompt_name": {
                  "type": "str",
                  "required": true,
                  "placeholder": "",
                  "list": false,
                  "show": true,
                  "multiline": false,
                  "fileTypes": [],
                  "file_path": "",
                  "password": false,
                  "name": "prompt_name",
                  "display_name": "Prompt name",
                  "advanced": false,
                  "dynamic": false,
                  "info": "",
                  "title_case": true,
                  "value": "generate_title_example_02"
                },
                "_type": "CustomComponent"
              },
              "description": "Get prompt from Langfuse and return the prompt string",
              "base_classes": [
                "str"
              ],
              "display_name": "PromptRetrieverToString",
              "documentation": "http://docs.axiestudio.org/components/custom",
              "custom_fields": {
                "prompt_name": null
              },
              "output_types": [
                "str"
              ],
              "field_formatters": {},
              "beta": true
            },
            "id": "Data-UG3iG",
            "description": "Get prompt from Langfuse and return the prompt string",
            "display_name": "PromptRetrieverToString"
          },
          "selected": true,
          "width": 384,
          "height": 395,
          "positionAbsolute": {
            "x": -1185.0879413206048,
            "y": 472.75610821374335
          },
          "dragging": false
        },
        {
          "id": "Data-Ufx9N",
          "type": "genericNode",
          "position": {
            "x": -605.2706995672617,
            "y": 105.65794605828094
          },
          "data": {
            "type": "Data",
            "node": {
              "template": {
                "code": {
                  "type": "code",
                  "required": true,
                  "placeholder": "",
                  "list": false,
                  "show": true,
                  "multiline": true,
                  "value": "from axiestudio import CustomComponent\r\nfrom langchain_core.prompts import PromptTemplate\r\nfrom axiestudio.field_typing import Prompt, TemplateField\r\n\r\n\r\nclass TextCombiner(CustomComponent):\r\n    display_name: str = \"TextCombiner\"\r\n    description: str = \"Combine text inputs into one text output. Use {} to set an input handle.\"\r\n    icon = \"prompts\"\r\n\r\n    def build_config(self):\r\n        return {\r\n            \"template\": TemplateField(display_name=\"Template\"),\r\n        }\r\n\r\n    def build(\r\n        self,\r\n        template: Prompt,\r\n        **kwargs,\r\n    ) -> str:\r\n\r\n        prompt_template = PromptTemplate.from_template(str(template))\r\n        kwargs = {k: \"\\n\".join(v) if isinstance(v, list) else v for k, v in kwargs.items()}\r\n        try:\r\n            formated_prompt = prompt_template.format(**kwargs)\r\n        except Exception as exc:\r\n            raise ValueError(f\"Error formatting prompt: {exc}\") from exc\r\n        self.status = f'Prompt:\\n\"{formated_prompt}\"'\r\n        return formated_prompt\r\n",
                  "fileTypes": [],
                  "file_path": "",
                  "password": false,
                  "name": "code",
                  "advanced": false,
                  "dynamic": true,
                  "info": "",
                  "title_case": true
                },
                "template": {
                  "type": "prompt",
                  "required": false,
                  "placeholder": "",
                  "list": false,
                  "show": true,
                  "multiline": false,
                  "value": "{example1}\n\n{example2}",
                  "fileTypes": [],
                  "file_path": "",
                  "password": false,
                  "name": "template",
                  "display_name": "Template",
                  "advanced": false,
                  "dynamic": false,
                  "info": "",
                  "title_case": true
                },
                "_type": "CustomComponent",
                "example1": {
                  "type": "str",
                  "required": false,
                  "placeholder": "",
                  "list": false,
                  "show": true,
                  "multiline": true,
                  "value": "",
                  "fileTypes": [],
                  "file_path": "",
                  "password": false,
                  "name": "example1",
                  "display_name": "example1",
                  "advanced": false,
                  "input_types": [
                    "Document",
                    "BaseOutputParser"
                  ],
                  "dynamic": false,
                  "info": "",
                  "title_case": true
                },
                "example2": {
                  "type": "str",
                  "required": false,
                  "placeholder": "",
                  "list": false,
                  "show": true,
                  "multiline": true,
                  "value": "",
                  "fileTypes": [],
                  "file_path": "",
                  "password": false,
                  "name": "example2",
                  "display_name": "example2",
                  "advanced": false,
                  "input_types": [
                    "Document",
                    "BaseOutputParser"
                  ],
                  "dynamic": false,
                  "info": "",
                  "title_case": true
                }
              },
              "description": "Combine text inputs into one text output. Use {} to set an input handle.",
              "icon": "prompts",
              "base_classes": [
                "str"
              ],
              "name": "",
              "display_name": "TextCombiner",
              "documentation": "",
              "custom_fields": {
                "template": [
                  "example1",
                  "example2"
                ]
              },
              "output_types": [
                "str"
              ],
              "full_path": null,
              "field_formatters": {},
              "beta": true,
              "error": null
            },
            "id": "Data-Ufx9N",
            "description": "Combine text inputs into one text output. Use {} to set an input handle.",
            "display_name": "TextCombiner"
          },
          "selected": false,
          "width": 384,
          "height": 575,
          "positionAbsolute": {
            "x": -605.2706995672617,
            "y": 105.65794605828094
          },
          "dragging": false
        },
        {
          "id": "Data-hhWQO",
          "type": "genericNode",
          "position": {
            "x": -662.9912348781617,
            "y": 751.5185526722547
          },
          "data": {
            "type": "Data",
            "node": {
              "template": {
                "code": {
                  "type": "code",
                  "required": true,
                  "placeholder": "",
                  "list": false,
                  "show": true,
                  "multiline": true,
                  "value": "from axiestudio import CustomComponent\nfrom langchain_core.prompts import ChatPromptTemplate\nfrom langfuse import Langfuse\nimport os\n\nclass PromptRetrieverToString(CustomComponent):\n    display_name: str = \"PromptRetrieverToString\"\n    documentation: str = \"http://docs.axiestudio.org/components/custom\"\n    description: str = \"Get prompt from Langfuse and return the prompt string\"\n\n    def build_config(self):\n        return {\"prompt_name\": {\"display_name\": \"Prompt name\"}}\n\n    def build(self, prompt_name: str) -> str:\n        \n        langfuse = Langfuse()\n        langfuse_prompt = langfuse.get_prompt(prompt_name)\n        langchain_prompt = langfuse_prompt.get_langchain_prompt()\n    \n        return langchain_prompt\n",
                  "fileTypes": [],
                  "file_path": "",
                  "password": false,
                  "name": "code",
                  "advanced": false,
                  "dynamic": true,
                  "info": "",
                  "title_case": true
                },
                "prompt_name": {
                  "type": "str",
                  "required": true,
                  "placeholder": "",
                  "list": false,
                  "show": true,
                  "multiline": false,
                  "fileTypes": [],
                  "file_path": "",
                  "password": false,
                  "name": "prompt_name",
                  "display_name": "Prompt name",
                  "advanced": false,
                  "dynamic": false,
                  "info": "",
                  "title_case": true,
                  "value": "generate_title_instruction"
                },
                "_type": "CustomComponent"
              },
              "description": "Get prompt from Langfuse and return the prompt string",
              "base_classes": [
                "str"
              ],
              "display_name": "PromptRetrieverToString",
              "documentation": "http://docs.axiestudio.org/components/custom",
              "custom_fields": {
                "prompt_name": null
              },
              "output_types": [
                "str"
              ],
              "field_formatters": {},
              "beta": true,
              "official": false
            },
            "id": "Data-hhWQO"
          },
          "selected": false,
          "width": 384,
          "height": 395,
          "positionAbsolute": {
            "x": -662.9912348781617,
            "y": 751.5185526722547
          },
          "dragging": false
        },
        {
          "id": "HumanMessagePromptTemplate-tKfpj",
          "type": "genericNode",
          "position": {
            "x": -39.25792649939888,
            "y": 993.9803095768473
          },
          "data": {
            "type": "HumanMessagePromptTemplate",
            "node": {
              "template": {
                "additional_kwargs": {
                  "type": "dict",
                  "required": false,
                  "placeholder": "",
                  "list": false,
                  "show": false,
                  "multiline": false,
                  "fileTypes": [],
                  "password": false,
                  "name": "additional_kwargs",
                  "advanced": true,
                  "dynamic": true,
                  "info": "",
                  "title_case": true
                },
                "prompt": {
                  "type": "prompt",
                  "required": true,
                  "placeholder": "",
                  "list": true,
                  "show": true,
                  "multiline": true,
                  "value": "{input_text}",
                  "fileTypes": [],
                  "password": false,
                  "name": "prompt",
                  "advanced": false,
                  "dynamic": true,
                  "info": "",
                  "title_case": true
                },
                "_type": "HumanMessagePromptTemplate",
                "input_text": {
                  "type": "str",
                  "required": false,
                  "placeholder": "",
                  "list": false,
                  "show": true,
                  "multiline": true,
                  "value": "",
                  "fileTypes": [],
                  "file_path": "",
                  "password": false,
                  "name": "input_text",
                  "display_name": "input_text",
                  "advanced": false,
                  "input_types": [
                    "Document",
                    "BaseOutputParser"
                  ],
                  "dynamic": false,
                  "info": "",
                  "title_case": true
                }
              },
              "description": "Human message prompt template. This is a message sent from the user.",
              "icon": null,
              "base_classes": [
                "_StringImageMessagePromptTemplate",
                "HumanMessagePromptTemplate",
                "BaseMessagePromptTemplate"
              ],
              "name": "",
              "display_name": "HumanMessagePromptTemplate",
              "documentation": "https://python.langchain.com/docs/modules/model_io/models/chat/how_to/prompts",
              "custom_fields": {
                "": [
                  "input_text"
                ]
              },
              "output_types": [],
              "full_path": null,
              "field_formatters": {},
              "beta": false,
              "error": null
            },
            "id": "HumanMessagePromptTemplate-tKfpj",
            "description": "Human message prompt template. This is a message sent from the user.",
            "display_name": "HumanMessagePromptTemplate"
          },
          "selected": false,
          "width": 384,
          "height": 395,
          "positionAbsolute": {
            "x": -39.25792649939888,
            "y": 993.9803095768473
          },
          "dragging": false
        },
        {
          "id": "Data-xl3uV",
          "type": "genericNode",
          "position": {
            "x": -668.8497367406259,
            "y": 1258.5888307099174
          },
          "data": {
            "type": "Data",
            "node": {
              "template": {
                "code": {
                  "type": "code",
                  "required": true,
                  "placeholder": "",
                  "list": false,
                  "show": true,
                  "multiline": true,
                  "value": "from axiestudio import CustomComponent\n\nclass TextPlaceholder(CustomComponent):\n    display_name: str = \"TextPlaceholder\"\n    documentation: str = \"http://docs.axiestudio.org/components/custom\"\n    description: str = \"Plain text placeholder\"\n\n    def build_config(self):\n        return {\"param\": {\"display_name\": \"Content\", \"multiline\":True}}\n\n    def build(self, param: str) -> str:\n        return param\n",
                  "fileTypes": [],
                  "file_path": "",
                  "password": false,
                  "name": "code",
                  "advanced": false,
                  "dynamic": true,
                  "info": "",
                  "title_case": true
                },
                "param": {
                  "type": "str",
                  "required": true,
                  "placeholder": "",
                  "list": false,
                  "show": true,
                  "multiline": true,
                  "fileTypes": [],
                  "file_path": "",
                  "password": false,
                  "name": "param",
                  "display_name": "Content",
                  "advanced": false,
                  "dynamic": false,
                  "info": "",
                  "title_case": true,
                  "value": "{\n    \"User story\": {\n        \"Description\": \"The Notification Service requires an update to include the requirement of disabling the webhook. Specifically, when the service receives a HTTP error code that indicates the unavailability of the webhook target, the webhook should be automatically disabled.\\n\\nCurrently, the webhook behavior is such that each new notification will attempt to be delivered, even if the webhook target is unavailable. This results in the target receiving numerous notifications that are destined to fail. This can lead to issues such as support notification spam.\\n\\nTo address this, the Notification Service should be enhanced to include a check for the enabled status of the webhook target as part of the process of looking up the notification webhook target. This will ensure that notifications are only sent to enabled webhook targets, preventing unnecessary delivery attempts and reducing the risk of support notification spam.\\n\\nThe specific list of error codes that will result in the webhook target being disabled will be provided under the Acceptance Criteria section.\\n\\nAny notifications that are attempted to be sent when the webhook target is disabled will immediately be changed to 'Undeliverable' status.\\n\\nWhen a webhook target is disabled, an alert should be raised to the run support team.\",\n        \"In-scope\": [\n            \"Create status toggle to enable/disable individual webhooks\",\n            \"Automatically disable webhook when appropriate HTTP error code received\",\n            \"Check webhook enabled/disabled status when looking up webhook targets\",\n            \"Change status of any notifications to be sent to disabled webhook targets to 'undeliverable'\",\n            \"Raise an alert when a webhook target is disabled\"\n        ],\n        \"Out-of-scope\": [\n            \"Implementing a user interface for managing webhooks\",\n            \"Creating a logging system for tracking webhook status changes\",\n            \"Integrating with external systems to retrieve error codes\",\n            \"Implementing a notification retry mechanism for temporarily unavailable webhooks\",\n            \"Providing a user interface for managing alerts\",\n            \"Implementing a notification queue system for handling undeliverable notifications\"\n        ],\n        \"Unknowns\": [\n            \"What are the specific HTTP error codes that will result in the webhook target being disabled?\",\n            \"How will the webhook be automatically disabled when the appropriate HTTP error code is received?\",\n            \"How will the enabled/disabled status of the webhook target be checked when looking up webhook targets?\",\n            \"How will the status of notifications be changed to 'Undeliverable' when the webhook target is disabled?\",\n            \"How will the alert be raised to the run support team when a webhook target is disabled?\"\n        ],\n        \"Acceptance Criteria\": {\n            \"Scenarios\": [\n                {\n                    \"Scenario\": \"Disabling webhook on HTTP error code\",\n                    \"Given\": \"The Notification Service is attempting to deliver a notification\",\n                    \"When\": \"The service receives a HTTP error code indicating the unavailability of the webhook target\",\n                    \"Then\": [\n                        \"The webhook target should be automatically disabled\",\n                        \"The notification status should be changed to 'Undeliverable'\",\n                        \"An alert should be raised to the run support team\"\n                    ]\n                },\n                {\n                    \"Scenario\": \"Preventing delivery attempts to disabled webhook targets\",\n                    \"Given\": \"The Notification Service is attempting to deliver a notification\",\n                    \"When\": [\n                        \"The service looks up the notification webhook target\",\n                        \"The webhook target is disabled\"\n                    ],\n                    \"Then\": [\n                        \"The notification should not be sent to the disabled webhook target\",\n                        \"The notification status should be changed to 'Undeliverable'\"\n                    ]\n                },\n                {\n                    \"Scenario\": \"Alerting the run support team on webhook target disablement\",\n                    \"Given\": \"A webhook target is disabled\",\n                    \"When\": \"The webhook target is disabled\",\n                    \"Then\": \"An alert should be raised to the run support team\"\n                }\n            ]\n        }\n    }\n}"
                },
                "_type": "CustomComponent"
              },
              "description": "Plain text placeholder",
              "base_classes": [
                "str"
              ],
              "display_name": "TextPlaceholder",
              "documentation": "http://docs.axiestudio.org/components/custom",
              "custom_fields": {
                "param": null
              },
              "output_types": [
                "str"
              ],
              "field_formatters": {},
              "beta": true,
              "official": false
            },
            "id": "Data-xl3uV"
          },
          "selected": false,
          "width": 384,
          "height": 367,
          "dragging": false
        }
      ],
      "edges": [
        {
          "source": "ChatOpenAI-Yhylk",
          "sourceHandle": "{œbaseClassesœ:[œBaseLanguageModelœ,œBaseLLMœ,œBaseLanguageModelœ],œdataTypeœ:œChatOpenAIœ,œidœ:œChatOpenAI-Yhylkœ}",
          "target": "LLMChain-aFfIy",
          "targetHandle": "{œfieldNameœ:œllmœ,œidœ:œLLMChain-aFfIyœ,œinputTypesœ:null,œtypeœ:œBaseLanguageModelœ}",
          "data": {
            "targetHandle": {
              "fieldName": "llm",
              "id": "LLMChain-aFfIy",
              "inputTypes": null,
              "type": "BaseLanguageModel"
            },
            "sourceHandle": {
              "baseClasses": [
                "BaseLanguageModel",
                "BaseLLM",
                "BaseLanguageModel"
              ],
              "dataType": "ChatOpenAI",
              "id": "ChatOpenAI-Yhylk"
            }
          },
          "style": {
            "stroke": "#555"
          },
          "className": "stroke-gray-900  stroke-connection",
          "animated": false,
          "id": "reactflow__edge-ChatOpenAI-Yhylk{œbaseClassesœ:[œBaseLanguageModelœ,œBaseLLMœ,œBaseLanguageModelœ],œdataTypeœ:œChatOpenAIœ,œidœ:œChatOpenAI-Yhylkœ}-LLMChain-aFfIy{œfieldNameœ:œllmœ,œidœ:œLLMChain-aFfIyœ,œinputTypesœ:null,œtypeœ:œBaseLanguageModelœ}"
        },
        {
          "source": "ChatPromptTemplate-Mmxhr",
          "sourceHandle": "{œbaseClassesœ:[œBasePromptTemplateœ,œBaseChatPromptTemplateœ,œChatPromptTemplateœ],œdataTypeœ:œChatPromptTemplateœ,œidœ:œChatPromptTemplate-Mmxhrœ}",
          "target": "LLMChain-aFfIy",
          "targetHandle": "{œfieldNameœ:œpromptœ,œidœ:œLLMChain-aFfIyœ,œinputTypesœ:null,œtypeœ:œBasePromptTemplateœ}",
          "data": {
            "targetHandle": {
              "fieldName": "prompt",
              "id": "LLMChain-aFfIy",
              "inputTypes": null,
              "type": "BasePromptTemplate"
            },
            "sourceHandle": {
              "baseClasses": [
                "BasePromptTemplate",
                "BaseChatPromptTemplate",
                "ChatPromptTemplate"
              ],
              "dataType": "ChatPromptTemplate",
              "id": "ChatPromptTemplate-Mmxhr"
            }
          },
          "style": {
            "stroke": "#555"
          },
          "className": "stroke-gray-900  stroke-connection",
          "animated": false,
          "id": "reactflow__edge-ChatPromptTemplate-Mmxhr{œbaseClassesœ:[œBasePromptTemplateœ,œBaseChatPromptTemplateœ,œChatPromptTemplateœ],œdataTypeœ:œChatPromptTemplateœ,œidœ:œChatPromptTemplate-Mmxhrœ}-LLMChain-aFfIy{œfieldNameœ:œpromptœ,œidœ:œLLMChain-aFfIyœ,œinputTypesœ:null,œtypeœ:œBasePromptTemplateœ}"
        },
        {
          "source": "SystemMessagePromptTemplate-fhxwY",
          "sourceHandle": "{œbaseClassesœ:[œ_StringImageMessagePromptTemplateœ,œBaseMessagePromptTemplateœ,œSystemMessagePromptTemplateœ],œdataTypeœ:œSystemMessagePromptTemplateœ,œidœ:œSystemMessagePromptTemplate-fhxwYœ}",
          "target": "ChatPromptTemplate-Mmxhr",
          "targetHandle": "{œfieldNameœ:œmessagesœ,œidœ:œChatPromptTemplate-Mmxhrœ,œinputTypesœ:null,œtypeœ:œBaseMessagePromptTemplateœ}",
          "data": {
            "targetHandle": {
              "fieldName": "messages",
              "id": "ChatPromptTemplate-Mmxhr",
              "inputTypes": null,
              "type": "BaseMessagePromptTemplate"
            },
            "sourceHandle": {
              "baseClasses": [
                "_StringImageMessagePromptTemplate",
                "BaseMessagePromptTemplate",
                "SystemMessagePromptTemplate"
              ],
              "dataType": "SystemMessagePromptTemplate",
              "id": "SystemMessagePromptTemplate-fhxwY"
            }
          },
          "style": {
            "stroke": "#555"
          },
          "className": "stroke-gray-900  stroke-connection",
          "animated": false,
          "id": "reactflow__edge-SystemMessagePromptTemplate-fhxwY{œbaseClassesœ:[œ_StringImageMessagePromptTemplateœ,œBaseMessagePromptTemplateœ,œSystemMessagePromptTemplateœ],œdataTypeœ:œSystemMessagePromptTemplateœ,œidœ:œSystemMessagePromptTemplate-fhxwYœ}-ChatPromptTemplate-Mmxhr{œfieldNameœ:œmessagesœ,œidœ:œChatPromptTemplate-Mmxhrœ,œinputTypesœ:null,œtypeœ:œBaseMessagePromptTemplateœ}"
        },
        {
          "source": "Data-ffK41",
          "sourceHandle": "{œbaseClassesœ:[œstrœ],œdataTypeœ:œDataœ,œidœ:œData-ffK41œ}",
          "target": "Data-Ufx9N",
          "targetHandle": "{œfieldNameœ:œexample1œ,œidœ:œData-Ufx9Nœ,œinputTypesœ:[œDocumentœ,œBaseOutputParserœ],œtypeœ:œstrœ}",
          "data": {
            "targetHandle": {
              "fieldName": "example1",
              "id": "Data-Ufx9N",
              "inputTypes": [
                "Document",
                "BaseOutputParser"
              ],
              "type": "str"
            },
            "sourceHandle": {
              "baseClasses": [
                "str"
              ],
              "dataType": "Data",
              "id": "Data-ffK41"
            }
          },
          "style": {
            "stroke": "#555"
          },
          "className": "stroke-gray-900  stroke-connection",
          "animated": false,
          "id": "reactflow__edge-Data-ffK41{œbaseClassesœ:[œstrœ],œdataTypeœ:œDataœ,œidœ:œData-ffK41œ}-Data-Ufx9N{œfieldNameœ:œexample1œ,œidœ:œData-Ufx9Nœ,œinputTypesœ:[œDocumentœ,œBaseOutputParserœ],œtypeœ:œstrœ}"
        },
        {
          "source": "Data-UG3iG",
          "sourceHandle": "{œbaseClassesœ:[œstrœ],œdataTypeœ:œDataœ,œidœ:œData-UG3iGœ}",
          "target": "Data-Ufx9N",
          "targetHandle": "{œfieldNameœ:œexample2œ,œidœ:œData-Ufx9Nœ,œinputTypesœ:[œDocumentœ,œBaseOutputParserœ],œtypeœ:œstrœ}",
          "data": {
            "targetHandle": {
              "fieldName": "example2",
              "id": "Data-Ufx9N",
              "inputTypes": [
                "Document",
                "BaseOutputParser"
              ],
              "type": "str"
            },
            "sourceHandle": {
              "baseClasses": [
                "str"
              ],
              "dataType": "Data",
              "id": "Data-UG3iG"
            }
          },
          "style": {
            "stroke": "#555"
          },
          "className": "stroke-gray-900  stroke-connection",
          "animated": false,
          "id": "reactflow__edge-Data-UG3iG{œbaseClassesœ:[œstrœ],œdataTypeœ:œDataœ,œidœ:œData-UG3iGœ}-Data-Ufx9N{œfieldNameœ:œexample2œ,œidœ:œData-Ufx9Nœ,œinputTypesœ:[œDocumentœ,œBaseOutputParserœ],œtypeœ:œstrœ}"
        },
        {
          "source": "Data-Ufx9N",
          "sourceHandle": "{œbaseClassesœ:[œstrœ],œdataTypeœ:œDataœ,œidœ:œData-Ufx9Nœ}",
          "target": "SystemMessagePromptTemplate-fhxwY",
          "targetHandle": "{œfieldNameœ:œExamplesœ,œidœ:œSystemMessagePromptTemplate-fhxwYœ,œinputTypesœ:[œDocumentœ,œBaseOutputParserœ],œtypeœ:œstrœ}",
          "data": {
            "targetHandle": {
              "fieldName": "Examples",
              "id": "SystemMessagePromptTemplate-fhxwY",
              "inputTypes": [
                "Document",
                "BaseOutputParser"
              ],
              "type": "str"
            },
            "sourceHandle": {
              "baseClasses": [
                "str"
              ],
              "dataType": "Data",
              "id": "Data-Ufx9N"
            }
          },
          "style": {
            "stroke": "#555"
          },
          "className": "stroke-gray-900  stroke-connection",
          "animated": false,
          "id": "reactflow__edge-Data-Ufx9N{œbaseClassesœ:[œstrœ],œdataTypeœ:œDataœ,œidœ:œData-Ufx9Nœ}-SystemMessagePromptTemplate-fhxwY{œfieldNameœ:œExamplesœ,œidœ:œSystemMessagePromptTemplate-fhxwYœ,œinputTypesœ:[œDocumentœ,œBaseOutputParserœ],œtypeœ:œstrœ}"
        },
        {
          "source": "Data-hhWQO",
          "sourceHandle": "{œbaseClassesœ:[œstrœ],œdataTypeœ:œDataœ,œidœ:œData-hhWQOœ}",
          "target": "SystemMessagePromptTemplate-fhxwY",
          "targetHandle": "{œfieldNameœ:œInstructionsœ,œidœ:œSystemMessagePromptTemplate-fhxwYœ,œinputTypesœ:[œDocumentœ,œBaseOutputParserœ],œtypeœ:œstrœ}",
          "data": {
            "targetHandle": {
              "fieldName": "Instructions",
              "id": "SystemMessagePromptTemplate-fhxwY",
              "inputTypes": [
                "Document",
                "BaseOutputParser"
              ],
              "type": "str"
            },
            "sourceHandle": {
              "baseClasses": [
                "str"
              ],
              "dataType": "Data",
              "id": "Data-hhWQO"
            }
          },
          "style": {
            "stroke": "#555"
          },
          "className": "stroke-gray-900  stroke-connection",
          "animated": false,
          "id": "reactflow__edge-Data-hhWQO{œbaseClassesœ:[œstrœ],œdataTypeœ:œDataœ,œidœ:œData-hhWQOœ}-SystemMessagePromptTemplate-fhxwY{œfieldNameœ:œInstructionsœ,œidœ:œSystemMessagePromptTemplate-fhxwYœ,œinputTypesœ:[œDocumentœ,œBaseOutputParserœ],œtypeœ:œstrœ}"
        },
        {
          "source": "HumanMessagePromptTemplate-tKfpj",
          "sourceHandle": "{œbaseClassesœ:[œ_StringImageMessagePromptTemplateœ,œHumanMessagePromptTemplateœ,œBaseMessagePromptTemplateœ],œdataTypeœ:œHumanMessagePromptTemplateœ,œidœ:œHumanMessagePromptTemplate-tKfpjœ}",
          "target": "ChatPromptTemplate-Mmxhr",
          "targetHandle": "{œfieldNameœ:œmessagesœ,œidœ:œChatPromptTemplate-Mmxhrœ,œinputTypesœ:null,œtypeœ:œBaseMessagePromptTemplateœ}",
          "data": {
            "targetHandle": {
              "fieldName": "messages",
              "id": "ChatPromptTemplate-Mmxhr",
              "inputTypes": null,
              "type": "BaseMessagePromptTemplate"
            },
            "sourceHandle": {
              "baseClasses": [
                "_StringImageMessagePromptTemplate",
                "HumanMessagePromptTemplate",
                "BaseMessagePromptTemplate"
              ],
              "dataType": "HumanMessagePromptTemplate",
              "id": "HumanMessagePromptTemplate-tKfpj"
            }
          },
          "style": {
            "stroke": "#555"
          },
          "className": "stroke-gray-900  stroke-connection",
          "animated": false,
          "id": "reactflow__edge-HumanMessagePromptTemplate-tKfpj{œbaseClassesœ:[œ_StringImageMessagePromptTemplateœ,œHumanMessagePromptTemplateœ,œBaseMessagePromptTemplateœ],œdataTypeœ:œHumanMessagePromptTemplateœ,œidœ:œHumanMessagePromptTemplate-tKfpjœ}-ChatPromptTemplate-Mmxhr{œfieldNameœ:œmessagesœ,œidœ:œChatPromptTemplate-Mmxhrœ,œinputTypesœ:null,œtypeœ:œBaseMessagePromptTemplateœ}"
        },
        {
          "source": "Data-xl3uV",
          "sourceHandle": "{œbaseClassesœ:[œstrœ],œdataTypeœ:œDataœ,œidœ:œData-xl3uVœ}",
          "target": "HumanMessagePromptTemplate-tKfpj",
          "targetHandle": "{œfieldNameœ:œinput_textœ,œidœ:œHumanMessagePromptTemplate-tKfpjœ,œinputTypesœ:[œDocumentœ,œBaseOutputParserœ],œtypeœ:œstrœ}",
          "data": {
            "targetHandle": {
              "fieldName": "input_text",
              "id": "HumanMessagePromptTemplate-tKfpj",
              "inputTypes": [
                "Document",
                "BaseOutputParser"
              ],
              "type": "str"
            },
            "sourceHandle": {
              "baseClasses": [
                "str"
              ],
              "dataType": "Data",
              "id": "Data-xl3uV"
            }
          },
          "style": {
            "stroke": "#555"
          },
          "className": "stroke-foreground  stroke-connection",
          "animated": false,
          "id": "reactflow__edge-Data-xl3uV{œbaseClassesœ:[œstrœ],œdataTypeœ:œDataœ,œidœ:œData-xl3uVœ}-HumanMessagePromptTemplate-tKfpj{œfieldNameœ:œinput_textœ,œidœ:œHumanMessagePromptTemplate-tKfpjœ,œinputTypesœ:[œDocumentœ,œBaseOutputParserœ],œtypeœ:œstrœ}"
        }
      ],
      "viewport": {
        "x": 808.3539141522356,
        "y": -144.01294764058844,
        "zoom": 0.7123041133715465
      }
    },
    "date_created": "2024-04-26T08:34:07.306Z",
    "date_updated": "2024-04-30T04:10:31.905Z",
    "status": "Public",
    "sort": null,
    "user_updated": "dc599610-3065-4b5b-94ed-de108ec210dd",
    "user_created": {
      "username": "wiresky",
      "first_name": "Nguyen",
      "last_name": "Nam",
      "id": "dc599610-3065-4b5b-94ed-de108ec210dd"
    },
    "tags": []
  },
  "conversion": {
    "converted_at": "2025-08-19T18:08:58.389Z",
    "converted_from": "langflow",
    "converted_to": "axiestudio",
    "conversions_made": 36,
    "converter_version": "1.0.0"
  }
}