{
  "id": "9763fbf2-0293-4076-bb8a-0c25557216fe",
  "name": "Rivet",
  "description": "Flow into the Future of Language. (Converted from Langflow Store for AxieStudio compatibility)",
  "type": "FLOW",
  "is_component": false,
  "author": {
    "username": "wiresky",
    "first_name": "Nguyen",
    "last_name": "Nam",
    "id": "dc599610-3065-4b5b-94ed-de108ec210dd",
    "full_name": "Nguyen Nam"
  },
  "store_url": "https://www.langflow.store/store/component/9763fbf2-0293-4076-bb8a-0c25557216fe",
  "stats": {
    "downloads": 0,
    "likes": 0
  },
  "dates": {
    "created": "2024-04-26T07:33:23.241Z",
    "updated": "2024-04-26T07:33:23.290Z",
    "downloaded": "2025-08-19T17:50:05.043Z"
  },
  "tags": [],
  "technical": {
    "last_tested_version": "0.6.17",
    "private": true,
    "status": "Public"
  },
  "data": {
    "nodes": [
      {
        "id": "Data-G2UR2",
        "type": "genericNode",
        "position": {
          "x": 16.072022154821525,
          "y": -164.73450799359313
        },
        "data": {
          "type": "Data",
          "node": {
            "template": {
              "code": {
                "type": "code",
                "required": true,
                "placeholder": "",
                "list": false,
                "show": true,
                "multiline": true,
                "value": "from axiestudio import CustomComponent\n\nclass TextPlaceholder(CustomComponent):\n    display_name: str = \"TextPlaceholder\"\n    documentation: str = \"http://docs.axiestudio.org/components/custom\"\n\n    def build_config(self):\n        return {\"param\": {\"display_name\": \"Content\", \"multiline\":True}}\n\n    def build(self, param: str) -> str:\n        return param\n",
                "fileTypes": [],
                "file_path": "",
                "password": false,
                "name": "code",
                "advanced": false,
                "dynamic": true,
                "info": "",
                "title_case": true
              },
              "param": {
                "type": "str",
                "required": true,
                "placeholder": "",
                "list": false,
                "show": true,
                "multiline": true,
                "fileTypes": [],
                "file_path": "",
                "password": false,
                "name": "param",
                "display_name": "Content",
                "advanced": false,
                "dynamic": false,
                "info": "",
                "title_case": true,
                "value": "#### INPUT\nThe Notification Service requires an update to include the requirement of disabling the webhook. Specifically, when the service receives a HTTP error code that indicates the unavailability of the webhook target, the webhook should be automatically disabled.\n\nCurrently, the webhook behavior is such that each new notification will attempt to be delivered, even if the webhook target is unavailable. This results in the target receiving numerous notifications that are destined to fail. This can lead to issues such as support notification spam.\n\nTo address this, the Notification Service should be enhanced to include a check for the enabled status of the webhook target as part of the process of looking up the notification webhook target. This will ensure that notifications are only sent to enabled webhook targets, preventing unnecessary delivery attempts and reducing the risk of support notification spam.\n\nThe specific list of error codes that will result in the webhook target being disabled will be provided under the Acceptance Criteria section.\n\nAny notifications that are attempted to be sent when the webhook target is disabled will immediately be changed to 'Undeliverable' status.\n\nWhen a webhook target is disabled, an alert should be raised to the run support team.\n\n#### OUTPUT\n{\n  \"User story\": {\n    \"Description\": \"The Notification Service requires an update to include the requirement of disabling the webhook. Specifically, when the service receives a HTTP error code that indicates the unavailability of the webhook target, the webhook should be automatically disabled.\\n\\nCurrently, the webhook behavior is such that each new notification will attempt to be delivered, even if the webhook target is unavailable. This results in the target receiving numerous notifications that are destined to fail. This can lead to issues such as support notification spam.\\n\\nTo address this, the Notification Service should be enhanced to include a check for the enabled status of the webhook target as part of the process of looking up the notification webhook target. This will ensure that notifications are only sent to enabled webhook targets, preventing unnecessary delivery attempts and reducing the risk of support notification spam.\\n\\nThe specific list of error codes that will result in the webhook target being disabled will be provided under the Acceptance Criteria section.\\n\\nAny notifications that are attempted to be sent when the webhook target is disabled will immediately be changed to 'Undeliverable' status.\\n\\nWhen a webhook target is disabled, an alert should be raised to the run support team.\",\n    \"In-scope\": [\n      \"Create status toggle to enable/disable individual webhooks\",\n      \"Automatically disable webhook when appropriate HTTP error code received\",\n      \"Check webhook enabled/disabled status when looking up webhook targets\",\n      \"Change status of any notifications to be sent to disabled webhook targets to 'undeliverable'\",\n      \"Raise an alert when a webhook target is disabled\"\n    ]\n  }\n}\n\n\n        "
              },
              "_type": "CustomComponent"
            },
            "base_classes": [
              "str"
            ],
            "display_name": "TextPlaceholder",
            "documentation": "http://docs.axiestudio.org/components/custom",
            "custom_fields": {
              "param": null
            },
            "output_types": [
              "str"
            ],
            "field_formatters": {},
            "beta": true
          },
          "id": "Data-G2UR2",
          "display_name": "TextPlaceholder"
        },
        "selected": true,
        "width": 384,
        "height": 346,
        "dragging": false,
        "positionAbsolute": {
          "x": 16.072022154821525,
          "y": -164.73450799359313
        }
      },
      {
        "id": "Data-yo7R0",
        "type": "genericNode",
        "position": {
          "x": 25.708994222643355,
          "y": 280.8498351078305
        },
        "data": {
          "type": "Data",
          "node": {
            "template": {
              "code": {
                "type": "code",
                "required": true,
                "placeholder": "",
                "list": false,
                "show": true,
                "multiline": true,
                "value": "from axiestudio import CustomComponent\n\nclass TextPlaceholder(CustomComponent):\n    display_name: str = \"TextPlaceholder\"\n    documentation: str = \"http://docs.axiestudio.org/components/custom\"\n\n    def build_config(self):\n        return {\"param\": {\"display_name\": \"Content\", \"multiline\":True}}\n\n    def build(self, param: str) -> str:\n        return param\n",
                "fileTypes": [],
                "file_path": "",
                "password": false,
                "name": "code",
                "advanced": false,
                "dynamic": true,
                "info": "",
                "title_case": true
              },
              "param": {
                "type": "str",
                "required": true,
                "placeholder": "",
                "list": false,
                "show": true,
                "multiline": true,
                "fileTypes": [],
                "file_path": "",
                "password": false,
                "name": "param",
                "display_name": "Content",
                "advanced": false,
                "dynamic": false,
                "info": "",
                "title_case": true,
                "value": "#### INPUT\n{\n    \"User story\": {\n        \"Title\": \"Update Notification Service to Disable Webhook on HTTP Error Code\",\n        \"Description\": \"The Notification Service requires an update to include the requirement of disabling the webhook. Specifically, when the service receives a HTTP error code that indicates the unavailability of the webhook target, the webhook should be automatically disabled.\\n\\nCurrently, the webhook behavior is such that each new notification will attempt to be delivered, even if the webhook target is unavailable. This results in the target receiving numerous notifications that are destined to fail. This can lead to issues such as support notification spam.\\n\\nTo address this, the Notification Service should be enhanced to include a check for the enabled status of the webhook target as part of the process of looking up the notification webhook target. This will ensure that notifications are only sent to enabled webhook targets, preventing unnecessary delivery attempts and reducing the risk of support notification spam.\\n\\nThe specific list of error codes that will result in the webhook target being disabled will be provided under the Acceptance Criteria section.\\n\\nAny notifications that are attempted to be sent when the webhook target is disabled will immediately be changed to 'Undeliverable' status.\\n\\nWhen a webhook target is disabled, an alert should be raised to the run support team.\"\n    }\n}\n\n#### OUTPUT\n{\n  \"User story\": {\n    \"Title\": \"Update Notification Service to Disable Webhook on HTTP Error Code\",\n    \"Description\": \"The Notification Service requires an update to include the requirement of disabling the webhook. Specifically, when the service receives a HTTP error code that indicates the unavailability of the webhook target, the webhook should be automatically disabled.\\n\\nCurrently, the webhook behavior is such that each new notification will attempt to be delivered, even if the webhook target is unavailable. This results in the target receiving numerous notifications that are destined to fail. This can lead to issues such as support notification spam.\\n\\nTo address this, the Notification Service should be enhanced to include a check for the enabled status of the webhook target as part of the process of looking up the notification webhook target. This will ensure that notifications are only sent to enabled webhook targets, preventing unnecessary delivery attempts and reducing the risk of support notification spam.\\n\\nThe specific list of error codes that will result in the webhook target being disabled will be provided under the Acceptance Criteria section.\\n\\nAny notifications that are attempted to be sent when the webhook target is disabled will immediately be changed to 'Undeliverable' status.\\n\\nWhen a webhook target is disabled, an alert should be raised to the run support team.\",\n    \"In-scope\": [\n      \"Create status toggle to enable/disable individual webhooks\",\n      \"Automatically disable webhook when appropriate HTTP error code received\",\n      \"Check webhook enabled/disabled status when looking up webhook targets\",\n      \"Change status of any notifications to be sent to disabled webhook targets to 'undeliverable'\",\n      \"Raise an alert when a webhook target is disabled\"\n    ]\n  }\n}"
              },
              "_type": "CustomComponent"
            },
            "base_classes": [
              "str"
            ],
            "display_name": "TextPlaceholder",
            "documentation": "http://docs.axiestudio.org/components/custom",
            "custom_fields": {
              "param": null
            },
            "output_types": [
              "str"
            ],
            "field_formatters": {},
            "beta": true
          },
          "id": "Data-yo7R0",
          "display_name": "TextPlaceholder"
        },
        "selected": false,
        "width": 384,
        "height": 346,
        "positionAbsolute": {
          "x": 25.708994222643355,
          "y": 280.8498351078305
        },
        "dragging": false
      },
      {
        "id": "Data-xTfe8",
        "type": "genericNode",
        "position": {
          "x": 683.1091043090651,
          "y": 26.340338666117617
        },
        "data": {
          "type": "Data",
          "node": {
            "template": {
              "code": {
                "type": "code",
                "required": true,
                "placeholder": "",
                "list": false,
                "show": true,
                "multiline": true,
                "value": "from axiestudio import CustomComponent\r\nfrom langchain_core.prompts import PromptTemplate\r\nfrom axiestudio.field_typing import Prompt, TemplateField\r\n\r\n\r\nclass TextCombiner(CustomComponent):\r\n    display_name: str = \"TextCombiner\"\r\n    description: str = \"Combine text inputs into one text output\"\r\n    icon = \"prompts\"\r\n\r\n    def build_config(self):\r\n        return {\r\n            \"template\": TemplateField(display_name=\"Template\"),\r\n        }\r\n\r\n    def build(\r\n        self,\r\n        template: Prompt,\r\n        **kwargs,\r\n    ) -> str:\r\n\r\n        prompt_template = PromptTemplate.from_template(str(template))\r\n        kwargs = {k: \"\\n\".join(v) if isinstance(v, list) else v for k, v in kwargs.items()}\r\n        try:\r\n            formated_prompt = prompt_template.format(**kwargs)\r\n        except Exception as exc:\r\n            raise ValueError(f\"Error formatting prompt: {exc}\") from exc\r\n        self.status = f'Prompt:\\n\"{formated_prompt}\"'\r\n        return formated_prompt\r\n",
                "fileTypes": [],
                "file_path": "",
                "password": false,
                "name": "code",
                "advanced": false,
                "dynamic": true,
                "info": "",
                "title_case": true
              },
              "template": {
                "type": "prompt",
                "required": false,
                "placeholder": "",
                "list": false,
                "show": true,
                "multiline": false,
                "value": "{ex1}\n\n{ex2}",
                "fileTypes": [],
                "file_path": "",
                "password": false,
                "name": "template",
                "display_name": "Template",
                "advanced": false,
                "dynamic": false,
                "info": "",
                "title_case": true
              },
              "_type": "CustomComponent",
              "ex1": {
                "type": "str",
                "required": false,
                "placeholder": "",
                "list": false,
                "show": true,
                "multiline": true,
                "value": "",
                "fileTypes": [],
                "file_path": "",
                "password": false,
                "name": "ex1",
                "display_name": "ex1",
                "advanced": false,
                "input_types": [
                  "Document",
                  "BaseOutputParser"
                ],
                "dynamic": false,
                "info": "",
                "title_case": true
              },
              "ex2": {
                "type": "str",
                "required": false,
                "placeholder": "",
                "list": false,
                "show": true,
                "multiline": true,
                "value": "",
                "fileTypes": [],
                "file_path": "",
                "password": false,
                "name": "ex2",
                "display_name": "ex2",
                "advanced": false,
                "input_types": [
                  "Document",
                  "BaseOutputParser"
                ],
                "dynamic": false,
                "info": "",
                "title_case": true
              }
            },
            "description": "Combine text inputs into one text output",
            "icon": "prompts",
            "base_classes": [
              "str"
            ],
            "name": "",
            "display_name": "TextCombiner",
            "documentation": "",
            "custom_fields": {
              "template": [
                "ex1",
                "ex2"
              ]
            },
            "output_types": [
              "str"
            ],
            "full_path": null,
            "field_formatters": {},
            "beta": true,
            "error": null
          },
          "id": "Data-xTfe8",
          "description": "Combine text inputs into one text output",
          "display_name": "TextCombiner"
        },
        "selected": false,
        "width": 384,
        "height": 553,
        "dragging": false,
        "positionAbsolute": {
          "x": 683.1091043090651,
          "y": 26.340338666117617
        }
      },
      {
        "id": "LLMChain-UXa2S",
        "type": "genericNode",
        "position": {
          "x": 2385.9303789871565,
          "y": -257.56332706247144
        },
        "data": {
          "type": "LLMChain",
          "node": {
            "template": {
              "llm": {
                "type": "BaseLanguageModel",
                "required": true,
                "placeholder": "",
                "list": false,
                "show": true,
                "multiline": false,
                "fileTypes": [],
                "file_path": "",
                "password": false,
                "name": "llm",
                "display_name": "LLM",
                "advanced": false,
                "dynamic": false,
                "info": "",
                "title_case": true
              },
              "memory": {
                "type": "BaseMemory",
                "required": false,
                "placeholder": "",
                "list": false,
                "show": true,
                "multiline": false,
                "fileTypes": [],
                "file_path": "",
                "password": false,
                "name": "memory",
                "display_name": "Memory",
                "advanced": false,
                "dynamic": false,
                "info": "",
                "title_case": true
              },
              "prompt": {
                "type": "BasePromptTemplate",
                "required": true,
                "placeholder": "",
                "list": false,
                "show": true,
                "multiline": false,
                "fileTypes": [],
                "file_path": "",
                "password": false,
                "name": "prompt",
                "display_name": "Prompt",
                "advanced": false,
                "dynamic": false,
                "info": "",
                "title_case": true
              },
              "code": {
                "type": "code",
                "required": true,
                "placeholder": "",
                "list": false,
                "show": true,
                "multiline": true,
                "value": "from typing import Callable, Optional, Union\n\nfrom langchain.chains import LLMChain\n\nfrom axiestudio import CustomComponent\nfrom axiestudio.field_typing import (\n    BaseLanguageModel,\n    BaseMemory,\n    BasePromptTemplate,\n    Chain,\n)\n\n\nclass LLMChainComponent(CustomComponent):\n    display_name = \"LLMChain\"\n    description = \"Chain to run queries against LLMs\"\n\n    def build_config(self):\n        return {\n            \"prompt\": {\"display_name\": \"Prompt\"},\n            \"llm\": {\"display_name\": \"LLM\"},\n            \"memory\": {\"display_name\": \"Memory\"},\n            \"code\": {\"show\": False},\n        }\n\n    def build(\n        self,\n        prompt: BasePromptTemplate,\n        llm: BaseLanguageModel,\n        memory: Optional[BaseMemory] = None,\n    ) -> Union[Chain, Callable, LLMChain]:\n        return LLMChain(prompt=prompt, llm=llm, memory=memory)\n",
                "fileTypes": [],
                "file_path": "",
                "password": false,
                "name": "code",
                "advanced": false,
                "dynamic": true,
                "info": "",
                "title_case": true
              },
              "_type": "CustomComponent"
            },
            "description": "Chain to run queries against LLMs",
            "base_classes": [
              "Chain",
              "Callable",
              "Chain",
              "LLMChain"
            ],
            "display_name": "LLMChain",
            "documentation": "",
            "custom_fields": {
              "prompt": null,
              "llm": null,
              "memory": null
            },
            "output_types": [
              "Chain",
              "Callable",
              "LLMChain"
            ],
            "field_formatters": {},
            "beta": true
          },
          "id": "LLMChain-UXa2S"
        },
        "selected": false,
        "width": 384,
        "height": 424,
        "positionAbsolute": {
          "x": 2385.9303789871565,
          "y": -257.56332706247144
        },
        "dragging": false
      },
      {
        "id": "ChatOpenAI-BKPLI",
        "type": "genericNode",
        "position": {
          "x": 1715.9303789871576,
          "y": -1131.5633270624699
        },
        "data": {
          "type": "ChatOpenAI",
          "node": {
            "template": {
              "code": {
                "type": "code",
                "required": true,
                "placeholder": "",
                "list": false,
                "show": true,
                "multiline": true,
                "value": "from typing import Optional, Union\n\nfrom langchain.llms import BaseLLM\nfrom langchain_community.chat_models.openai import ChatOpenAI\n\nfrom axiestudio import CustomComponent\nfrom axiestudio.field_typing import BaseLanguageModel, NestedDict\n\n\nclass ChatOpenAIComponent(CustomComponent):\n    display_name = \"ChatOpenAI\"\n    description = \"`OpenAI` Chat large language models API.\"\n\n    def build_config(self):\n        return {\n            \"max_tokens\": {\n                \"display_name\": \"Max Tokens\",\n                \"field_type\": \"int\",\n                \"advanced\": False,\n                \"required\": False,\n            },\n            \"model_kwargs\": {\n                \"display_name\": \"Model Kwargs\",\n                \"field_type\": \"NestedDict\",\n                \"advanced\": True,\n                \"required\": False,\n            },\n            \"model_name\": {\n                \"display_name\": \"Model Name\",\n                \"field_type\": \"str\",\n                \"advanced\": False,\n                \"required\": False,\n                \"options\": [\n                    \"gpt-4-turbo-preview\",\n                    \"gpt-4-0125-preview\",\n                    \"gpt-4-1106-preview\",\n                    \"gpt-4-vision-preview\",\n                    \"gpt-3.5-turbo-0125\",\n                    \"gpt-3.5-turbo-1106\",\n                ],\n            },\n            \"openai_api_base\": {\n                \"display_name\": \"OpenAI API Base\",\n                \"field_type\": \"str\",\n                \"advanced\": False,\n                \"required\": False,\n                \"info\": (\n                    \"The base URL of the OpenAI API. Defaults to https://api.openai.com/v1.\\n\\n\"\n                    \"You can change this to use other APIs like JinaChat, LocalAI and Prem.\"\n                ),\n            },\n            \"openai_api_key\": {\n                \"display_name\": \"OpenAI API Key\",\n                \"field_type\": \"str\",\n                \"advanced\": False,\n                \"required\": False,\n                \"password\": True,\n            },\n            \"temperature\": {\n                \"display_name\": \"Temperature\",\n                \"field_type\": \"float\",\n                \"advanced\": False,\n                \"required\": False,\n                \"value\": 0.7,\n            },\n        }\n\n    def build(\n        self,\n        max_tokens: Optional[int] = 256,\n        model_kwargs: NestedDict = {},\n        model_name: str = \"gpt-4-1106-preview\",\n        openai_api_base: Optional[str] = None,\n        openai_api_key: Optional[str] = None,\n        temperature: float = 0.7,\n    ) -> Union[BaseLanguageModel, BaseLLM]:\n        if not openai_api_base:\n            openai_api_base = \"https://api.openai.com/v1\"\n        return ChatOpenAI(\n            max_tokens=max_tokens,\n            model_kwargs=model_kwargs,\n            model=model_name,\n            base_url=openai_api_base,\n            api_key=openai_api_key,\n            temperature=temperature,\n        )\n",
                "fileTypes": [],
                "file_path": "",
                "password": false,
                "name": "code",
                "advanced": false,
                "dynamic": true,
                "info": "",
                "title_case": true
              },
              "max_tokens": {
                "type": "int",
                "required": false,
                "placeholder": "",
                "list": false,
                "show": true,
                "multiline": false,
                "value": "1024",
                "fileTypes": [],
                "file_path": "",
                "password": false,
                "name": "max_tokens",
                "display_name": "Max Tokens",
                "advanced": false,
                "dynamic": false,
                "info": "",
                "title_case": true
              },
              "model_kwargs": {
                "type": "NestedDict",
                "required": false,
                "placeholder": "",
                "list": false,
                "show": true,
                "multiline": false,
                "value": {},
                "fileTypes": [],
                "file_path": "",
                "password": false,
                "name": "model_kwargs",
                "display_name": "Model Kwargs",
                "advanced": true,
                "dynamic": false,
                "info": "",
                "title_case": true
              },
              "model_name": {
                "type": "str",
                "required": false,
                "placeholder": "",
                "list": true,
                "show": true,
                "multiline": false,
                "value": "gpt-3.5-turbo-0125",
                "fileTypes": [],
                "file_path": "",
                "password": false,
                "options": [
                  "gpt-4-turbo-preview",
                  "gpt-4-0125-preview",
                  "gpt-4-1106-preview",
                  "gpt-4-vision-preview",
                  "gpt-3.5-turbo-0125",
                  "gpt-3.5-turbo-1106"
                ],
                "name": "model_name",
                "display_name": "Model Name",
                "advanced": false,
                "dynamic": false,
                "info": "",
                "title_case": true
              },
              "openai_api_base": {
                "type": "str",
                "required": false,
                "placeholder": "",
                "list": false,
                "show": true,
                "multiline": false,
                "fileTypes": [],
                "file_path": "",
                "password": false,
                "name": "openai_api_base",
                "display_name": "OpenAI API Base",
                "advanced": false,
                "dynamic": false,
                "info": "The base URL of the OpenAI API. Defaults to https://api.openai.com/v1.\n\nYou can change this to use other APIs like JinaChat, LocalAI and Prem.",
                "title_case": true
              },
              "openai_api_key": {
                "type": "str",
                "required": false,
                "placeholder": "",
                "list": false,
                "show": true,
                "multiline": false,
                "fileTypes": [],
                "file_path": "",
                "password": true,
                "name": "openai_api_key",
                "display_name": "OpenAI API Key",
                "advanced": false,
                "dynamic": false,
                "info": "",
                "title_case": true,
                "value": ""
              },
              "temperature": {
                "type": "float",
                "required": false,
                "placeholder": "",
                "list": false,
                "show": true,
                "multiline": false,
                "value": 0.7,
                "fileTypes": [],
                "file_path": "",
                "password": false,
                "name": "temperature",
                "display_name": "Temperature",
                "advanced": false,
                "dynamic": false,
                "info": "",
                "rangeSpec": {
                  "min": -1,
                  "max": 1,
                  "step": 0.1
                },
                "title_case": true
              },
              "_type": "CustomComponent"
            },
            "description": "`OpenAI` Chat large language models API.",
            "base_classes": [
              "BaseLanguageModel",
              "BaseLLM",
              "BaseLanguageModel"
            ],
            "display_name": "ChatOpenAI",
            "documentation": "",
            "custom_fields": {
              "max_tokens": null,
              "model_kwargs": null,
              "model_name": null,
              "openai_api_base": null,
              "openai_api_key": null,
              "temperature": null
            },
            "output_types": [
              "BaseLanguageModel",
              "BaseLLM"
            ],
            "field_formatters": {},
            "beta": true
          },
          "id": "ChatOpenAI-BKPLI"
        },
        "selected": false,
        "width": 384,
        "height": 728,
        "positionAbsolute": {
          "x": 1715.9303789871576,
          "y": -1131.5633270624699
        },
        "dragging": false
      },
      {
        "id": "ChatPromptTemplate-rITUZ",
        "type": "genericNode",
        "position": {
          "x": 1913.9303789871567,
          "y": 132.43667293752787
        },
        "data": {
          "type": "ChatPromptTemplate",
          "node": {
            "template": {
              "messages": {
                "type": "BaseMessagePromptTemplate",
                "required": true,
                "placeholder": "",
                "list": true,
                "show": true,
                "multiline": false,
                "fileTypes": [],
                "password": false,
                "name": "messages",
                "advanced": false,
                "dynamic": true,
                "info": "",
                "title_case": true
              },
              "output_parser": {
                "type": "BaseOutputParser",
                "required": false,
                "placeholder": "",
                "list": false,
                "show": false,
                "multiline": false,
                "fileTypes": [],
                "password": false,
                "name": "output_parser",
                "advanced": false,
                "dynamic": true,
                "info": "",
                "title_case": true
              },
              "input_types": {
                "type": "dict",
                "required": false,
                "placeholder": "",
                "list": false,
                "show": false,
                "multiline": false,
                "fileTypes": [],
                "password": false,
                "name": "input_types",
                "advanced": false,
                "dynamic": true,
                "info": "",
                "title_case": true
              },
              "input_variables": {
                "type": "str",
                "required": true,
                "placeholder": "",
                "list": true,
                "show": false,
                "multiline": false,
                "fileTypes": [],
                "password": false,
                "name": "input_variables",
                "advanced": false,
                "dynamic": true,
                "info": "",
                "title_case": true
              },
              "metadata": {
                "type": "dict",
                "required": false,
                "placeholder": "",
                "list": false,
                "show": false,
                "multiline": false,
                "fileTypes": [],
                "password": false,
                "name": "metadata",
                "advanced": false,
                "dynamic": true,
                "info": "",
                "title_case": true
              },
              "name": {
                "type": "str",
                "required": false,
                "placeholder": "",
                "list": false,
                "show": false,
                "multiline": false,
                "fileTypes": [],
                "password": false,
                "name": "name",
                "advanced": false,
                "dynamic": true,
                "info": "",
                "title_case": true
              },
              "partial_variables": {
                "type": "dict",
                "required": false,
                "placeholder": "",
                "list": false,
                "show": false,
                "multiline": false,
                "fileTypes": [],
                "password": false,
                "name": "partial_variables",
                "advanced": false,
                "dynamic": true,
                "info": "",
                "title_case": true
              },
              "tags": {
                "type": "str",
                "required": false,
                "placeholder": "",
                "list": true,
                "show": false,
                "multiline": false,
                "fileTypes": [],
                "password": false,
                "name": "tags",
                "advanced": false,
                "dynamic": true,
                "info": "",
                "title_case": true
              },
              "validate_template": {
                "type": "bool",
                "required": false,
                "placeholder": "",
                "list": false,
                "show": false,
                "multiline": false,
                "value": false,
                "fileTypes": [],
                "password": false,
                "name": "validate_template",
                "advanced": false,
                "dynamic": true,
                "info": "",
                "title_case": true
              },
              "_type": "ChatPromptTemplate"
            },
            "description": "Prompt template for chat models.",
            "base_classes": [
              "ChatPromptTemplate",
              "BasePromptTemplate",
              "BaseChatPromptTemplate"
            ],
            "display_name": "ChatPromptTemplate",
            "documentation": "https://python.langchain.com/docs/modules/model_io/models/chat/how_to/prompts",
            "custom_fields": {},
            "output_types": [],
            "field_formatters": {},
            "beta": false
          },
          "id": "ChatPromptTemplate-rITUZ"
        },
        "selected": false,
        "width": 384,
        "height": 242,
        "positionAbsolute": {
          "x": 1913.9303789871567,
          "y": 132.43667293752787
        },
        "dragging": false
      },
      {
        "id": "SystemMessagePromptTemplate-9M3wy",
        "type": "genericNode",
        "position": {
          "x": 1361.9303789871583,
          "y": 97.4366729375279
        },
        "data": {
          "type": "SystemMessagePromptTemplate",
          "node": {
            "template": {
              "additional_kwargs": {
                "type": "dict",
                "required": false,
                "placeholder": "",
                "list": false,
                "show": false,
                "multiline": false,
                "fileTypes": [],
                "password": false,
                "name": "additional_kwargs",
                "advanced": true,
                "dynamic": true,
                "info": "",
                "title_case": true
              },
              "prompt": {
                "type": "prompt",
                "required": true,
                "placeholder": "",
                "list": true,
                "show": true,
                "multiline": true,
                "value": "## Instructions\n{Instructions}\n\n## EXAMPLES:\n\n{Examples}",
                "fileTypes": [],
                "password": false,
                "name": "prompt",
                "advanced": false,
                "dynamic": true,
                "info": "",
                "title_case": true
              },
              "_type": "SystemMessagePromptTemplate",
              "Instructions": {
                "type": "str",
                "required": false,
                "placeholder": "",
                "list": false,
                "show": true,
                "multiline": true,
                "value": "",
                "fileTypes": [],
                "file_path": "",
                "password": false,
                "name": "Instructions",
                "display_name": "Instructions",
                "advanced": false,
                "input_types": [
                  "Document",
                  "BaseOutputParser"
                ],
                "dynamic": false,
                "info": "",
                "title_case": true
              },
              "Examples": {
                "type": "str",
                "required": false,
                "placeholder": "",
                "list": false,
                "show": true,
                "multiline": true,
                "value": "",
                "fileTypes": [],
                "file_path": "",
                "password": false,
                "name": "Examples",
                "display_name": "Examples",
                "advanced": false,
                "input_types": [
                  "Document",
                  "BaseOutputParser"
                ],
                "dynamic": false,
                "info": "",
                "title_case": true
              }
            },
            "description": "System message prompt template.",
            "icon": null,
            "base_classes": [
              "_StringImageMessagePromptTemplate",
              "BaseMessagePromptTemplate",
              "SystemMessagePromptTemplate"
            ],
            "name": "",
            "display_name": "SystemMessagePromptTemplate",
            "documentation": "https://python.langchain.com/docs/modules/model_io/models/chat/how_to/prompts",
            "custom_fields": {
              "": [
                "Instructions",
                "Examples"
              ]
            },
            "output_types": [],
            "full_path": null,
            "field_formatters": {},
            "beta": false,
            "error": null
          },
          "id": "SystemMessagePromptTemplate-9M3wy",
          "description": "System message prompt template.",
          "display_name": "SystemMessagePromptTemplate"
        },
        "selected": false,
        "width": 384,
        "height": 467,
        "positionAbsolute": {
          "x": 1361.9303789871583,
          "y": 97.4366729375279
        },
        "dragging": false
      },
      {
        "id": "Data-CHXl9",
        "type": "genericNode",
        "position": {
          "x": 713.9303789871593,
          "y": -602.5633270624708
        },
        "data": {
          "type": "Data",
          "node": {
            "template": {
              "code": {
                "type": "code",
                "required": true,
                "placeholder": "",
                "list": false,
                "show": true,
                "multiline": true,
                "value": "from axiestudio import CustomComponent\n\nclass TextPlaceholder(CustomComponent):\n    display_name: str = \"TextPlaceholder\"\n    documentation: str = \"http://docs.axiestudio.org/components/custom\"\n\n    def build_config(self):\n        return {\"param\": {\"display_name\": \"Content\", \"multiline\":True}}\n\n    def build(self, param: str) -> str:\n        return param\n",
                "fileTypes": [],
                "file_path": "",
                "password": false,
                "name": "code",
                "advanced": false,
                "dynamic": true,
                "info": "",
                "title_case": true
              },
              "param": {
                "type": "str",
                "required": true,
                "placeholder": "",
                "list": false,
                "show": true,
                "multiline": true,
                "fileTypes": [],
                "file_path": "",
                "password": false,
                "name": "param",
                "display_name": "Content",
                "advanced": false,
                "dynamic": false,
                "info": "",
                "title_case": true,
                "value": "### CONTEXT:\nYou are an assistant helping to write user stories on an application delivery project.\n\n### TASK:\nCreate a list of scope items from the provided user story description.\n\n### OUTPUT:\nOutput the content as a JSON file."
              },
              "_type": "CustomComponent"
            },
            "base_classes": [
              "str"
            ],
            "display_name": "TextPlaceholder",
            "documentation": "http://docs.axiestudio.org/components/custom",
            "custom_fields": {
              "param": null
            },
            "output_types": [
              "str"
            ],
            "field_formatters": {},
            "beta": true,
            "official": false
          },
          "id": "Data-CHXl9"
        },
        "selected": false,
        "width": 384,
        "height": 346,
        "positionAbsolute": {
          "x": 713.9303789871593,
          "y": -602.5633270624708
        },
        "dragging": false
      },
      {
        "id": "HumanMessagePromptTemplate-mKJjv",
        "type": "genericNode",
        "position": {
          "x": 1317.3189193166534,
          "y": 735.7835438251418
        },
        "data": {
          "type": "HumanMessagePromptTemplate",
          "node": {
            "template": {
              "additional_kwargs": {
                "type": "dict",
                "required": false,
                "placeholder": "",
                "list": false,
                "show": false,
                "multiline": false,
                "fileTypes": [],
                "password": false,
                "name": "additional_kwargs",
                "advanced": true,
                "dynamic": true,
                "info": "",
                "title_case": true
              },
              "prompt": {
                "type": "prompt",
                "required": true,
                "placeholder": "",
                "list": true,
                "show": true,
                "multiline": true,
                "value": "{input}",
                "fileTypes": [],
                "password": false,
                "name": "prompt",
                "advanced": false,
                "dynamic": true,
                "info": "",
                "title_case": true
              },
              "_type": "HumanMessagePromptTemplate",
              "input": {
                "type": "str",
                "required": false,
                "placeholder": "",
                "list": false,
                "show": true,
                "multiline": true,
                "value": "",
                "fileTypes": [],
                "file_path": "",
                "password": false,
                "name": "input",
                "display_name": "input",
                "advanced": false,
                "input_types": [
                  "Document",
                  "BaseOutputParser"
                ],
                "dynamic": false,
                "info": "",
                "title_case": true
              }
            },
            "description": "Human message prompt template. This is a message sent from the user.",
            "icon": null,
            "base_classes": [
              "HumanMessagePromptTemplate",
              "_StringImageMessagePromptTemplate",
              "BaseMessagePromptTemplate"
            ],
            "name": "",
            "display_name": "HumanMessagePromptTemplate",
            "documentation": "https://python.langchain.com/docs/modules/model_io/models/chat/how_to/prompts",
            "custom_fields": {
              "": [
                "input"
              ]
            },
            "output_types": [],
            "full_path": null,
            "field_formatters": {},
            "beta": false,
            "error": null
          },
          "id": "HumanMessagePromptTemplate-mKJjv",
          "description": "Human message prompt template. This is a message sent from the user.",
          "display_name": "HumanMessagePromptTemplate"
        },
        "selected": false,
        "width": 384,
        "height": 394,
        "positionAbsolute": {
          "x": 1317.3189193166534,
          "y": 735.7835438251418
        },
        "dragging": false
      }
    ],
    "edges": [
      {
        "source": "Data-G2UR2",
        "sourceHandle": "{œbaseClassesœ:[œstrœ],œdataTypeœ:œDataœ,œidœ:œData-G2UR2œ}",
        "target": "Data-xTfe8",
        "targetHandle": "{œfieldNameœ:œex1œ,œidœ:œData-xTfe8œ,œinputTypesœ:[œDocumentœ,œBaseOutputParserœ],œtypeœ:œstrœ}",
        "data": {
          "targetHandle": {
            "fieldName": "ex1",
            "id": "Data-xTfe8",
            "inputTypes": [
              "Document",
              "BaseOutputParser"
            ],
            "type": "str"
          },
          "sourceHandle": {
            "baseClasses": [
              "str"
            ],
            "dataType": "Data",
            "id": "Data-G2UR2"
          }
        },
        "style": {
          "stroke": "#555"
        },
        "className": "stroke-gray-900  stroke-connection",
        "animated": false,
        "id": "reactflow__edge-Data-G2UR2{œbaseClassesœ:[œstrœ],œdataTypeœ:œDataœ,œidœ:œData-G2UR2œ}-Data-xTfe8{œfieldNameœ:œex1œ,œidœ:œData-xTfe8œ,œinputTypesœ:[œDocumentœ,œBaseOutputParserœ],œtypeœ:œstrœ}"
      },
      {
        "source": "Data-yo7R0",
        "sourceHandle": "{œbaseClassesœ:[œstrœ],œdataTypeœ:œDataœ,œidœ:œData-yo7R0œ}",
        "target": "Data-xTfe8",
        "targetHandle": "{œfieldNameœ:œex2œ,œidœ:œData-xTfe8œ,œinputTypesœ:[œDocumentœ,œBaseOutputParserœ],œtypeœ:œstrœ}",
        "data": {
          "targetHandle": {
            "fieldName": "ex2",
            "id": "Data-xTfe8",
            "inputTypes": [
              "Document",
              "BaseOutputParser"
            ],
            "type": "str"
          },
          "sourceHandle": {
            "baseClasses": [
              "str"
            ],
            "dataType": "Data",
            "id": "Data-yo7R0"
          }
        },
        "style": {
          "stroke": "#555"
        },
        "className": "stroke-gray-900  stroke-connection",
        "animated": false,
        "id": "reactflow__edge-Data-yo7R0{œbaseClassesœ:[œstrœ],œdataTypeœ:œDataœ,œidœ:œData-yo7R0œ}-Data-xTfe8{œfieldNameœ:œex2œ,œidœ:œData-xTfe8œ,œinputTypesœ:[œDocumentœ,œBaseOutputParserœ],œtypeœ:œstrœ}"
      },
      {
        "source": "ChatOpenAI-BKPLI",
        "sourceHandle": "{œbaseClassesœ:[œBaseLanguageModelœ,œBaseLLMœ,œBaseLanguageModelœ],œdataTypeœ:œChatOpenAIœ,œidœ:œChatOpenAI-BKPLIœ}",
        "target": "LLMChain-UXa2S",
        "targetHandle": "{œfieldNameœ:œllmœ,œidœ:œLLMChain-UXa2Sœ,œinputTypesœ:null,œtypeœ:œBaseLanguageModelœ}",
        "data": {
          "targetHandle": {
            "fieldName": "llm",
            "id": "LLMChain-UXa2S",
            "inputTypes": null,
            "type": "BaseLanguageModel"
          },
          "sourceHandle": {
            "baseClasses": [
              "BaseLanguageModel",
              "BaseLLM",
              "BaseLanguageModel"
            ],
            "dataType": "ChatOpenAI",
            "id": "ChatOpenAI-BKPLI"
          }
        },
        "style": {
          "stroke": "#555"
        },
        "className": "stroke-gray-900  stroke-connection",
        "animated": false,
        "id": "reactflow__edge-ChatOpenAI-BKPLI{œbaseClassesœ:[œBaseLanguageModelœ,œBaseLLMœ,œBaseLanguageModelœ],œdataTypeœ:œChatOpenAIœ,œidœ:œChatOpenAI-BKPLIœ}-LLMChain-UXa2S{œfieldNameœ:œllmœ,œidœ:œLLMChain-UXa2Sœ,œinputTypesœ:null,œtypeœ:œBaseLanguageModelœ}"
      },
      {
        "source": "ChatPromptTemplate-rITUZ",
        "sourceHandle": "{œbaseClassesœ:[œChatPromptTemplateœ,œBasePromptTemplateœ,œBaseChatPromptTemplateœ],œdataTypeœ:œChatPromptTemplateœ,œidœ:œChatPromptTemplate-rITUZœ}",
        "target": "LLMChain-UXa2S",
        "targetHandle": "{œfieldNameœ:œpromptœ,œidœ:œLLMChain-UXa2Sœ,œinputTypesœ:null,œtypeœ:œBasePromptTemplateœ}",
        "data": {
          "targetHandle": {
            "fieldName": "prompt",
            "id": "LLMChain-UXa2S",
            "inputTypes": null,
            "type": "BasePromptTemplate"
          },
          "sourceHandle": {
            "baseClasses": [
              "ChatPromptTemplate",
              "BasePromptTemplate",
              "BaseChatPromptTemplate"
            ],
            "dataType": "ChatPromptTemplate",
            "id": "ChatPromptTemplate-rITUZ"
          }
        },
        "style": {
          "stroke": "#555"
        },
        "className": "stroke-gray-900  stroke-connection",
        "animated": false,
        "id": "reactflow__edge-ChatPromptTemplate-rITUZ{œbaseClassesœ:[œChatPromptTemplateœ,œBasePromptTemplateœ,œBaseChatPromptTemplateœ],œdataTypeœ:œChatPromptTemplateœ,œidœ:œChatPromptTemplate-rITUZœ}-LLMChain-UXa2S{œfieldNameœ:œpromptœ,œidœ:œLLMChain-UXa2Sœ,œinputTypesœ:null,œtypeœ:œBasePromptTemplateœ}"
      },
      {
        "source": "SystemMessagePromptTemplate-9M3wy",
        "sourceHandle": "{œbaseClassesœ:[œ_StringImageMessagePromptTemplateœ,œBaseMessagePromptTemplateœ,œSystemMessagePromptTemplateœ],œdataTypeœ:œSystemMessagePromptTemplateœ,œidœ:œSystemMessagePromptTemplate-9M3wyœ}",
        "target": "ChatPromptTemplate-rITUZ",
        "targetHandle": "{œfieldNameœ:œmessagesœ,œidœ:œChatPromptTemplate-rITUZœ,œinputTypesœ:null,œtypeœ:œBaseMessagePromptTemplateœ}",
        "data": {
          "targetHandle": {
            "fieldName": "messages",
            "id": "ChatPromptTemplate-rITUZ",
            "inputTypes": null,
            "type": "BaseMessagePromptTemplate"
          },
          "sourceHandle": {
            "baseClasses": [
              "_StringImageMessagePromptTemplate",
              "BaseMessagePromptTemplate",
              "SystemMessagePromptTemplate"
            ],
            "dataType": "SystemMessagePromptTemplate",
            "id": "SystemMessagePromptTemplate-9M3wy"
          }
        },
        "style": {
          "stroke": "#555"
        },
        "className": "stroke-gray-900  stroke-connection",
        "animated": false,
        "id": "reactflow__edge-SystemMessagePromptTemplate-9M3wy{œbaseClassesœ:[œ_StringImageMessagePromptTemplateœ,œBaseMessagePromptTemplateœ,œSystemMessagePromptTemplateœ],œdataTypeœ:œSystemMessagePromptTemplateœ,œidœ:œSystemMessagePromptTemplate-9M3wyœ}-ChatPromptTemplate-rITUZ{œfieldNameœ:œmessagesœ,œidœ:œChatPromptTemplate-rITUZœ,œinputTypesœ:null,œtypeœ:œBaseMessagePromptTemplateœ}"
      },
      {
        "source": "Data-xTfe8",
        "sourceHandle": "{œbaseClassesœ:[œstrœ],œdataTypeœ:œDataœ,œidœ:œData-xTfe8œ}",
        "target": "SystemMessagePromptTemplate-9M3wy",
        "targetHandle": "{œfieldNameœ:œExamplesœ,œidœ:œSystemMessagePromptTemplate-9M3wyœ,œinputTypesœ:[œDocumentœ,œBaseOutputParserœ],œtypeœ:œstrœ}",
        "data": {
          "targetHandle": {
            "fieldName": "Examples",
            "id": "SystemMessagePromptTemplate-9M3wy",
            "inputTypes": [
              "Document",
              "BaseOutputParser"
            ],
            "type": "str"
          },
          "sourceHandle": {
            "baseClasses": [
              "str"
            ],
            "dataType": "Data",
            "id": "Data-xTfe8"
          }
        },
        "style": {
          "stroke": "#555"
        },
        "className": "stroke-gray-900  stroke-connection",
        "animated": false,
        "id": "reactflow__edge-Data-xTfe8{œbaseClassesœ:[œstrœ],œdataTypeœ:œDataœ,œidœ:œData-xTfe8œ}-SystemMessagePromptTemplate-9M3wy{œfieldNameœ:œExamplesœ,œidœ:œSystemMessagePromptTemplate-9M3wyœ,œinputTypesœ:[œDocumentœ,œBaseOutputParserœ],œtypeœ:œstrœ}"
      },
      {
        "source": "Data-CHXl9",
        "sourceHandle": "{œbaseClassesœ:[œstrœ],œdataTypeœ:œDataœ,œidœ:œData-CHXl9œ}",
        "target": "SystemMessagePromptTemplate-9M3wy",
        "targetHandle": "{œfieldNameœ:œInstructionsœ,œidœ:œSystemMessagePromptTemplate-9M3wyœ,œinputTypesœ:[œDocumentœ,œBaseOutputParserœ],œtypeœ:œstrœ}",
        "data": {
          "targetHandle": {
            "fieldName": "Instructions",
            "id": "SystemMessagePromptTemplate-9M3wy",
            "inputTypes": [
              "Document",
              "BaseOutputParser"
            ],
            "type": "str"
          },
          "sourceHandle": {
            "baseClasses": [
              "str"
            ],
            "dataType": "Data",
            "id": "Data-CHXl9"
          }
        },
        "style": {
          "stroke": "#555"
        },
        "className": "stroke-gray-900  stroke-connection",
        "animated": false,
        "id": "reactflow__edge-Data-CHXl9{œbaseClassesœ:[œstrœ],œdataTypeœ:œDataœ,œidœ:œData-CHXl9œ}-SystemMessagePromptTemplate-9M3wy{œfieldNameœ:œInstructionsœ,œidœ:œSystemMessagePromptTemplate-9M3wyœ,œinputTypesœ:[œDocumentœ,œBaseOutputParserœ],œtypeœ:œstrœ}"
      },
      {
        "source": "HumanMessagePromptTemplate-mKJjv",
        "sourceHandle": "{œbaseClassesœ:[œHumanMessagePromptTemplateœ,œ_StringImageMessagePromptTemplateœ,œBaseMessagePromptTemplateœ],œdataTypeœ:œHumanMessagePromptTemplateœ,œidœ:œHumanMessagePromptTemplate-mKJjvœ}",
        "target": "ChatPromptTemplate-rITUZ",
        "targetHandle": "{œfieldNameœ:œmessagesœ,œidœ:œChatPromptTemplate-rITUZœ,œinputTypesœ:null,œtypeœ:œBaseMessagePromptTemplateœ}",
        "data": {
          "targetHandle": {
            "fieldName": "messages",
            "id": "ChatPromptTemplate-rITUZ",
            "inputTypes": null,
            "type": "BaseMessagePromptTemplate"
          },
          "sourceHandle": {
            "baseClasses": [
              "HumanMessagePromptTemplate",
              "_StringImageMessagePromptTemplate",
              "BaseMessagePromptTemplate"
            ],
            "dataType": "HumanMessagePromptTemplate",
            "id": "HumanMessagePromptTemplate-mKJjv"
          }
        },
        "style": {
          "stroke": "#555"
        },
        "className": "stroke-gray-900  stroke-connection",
        "animated": false,
        "id": "reactflow__edge-HumanMessagePromptTemplate-mKJjv{œbaseClassesœ:[œHumanMessagePromptTemplateœ,œ_StringImageMessagePromptTemplateœ,œBaseMessagePromptTemplateœ],œdataTypeœ:œHumanMessagePromptTemplateœ,œidœ:œHumanMessagePromptTemplate-mKJjvœ}-ChatPromptTemplate-rITUZ{œfieldNameœ:œmessagesœ,œidœ:œChatPromptTemplate-rITUZœ,œinputTypesœ:null,œtypeœ:œBaseMessagePromptTemplateœ}"
      }
    ],
    "viewport": {
      "x": 125.01196820559241,
      "y": 327.36613165332494,
      "zoom": 0.4436896095407844
    }
  },
  "metadata": {
    "Data": {
      "count": 4
    },
    "LLMChain": {
      "count": 1
    },
    "ChatOpenAI": {
      "count": 1
    },
    "ChatPromptTemplate": {
      "count": 1
    },
    "SystemMessagePromptTemplate": {
      "count": 1
    },
    "HumanMessagePromptTemplate": {
      "count": 1
    },
    "total": 9
  },
  "original": {
    "id": "9763fbf2-0293-4076-bb8a-0c25557216fe",
    "name": "Rivet",
    "description": "Flow into the Future of Language.",
    "is_component": false,
    "liked_by_count": "0",
    "downloads_count": "2",
    "metadata": {
      "Data": {
        "count": 4
      },
      "LLMChain": {
        "count": 1
      },
      "ChatOpenAI": {
        "count": 1
      },
      "ChatPromptTemplate": {
        "count": 1
      },
      "SystemMessagePromptTemplate": {
        "count": 1
      },
      "HumanMessagePromptTemplate": {
        "count": 1
      },
      "total": 9
    },
    "last_tested_version": "0.6.17",
    "private": true,
    "data": {
      "nodes": [
        {
          "id": "Data-G2UR2",
          "type": "genericNode",
          "position": {
            "x": 16.072022154821525,
            "y": -164.73450799359313
          },
          "data": {
            "type": "Data",
            "node": {
              "template": {
                "code": {
                  "type": "code",
                  "required": true,
                  "placeholder": "",
                  "list": false,
                  "show": true,
                  "multiline": true,
                  "value": "from axiestudio import CustomComponent\n\nclass TextPlaceholder(CustomComponent):\n    display_name: str = \"TextPlaceholder\"\n    documentation: str = \"http://docs.axiestudio.org/components/custom\"\n\n    def build_config(self):\n        return {\"param\": {\"display_name\": \"Content\", \"multiline\":True}}\n\n    def build(self, param: str) -> str:\n        return param\n",
                  "fileTypes": [],
                  "file_path": "",
                  "password": false,
                  "name": "code",
                  "advanced": false,
                  "dynamic": true,
                  "info": "",
                  "title_case": true
                },
                "param": {
                  "type": "str",
                  "required": true,
                  "placeholder": "",
                  "list": false,
                  "show": true,
                  "multiline": true,
                  "fileTypes": [],
                  "file_path": "",
                  "password": false,
                  "name": "param",
                  "display_name": "Content",
                  "advanced": false,
                  "dynamic": false,
                  "info": "",
                  "title_case": true,
                  "value": "#### INPUT\nThe Notification Service requires an update to include the requirement of disabling the webhook. Specifically, when the service receives a HTTP error code that indicates the unavailability of the webhook target, the webhook should be automatically disabled.\n\nCurrently, the webhook behavior is such that each new notification will attempt to be delivered, even if the webhook target is unavailable. This results in the target receiving numerous notifications that are destined to fail. This can lead to issues such as support notification spam.\n\nTo address this, the Notification Service should be enhanced to include a check for the enabled status of the webhook target as part of the process of looking up the notification webhook target. This will ensure that notifications are only sent to enabled webhook targets, preventing unnecessary delivery attempts and reducing the risk of support notification spam.\n\nThe specific list of error codes that will result in the webhook target being disabled will be provided under the Acceptance Criteria section.\n\nAny notifications that are attempted to be sent when the webhook target is disabled will immediately be changed to 'Undeliverable' status.\n\nWhen a webhook target is disabled, an alert should be raised to the run support team.\n\n#### OUTPUT\n{\n  \"User story\": {\n    \"Description\": \"The Notification Service requires an update to include the requirement of disabling the webhook. Specifically, when the service receives a HTTP error code that indicates the unavailability of the webhook target, the webhook should be automatically disabled.\\n\\nCurrently, the webhook behavior is such that each new notification will attempt to be delivered, even if the webhook target is unavailable. This results in the target receiving numerous notifications that are destined to fail. This can lead to issues such as support notification spam.\\n\\nTo address this, the Notification Service should be enhanced to include a check for the enabled status of the webhook target as part of the process of looking up the notification webhook target. This will ensure that notifications are only sent to enabled webhook targets, preventing unnecessary delivery attempts and reducing the risk of support notification spam.\\n\\nThe specific list of error codes that will result in the webhook target being disabled will be provided under the Acceptance Criteria section.\\n\\nAny notifications that are attempted to be sent when the webhook target is disabled will immediately be changed to 'Undeliverable' status.\\n\\nWhen a webhook target is disabled, an alert should be raised to the run support team.\",\n    \"In-scope\": [\n      \"Create status toggle to enable/disable individual webhooks\",\n      \"Automatically disable webhook when appropriate HTTP error code received\",\n      \"Check webhook enabled/disabled status when looking up webhook targets\",\n      \"Change status of any notifications to be sent to disabled webhook targets to 'undeliverable'\",\n      \"Raise an alert when a webhook target is disabled\"\n    ]\n  }\n}\n\n\n        "
                },
                "_type": "CustomComponent"
              },
              "base_classes": [
                "str"
              ],
              "display_name": "TextPlaceholder",
              "documentation": "http://docs.axiestudio.org/components/custom",
              "custom_fields": {
                "param": null
              },
              "output_types": [
                "str"
              ],
              "field_formatters": {},
              "beta": true
            },
            "id": "Data-G2UR2",
            "display_name": "TextPlaceholder"
          },
          "selected": true,
          "width": 384,
          "height": 346,
          "dragging": false,
          "positionAbsolute": {
            "x": 16.072022154821525,
            "y": -164.73450799359313
          }
        },
        {
          "id": "Data-yo7R0",
          "type": "genericNode",
          "position": {
            "x": 25.708994222643355,
            "y": 280.8498351078305
          },
          "data": {
            "type": "Data",
            "node": {
              "template": {
                "code": {
                  "type": "code",
                  "required": true,
                  "placeholder": "",
                  "list": false,
                  "show": true,
                  "multiline": true,
                  "value": "from axiestudio import CustomComponent\n\nclass TextPlaceholder(CustomComponent):\n    display_name: str = \"TextPlaceholder\"\n    documentation: str = \"http://docs.axiestudio.org/components/custom\"\n\n    def build_config(self):\n        return {\"param\": {\"display_name\": \"Content\", \"multiline\":True}}\n\n    def build(self, param: str) -> str:\n        return param\n",
                  "fileTypes": [],
                  "file_path": "",
                  "password": false,
                  "name": "code",
                  "advanced": false,
                  "dynamic": true,
                  "info": "",
                  "title_case": true
                },
                "param": {
                  "type": "str",
                  "required": true,
                  "placeholder": "",
                  "list": false,
                  "show": true,
                  "multiline": true,
                  "fileTypes": [],
                  "file_path": "",
                  "password": false,
                  "name": "param",
                  "display_name": "Content",
                  "advanced": false,
                  "dynamic": false,
                  "info": "",
                  "title_case": true,
                  "value": "#### INPUT\n{\n    \"User story\": {\n        \"Title\": \"Update Notification Service to Disable Webhook on HTTP Error Code\",\n        \"Description\": \"The Notification Service requires an update to include the requirement of disabling the webhook. Specifically, when the service receives a HTTP error code that indicates the unavailability of the webhook target, the webhook should be automatically disabled.\\n\\nCurrently, the webhook behavior is such that each new notification will attempt to be delivered, even if the webhook target is unavailable. This results in the target receiving numerous notifications that are destined to fail. This can lead to issues such as support notification spam.\\n\\nTo address this, the Notification Service should be enhanced to include a check for the enabled status of the webhook target as part of the process of looking up the notification webhook target. This will ensure that notifications are only sent to enabled webhook targets, preventing unnecessary delivery attempts and reducing the risk of support notification spam.\\n\\nThe specific list of error codes that will result in the webhook target being disabled will be provided under the Acceptance Criteria section.\\n\\nAny notifications that are attempted to be sent when the webhook target is disabled will immediately be changed to 'Undeliverable' status.\\n\\nWhen a webhook target is disabled, an alert should be raised to the run support team.\"\n    }\n}\n\n#### OUTPUT\n{\n  \"User story\": {\n    \"Title\": \"Update Notification Service to Disable Webhook on HTTP Error Code\",\n    \"Description\": \"The Notification Service requires an update to include the requirement of disabling the webhook. Specifically, when the service receives a HTTP error code that indicates the unavailability of the webhook target, the webhook should be automatically disabled.\\n\\nCurrently, the webhook behavior is such that each new notification will attempt to be delivered, even if the webhook target is unavailable. This results in the target receiving numerous notifications that are destined to fail. This can lead to issues such as support notification spam.\\n\\nTo address this, the Notification Service should be enhanced to include a check for the enabled status of the webhook target as part of the process of looking up the notification webhook target. This will ensure that notifications are only sent to enabled webhook targets, preventing unnecessary delivery attempts and reducing the risk of support notification spam.\\n\\nThe specific list of error codes that will result in the webhook target being disabled will be provided under the Acceptance Criteria section.\\n\\nAny notifications that are attempted to be sent when the webhook target is disabled will immediately be changed to 'Undeliverable' status.\\n\\nWhen a webhook target is disabled, an alert should be raised to the run support team.\",\n    \"In-scope\": [\n      \"Create status toggle to enable/disable individual webhooks\",\n      \"Automatically disable webhook when appropriate HTTP error code received\",\n      \"Check webhook enabled/disabled status when looking up webhook targets\",\n      \"Change status of any notifications to be sent to disabled webhook targets to 'undeliverable'\",\n      \"Raise an alert when a webhook target is disabled\"\n    ]\n  }\n}"
                },
                "_type": "CustomComponent"
              },
              "base_classes": [
                "str"
              ],
              "display_name": "TextPlaceholder",
              "documentation": "http://docs.axiestudio.org/components/custom",
              "custom_fields": {
                "param": null
              },
              "output_types": [
                "str"
              ],
              "field_formatters": {},
              "beta": true
            },
            "id": "Data-yo7R0",
            "display_name": "TextPlaceholder"
          },
          "selected": false,
          "width": 384,
          "height": 346,
          "positionAbsolute": {
            "x": 25.708994222643355,
            "y": 280.8498351078305
          },
          "dragging": false
        },
        {
          "id": "Data-xTfe8",
          "type": "genericNode",
          "position": {
            "x": 683.1091043090651,
            "y": 26.340338666117617
          },
          "data": {
            "type": "Data",
            "node": {
              "template": {
                "code": {
                  "type": "code",
                  "required": true,
                  "placeholder": "",
                  "list": false,
                  "show": true,
                  "multiline": true,
                  "value": "from axiestudio import CustomComponent\r\nfrom langchain_core.prompts import PromptTemplate\r\nfrom axiestudio.field_typing import Prompt, TemplateField\r\n\r\n\r\nclass TextCombiner(CustomComponent):\r\n    display_name: str = \"TextCombiner\"\r\n    description: str = \"Combine text inputs into one text output\"\r\n    icon = \"prompts\"\r\n\r\n    def build_config(self):\r\n        return {\r\n            \"template\": TemplateField(display_name=\"Template\"),\r\n        }\r\n\r\n    def build(\r\n        self,\r\n        template: Prompt,\r\n        **kwargs,\r\n    ) -> str:\r\n\r\n        prompt_template = PromptTemplate.from_template(str(template))\r\n        kwargs = {k: \"\\n\".join(v) if isinstance(v, list) else v for k, v in kwargs.items()}\r\n        try:\r\n            formated_prompt = prompt_template.format(**kwargs)\r\n        except Exception as exc:\r\n            raise ValueError(f\"Error formatting prompt: {exc}\") from exc\r\n        self.status = f'Prompt:\\n\"{formated_prompt}\"'\r\n        return formated_prompt\r\n",
                  "fileTypes": [],
                  "file_path": "",
                  "password": false,
                  "name": "code",
                  "advanced": false,
                  "dynamic": true,
                  "info": "",
                  "title_case": true
                },
                "template": {
                  "type": "prompt",
                  "required": false,
                  "placeholder": "",
                  "list": false,
                  "show": true,
                  "multiline": false,
                  "value": "{ex1}\n\n{ex2}",
                  "fileTypes": [],
                  "file_path": "",
                  "password": false,
                  "name": "template",
                  "display_name": "Template",
                  "advanced": false,
                  "dynamic": false,
                  "info": "",
                  "title_case": true
                },
                "_type": "CustomComponent",
                "ex1": {
                  "type": "str",
                  "required": false,
                  "placeholder": "",
                  "list": false,
                  "show": true,
                  "multiline": true,
                  "value": "",
                  "fileTypes": [],
                  "file_path": "",
                  "password": false,
                  "name": "ex1",
                  "display_name": "ex1",
                  "advanced": false,
                  "input_types": [
                    "Document",
                    "BaseOutputParser"
                  ],
                  "dynamic": false,
                  "info": "",
                  "title_case": true
                },
                "ex2": {
                  "type": "str",
                  "required": false,
                  "placeholder": "",
                  "list": false,
                  "show": true,
                  "multiline": true,
                  "value": "",
                  "fileTypes": [],
                  "file_path": "",
                  "password": false,
                  "name": "ex2",
                  "display_name": "ex2",
                  "advanced": false,
                  "input_types": [
                    "Document",
                    "BaseOutputParser"
                  ],
                  "dynamic": false,
                  "info": "",
                  "title_case": true
                }
              },
              "description": "Combine text inputs into one text output",
              "icon": "prompts",
              "base_classes": [
                "str"
              ],
              "name": "",
              "display_name": "TextCombiner",
              "documentation": "",
              "custom_fields": {
                "template": [
                  "ex1",
                  "ex2"
                ]
              },
              "output_types": [
                "str"
              ],
              "full_path": null,
              "field_formatters": {},
              "beta": true,
              "error": null
            },
            "id": "Data-xTfe8",
            "description": "Combine text inputs into one text output",
            "display_name": "TextCombiner"
          },
          "selected": false,
          "width": 384,
          "height": 553,
          "dragging": false,
          "positionAbsolute": {
            "x": 683.1091043090651,
            "y": 26.340338666117617
          }
        },
        {
          "id": "LLMChain-UXa2S",
          "type": "genericNode",
          "position": {
            "x": 2385.9303789871565,
            "y": -257.56332706247144
          },
          "data": {
            "type": "LLMChain",
            "node": {
              "template": {
                "llm": {
                  "type": "BaseLanguageModel",
                  "required": true,
                  "placeholder": "",
                  "list": false,
                  "show": true,
                  "multiline": false,
                  "fileTypes": [],
                  "file_path": "",
                  "password": false,
                  "name": "llm",
                  "display_name": "LLM",
                  "advanced": false,
                  "dynamic": false,
                  "info": "",
                  "title_case": true
                },
                "memory": {
                  "type": "BaseMemory",
                  "required": false,
                  "placeholder": "",
                  "list": false,
                  "show": true,
                  "multiline": false,
                  "fileTypes": [],
                  "file_path": "",
                  "password": false,
                  "name": "memory",
                  "display_name": "Memory",
                  "advanced": false,
                  "dynamic": false,
                  "info": "",
                  "title_case": true
                },
                "prompt": {
                  "type": "BasePromptTemplate",
                  "required": true,
                  "placeholder": "",
                  "list": false,
                  "show": true,
                  "multiline": false,
                  "fileTypes": [],
                  "file_path": "",
                  "password": false,
                  "name": "prompt",
                  "display_name": "Prompt",
                  "advanced": false,
                  "dynamic": false,
                  "info": "",
                  "title_case": true
                },
                "code": {
                  "type": "code",
                  "required": true,
                  "placeholder": "",
                  "list": false,
                  "show": true,
                  "multiline": true,
                  "value": "from typing import Callable, Optional, Union\n\nfrom langchain.chains import LLMChain\n\nfrom axiestudio import CustomComponent\nfrom axiestudio.field_typing import (\n    BaseLanguageModel,\n    BaseMemory,\n    BasePromptTemplate,\n    Chain,\n)\n\n\nclass LLMChainComponent(CustomComponent):\n    display_name = \"LLMChain\"\n    description = \"Chain to run queries against LLMs\"\n\n    def build_config(self):\n        return {\n            \"prompt\": {\"display_name\": \"Prompt\"},\n            \"llm\": {\"display_name\": \"LLM\"},\n            \"memory\": {\"display_name\": \"Memory\"},\n            \"code\": {\"show\": False},\n        }\n\n    def build(\n        self,\n        prompt: BasePromptTemplate,\n        llm: BaseLanguageModel,\n        memory: Optional[BaseMemory] = None,\n    ) -> Union[Chain, Callable, LLMChain]:\n        return LLMChain(prompt=prompt, llm=llm, memory=memory)\n",
                  "fileTypes": [],
                  "file_path": "",
                  "password": false,
                  "name": "code",
                  "advanced": false,
                  "dynamic": true,
                  "info": "",
                  "title_case": true
                },
                "_type": "CustomComponent"
              },
              "description": "Chain to run queries against LLMs",
              "base_classes": [
                "Chain",
                "Callable",
                "Chain",
                "LLMChain"
              ],
              "display_name": "LLMChain",
              "documentation": "",
              "custom_fields": {
                "prompt": null,
                "llm": null,
                "memory": null
              },
              "output_types": [
                "Chain",
                "Callable",
                "LLMChain"
              ],
              "field_formatters": {},
              "beta": true
            },
            "id": "LLMChain-UXa2S"
          },
          "selected": false,
          "width": 384,
          "height": 424,
          "positionAbsolute": {
            "x": 2385.9303789871565,
            "y": -257.56332706247144
          },
          "dragging": false
        },
        {
          "id": "ChatOpenAI-BKPLI",
          "type": "genericNode",
          "position": {
            "x": 1715.9303789871576,
            "y": -1131.5633270624699
          },
          "data": {
            "type": "ChatOpenAI",
            "node": {
              "template": {
                "code": {
                  "type": "code",
                  "required": true,
                  "placeholder": "",
                  "list": false,
                  "show": true,
                  "multiline": true,
                  "value": "from typing import Optional, Union\n\nfrom langchain.llms import BaseLLM\nfrom langchain_community.chat_models.openai import ChatOpenAI\n\nfrom axiestudio import CustomComponent\nfrom axiestudio.field_typing import BaseLanguageModel, NestedDict\n\n\nclass ChatOpenAIComponent(CustomComponent):\n    display_name = \"ChatOpenAI\"\n    description = \"`OpenAI` Chat large language models API.\"\n\n    def build_config(self):\n        return {\n            \"max_tokens\": {\n                \"display_name\": \"Max Tokens\",\n                \"field_type\": \"int\",\n                \"advanced\": False,\n                \"required\": False,\n            },\n            \"model_kwargs\": {\n                \"display_name\": \"Model Kwargs\",\n                \"field_type\": \"NestedDict\",\n                \"advanced\": True,\n                \"required\": False,\n            },\n            \"model_name\": {\n                \"display_name\": \"Model Name\",\n                \"field_type\": \"str\",\n                \"advanced\": False,\n                \"required\": False,\n                \"options\": [\n                    \"gpt-4-turbo-preview\",\n                    \"gpt-4-0125-preview\",\n                    \"gpt-4-1106-preview\",\n                    \"gpt-4-vision-preview\",\n                    \"gpt-3.5-turbo-0125\",\n                    \"gpt-3.5-turbo-1106\",\n                ],\n            },\n            \"openai_api_base\": {\n                \"display_name\": \"OpenAI API Base\",\n                \"field_type\": \"str\",\n                \"advanced\": False,\n                \"required\": False,\n                \"info\": (\n                    \"The base URL of the OpenAI API. Defaults to https://api.openai.com/v1.\\n\\n\"\n                    \"You can change this to use other APIs like JinaChat, LocalAI and Prem.\"\n                ),\n            },\n            \"openai_api_key\": {\n                \"display_name\": \"OpenAI API Key\",\n                \"field_type\": \"str\",\n                \"advanced\": False,\n                \"required\": False,\n                \"password\": True,\n            },\n            \"temperature\": {\n                \"display_name\": \"Temperature\",\n                \"field_type\": \"float\",\n                \"advanced\": False,\n                \"required\": False,\n                \"value\": 0.7,\n            },\n        }\n\n    def build(\n        self,\n        max_tokens: Optional[int] = 256,\n        model_kwargs: NestedDict = {},\n        model_name: str = \"gpt-4-1106-preview\",\n        openai_api_base: Optional[str] = None,\n        openai_api_key: Optional[str] = None,\n        temperature: float = 0.7,\n    ) -> Union[BaseLanguageModel, BaseLLM]:\n        if not openai_api_base:\n            openai_api_base = \"https://api.openai.com/v1\"\n        return ChatOpenAI(\n            max_tokens=max_tokens,\n            model_kwargs=model_kwargs,\n            model=model_name,\n            base_url=openai_api_base,\n            api_key=openai_api_key,\n            temperature=temperature,\n        )\n",
                  "fileTypes": [],
                  "file_path": "",
                  "password": false,
                  "name": "code",
                  "advanced": false,
                  "dynamic": true,
                  "info": "",
                  "title_case": true
                },
                "max_tokens": {
                  "type": "int",
                  "required": false,
                  "placeholder": "",
                  "list": false,
                  "show": true,
                  "multiline": false,
                  "value": "1024",
                  "fileTypes": [],
                  "file_path": "",
                  "password": false,
                  "name": "max_tokens",
                  "display_name": "Max Tokens",
                  "advanced": false,
                  "dynamic": false,
                  "info": "",
                  "title_case": true
                },
                "model_kwargs": {
                  "type": "NestedDict",
                  "required": false,
                  "placeholder": "",
                  "list": false,
                  "show": true,
                  "multiline": false,
                  "value": {},
                  "fileTypes": [],
                  "file_path": "",
                  "password": false,
                  "name": "model_kwargs",
                  "display_name": "Model Kwargs",
                  "advanced": true,
                  "dynamic": false,
                  "info": "",
                  "title_case": true
                },
                "model_name": {
                  "type": "str",
                  "required": false,
                  "placeholder": "",
                  "list": true,
                  "show": true,
                  "multiline": false,
                  "value": "gpt-3.5-turbo-0125",
                  "fileTypes": [],
                  "file_path": "",
                  "password": false,
                  "options": [
                    "gpt-4-turbo-preview",
                    "gpt-4-0125-preview",
                    "gpt-4-1106-preview",
                    "gpt-4-vision-preview",
                    "gpt-3.5-turbo-0125",
                    "gpt-3.5-turbo-1106"
                  ],
                  "name": "model_name",
                  "display_name": "Model Name",
                  "advanced": false,
                  "dynamic": false,
                  "info": "",
                  "title_case": true
                },
                "openai_api_base": {
                  "type": "str",
                  "required": false,
                  "placeholder": "",
                  "list": false,
                  "show": true,
                  "multiline": false,
                  "fileTypes": [],
                  "file_path": "",
                  "password": false,
                  "name": "openai_api_base",
                  "display_name": "OpenAI API Base",
                  "advanced": false,
                  "dynamic": false,
                  "info": "The base URL of the OpenAI API. Defaults to https://api.openai.com/v1.\n\nYou can change this to use other APIs like JinaChat, LocalAI and Prem.",
                  "title_case": true
                },
                "openai_api_key": {
                  "type": "str",
                  "required": false,
                  "placeholder": "",
                  "list": false,
                  "show": true,
                  "multiline": false,
                  "fileTypes": [],
                  "file_path": "",
                  "password": true,
                  "name": "openai_api_key",
                  "display_name": "OpenAI API Key",
                  "advanced": false,
                  "dynamic": false,
                  "info": "",
                  "title_case": true,
                  "value": ""
                },
                "temperature": {
                  "type": "float",
                  "required": false,
                  "placeholder": "",
                  "list": false,
                  "show": true,
                  "multiline": false,
                  "value": 0.7,
                  "fileTypes": [],
                  "file_path": "",
                  "password": false,
                  "name": "temperature",
                  "display_name": "Temperature",
                  "advanced": false,
                  "dynamic": false,
                  "info": "",
                  "rangeSpec": {
                    "min": -1,
                    "max": 1,
                    "step": 0.1
                  },
                  "title_case": true
                },
                "_type": "CustomComponent"
              },
              "description": "`OpenAI` Chat large language models API.",
              "base_classes": [
                "BaseLanguageModel",
                "BaseLLM",
                "BaseLanguageModel"
              ],
              "display_name": "ChatOpenAI",
              "documentation": "",
              "custom_fields": {
                "max_tokens": null,
                "model_kwargs": null,
                "model_name": null,
                "openai_api_base": null,
                "openai_api_key": null,
                "temperature": null
              },
              "output_types": [
                "BaseLanguageModel",
                "BaseLLM"
              ],
              "field_formatters": {},
              "beta": true
            },
            "id": "ChatOpenAI-BKPLI"
          },
          "selected": false,
          "width": 384,
          "height": 728,
          "positionAbsolute": {
            "x": 1715.9303789871576,
            "y": -1131.5633270624699
          },
          "dragging": false
        },
        {
          "id": "ChatPromptTemplate-rITUZ",
          "type": "genericNode",
          "position": {
            "x": 1913.9303789871567,
            "y": 132.43667293752787
          },
          "data": {
            "type": "ChatPromptTemplate",
            "node": {
              "template": {
                "messages": {
                  "type": "BaseMessagePromptTemplate",
                  "required": true,
                  "placeholder": "",
                  "list": true,
                  "show": true,
                  "multiline": false,
                  "fileTypes": [],
                  "password": false,
                  "name": "messages",
                  "advanced": false,
                  "dynamic": true,
                  "info": "",
                  "title_case": true
                },
                "output_parser": {
                  "type": "BaseOutputParser",
                  "required": false,
                  "placeholder": "",
                  "list": false,
                  "show": false,
                  "multiline": false,
                  "fileTypes": [],
                  "password": false,
                  "name": "output_parser",
                  "advanced": false,
                  "dynamic": true,
                  "info": "",
                  "title_case": true
                },
                "input_types": {
                  "type": "dict",
                  "required": false,
                  "placeholder": "",
                  "list": false,
                  "show": false,
                  "multiline": false,
                  "fileTypes": [],
                  "password": false,
                  "name": "input_types",
                  "advanced": false,
                  "dynamic": true,
                  "info": "",
                  "title_case": true
                },
                "input_variables": {
                  "type": "str",
                  "required": true,
                  "placeholder": "",
                  "list": true,
                  "show": false,
                  "multiline": false,
                  "fileTypes": [],
                  "password": false,
                  "name": "input_variables",
                  "advanced": false,
                  "dynamic": true,
                  "info": "",
                  "title_case": true
                },
                "metadata": {
                  "type": "dict",
                  "required": false,
                  "placeholder": "",
                  "list": false,
                  "show": false,
                  "multiline": false,
                  "fileTypes": [],
                  "password": false,
                  "name": "metadata",
                  "advanced": false,
                  "dynamic": true,
                  "info": "",
                  "title_case": true
                },
                "name": {
                  "type": "str",
                  "required": false,
                  "placeholder": "",
                  "list": false,
                  "show": false,
                  "multiline": false,
                  "fileTypes": [],
                  "password": false,
                  "name": "name",
                  "advanced": false,
                  "dynamic": true,
                  "info": "",
                  "title_case": true
                },
                "partial_variables": {
                  "type": "dict",
                  "required": false,
                  "placeholder": "",
                  "list": false,
                  "show": false,
                  "multiline": false,
                  "fileTypes": [],
                  "password": false,
                  "name": "partial_variables",
                  "advanced": false,
                  "dynamic": true,
                  "info": "",
                  "title_case": true
                },
                "tags": {
                  "type": "str",
                  "required": false,
                  "placeholder": "",
                  "list": true,
                  "show": false,
                  "multiline": false,
                  "fileTypes": [],
                  "password": false,
                  "name": "tags",
                  "advanced": false,
                  "dynamic": true,
                  "info": "",
                  "title_case": true
                },
                "validate_template": {
                  "type": "bool",
                  "required": false,
                  "placeholder": "",
                  "list": false,
                  "show": false,
                  "multiline": false,
                  "value": false,
                  "fileTypes": [],
                  "password": false,
                  "name": "validate_template",
                  "advanced": false,
                  "dynamic": true,
                  "info": "",
                  "title_case": true
                },
                "_type": "ChatPromptTemplate"
              },
              "description": "Prompt template for chat models.",
              "base_classes": [
                "ChatPromptTemplate",
                "BasePromptTemplate",
                "BaseChatPromptTemplate"
              ],
              "display_name": "ChatPromptTemplate",
              "documentation": "https://python.langchain.com/docs/modules/model_io/models/chat/how_to/prompts",
              "custom_fields": {},
              "output_types": [],
              "field_formatters": {},
              "beta": false
            },
            "id": "ChatPromptTemplate-rITUZ"
          },
          "selected": false,
          "width": 384,
          "height": 242,
          "positionAbsolute": {
            "x": 1913.9303789871567,
            "y": 132.43667293752787
          },
          "dragging": false
        },
        {
          "id": "SystemMessagePromptTemplate-9M3wy",
          "type": "genericNode",
          "position": {
            "x": 1361.9303789871583,
            "y": 97.4366729375279
          },
          "data": {
            "type": "SystemMessagePromptTemplate",
            "node": {
              "template": {
                "additional_kwargs": {
                  "type": "dict",
                  "required": false,
                  "placeholder": "",
                  "list": false,
                  "show": false,
                  "multiline": false,
                  "fileTypes": [],
                  "password": false,
                  "name": "additional_kwargs",
                  "advanced": true,
                  "dynamic": true,
                  "info": "",
                  "title_case": true
                },
                "prompt": {
                  "type": "prompt",
                  "required": true,
                  "placeholder": "",
                  "list": true,
                  "show": true,
                  "multiline": true,
                  "value": "## Instructions\n{Instructions}\n\n## EXAMPLES:\n\n{Examples}",
                  "fileTypes": [],
                  "password": false,
                  "name": "prompt",
                  "advanced": false,
                  "dynamic": true,
                  "info": "",
                  "title_case": true
                },
                "_type": "SystemMessagePromptTemplate",
                "Instructions": {
                  "type": "str",
                  "required": false,
                  "placeholder": "",
                  "list": false,
                  "show": true,
                  "multiline": true,
                  "value": "",
                  "fileTypes": [],
                  "file_path": "",
                  "password": false,
                  "name": "Instructions",
                  "display_name": "Instructions",
                  "advanced": false,
                  "input_types": [
                    "Document",
                    "BaseOutputParser"
                  ],
                  "dynamic": false,
                  "info": "",
                  "title_case": true
                },
                "Examples": {
                  "type": "str",
                  "required": false,
                  "placeholder": "",
                  "list": false,
                  "show": true,
                  "multiline": true,
                  "value": "",
                  "fileTypes": [],
                  "file_path": "",
                  "password": false,
                  "name": "Examples",
                  "display_name": "Examples",
                  "advanced": false,
                  "input_types": [
                    "Document",
                    "BaseOutputParser"
                  ],
                  "dynamic": false,
                  "info": "",
                  "title_case": true
                }
              },
              "description": "System message prompt template.",
              "icon": null,
              "base_classes": [
                "_StringImageMessagePromptTemplate",
                "BaseMessagePromptTemplate",
                "SystemMessagePromptTemplate"
              ],
              "name": "",
              "display_name": "SystemMessagePromptTemplate",
              "documentation": "https://python.langchain.com/docs/modules/model_io/models/chat/how_to/prompts",
              "custom_fields": {
                "": [
                  "Instructions",
                  "Examples"
                ]
              },
              "output_types": [],
              "full_path": null,
              "field_formatters": {},
              "beta": false,
              "error": null
            },
            "id": "SystemMessagePromptTemplate-9M3wy",
            "description": "System message prompt template.",
            "display_name": "SystemMessagePromptTemplate"
          },
          "selected": false,
          "width": 384,
          "height": 467,
          "positionAbsolute": {
            "x": 1361.9303789871583,
            "y": 97.4366729375279
          },
          "dragging": false
        },
        {
          "id": "Data-CHXl9",
          "type": "genericNode",
          "position": {
            "x": 713.9303789871593,
            "y": -602.5633270624708
          },
          "data": {
            "type": "Data",
            "node": {
              "template": {
                "code": {
                  "type": "code",
                  "required": true,
                  "placeholder": "",
                  "list": false,
                  "show": true,
                  "multiline": true,
                  "value": "from axiestudio import CustomComponent\n\nclass TextPlaceholder(CustomComponent):\n    display_name: str = \"TextPlaceholder\"\n    documentation: str = \"http://docs.axiestudio.org/components/custom\"\n\n    def build_config(self):\n        return {\"param\": {\"display_name\": \"Content\", \"multiline\":True}}\n\n    def build(self, param: str) -> str:\n        return param\n",
                  "fileTypes": [],
                  "file_path": "",
                  "password": false,
                  "name": "code",
                  "advanced": false,
                  "dynamic": true,
                  "info": "",
                  "title_case": true
                },
                "param": {
                  "type": "str",
                  "required": true,
                  "placeholder": "",
                  "list": false,
                  "show": true,
                  "multiline": true,
                  "fileTypes": [],
                  "file_path": "",
                  "password": false,
                  "name": "param",
                  "display_name": "Content",
                  "advanced": false,
                  "dynamic": false,
                  "info": "",
                  "title_case": true,
                  "value": "### CONTEXT:\nYou are an assistant helping to write user stories on an application delivery project.\n\n### TASK:\nCreate a list of scope items from the provided user story description.\n\n### OUTPUT:\nOutput the content as a JSON file."
                },
                "_type": "CustomComponent"
              },
              "base_classes": [
                "str"
              ],
              "display_name": "TextPlaceholder",
              "documentation": "http://docs.axiestudio.org/components/custom",
              "custom_fields": {
                "param": null
              },
              "output_types": [
                "str"
              ],
              "field_formatters": {},
              "beta": true,
              "official": false
            },
            "id": "Data-CHXl9"
          },
          "selected": false,
          "width": 384,
          "height": 346,
          "positionAbsolute": {
            "x": 713.9303789871593,
            "y": -602.5633270624708
          },
          "dragging": false
        },
        {
          "id": "HumanMessagePromptTemplate-mKJjv",
          "type": "genericNode",
          "position": {
            "x": 1317.3189193166534,
            "y": 735.7835438251418
          },
          "data": {
            "type": "HumanMessagePromptTemplate",
            "node": {
              "template": {
                "additional_kwargs": {
                  "type": "dict",
                  "required": false,
                  "placeholder": "",
                  "list": false,
                  "show": false,
                  "multiline": false,
                  "fileTypes": [],
                  "password": false,
                  "name": "additional_kwargs",
                  "advanced": true,
                  "dynamic": true,
                  "info": "",
                  "title_case": true
                },
                "prompt": {
                  "type": "prompt",
                  "required": true,
                  "placeholder": "",
                  "list": true,
                  "show": true,
                  "multiline": true,
                  "value": "{input}",
                  "fileTypes": [],
                  "password": false,
                  "name": "prompt",
                  "advanced": false,
                  "dynamic": true,
                  "info": "",
                  "title_case": true
                },
                "_type": "HumanMessagePromptTemplate",
                "input": {
                  "type": "str",
                  "required": false,
                  "placeholder": "",
                  "list": false,
                  "show": true,
                  "multiline": true,
                  "value": "",
                  "fileTypes": [],
                  "file_path": "",
                  "password": false,
                  "name": "input",
                  "display_name": "input",
                  "advanced": false,
                  "input_types": [
                    "Document",
                    "BaseOutputParser"
                  ],
                  "dynamic": false,
                  "info": "",
                  "title_case": true
                }
              },
              "description": "Human message prompt template. This is a message sent from the user.",
              "icon": null,
              "base_classes": [
                "HumanMessagePromptTemplate",
                "_StringImageMessagePromptTemplate",
                "BaseMessagePromptTemplate"
              ],
              "name": "",
              "display_name": "HumanMessagePromptTemplate",
              "documentation": "https://python.langchain.com/docs/modules/model_io/models/chat/how_to/prompts",
              "custom_fields": {
                "": [
                  "input"
                ]
              },
              "output_types": [],
              "full_path": null,
              "field_formatters": {},
              "beta": false,
              "error": null
            },
            "id": "HumanMessagePromptTemplate-mKJjv",
            "description": "Human message prompt template. This is a message sent from the user.",
            "display_name": "HumanMessagePromptTemplate"
          },
          "selected": false,
          "width": 384,
          "height": 394,
          "positionAbsolute": {
            "x": 1317.3189193166534,
            "y": 735.7835438251418
          },
          "dragging": false
        }
      ],
      "edges": [
        {
          "source": "Data-G2UR2",
          "sourceHandle": "{œbaseClassesœ:[œstrœ],œdataTypeœ:œDataœ,œidœ:œData-G2UR2œ}",
          "target": "Data-xTfe8",
          "targetHandle": "{œfieldNameœ:œex1œ,œidœ:œData-xTfe8œ,œinputTypesœ:[œDocumentœ,œBaseOutputParserœ],œtypeœ:œstrœ}",
          "data": {
            "targetHandle": {
              "fieldName": "ex1",
              "id": "Data-xTfe8",
              "inputTypes": [
                "Document",
                "BaseOutputParser"
              ],
              "type": "str"
            },
            "sourceHandle": {
              "baseClasses": [
                "str"
              ],
              "dataType": "Data",
              "id": "Data-G2UR2"
            }
          },
          "style": {
            "stroke": "#555"
          },
          "className": "stroke-gray-900  stroke-connection",
          "animated": false,
          "id": "reactflow__edge-Data-G2UR2{œbaseClassesœ:[œstrœ],œdataTypeœ:œDataœ,œidœ:œData-G2UR2œ}-Data-xTfe8{œfieldNameœ:œex1œ,œidœ:œData-xTfe8œ,œinputTypesœ:[œDocumentœ,œBaseOutputParserœ],œtypeœ:œstrœ}"
        },
        {
          "source": "Data-yo7R0",
          "sourceHandle": "{œbaseClassesœ:[œstrœ],œdataTypeœ:œDataœ,œidœ:œData-yo7R0œ}",
          "target": "Data-xTfe8",
          "targetHandle": "{œfieldNameœ:œex2œ,œidœ:œData-xTfe8œ,œinputTypesœ:[œDocumentœ,œBaseOutputParserœ],œtypeœ:œstrœ}",
          "data": {
            "targetHandle": {
              "fieldName": "ex2",
              "id": "Data-xTfe8",
              "inputTypes": [
                "Document",
                "BaseOutputParser"
              ],
              "type": "str"
            },
            "sourceHandle": {
              "baseClasses": [
                "str"
              ],
              "dataType": "Data",
              "id": "Data-yo7R0"
            }
          },
          "style": {
            "stroke": "#555"
          },
          "className": "stroke-gray-900  stroke-connection",
          "animated": false,
          "id": "reactflow__edge-Data-yo7R0{œbaseClassesœ:[œstrœ],œdataTypeœ:œDataœ,œidœ:œData-yo7R0œ}-Data-xTfe8{œfieldNameœ:œex2œ,œidœ:œData-xTfe8œ,œinputTypesœ:[œDocumentœ,œBaseOutputParserœ],œtypeœ:œstrœ}"
        },
        {
          "source": "ChatOpenAI-BKPLI",
          "sourceHandle": "{œbaseClassesœ:[œBaseLanguageModelœ,œBaseLLMœ,œBaseLanguageModelœ],œdataTypeœ:œChatOpenAIœ,œidœ:œChatOpenAI-BKPLIœ}",
          "target": "LLMChain-UXa2S",
          "targetHandle": "{œfieldNameœ:œllmœ,œidœ:œLLMChain-UXa2Sœ,œinputTypesœ:null,œtypeœ:œBaseLanguageModelœ}",
          "data": {
            "targetHandle": {
              "fieldName": "llm",
              "id": "LLMChain-UXa2S",
              "inputTypes": null,
              "type": "BaseLanguageModel"
            },
            "sourceHandle": {
              "baseClasses": [
                "BaseLanguageModel",
                "BaseLLM",
                "BaseLanguageModel"
              ],
              "dataType": "ChatOpenAI",
              "id": "ChatOpenAI-BKPLI"
            }
          },
          "style": {
            "stroke": "#555"
          },
          "className": "stroke-gray-900  stroke-connection",
          "animated": false,
          "id": "reactflow__edge-ChatOpenAI-BKPLI{œbaseClassesœ:[œBaseLanguageModelœ,œBaseLLMœ,œBaseLanguageModelœ],œdataTypeœ:œChatOpenAIœ,œidœ:œChatOpenAI-BKPLIœ}-LLMChain-UXa2S{œfieldNameœ:œllmœ,œidœ:œLLMChain-UXa2Sœ,œinputTypesœ:null,œtypeœ:œBaseLanguageModelœ}"
        },
        {
          "source": "ChatPromptTemplate-rITUZ",
          "sourceHandle": "{œbaseClassesœ:[œChatPromptTemplateœ,œBasePromptTemplateœ,œBaseChatPromptTemplateœ],œdataTypeœ:œChatPromptTemplateœ,œidœ:œChatPromptTemplate-rITUZœ}",
          "target": "LLMChain-UXa2S",
          "targetHandle": "{œfieldNameœ:œpromptœ,œidœ:œLLMChain-UXa2Sœ,œinputTypesœ:null,œtypeœ:œBasePromptTemplateœ}",
          "data": {
            "targetHandle": {
              "fieldName": "prompt",
              "id": "LLMChain-UXa2S",
              "inputTypes": null,
              "type": "BasePromptTemplate"
            },
            "sourceHandle": {
              "baseClasses": [
                "ChatPromptTemplate",
                "BasePromptTemplate",
                "BaseChatPromptTemplate"
              ],
              "dataType": "ChatPromptTemplate",
              "id": "ChatPromptTemplate-rITUZ"
            }
          },
          "style": {
            "stroke": "#555"
          },
          "className": "stroke-gray-900  stroke-connection",
          "animated": false,
          "id": "reactflow__edge-ChatPromptTemplate-rITUZ{œbaseClassesœ:[œChatPromptTemplateœ,œBasePromptTemplateœ,œBaseChatPromptTemplateœ],œdataTypeœ:œChatPromptTemplateœ,œidœ:œChatPromptTemplate-rITUZœ}-LLMChain-UXa2S{œfieldNameœ:œpromptœ,œidœ:œLLMChain-UXa2Sœ,œinputTypesœ:null,œtypeœ:œBasePromptTemplateœ}"
        },
        {
          "source": "SystemMessagePromptTemplate-9M3wy",
          "sourceHandle": "{œbaseClassesœ:[œ_StringImageMessagePromptTemplateœ,œBaseMessagePromptTemplateœ,œSystemMessagePromptTemplateœ],œdataTypeœ:œSystemMessagePromptTemplateœ,œidœ:œSystemMessagePromptTemplate-9M3wyœ}",
          "target": "ChatPromptTemplate-rITUZ",
          "targetHandle": "{œfieldNameœ:œmessagesœ,œidœ:œChatPromptTemplate-rITUZœ,œinputTypesœ:null,œtypeœ:œBaseMessagePromptTemplateœ}",
          "data": {
            "targetHandle": {
              "fieldName": "messages",
              "id": "ChatPromptTemplate-rITUZ",
              "inputTypes": null,
              "type": "BaseMessagePromptTemplate"
            },
            "sourceHandle": {
              "baseClasses": [
                "_StringImageMessagePromptTemplate",
                "BaseMessagePromptTemplate",
                "SystemMessagePromptTemplate"
              ],
              "dataType": "SystemMessagePromptTemplate",
              "id": "SystemMessagePromptTemplate-9M3wy"
            }
          },
          "style": {
            "stroke": "#555"
          },
          "className": "stroke-gray-900  stroke-connection",
          "animated": false,
          "id": "reactflow__edge-SystemMessagePromptTemplate-9M3wy{œbaseClassesœ:[œ_StringImageMessagePromptTemplateœ,œBaseMessagePromptTemplateœ,œSystemMessagePromptTemplateœ],œdataTypeœ:œSystemMessagePromptTemplateœ,œidœ:œSystemMessagePromptTemplate-9M3wyœ}-ChatPromptTemplate-rITUZ{œfieldNameœ:œmessagesœ,œidœ:œChatPromptTemplate-rITUZœ,œinputTypesœ:null,œtypeœ:œBaseMessagePromptTemplateœ}"
        },
        {
          "source": "Data-xTfe8",
          "sourceHandle": "{œbaseClassesœ:[œstrœ],œdataTypeœ:œDataœ,œidœ:œData-xTfe8œ}",
          "target": "SystemMessagePromptTemplate-9M3wy",
          "targetHandle": "{œfieldNameœ:œExamplesœ,œidœ:œSystemMessagePromptTemplate-9M3wyœ,œinputTypesœ:[œDocumentœ,œBaseOutputParserœ],œtypeœ:œstrœ}",
          "data": {
            "targetHandle": {
              "fieldName": "Examples",
              "id": "SystemMessagePromptTemplate-9M3wy",
              "inputTypes": [
                "Document",
                "BaseOutputParser"
              ],
              "type": "str"
            },
            "sourceHandle": {
              "baseClasses": [
                "str"
              ],
              "dataType": "Data",
              "id": "Data-xTfe8"
            }
          },
          "style": {
            "stroke": "#555"
          },
          "className": "stroke-gray-900  stroke-connection",
          "animated": false,
          "id": "reactflow__edge-Data-xTfe8{œbaseClassesœ:[œstrœ],œdataTypeœ:œDataœ,œidœ:œData-xTfe8œ}-SystemMessagePromptTemplate-9M3wy{œfieldNameœ:œExamplesœ,œidœ:œSystemMessagePromptTemplate-9M3wyœ,œinputTypesœ:[œDocumentœ,œBaseOutputParserœ],œtypeœ:œstrœ}"
        },
        {
          "source": "Data-CHXl9",
          "sourceHandle": "{œbaseClassesœ:[œstrœ],œdataTypeœ:œDataœ,œidœ:œData-CHXl9œ}",
          "target": "SystemMessagePromptTemplate-9M3wy",
          "targetHandle": "{œfieldNameœ:œInstructionsœ,œidœ:œSystemMessagePromptTemplate-9M3wyœ,œinputTypesœ:[œDocumentœ,œBaseOutputParserœ],œtypeœ:œstrœ}",
          "data": {
            "targetHandle": {
              "fieldName": "Instructions",
              "id": "SystemMessagePromptTemplate-9M3wy",
              "inputTypes": [
                "Document",
                "BaseOutputParser"
              ],
              "type": "str"
            },
            "sourceHandle": {
              "baseClasses": [
                "str"
              ],
              "dataType": "Data",
              "id": "Data-CHXl9"
            }
          },
          "style": {
            "stroke": "#555"
          },
          "className": "stroke-gray-900  stroke-connection",
          "animated": false,
          "id": "reactflow__edge-Data-CHXl9{œbaseClassesœ:[œstrœ],œdataTypeœ:œDataœ,œidœ:œData-CHXl9œ}-SystemMessagePromptTemplate-9M3wy{œfieldNameœ:œInstructionsœ,œidœ:œSystemMessagePromptTemplate-9M3wyœ,œinputTypesœ:[œDocumentœ,œBaseOutputParserœ],œtypeœ:œstrœ}"
        },
        {
          "source": "HumanMessagePromptTemplate-mKJjv",
          "sourceHandle": "{œbaseClassesœ:[œHumanMessagePromptTemplateœ,œ_StringImageMessagePromptTemplateœ,œBaseMessagePromptTemplateœ],œdataTypeœ:œHumanMessagePromptTemplateœ,œidœ:œHumanMessagePromptTemplate-mKJjvœ}",
          "target": "ChatPromptTemplate-rITUZ",
          "targetHandle": "{œfieldNameœ:œmessagesœ,œidœ:œChatPromptTemplate-rITUZœ,œinputTypesœ:null,œtypeœ:œBaseMessagePromptTemplateœ}",
          "data": {
            "targetHandle": {
              "fieldName": "messages",
              "id": "ChatPromptTemplate-rITUZ",
              "inputTypes": null,
              "type": "BaseMessagePromptTemplate"
            },
            "sourceHandle": {
              "baseClasses": [
                "HumanMessagePromptTemplate",
                "_StringImageMessagePromptTemplate",
                "BaseMessagePromptTemplate"
              ],
              "dataType": "HumanMessagePromptTemplate",
              "id": "HumanMessagePromptTemplate-mKJjv"
            }
          },
          "style": {
            "stroke": "#555"
          },
          "className": "stroke-gray-900  stroke-connection",
          "animated": false,
          "id": "reactflow__edge-HumanMessagePromptTemplate-mKJjv{œbaseClassesœ:[œHumanMessagePromptTemplateœ,œ_StringImageMessagePromptTemplateœ,œBaseMessagePromptTemplateœ],œdataTypeœ:œHumanMessagePromptTemplateœ,œidœ:œHumanMessagePromptTemplate-mKJjvœ}-ChatPromptTemplate-rITUZ{œfieldNameœ:œmessagesœ,œidœ:œChatPromptTemplate-rITUZœ,œinputTypesœ:null,œtypeœ:œBaseMessagePromptTemplateœ}"
        }
      ],
      "viewport": {
        "x": 125.01196820559241,
        "y": 327.36613165332494,
        "zoom": 0.4436896095407844
      }
    },
    "date_created": "2024-04-26T07:33:23.241Z",
    "date_updated": "2024-04-26T07:33:23.290Z",
    "status": "Public",
    "sort": null,
    "user_updated": "dc599610-3065-4b5b-94ed-de108ec210dd",
    "user_created": {
      "username": "wiresky",
      "first_name": "Nguyen",
      "last_name": "Nam",
      "id": "dc599610-3065-4b5b-94ed-de108ec210dd"
    },
    "tags": []
  },
  "conversion": {
    "converted_at": "2025-08-19T18:09:02.337Z",
    "converted_from": "langflow",
    "converted_to": "axiestudio",
    "conversions_made": 30,
    "converter_version": "1.0.0"
  }
}