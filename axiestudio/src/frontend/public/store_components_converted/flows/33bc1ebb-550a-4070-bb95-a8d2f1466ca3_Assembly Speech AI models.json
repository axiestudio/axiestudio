{
  "id": "33bc1ebb-550a-4070-bb95-a8d2f1466ca3",
  "name": "Assembly Speech AI models",
  "description": "Transcribe and analyze audio with AssemblyAI (Converted from Langflow Store for AxieStudio compatibility)",
  "type": "FLOW",
  "is_component": false,
  "author": {
    "username": "renanbrandao",
    "first_name": "Renan",
    "last_name": "Brandão",
    "id": "7f659ad3-3e77-4820-bf5e-94d5832026de",
    "full_name": "Renan Brandão"
  },
  "store_url": "https://www.langflow.store/store/component/33bc1ebb-550a-4070-bb95-a8d2f1466ca3",
  "stats": {
    "downloads": 0,
    "likes": 0
  },
  "dates": {
    "created": "2024-10-19T00:00:51.600Z",
    "updated": "2024-10-19T00:00:51.799Z",
    "downloaded": "2025-08-19T17:50:07.522Z"
  },
  "tags": [],
  "technical": {
    "last_tested_version": "1.0.18",
    "private": true,
    "status": "Public"
  },
  "data": {
    "nodes": [
      {
        "id": "AssemblyAITranscriptionJobCreator-RJsGH",
        "type": "genericNode",
        "position": {
          "x": -1983.975269477161,
          "y": 361.58523038501556
        },
        "data": {
          "type": "AssemblyAITranscriptionJobCreator",
          "node": {
            "template": {
              "_type": "Component",
              "audio_file": {
                "trace_as_metadata": true,
                "file_path": "16de7eca-a5d9-4d4e-843c-0780a1b904b3/2024-10-18_16-23-22_Parque da Cidade.m4a",
                "fileTypes": [
                  "3ga",
                  "8svx",
                  "aac",
                  "ac3",
                  "aif",
                  "aiff",
                  "alac",
                  "amr",
                  "ape",
                  "au",
                  "dss",
                  "flac",
                  "flv",
                  "m4a",
                  "m4b",
                  "m4p",
                  "m4r",
                  "mp3",
                  "mpga",
                  "ogg",
                  "oga",
                  "mogg",
                  "opus",
                  "qcp",
                  "tta",
                  "voc",
                  "wav",
                  "wma",
                  "wv",
                  "webm",
                  "mts",
                  "m2ts",
                  "ts",
                  "mov",
                  "mp2",
                  "mp4",
                  "m4p",
                  "m4v",
                  "mxf"
                ],
                "list": false,
                "required": false,
                "placeholder": "",
                "show": true,
                "name": "audio_file",
                "value": "",
                "display_name": "Audio File",
                "advanced": false,
                "dynamic": false,
                "info": "The audio file to transcribe",
                "title_case": false,
                "type": "file",
                "_input_type": "FileInput",
                "load_from_db": false
              },
              "api_key": {
                "load_from_db": false,
                "required": false,
                "placeholder": "",
                "show": true,
                "name": "api_key",
                "value": "",
                "display_name": "Assembly API Key",
                "advanced": false,
                "input_types": [
                  "Message"
                ],
                "dynamic": false,
                "info": "Your AssemblyAI API key. You can get one from https://www.assemblyai.com/",
                "title_case": false,
                "password": true,
                "type": "str",
                "_input_type": "SecretStrInput"
              },
              "audio_file_url": {
                "trace_as_input": true,
                "trace_as_metadata": true,
                "load_from_db": false,
                "list": false,
                "required": false,
                "placeholder": "",
                "show": true,
                "name": "audio_file_url",
                "value": "",
                "display_name": "Audio File URL",
                "advanced": true,
                "input_types": [
                  "Message"
                ],
                "dynamic": false,
                "info": "The URL of the audio file to transcribe (Can be used instead of a File)",
                "title_case": false,
                "type": "str",
                "_input_type": "MessageTextInput"
              },
              "code": {
                "type": "code",
                "required": true,
                "placeholder": "",
                "list": false,
                "show": true,
                "multiline": true,
                "value": "import os\nimport assemblyai as aai\nfrom axiestudio.custom import Component\nfrom axiestudio.io import FileInput, SecretStrInput, DropdownInput, Output, BoolInput, MessageTextInput\nfrom axiestudio.schema import Data\nfrom loguru import logger\n\n\nclass AssemblyAITranscriptionJobCreator(Component):\n    display_name = \"AssemblyAI Start Transcript\"\n    description = \"Create a transcription job for an audio file using AssemblyAI with advanced options\"\n    documentation = \"https://www.assemblyai.com/docs\"\n    icon = \"🎤\"\n\n    inputs = [\n        SecretStrInput(\n            name=\"api_key\",\n            display_name=\"Assembly API Key\",\n            info=\"Your AssemblyAI API key. You can get one from https://www.assemblyai.com/\",\n        ),\n        FileInput(\n            name=\"audio_file\",\n            display_name=\"Audio File\",\n            file_types=[\n                \"3ga\",\n                \"8svx\",\n                \"aac\",\n                \"ac3\",\n                \"aif\",\n                \"aiff\",\n                \"alac\",\n                \"amr\",\n                \"ape\",\n                \"au\",\n                \"dss\",\n                \"flac\",\n                \"flv\",\n                \"m4a\",\n                \"m4b\",\n                \"m4p\",\n                \"m4r\",\n                \"mp3\",\n                \"mpga\",\n                \"ogg\",\n                \"oga\",\n                \"mogg\",\n                \"opus\",\n                \"qcp\",\n                \"tta\",\n                \"voc\",\n                \"wav\",\n                \"wma\",\n                \"wv\",\n                \"webm\",\n                \"mts\",\n                \"m2ts\",\n                \"ts\",\n                \"mov\",\n                \"mp2\",\n                \"mp4\",\n                \"m4p\",\n                \"m4v\",\n                \"mxf\",\n            ],\n            info=\"The audio file to transcribe\",\n        ),\n        MessageTextInput(\n            name=\"audio_file_url\",\n            display_name=\"Audio File URL\",\n            info=\"The URL of the audio file to transcribe (Can be used instead of a File)\",\n            advanced=True,\n        ),\n        DropdownInput(\n            name=\"speech_model\",\n            display_name=\"Speech Model\",\n            options=[\n                \"best\",\n                \"nano\",\n            ],\n            value=\"best\",\n            info=\"The speech model to use for the transcription\",\n        ),\n        BoolInput(\n            name=\"language_detection\",\n            display_name=\"Automatic Language Detection\",\n            info=\"Enable automatic language detection\",\n        ),\n        MessageTextInput(\n            name=\"language_code\",\n            display_name=\"Language\",\n            info=\"\"\"\n            The language of the audio file. Can be set manually if automatic language detection is disabled. \n            See https://www.assemblyai.com/docs/getting-started/supported-languages for a list of supported language codes.\n            \"\"\",\n        ),\n        BoolInput(\n            name=\"speaker_labels\",\n            display_name=\"Enable Speaker Labels\",\n            info=\"Enable speaker diarization\",\n        ),\n        MessageTextInput(\n            name=\"speakers_expected\",\n            display_name=\"Expected Number of Speakers\",\n            info=\"Set the expected number of speakers (optional, enter a number)\",\n            advanced=True,\n        ),\n        BoolInput(\n            name=\"punctuate\",\n            display_name=\"Punctuate\",\n            info=\"Enable automatic punctuation\",\n            advanced=True,\n            value=True,\n        ),\n        BoolInput(\n            name=\"format_text\",\n            display_name=\"Format Text\",\n            info=\"Enable text formatting\",\n            advanced=True,\n            value=True,\n        ),\n    ]\n\n    outputs = [\n        Output(display_name=\"Transcript ID\", name=\"transcript_id\", method=\"create_transcription_job\"),\n    ]\n\n    def create_transcription_job(self) -> Data:\n        aai.settings.api_key = self.api_key\n\n        # Convert speakers_expected to int if it's not empty\n        speakers_expected = None\n        if self.speakers_expected and self.speakers_expected.strip():\n            try:\n                speakers_expected = int(self.speakers_expected)\n            except ValueError:\n                self.status = \"Error: Expected Number of Speakers must be a valid integer\"\n                return Data(data={\"error\": \"Error: Expected Number of Speakers must be a valid integer\"})\n\n        language_code = self.language_code if self.language_code else None\n\n        config = aai.TranscriptionConfig(\n            speech_model=self.speech_model,\n            language_detection=self.language_detection,\n            language_code=language_code,\n            speaker_labels=self.speaker_labels,\n            speakers_expected=speakers_expected,\n            punctuate=self.punctuate,\n            format_text=self.format_text,\n        )\n\n        audio = None\n        if self.audio_file:\n            if self.audio_file_url:\n                logger.warning(f\"Both an audio file an audio URL were specified. The audio URL was ignored.\")\n\n            # Check if the file exists\n            if not os.path.exists(self.audio_file):\n                self.status = \"Error: Audio file not found\"\n                return Data(data={\"error\": \"Error: Audio file not found\"})\n            audio = self.audio_file\n        elif self.audio_file_url:\n            audio = self.audio_file_url\n        else:\n            self.status = \"Error: Either an audio file or an audio URL must be specified\"\n            return Data(data={\"error\": \"Error: Either an audio file or an audio URL must be specified\"})\n\n        try:\n            transcript = aai.Transcriber().submit(audio, config=config)\n\n            if transcript.error:\n                self.status = transcript.error\n                return Data(data={\"error\": transcript.error})\n            else:\n                result = Data(data={\"transcript_id\": transcript.id})\n                self.status = result\n                return result\n        except Exception as e:\n            self.status = f\"An error occurred: {str(e)}\"\n            return Data(data={\"error\": f\"An error occurred: {str(e)}\"})\n",
                "fileTypes": [],
                "file_path": "",
                "password": false,
                "name": "code",
                "advanced": true,
                "dynamic": true,
                "info": "",
                "load_from_db": false,
                "title_case": false
              },
              "format_text": {
                "trace_as_metadata": true,
                "list": false,
                "required": false,
                "placeholder": "",
                "show": true,
                "name": "format_text",
                "value": true,
                "display_name": "Format Text",
                "advanced": true,
                "dynamic": false,
                "info": "Enable text formatting",
                "title_case": false,
                "type": "bool",
                "_input_type": "BoolInput"
              },
              "language_code": {
                "trace_as_input": true,
                "trace_as_metadata": true,
                "load_from_db": false,
                "list": false,
                "required": false,
                "placeholder": "",
                "show": true,
                "name": "language_code",
                "value": "",
                "display_name": "Language",
                "advanced": false,
                "input_types": [
                  "Message"
                ],
                "dynamic": false,
                "info": "\n            The language of the audio file. Can be set manually if automatic language detection is disabled. \n            See https://www.assemblyai.com/docs/getting-started/supported-languages for a list of supported language codes.\n            ",
                "title_case": false,
                "type": "str",
                "_input_type": "MessageTextInput"
              },
              "language_detection": {
                "trace_as_metadata": true,
                "list": false,
                "required": false,
                "placeholder": "",
                "show": true,
                "name": "language_detection",
                "value": true,
                "display_name": "Automatic Language Detection",
                "advanced": false,
                "dynamic": false,
                "info": "Enable automatic language detection",
                "title_case": false,
                "type": "bool",
                "_input_type": "BoolInput"
              },
              "punctuate": {
                "trace_as_metadata": true,
                "list": false,
                "required": false,
                "placeholder": "",
                "show": true,
                "name": "punctuate",
                "value": true,
                "display_name": "Punctuate",
                "advanced": true,
                "dynamic": false,
                "info": "Enable automatic punctuation",
                "title_case": false,
                "type": "bool",
                "_input_type": "BoolInput"
              },
              "speaker_labels": {
                "trace_as_metadata": true,
                "list": false,
                "required": false,
                "placeholder": "",
                "show": true,
                "name": "speaker_labels",
                "value": false,
                "display_name": "Enable Speaker Labels",
                "advanced": false,
                "dynamic": false,
                "info": "Enable speaker diarization",
                "title_case": false,
                "type": "bool",
                "_input_type": "BoolInput",
                "load_from_db": false
              },
              "speakers_expected": {
                "trace_as_input": true,
                "trace_as_metadata": true,
                "load_from_db": false,
                "list": false,
                "required": false,
                "placeholder": "",
                "show": true,
                "name": "speakers_expected",
                "value": "",
                "display_name": "Expected Number of Speakers",
                "advanced": true,
                "input_types": [
                  "Message"
                ],
                "dynamic": false,
                "info": "Set the expected number of speakers (optional, enter a number)",
                "title_case": false,
                "type": "str",
                "_input_type": "MessageTextInput"
              },
              "speech_model": {
                "trace_as_metadata": true,
                "options": [
                  "best",
                  "nano"
                ],
                "combobox": false,
                "required": false,
                "placeholder": "",
                "show": true,
                "name": "speech_model",
                "value": "best",
                "display_name": "Speech Model",
                "advanced": false,
                "dynamic": false,
                "info": "The speech model to use for the transcription",
                "title_case": false,
                "type": "str",
                "_input_type": "DropdownInput"
              }
            },
            "description": "Create a transcription job for an audio file using AssemblyAI with advanced options",
            "icon": "🎤",
            "base_classes": [
              "Data"
            ],
            "display_name": "AssemblyAI Start Transcript",
            "documentation": "https://www.assemblyai.com/docs",
            "custom_fields": {},
            "output_types": [],
            "pinned": false,
            "conditional_paths": [],
            "frozen": false,
            "outputs": [
              {
                "types": [
                  "Data"
                ],
                "selected": "Data",
                "name": "transcript_id",
                "display_name": "Transcript ID",
                "method": "create_transcription_job",
                "value": "__UNDEFINED__",
                "cache": true
              }
            ],
            "field_order": [
              "api_key",
              "audio_file",
              "audio_file_url",
              "speech_model",
              "language_detection",
              "language_code",
              "speaker_labels",
              "speakers_expected",
              "punctuate",
              "format_text"
            ],
            "beta": false,
            "edited": false,
            "lf_version": "1.0.18"
          },
          "id": "AssemblyAITranscriptionJobCreator-RJsGH",
          "description": "Create a transcription job for an audio file using AssemblyAI with advanced options",
          "display_name": "AssemblyAI Start Transcript"
        },
        "selected": false,
        "width": 384,
        "height": 728,
        "positionAbsolute": {
          "x": -1983.975269477161,
          "y": 361.58523038501556
        },
        "dragging": false
      },
      {
        "id": "AssemblyAITranscriptionJobPoller-P0i3D",
        "type": "genericNode",
        "position": {
          "x": -1483.0265701948672,
          "y": 363.29958676560693
        },
        "data": {
          "type": "AssemblyAITranscriptionJobPoller",
          "node": {
            "template": {
              "_type": "Component",
              "transcript_id": {
                "trace_as_metadata": true,
                "list": false,
                "trace_as_input": true,
                "required": false,
                "placeholder": "",
                "show": true,
                "name": "transcript_id",
                "value": "",
                "display_name": "Transcript ID",
                "advanced": false,
                "input_types": [
                  "Data"
                ],
                "dynamic": false,
                "info": "The ID of the transcription job to poll",
                "title_case": false,
                "type": "other",
                "_input_type": "DataInput"
              },
              "api_key": {
                "load_from_db": false,
                "required": false,
                "placeholder": "",
                "show": true,
                "name": "api_key",
                "value": "",
                "display_name": "Assembly API Key",
                "advanced": false,
                "input_types": [
                  "Message"
                ],
                "dynamic": false,
                "info": "Your AssemblyAI API key. You can get one from https://www.assemblyai.com/",
                "title_case": false,
                "password": true,
                "type": "str",
                "_input_type": "SecretStrInput"
              },
              "code": {
                "type": "code",
                "required": true,
                "placeholder": "",
                "list": false,
                "show": true,
                "multiline": true,
                "value": "import assemblyai as aai\nfrom axiestudio.custom import Component\nfrom axiestudio.io import FloatInput, SecretStrInput, DataInput, Output\nfrom axiestudio.schema import Data\nfrom loguru import logger\n\n\nclass AssemblyAITranscriptionJobPoller(Component):\n    display_name = \"AssemblyAI Poll Transcript\"\n    description = \"Poll for the status of a transcription job using AssemblyAI\"\n    documentation = \"https://www.assemblyai.com/docs\"\n    icon = \"🔄\"\n\n    inputs = [\n        SecretStrInput(\n            name=\"api_key\",\n            display_name=\"Assembly API Key\",\n            info=\"Your AssemblyAI API key. You can get one from https://www.assemblyai.com/\",\n        ),\n        DataInput(\n            name=\"transcript_id\",\n            display_name=\"Transcript ID\",\n            info=\"The ID of the transcription job to poll\",\n        ),\n        FloatInput(\n            name=\"polling_interval\",\n            display_name=\"Polling Interval\",\n            value=3.0,\n            info=\"The polling interval in seconds\",\n        ),\n    ]\n\n    outputs = [\n        Output(display_name=\"Transcription Result\", name=\"transcription_result\", method=\"poll_transcription_job\"),\n    ]\n\n    def poll_transcription_job(self) -> Data:\n        \"\"\"Polls the transcription status until completion and returns the Data.\"\"\"\n        aai.settings.api_key = self.api_key\n        aai.settings.polling_interval = self.polling_interval\n\n        # check if it's an error message from the previous step\n        if self.transcript_id.data.get(\"error\"):\n            self.status = self.transcript_id.data[\"error\"]\n            return self.transcript_id\n\n        try:\n            transcript = aai.Transcript.get_by_id(self.transcript_id.data[\"transcript_id\"])\n        except Exception as e:\n            error = f\"Getting transcription failed: {str(e)}\"\n            self.status = error\n            return Data(data={\"error\": error})\n\n        if transcript.status == aai.TranscriptStatus.completed:\n            data = Data(data=transcript.json_response)\n            self.status = data\n            return data\n        else:\n            self.status = transcript.error\n            return Data(data={\"error\": transcript.error})\n",
                "fileTypes": [],
                "file_path": "",
                "password": false,
                "name": "code",
                "advanced": true,
                "dynamic": true,
                "info": "",
                "load_from_db": false,
                "title_case": false
              },
              "polling_interval": {
                "trace_as_metadata": true,
                "list": false,
                "required": false,
                "placeholder": "",
                "show": true,
                "name": "polling_interval",
                "value": 3,
                "display_name": "Polling Interval",
                "advanced": false,
                "dynamic": false,
                "info": "The polling interval in seconds",
                "title_case": false,
                "type": "float",
                "_input_type": "FloatInput"
              }
            },
            "description": "Poll for the status of a transcription job using AssemblyAI",
            "icon": "🔄",
            "base_classes": [
              "Data"
            ],
            "display_name": "AssemblyAI Poll Transcript",
            "documentation": "https://www.assemblyai.com/docs",
            "custom_fields": {},
            "output_types": [],
            "pinned": false,
            "conditional_paths": [],
            "frozen": false,
            "outputs": [
              {
                "types": [
                  "Data"
                ],
                "selected": "Data",
                "name": "transcription_result",
                "display_name": "Transcription Result",
                "method": "poll_transcription_job",
                "value": "__UNDEFINED__",
                "cache": true
              }
            ],
            "field_order": [
              "api_key",
              "transcript_id",
              "polling_interval"
            ],
            "beta": false,
            "edited": false,
            "lf_version": "1.0.18"
          },
          "id": "AssemblyAITranscriptionJobPoller-P0i3D",
          "description": "Poll for the status of a transcription job using AssemblyAI",
          "display_name": "AssemblyAI Poll Transcript"
        },
        "selected": false,
        "width": 384,
        "height": 460,
        "positionAbsolute": {
          "x": -1483.0265701948672,
          "y": 363.29958676560693
        },
        "dragging": false
      },
      {
        "id": "AssemblyAITranscriptionParser-MEStb",
        "type": "genericNode",
        "position": {
          "x": -999.601736274544,
          "y": 362.06869797730684
        },
        "data": {
          "type": "AssemblyAITranscriptionParser",
          "node": {
            "template": {
              "_type": "Component",
              "transcription_result": {
                "trace_as_metadata": true,
                "list": false,
                "trace_as_input": true,
                "required": false,
                "placeholder": "",
                "show": true,
                "name": "transcription_result",
                "value": "",
                "display_name": "Transcription Result",
                "advanced": false,
                "input_types": [
                  "Data"
                ],
                "dynamic": false,
                "info": "The transcription result from AssemblyAI",
                "title_case": false,
                "type": "other",
                "_input_type": "DataInput"
              },
              "code": {
                "type": "code",
                "required": true,
                "placeholder": "",
                "list": false,
                "show": true,
                "multiline": true,
                "value": "from axiestudio.custom import Component\nfrom axiestudio.io import DataInput, Output\nfrom axiestudio.schema import Data\nfrom typing import Dict, List\nimport datetime\n\n\nclass AssemblyAITranscriptionParser(Component):\n    display_name = \"AssemblyAI Parse Transcript\"\n    description = \"Parse AssemblyAI transcription result. If Speaker Labels was enabled, format utterances with speakers and timestamps\"\n    documentation = \"https://www.assemblyai.com/docs\"\n    icon = \"📊\"\n\n    inputs = [\n        DataInput(\n            name=\"transcription_result\",\n            display_name=\"Transcription Result\",\n            info=\"The transcription result from AssemblyAI\",\n        ),\n    ]\n\n    outputs = [\n        Output(display_name=\"Parsed Transcription\", name=\"parsed_transcription\", method=\"parse_transcription\"),\n    ]\n\n    def parse_transcription(self) -> Data:\n        # check if it's an error message from the previous step\n        if self.transcription_result.data.get(\"error\"):\n            self.status = self.transcription_result.data[\"error\"]\n            return self.transcription_result\n\n        try:\n            transcription_data = self.transcription_result.data\n\n            if transcription_data.get(\"utterances\"):\n                # If speaker diarization was enabled\n                parsed_result = self.parse_with_speakers(transcription_data[\"utterances\"])\n            elif transcription_data.get(\"text\"):\n                # If speaker diarization was not enabled\n                parsed_result = transcription_data[\"text\"]\n            else:\n                raise ValueError(\"Unexpected transcription format\")\n\n            self.status = parsed_result\n            return Data(data={\"text\": parsed_result})\n        except Exception as e:\n            error_message = f\"Error parsing transcription: {str(e)}\"\n            self.status = error_message\n            return Data(data={\"error\": error_message})\n\n    def parse_with_speakers(self, utterances: List[Dict]) -> str:\n        parsed_result = []\n        for utterance in utterances:\n            speaker = utterance[\"speaker\"]\n            start_time = self.format_timestamp(utterance[\"start\"])\n            text = utterance[\"text\"]\n            parsed_result.append(f'Speaker {speaker} {start_time}\\n\"{text}\"\\n')\n\n        return \"\\n\".join(parsed_result)\n\n    def format_timestamp(self, milliseconds: int) -> str:\n        return str(datetime.timedelta(milliseconds=milliseconds)).split(\".\")[0]\n",
                "fileTypes": [],
                "file_path": "",
                "password": false,
                "name": "code",
                "advanced": true,
                "dynamic": true,
                "info": "",
                "load_from_db": false,
                "title_case": false
              }
            },
            "description": "Parse AssemblyAI transcription result. If Speaker Labels was enabled, format utterances with speakers and timestamps",
            "icon": "📊",
            "base_classes": [
              "Data"
            ],
            "display_name": "AssemblyAI Parse Transcript",
            "documentation": "https://www.assemblyai.com/docs",
            "custom_fields": {},
            "output_types": [],
            "pinned": false,
            "conditional_paths": [],
            "frozen": false,
            "outputs": [
              {
                "types": [
                  "Data"
                ],
                "selected": "Data",
                "name": "parsed_transcription",
                "display_name": "Parsed Transcription",
                "method": "parse_transcription",
                "value": "__UNDEFINED__",
                "cache": true
              }
            ],
            "field_order": [
              "transcription_result"
            ],
            "beta": false,
            "edited": false,
            "lf_version": "1.0.18"
          },
          "id": "AssemblyAITranscriptionParser-MEStb",
          "description": "Parse AssemblyAI transcription result. If Speaker Labels was enabled, format utterances with speakers and timestamps",
          "display_name": "AssemblyAI Parse Transcript"
        },
        "selected": false,
        "width": 384,
        "height": 316,
        "positionAbsolute": {
          "x": -999.601736274544,
          "y": 362.06869797730684
        },
        "dragging": false
      },
      {
        "id": "ParseData-ODfs9",
        "type": "genericNode",
        "position": {
          "x": -526.9606152851916,
          "y": 357.55497740555177
        },
        "data": {
          "type": "ParseData",
          "node": {
            "template": {
              "_type": "Component",
              "data": {
                "trace_as_metadata": true,
                "list": false,
                "trace_as_input": true,
                "required": false,
                "placeholder": "",
                "show": true,
                "name": "data",
                "value": "",
                "display_name": "Data",
                "advanced": false,
                "input_types": [
                  "Data"
                ],
                "dynamic": false,
                "info": "The data to convert to text.",
                "title_case": false,
                "type": "other",
                "_input_type": "DataInput"
              },
              "code": {
                "type": "code",
                "required": true,
                "placeholder": "",
                "list": false,
                "show": true,
                "multiline": true,
                "value": "from axiestudio.custom import Component\nfrom axiestudio.helpers.data import data_to_text\nfrom axiestudio.io import DataInput, MultilineInput, Output, StrInput\nfrom axiestudio.schema.message import Message\n\n\nclass ParseDataComponent(Component):\n    display_name = \"Parse Data\"\n    description = \"Convert Data into plain text following a specified template.\"\n    icon = \"braces\"\n    name = \"ParseData\"\n\n    inputs = [\n        DataInput(name=\"data\", display_name=\"Data\", info=\"The data to convert to text.\"),\n        MultilineInput(\n            name=\"template\",\n            display_name=\"Template\",\n            info=\"The template to use for formatting the data. It can contain the keys {text}, {data} or any other key in the Data.\",\n            value=\"{text}\",\n        ),\n        StrInput(name=\"sep\", display_name=\"Separator\", advanced=True, value=\"\\n\"),\n    ]\n\n    outputs = [\n        Output(display_name=\"Text\", name=\"text\", method=\"parse_data\"),\n    ]\n\n    def parse_data(self) -> Message:\n        data = self.data if isinstance(self.data, list) else [self.data]\n        template = self.template\n\n        result_string = data_to_text(template, data, sep=self.sep)\n        self.status = result_string\n        return Message(text=result_string)\n",
                "fileTypes": [],
                "file_path": "",
                "password": false,
                "name": "code",
                "advanced": true,
                "dynamic": true,
                "info": "",
                "load_from_db": false,
                "title_case": false
              },
              "sep": {
                "trace_as_metadata": true,
                "load_from_db": false,
                "list": false,
                "required": false,
                "placeholder": "",
                "show": true,
                "name": "sep",
                "value": "\n",
                "display_name": "Separator",
                "advanced": true,
                "dynamic": false,
                "info": "",
                "title_case": false,
                "type": "str",
                "_input_type": "StrInput"
              },
              "template": {
                "trace_as_input": true,
                "multiline": true,
                "trace_as_metadata": true,
                "load_from_db": false,
                "list": false,
                "required": false,
                "placeholder": "",
                "show": true,
                "name": "template",
                "value": "{text}",
                "display_name": "Template",
                "advanced": false,
                "input_types": [
                  "Message"
                ],
                "dynamic": false,
                "info": "The template to use for formatting the data. It can contain the keys {text}, {data} or any other key in the Data.",
                "title_case": false,
                "type": "str",
                "_input_type": "MultilineInput"
              }
            },
            "description": "Convert Data into plain text following a specified template.",
            "icon": "braces",
            "base_classes": [
              "Message"
            ],
            "display_name": "Parse Data",
            "documentation": "",
            "custom_fields": {},
            "output_types": [],
            "pinned": false,
            "conditional_paths": [],
            "frozen": false,
            "outputs": [
              {
                "types": [
                  "Message"
                ],
                "selected": "Message",
                "name": "text",
                "display_name": "Text",
                "method": "parse_data",
                "value": "__UNDEFINED__",
                "cache": true
              }
            ],
            "field_order": [
              "data",
              "template",
              "sep"
            ],
            "beta": false,
            "edited": false,
            "lf_version": "1.0.18"
          },
          "id": "ParseData-ODfs9"
        },
        "selected": false,
        "width": 384,
        "height": 378,
        "positionAbsolute": {
          "x": -526.9606152851916,
          "y": 357.55497740555177
        },
        "dragging": false
      },
      {
        "id": "Prompt-xIpUJ",
        "type": "genericNode",
        "position": {
          "x": -36.84404787733604,
          "y": 361.63435529463607
        },
        "data": {
          "type": "Prompt",
          "node": {
            "template": {
              "_type": "Component",
              "code": {
                "type": "code",
                "required": true,
                "placeholder": "",
                "list": false,
                "show": true,
                "multiline": true,
                "value": "from axiestudio.base.prompts.api_utils import process_prompt_template\nfrom axiestudio.custom import Component\nfrom axiestudio.inputs.inputs import DefaultPromptField\nfrom axiestudio.io import Output, PromptInput\nfrom axiestudio.schema.message import Message\nfrom axiestudio.template.utils import update_template_values\n\n\nclass PromptComponent(Component):\n    display_name: str = \"Prompt\"\n    description: str = \"Create a prompt template with dynamic variables.\"\n    icon = \"prompts\"\n    trace_type = \"prompt\"\n    name = \"Prompt\"\n\n    inputs = [\n        PromptInput(name=\"template\", display_name=\"Template\"),\n    ]\n\n    outputs = [\n        Output(display_name=\"Prompt Message\", name=\"prompt\", method=\"build_prompt\"),\n    ]\n\n    async def build_prompt(\n        self,\n    ) -> Message:\n        prompt = await Message.from_template_and_variables(**self._attributes)\n        self.status = prompt.text\n        return prompt\n\n    def _update_template(self, frontend_node: dict):\n        prompt_template = frontend_node[\"template\"][\"template\"][\"value\"]\n        custom_fields = frontend_node[\"custom_fields\"]\n        frontend_node_template = frontend_node[\"template\"]\n        _ = process_prompt_template(\n            template=prompt_template,\n            name=\"template\",\n            custom_fields=custom_fields,\n            frontend_node_template=frontend_node_template,\n        )\n        return frontend_node\n\n    def post_code_processing(self, new_frontend_node: dict, current_frontend_node: dict):\n        \"\"\"\n        This function is called after the code validation is done.\n        \"\"\"\n        frontend_node = super().post_code_processing(new_frontend_node, current_frontend_node)\n        template = frontend_node[\"template\"][\"template\"][\"value\"]\n        # Kept it duplicated for backwards compatibility\n        _ = process_prompt_template(\n            template=template,\n            name=\"template\",\n            custom_fields=frontend_node[\"custom_fields\"],\n            frontend_node_template=frontend_node[\"template\"],\n        )\n        # Now that template is updated, we need to grab any values that were set in the current_frontend_node\n        # and update the frontend_node with those values\n        update_template_values(new_template=frontend_node, previous_template=current_frontend_node[\"template\"])\n        return frontend_node\n\n    def _get_fallback_input(self, **kwargs):\n        return DefaultPromptField(**kwargs)\n",
                "fileTypes": [],
                "file_path": "",
                "password": false,
                "name": "code",
                "advanced": true,
                "dynamic": true,
                "info": "",
                "load_from_db": false,
                "title_case": false
              },
              "template": {
                "trace_as_input": true,
                "list": false,
                "required": false,
                "placeholder": "",
                "show": true,
                "name": "template",
                "value": "Analise as notas desta reunião e crie um resumo executivo profissional seguindo esta estrutura:\n\nCabeçalho\n\n📅 Data e horário da reunião\n👥 Lista de participantes\n📋 Pauta principal\n\nConteúdo Principal\n\n💡 Principais pontos discutidos (máximo 5 tópicos, formato bullet points)\n⚖️ Decisões tomadas com suas respectivas justificativas\n❗ Pontos críticos que requerem atenção especial\n\nPlano de Ação\n\n✅ Tarefas atribuídas, organizadas por:\n\nResponsável\nPrazo de entrega\nPrioridade (Alta/Média/Baixa)\n\n📊 Status atual de cada ação (Não iniciada/Em andamento/Concluída)\n\nEncaminhamentos\n\n📌 Próximos passos\n⏳ Pendências para acompanhamento\n📆 Data da próxima reunião\n\nUse formatação clara (títulos, subtítulos e marcadores) e mantenha linguagem concisa e profissional. Destaque em negrito os responsáveis por cada ação e utilize emojis para melhorar a visualização das seções. Limite o resumo a no máximo 2 páginas.\n{transcription-text}\n",
                "display_name": "Template",
                "advanced": false,
                "dynamic": false,
                "info": "",
                "title_case": false,
                "type": "prompt",
                "_input_type": "PromptInput"
              },
              "transcription-text": {
                "field_type": "str",
                "required": false,
                "placeholder": "",
                "list": false,
                "show": true,
                "multiline": true,
                "value": "",
                "fileTypes": [],
                "file_path": "",
                "name": "transcription-text",
                "display_name": "transcription-text",
                "advanced": false,
                "input_types": [
                  "Message",
                  "Text"
                ],
                "dynamic": false,
                "info": "",
                "load_from_db": false,
                "title_case": false,
                "type": "str"
              }
            },
            "description": "Create a prompt template with dynamic variables.",
            "icon": "prompts",
            "is_input": null,
            "is_output": null,
            "is_composition": null,
            "base_classes": [
              "Message"
            ],
            "name": "",
            "display_name": "Prompt",
            "documentation": "",
            "custom_fields": {
              "template": [
                "transcription-text"
              ]
            },
            "output_types": [],
            "full_path": null,
            "pinned": false,
            "conditional_paths": [],
            "frozen": false,
            "outputs": [
              {
                "types": [
                  "Message"
                ],
                "selected": "Message",
                "name": "prompt",
                "hidden": null,
                "display_name": "Prompt Message",
                "method": "build_prompt",
                "value": "__UNDEFINED__",
                "cache": true
              }
            ],
            "field_order": [
              "template"
            ],
            "beta": false,
            "error": null,
            "edited": false,
            "lf_version": "1.0.18"
          },
          "id": "Prompt-xIpUJ"
        },
        "selected": false,
        "width": 384,
        "height": 416,
        "positionAbsolute": {
          "x": -36.84404787733604,
          "y": 361.63435529463607
        },
        "dragging": false
      },
      {
        "id": "TextOutput-f4LYm",
        "type": "genericNode",
        "position": {
          "x": 948.1925946486524,
          "y": 362.62515377913667
        },
        "data": {
          "type": "TextOutput",
          "node": {
            "template": {
              "_type": "Component",
              "code": {
                "type": "code",
                "required": true,
                "placeholder": "",
                "list": false,
                "show": true,
                "multiline": true,
                "value": "from axiestudio.base.io.text import TextComponent\nfrom axiestudio.io import MultilineInput, Output\nfrom axiestudio.schema.message import Message\n\n\nclass TextOutputComponent(TextComponent):\n    display_name = \"Text Output\"\n    description = \"Display a text output in the Playground.\"\n    icon = \"type\"\n    name = \"TextOutput\"\n\n    inputs = [\n        MultilineInput(\n            name=\"input_value\",\n            display_name=\"Text\",\n            info=\"Text to be passed as output.\",\n        ),\n    ]\n    outputs = [\n        Output(display_name=\"Text\", name=\"text\", method=\"text_response\"),\n    ]\n\n    def text_response(self) -> Message:\n        message = Message(\n            text=self.input_value,\n        )\n        self.status = self.input_value\n        return message\n",
                "fileTypes": [],
                "file_path": "",
                "password": false,
                "name": "code",
                "advanced": true,
                "dynamic": true,
                "info": "",
                "load_from_db": false,
                "title_case": false
              },
              "input_value": {
                "trace_as_input": true,
                "multiline": true,
                "trace_as_metadata": true,
                "load_from_db": false,
                "list": false,
                "required": false,
                "placeholder": "",
                "show": true,
                "name": "input_value",
                "value": "",
                "display_name": "Text",
                "advanced": false,
                "input_types": [
                  "Message"
                ],
                "dynamic": false,
                "info": "Text to be passed as output.",
                "title_case": false,
                "type": "str",
                "_input_type": "MultilineInput"
              }
            },
            "description": "Display a text output in the Playground.",
            "icon": "type",
            "base_classes": [
              "Message"
            ],
            "display_name": "Text Output",
            "documentation": "",
            "custom_fields": {},
            "output_types": [],
            "pinned": false,
            "conditional_paths": [],
            "frozen": false,
            "outputs": [
              {
                "types": [
                  "Message"
                ],
                "selected": "Message",
                "name": "text",
                "display_name": "Text",
                "method": "text_response",
                "value": "__UNDEFINED__",
                "cache": true
              }
            ],
            "field_order": [
              "input_value"
            ],
            "beta": false,
            "edited": false,
            "lf_version": "1.0.18"
          },
          "id": "TextOutput-f4LYm"
        },
        "selected": false,
        "width": 384,
        "height": 302,
        "positionAbsolute": {
          "x": 948.1925946486524,
          "y": 362.62515377913667
        },
        "dragging": false
      },
      {
        "id": "TextOutput-O61dq",
        "type": "genericNode",
        "position": {
          "x": 937.7991554195826,
          "y": 1223.2271291125692
        },
        "data": {
          "type": "TextOutput",
          "node": {
            "template": {
              "_type": "Component",
              "code": {
                "type": "code",
                "required": true,
                "placeholder": "",
                "list": false,
                "show": true,
                "multiline": true,
                "value": "from axiestudio.base.io.text import TextComponent\nfrom axiestudio.io import MultilineInput, Output\nfrom axiestudio.schema.message import Message\n\n\nclass TextOutputComponent(TextComponent):\n    display_name = \"Text Output\"\n    description = \"Display a text output in the Playground.\"\n    icon = \"type\"\n    name = \"TextOutput\"\n\n    inputs = [\n        MultilineInput(\n            name=\"input_value\",\n            display_name=\"Text\",\n            info=\"Text to be passed as output.\",\n        ),\n    ]\n    outputs = [\n        Output(display_name=\"Text\", name=\"text\", method=\"text_response\"),\n    ]\n\n    def text_response(self) -> Message:\n        message = Message(\n            text=self.input_value,\n        )\n        self.status = self.input_value\n        return message\n",
                "fileTypes": [],
                "file_path": "",
                "password": false,
                "name": "code",
                "advanced": true,
                "dynamic": true,
                "info": "",
                "load_from_db": false,
                "title_case": false
              },
              "input_value": {
                "trace_as_input": true,
                "multiline": true,
                "trace_as_metadata": true,
                "load_from_db": false,
                "list": false,
                "required": false,
                "placeholder": "",
                "show": true,
                "name": "input_value",
                "value": "",
                "display_name": "Text",
                "advanced": false,
                "input_types": [
                  "Message"
                ],
                "dynamic": false,
                "info": "Text to be passed as output.",
                "title_case": false,
                "type": "str",
                "_input_type": "MultilineInput"
              }
            },
            "description": "Display a text output in the Playground.",
            "icon": "type",
            "base_classes": [
              "Message"
            ],
            "display_name": "Text Output",
            "documentation": "",
            "custom_fields": {},
            "output_types": [],
            "pinned": false,
            "conditional_paths": [],
            "frozen": false,
            "outputs": [
              {
                "types": [
                  "Message"
                ],
                "selected": "Message",
                "name": "text",
                "display_name": "Text",
                "method": "text_response",
                "value": "__UNDEFINED__",
                "cache": true
              }
            ],
            "field_order": [
              "input_value"
            ],
            "beta": false,
            "edited": false,
            "lf_version": "1.0.18"
          },
          "id": "TextOutput-O61dq"
        },
        "selected": false,
        "width": 384,
        "height": 302,
        "positionAbsolute": {
          "x": 937.7991554195826,
          "y": 1223.2271291125692
        },
        "dragging": false
      },
      {
        "id": "ParseData-5wXky",
        "type": "genericNode",
        "position": {
          "x": -508.41713100654533,
          "y": 1230.6349646004066
        },
        "data": {
          "type": "ParseData",
          "node": {
            "template": {
              "_type": "Component",
              "data": {
                "trace_as_metadata": true,
                "list": false,
                "trace_as_input": true,
                "required": false,
                "placeholder": "",
                "show": true,
                "name": "data",
                "value": "",
                "display_name": "Data",
                "advanced": false,
                "input_types": [
                  "Data"
                ],
                "dynamic": false,
                "info": "The data to convert to text.",
                "title_case": false,
                "type": "other",
                "_input_type": "DataInput"
              },
              "code": {
                "type": "code",
                "required": true,
                "placeholder": "",
                "list": false,
                "show": true,
                "multiline": true,
                "value": "from axiestudio.custom import Component\nfrom axiestudio.helpers.data import data_to_text\nfrom axiestudio.io import DataInput, MultilineInput, Output, StrInput\nfrom axiestudio.schema.message import Message\n\n\nclass ParseDataComponent(Component):\n    display_name = \"Parse Data\"\n    description = \"Convert Data into plain text following a specified template.\"\n    icon = \"braces\"\n    name = \"ParseData\"\n\n    inputs = [\n        DataInput(name=\"data\", display_name=\"Data\", info=\"The data to convert to text.\"),\n        MultilineInput(\n            name=\"template\",\n            display_name=\"Template\",\n            info=\"The template to use for formatting the data. It can contain the keys {text}, {data} or any other key in the Data.\",\n            value=\"{text}\",\n        ),\n        StrInput(name=\"sep\", display_name=\"Separator\", advanced=True, value=\"\\n\"),\n    ]\n\n    outputs = [\n        Output(display_name=\"Text\", name=\"text\", method=\"parse_data\"),\n    ]\n\n    def parse_data(self) -> Message:\n        data = self.data if isinstance(self.data, list) else [self.data]\n        template = self.template\n\n        result_string = data_to_text(template, data, sep=self.sep)\n        self.status = result_string\n        return Message(text=result_string)\n",
                "fileTypes": [],
                "file_path": "",
                "password": false,
                "name": "code",
                "advanced": true,
                "dynamic": true,
                "info": "",
                "load_from_db": false,
                "title_case": false
              },
              "sep": {
                "trace_as_metadata": true,
                "load_from_db": false,
                "list": false,
                "required": false,
                "placeholder": "",
                "show": true,
                "name": "sep",
                "value": "\n",
                "display_name": "Separator",
                "advanced": true,
                "dynamic": false,
                "info": "",
                "title_case": false,
                "type": "str",
                "_input_type": "StrInput"
              },
              "template": {
                "trace_as_input": true,
                "multiline": true,
                "trace_as_metadata": true,
                "load_from_db": false,
                "list": false,
                "required": false,
                "placeholder": "",
                "show": true,
                "name": "template",
                "value": "{text}",
                "display_name": "Template",
                "advanced": false,
                "input_types": [
                  "Message"
                ],
                "dynamic": false,
                "info": "The template to use for formatting the data. It can contain the keys {text}, {data} or any other key in the Data.",
                "title_case": false,
                "type": "str",
                "_input_type": "MultilineInput"
              }
            },
            "description": "Convert Data into plain text following a specified template.",
            "icon": "braces",
            "base_classes": [
              "Message"
            ],
            "display_name": "Parse Data",
            "documentation": "",
            "custom_fields": {},
            "output_types": [],
            "pinned": false,
            "conditional_paths": [],
            "frozen": false,
            "outputs": [
              {
                "types": [
                  "Message"
                ],
                "selected": "Message",
                "name": "text",
                "display_name": "Text",
                "method": "parse_data",
                "value": "__UNDEFINED__",
                "cache": true
              }
            ],
            "field_order": [
              "data",
              "template",
              "sep"
            ],
            "beta": false,
            "edited": false,
            "lf_version": "1.0.18"
          },
          "id": "ParseData-5wXky"
        },
        "selected": false,
        "width": 384,
        "height": 378,
        "positionAbsolute": {
          "x": -508.41713100654533,
          "y": 1230.6349646004066
        },
        "dragging": false
      },
      {
        "id": "AnthropicModel-2jaVJ",
        "type": "genericNode",
        "position": {
          "x": 453.2578820076046,
          "y": 348.4927445935148
        },
        "data": {
          "type": "AnthropicModel",
          "node": {
            "template": {
              "_type": "Component",
              "anthropic_api_key": {
                "load_from_db": false,
                "required": false,
                "placeholder": "",
                "show": true,
                "name": "anthropic_api_key",
                "value": "",
                "display_name": "Anthropic API Key",
                "advanced": false,
                "input_types": [
                  "Message"
                ],
                "dynamic": false,
                "info": "Your Anthropic API key.",
                "title_case": false,
                "password": true,
                "type": "str",
                "_input_type": "SecretStrInput"
              },
              "anthropic_api_url": {
                "trace_as_input": true,
                "trace_as_metadata": true,
                "load_from_db": false,
                "list": false,
                "required": false,
                "placeholder": "",
                "show": true,
                "name": "anthropic_api_url",
                "value": "",
                "display_name": "Anthropic API URL",
                "advanced": true,
                "input_types": [
                  "Message"
                ],
                "dynamic": false,
                "info": "Endpoint of the Anthropic API. Defaults to 'https://api.anthropic.com' if not specified.",
                "title_case": false,
                "type": "str",
                "_input_type": "MessageTextInput"
              },
              "code": {
                "type": "code",
                "required": true,
                "placeholder": "",
                "list": false,
                "show": true,
                "multiline": true,
                "value": "from pydantic.v1 import SecretStr\n\nfrom axiestudio.base.models.model import LCModelComponent\nfrom axiestudio.field_typing import LanguageModel\nfrom axiestudio.io import DropdownInput, FloatInput, IntInput, MessageTextInput, SecretStrInput\n\n\nclass AnthropicModelComponent(LCModelComponent):\n    display_name = \"Anthropic\"\n    description = \"Generate text using Anthropic Chat&Completion LLMs with prefill support.\"\n    icon = \"Anthropic\"\n    name = \"AnthropicModel\"\n\n    inputs = LCModelComponent._base_inputs + [\n        IntInput(\n            name=\"max_tokens\",\n            display_name=\"Max Tokens\",\n            advanced=True,\n            value=4096,\n            info=\"The maximum number of tokens to generate. Set to 0 for unlimited tokens.\",\n        ),\n        DropdownInput(\n            name=\"model\",\n            display_name=\"Model Name\",\n            options=[\n                \"claude-3-5-sonnet-20240620\",\n                \"claude-3-opus-20240229\",\n                \"claude-3-sonnet-20240229\",\n                \"claude-3-haiku-20240307\",\n            ],\n            info=\"https://python.langchain.com/docs/integrations/chat/anthropic\",\n            value=\"claude-3-5-sonnet-20240620\",\n        ),\n        SecretStrInput(\n            name=\"anthropic_api_key\",\n            display_name=\"Anthropic API Key\",\n            info=\"Your Anthropic API key.\",\n        ),\n        FloatInput(name=\"temperature\", display_name=\"Temperature\", value=0.1),\n        MessageTextInput(\n            name=\"anthropic_api_url\",\n            display_name=\"Anthropic API URL\",\n            advanced=True,\n            info=\"Endpoint of the Anthropic API. Defaults to 'https://api.anthropic.com' if not specified.\",\n        ),\n        MessageTextInput(\n            name=\"prefill\",\n            display_name=\"Prefill\",\n            info=\"Prefill text to guide the model's response.\",\n            advanced=True,\n        ),\n    ]\n\n    def build_model(self) -> LanguageModel:  # type: ignore[type-var]\n        try:\n            from langchain_anthropic.chat_models import ChatAnthropic\n        except ImportError:\n            raise ImportError(\n                \"langchain_anthropic is not installed. Please install it with `pip install langchain_anthropic`.\"\n            )\n        model = self.model\n        anthropic_api_key = self.anthropic_api_key\n        max_tokens = self.max_tokens\n        temperature = self.temperature\n        anthropic_api_url = self.anthropic_api_url or \"https://api.anthropic.com\"\n\n        try:\n            output = ChatAnthropic(\n                model=model,\n                anthropic_api_key=(SecretStr(anthropic_api_key) if anthropic_api_key else None),\n                max_tokens_to_sample=max_tokens,  # type: ignore\n                temperature=temperature,\n                anthropic_api_url=anthropic_api_url,\n                streaming=self.stream,\n            )\n        except Exception as e:\n            raise ValueError(\"Could not connect to Anthropic API.\") from e\n\n        return output  # type: ignore\n\n    def _get_exception_message(self, exception: Exception) -> str | None:\n        \"\"\"\n        Get a message from an Anthropic exception.\n\n        Args:\n            exception (Exception): The exception to get the message from.\n\n        Returns:\n            str: The message from the exception.\n        \"\"\"\n        try:\n            from anthropic import BadRequestError\n        except ImportError:\n            return None\n        if isinstance(exception, BadRequestError):\n            message = exception.body.get(\"error\", {}).get(\"message\")  # type: ignore\n            if message:\n                return message\n        return None\n",
                "fileTypes": [],
                "file_path": "",
                "password": false,
                "name": "code",
                "advanced": true,
                "dynamic": true,
                "info": "",
                "load_from_db": false,
                "title_case": false
              },
              "input_value": {
                "trace_as_input": true,
                "trace_as_metadata": true,
                "load_from_db": false,
                "list": false,
                "required": false,
                "placeholder": "",
                "show": true,
                "name": "input_value",
                "value": "",
                "display_name": "Input",
                "advanced": false,
                "input_types": [
                  "Message"
                ],
                "dynamic": false,
                "info": "",
                "title_case": false,
                "type": "str",
                "_input_type": "MessageInput"
              },
              "max_tokens": {
                "trace_as_metadata": true,
                "list": false,
                "required": false,
                "placeholder": "",
                "show": true,
                "name": "max_tokens",
                "value": 4096,
                "display_name": "Max Tokens",
                "advanced": true,
                "dynamic": false,
                "info": "The maximum number of tokens to generate. Set to 0 for unlimited tokens.",
                "title_case": false,
                "type": "int",
                "_input_type": "IntInput"
              },
              "model": {
                "trace_as_metadata": true,
                "options": [
                  "claude-3-5-sonnet-20240620",
                  "claude-3-opus-20240229",
                  "claude-3-sonnet-20240229",
                  "claude-3-haiku-20240307"
                ],
                "combobox": false,
                "required": false,
                "placeholder": "",
                "show": true,
                "name": "model",
                "value": "claude-3-5-sonnet-20240620",
                "display_name": "Model Name",
                "advanced": false,
                "dynamic": false,
                "info": "https://python.langchain.com/docs/integrations/chat/anthropic",
                "title_case": false,
                "type": "str",
                "_input_type": "DropdownInput"
              },
              "prefill": {
                "trace_as_input": true,
                "trace_as_metadata": true,
                "load_from_db": false,
                "list": false,
                "required": false,
                "placeholder": "",
                "show": true,
                "name": "prefill",
                "value": "",
                "display_name": "Prefill",
                "advanced": true,
                "input_types": [
                  "Message"
                ],
                "dynamic": false,
                "info": "Prefill text to guide the model's response.",
                "title_case": false,
                "type": "str",
                "_input_type": "MessageTextInput"
              },
              "stream": {
                "trace_as_metadata": true,
                "list": false,
                "required": false,
                "placeholder": "",
                "show": true,
                "name": "stream",
                "value": false,
                "display_name": "Stream",
                "advanced": true,
                "dynamic": false,
                "info": "Stream the response from the model. Streaming works only in Chat.",
                "title_case": false,
                "type": "bool",
                "_input_type": "BoolInput"
              },
              "system_message": {
                "trace_as_input": true,
                "trace_as_metadata": true,
                "load_from_db": false,
                "list": false,
                "required": false,
                "placeholder": "",
                "show": true,
                "name": "system_message",
                "value": "",
                "display_name": "System Message",
                "advanced": true,
                "input_types": [
                  "Message"
                ],
                "dynamic": false,
                "info": "System message to pass to the model.",
                "title_case": false,
                "type": "str",
                "_input_type": "MessageTextInput"
              },
              "temperature": {
                "trace_as_metadata": true,
                "list": false,
                "required": false,
                "placeholder": "",
                "show": true,
                "name": "temperature",
                "value": "0.3",
                "display_name": "Temperature",
                "advanced": false,
                "dynamic": false,
                "info": "",
                "title_case": false,
                "type": "float",
                "_input_type": "FloatInput"
              }
            },
            "description": "Generate text using Anthropic Chat&Completion LLMs with prefill support.",
            "icon": "Anthropic",
            "base_classes": [
              "LanguageModel",
              "Message"
            ],
            "display_name": "Anthropic",
            "documentation": "",
            "custom_fields": {},
            "output_types": [],
            "pinned": false,
            "conditional_paths": [],
            "frozen": false,
            "outputs": [
              {
                "types": [
                  "Message"
                ],
                "selected": "Message",
                "name": "text_output",
                "display_name": "Text",
                "method": "text_response",
                "value": "__UNDEFINED__",
                "cache": true
              },
              {
                "types": [
                  "LanguageModel"
                ],
                "selected": "LanguageModel",
                "name": "model_output",
                "display_name": "Language Model",
                "method": "build_model",
                "value": "__UNDEFINED__",
                "cache": true
              }
            ],
            "field_order": [
              "input_value",
              "system_message",
              "stream",
              "max_tokens",
              "model",
              "anthropic_api_key",
              "temperature",
              "anthropic_api_url",
              "prefill"
            ],
            "beta": false,
            "edited": false,
            "lf_version": "1.0.18"
          },
          "id": "AnthropicModel-2jaVJ"
        },
        "selected": false,
        "width": 384,
        "height": 633,
        "positionAbsolute": {
          "x": 453.2578820076046,
          "y": 348.4927445935148
        },
        "dragging": false
      }
    ],
    "edges": [
      {
        "source": "AssemblyAITranscriptionJobCreator-RJsGH",
        "sourceHandle": "{œdataTypeœ:œAssemblyAITranscriptionJobCreatorœ,œidœ:œAssemblyAITranscriptionJobCreator-RJsGHœ,œnameœ:œtranscript_idœ,œoutput_typesœ:[œDataœ]}",
        "target": "AssemblyAITranscriptionJobPoller-P0i3D",
        "targetHandle": "{œfieldNameœ:œtranscript_idœ,œidœ:œAssemblyAITranscriptionJobPoller-P0i3Dœ,œinputTypesœ:[œDataœ],œtypeœ:œotherœ}",
        "data": {
          "targetHandle": {
            "fieldName": "transcript_id",
            "id": "AssemblyAITranscriptionJobPoller-P0i3D",
            "inputTypes": [
              "Data"
            ],
            "type": "other"
          },
          "sourceHandle": {
            "dataType": "AssemblyAITranscriptionJobCreator",
            "id": "AssemblyAITranscriptionJobCreator-RJsGH",
            "name": "transcript_id",
            "output_types": [
              "Data"
            ]
          }
        },
        "id": "reactflow__edge-AssemblyAITranscriptionJobCreator-RJsGH{œdataTypeœ:œAssemblyAITranscriptionJobCreatorœ,œidœ:œAssemblyAITranscriptionJobCreator-RJsGHœ,œnameœ:œtranscript_idœ,œoutput_typesœ:[œDataœ]}-AssemblyAITranscriptionJobPoller-P0i3D{œfieldNameœ:œtranscript_idœ,œidœ:œAssemblyAITranscriptionJobPoller-P0i3Dœ,œinputTypesœ:[œDataœ],œtypeœ:œotherœ}",
        "className": "",
        "selected": false
      },
      {
        "source": "AssemblyAITranscriptionJobPoller-P0i3D",
        "sourceHandle": "{œdataTypeœ:œAssemblyAITranscriptionJobPollerœ,œidœ:œAssemblyAITranscriptionJobPoller-P0i3Dœ,œnameœ:œtranscription_resultœ,œoutput_typesœ:[œDataœ]}",
        "target": "AssemblyAITranscriptionParser-MEStb",
        "targetHandle": "{œfieldNameœ:œtranscription_resultœ,œidœ:œAssemblyAITranscriptionParser-MEStbœ,œinputTypesœ:[œDataœ],œtypeœ:œotherœ}",
        "data": {
          "targetHandle": {
            "fieldName": "transcription_result",
            "id": "AssemblyAITranscriptionParser-MEStb",
            "inputTypes": [
              "Data"
            ],
            "type": "other"
          },
          "sourceHandle": {
            "dataType": "AssemblyAITranscriptionJobPoller",
            "id": "AssemblyAITranscriptionJobPoller-P0i3D",
            "name": "transcription_result",
            "output_types": [
              "Data"
            ]
          }
        },
        "id": "reactflow__edge-AssemblyAITranscriptionJobPoller-P0i3D{œdataTypeœ:œAssemblyAITranscriptionJobPollerœ,œidœ:œAssemblyAITranscriptionJobPoller-P0i3Dœ,œnameœ:œtranscription_resultœ,œoutput_typesœ:[œDataœ]}-AssemblyAITranscriptionParser-MEStb{œfieldNameœ:œtranscription_resultœ,œidœ:œAssemblyAITranscriptionParser-MEStbœ,œinputTypesœ:[œDataœ],œtypeœ:œotherœ}",
        "className": ""
      },
      {
        "source": "AssemblyAITranscriptionParser-MEStb",
        "sourceHandle": "{œdataTypeœ:œAssemblyAITranscriptionParserœ,œidœ:œAssemblyAITranscriptionParser-MEStbœ,œnameœ:œparsed_transcriptionœ,œoutput_typesœ:[œDataœ]}",
        "target": "ParseData-ODfs9",
        "targetHandle": "{œfieldNameœ:œdataœ,œidœ:œParseData-ODfs9œ,œinputTypesœ:[œDataœ],œtypeœ:œotherœ}",
        "data": {
          "targetHandle": {
            "fieldName": "data",
            "id": "ParseData-ODfs9",
            "inputTypes": [
              "Data"
            ],
            "type": "other"
          },
          "sourceHandle": {
            "dataType": "AssemblyAITranscriptionParser",
            "id": "AssemblyAITranscriptionParser-MEStb",
            "name": "parsed_transcription",
            "output_types": [
              "Data"
            ]
          }
        },
        "id": "reactflow__edge-AssemblyAITranscriptionParser-MEStb{œdataTypeœ:œAssemblyAITranscriptionParserœ,œidœ:œAssemblyAITranscriptionParser-MEStbœ,œnameœ:œparsed_transcriptionœ,œoutput_typesœ:[œDataœ]}-ParseData-ODfs9{œfieldNameœ:œdataœ,œidœ:œParseData-ODfs9œ,œinputTypesœ:[œDataœ],œtypeœ:œotherœ}",
        "className": ""
      },
      {
        "source": "ParseData-ODfs9",
        "sourceHandle": "{œdataTypeœ:œParseDataœ,œidœ:œParseData-ODfs9œ,œnameœ:œtextœ,œoutput_typesœ:[œMessageœ]}",
        "target": "Prompt-xIpUJ",
        "targetHandle": "{œfieldNameœ:œtranscription-textœ,œidœ:œPrompt-xIpUJœ,œinputTypesœ:[œMessageœ,œTextœ],œtypeœ:œstrœ}",
        "data": {
          "targetHandle": {
            "fieldName": "transcription-text",
            "id": "Prompt-xIpUJ",
            "inputTypes": [
              "Message",
              "Text"
            ],
            "type": "str"
          },
          "sourceHandle": {
            "dataType": "ParseData",
            "id": "ParseData-ODfs9",
            "name": "text",
            "output_types": [
              "Message"
            ]
          }
        },
        "id": "reactflow__edge-ParseData-ODfs9{œdataTypeœ:œParseDataœ,œidœ:œParseData-ODfs9œ,œnameœ:œtextœ,œoutput_typesœ:[œMessageœ]}-Prompt-xIpUJ{œfieldNameœ:œtranscription-textœ,œidœ:œPrompt-xIpUJœ,œinputTypesœ:[œMessageœ,œTextœ],œtypeœ:œstrœ}",
        "className": ""
      },
      {
        "source": "AssemblyAITranscriptionParser-MEStb",
        "sourceHandle": "{œdataTypeœ:œAssemblyAITranscriptionParserœ,œidœ:œAssemblyAITranscriptionParser-MEStbœ,œnameœ:œparsed_transcriptionœ,œoutput_typesœ:[œDataœ]}",
        "target": "ParseData-5wXky",
        "targetHandle": "{œfieldNameœ:œdataœ,œidœ:œParseData-5wXkyœ,œinputTypesœ:[œDataœ],œtypeœ:œotherœ}",
        "data": {
          "targetHandle": {
            "fieldName": "data",
            "id": "ParseData-5wXky",
            "inputTypes": [
              "Data"
            ],
            "type": "other"
          },
          "sourceHandle": {
            "dataType": "AssemblyAITranscriptionParser",
            "id": "AssemblyAITranscriptionParser-MEStb",
            "name": "parsed_transcription",
            "output_types": [
              "Data"
            ]
          }
        },
        "id": "reactflow__edge-AssemblyAITranscriptionParser-MEStb{œdataTypeœ:œAssemblyAITranscriptionParserœ,œidœ:œAssemblyAITranscriptionParser-MEStbœ,œnameœ:œparsed_transcriptionœ,œoutput_typesœ:[œDataœ]}-ParseData-5wXky{œfieldNameœ:œdataœ,œidœ:œParseData-5wXkyœ,œinputTypesœ:[œDataœ],œtypeœ:œotherœ}"
      },
      {
        "source": "ParseData-5wXky",
        "sourceHandle": "{œdataTypeœ:œParseDataœ,œidœ:œParseData-5wXkyœ,œnameœ:œtextœ,œoutput_typesœ:[œMessageœ]}",
        "target": "TextOutput-O61dq",
        "targetHandle": "{œfieldNameœ:œinput_valueœ,œidœ:œTextOutput-O61dqœ,œinputTypesœ:[œMessageœ],œtypeœ:œstrœ}",
        "data": {
          "targetHandle": {
            "fieldName": "input_value",
            "id": "TextOutput-O61dq",
            "inputTypes": [
              "Message"
            ],
            "type": "str"
          },
          "sourceHandle": {
            "dataType": "ParseData",
            "id": "ParseData-5wXky",
            "name": "text",
            "output_types": [
              "Message"
            ]
          }
        },
        "id": "reactflow__edge-ParseData-5wXky{œdataTypeœ:œParseDataœ,œidœ:œParseData-5wXkyœ,œnameœ:œtextœ,œoutput_typesœ:[œMessageœ]}-TextOutput-O61dq{œfieldNameœ:œinput_valueœ,œidœ:œTextOutput-O61dqœ,œinputTypesœ:[œMessageœ],œtypeœ:œstrœ}"
      },
      {
        "source": "Prompt-xIpUJ",
        "sourceHandle": "{œdataTypeœ:œPromptœ,œidœ:œPrompt-xIpUJœ,œnameœ:œpromptœ,œoutput_typesœ:[œMessageœ]}",
        "target": "AnthropicModel-2jaVJ",
        "targetHandle": "{œfieldNameœ:œinput_valueœ,œidœ:œAnthropicModel-2jaVJœ,œinputTypesœ:[œMessageœ],œtypeœ:œstrœ}",
        "data": {
          "targetHandle": {
            "fieldName": "input_value",
            "id": "AnthropicModel-2jaVJ",
            "inputTypes": [
              "Message"
            ],
            "type": "str"
          },
          "sourceHandle": {
            "dataType": "Prompt",
            "id": "Prompt-xIpUJ",
            "name": "prompt",
            "output_types": [
              "Message"
            ]
          }
        },
        "id": "reactflow__edge-Prompt-xIpUJ{œdataTypeœ:œPromptœ,œidœ:œPrompt-xIpUJœ,œnameœ:œpromptœ,œoutput_typesœ:[œMessageœ]}-AnthropicModel-2jaVJ{œfieldNameœ:œinput_valueœ,œidœ:œAnthropicModel-2jaVJœ,œinputTypesœ:[œMessageœ],œtypeœ:œstrœ}"
      },
      {
        "source": "AnthropicModel-2jaVJ",
        "sourceHandle": "{œdataTypeœ:œAnthropicModelœ,œidœ:œAnthropicModel-2jaVJœ,œnameœ:œtext_outputœ,œoutput_typesœ:[œMessageœ]}",
        "target": "TextOutput-f4LYm",
        "targetHandle": "{œfieldNameœ:œinput_valueœ,œidœ:œTextOutput-f4LYmœ,œinputTypesœ:[œMessageœ],œtypeœ:œstrœ}",
        "data": {
          "targetHandle": {
            "fieldName": "input_value",
            "id": "TextOutput-f4LYm",
            "inputTypes": [
              "Message"
            ],
            "type": "str"
          },
          "sourceHandle": {
            "dataType": "AnthropicModel",
            "id": "AnthropicModel-2jaVJ",
            "name": "text_output",
            "output_types": [
              "Message"
            ]
          }
        },
        "id": "reactflow__edge-AnthropicModel-2jaVJ{œdataTypeœ:œAnthropicModelœ,œidœ:œAnthropicModel-2jaVJœ,œnameœ:œtext_outputœ,œoutput_typesœ:[œMessageœ]}-TextOutput-f4LYm{œfieldNameœ:œinput_valueœ,œidœ:œTextOutput-f4LYmœ,œinputTypesœ:[œMessageœ],œtypeœ:œstrœ}"
      }
    ],
    "viewport": {
      "x": 861.1638512437444,
      "y": 255.6687011284912,
      "zoom": 0.24211934595490453
    }
  },
  "metadata": {
    "AssemblyAITranscriptionJobCreator": {
      "count": 1
    },
    "AssemblyAITranscriptionJobPoller": {
      "count": 1
    },
    "AssemblyAITranscriptionParser": {
      "count": 1
    },
    "ParseData": {
      "count": 2
    },
    "Prompt": {
      "count": 1
    },
    "TextOutput": {
      "count": 2
    },
    "AnthropicModel": {
      "count": 1
    },
    "total": 9
  },
  "original": {
    "id": "33bc1ebb-550a-4070-bb95-a8d2f1466ca3",
    "name": "Assembly Speech AI models",
    "description": "Transcribe and analyze audio with AssemblyAI",
    "is_component": false,
    "liked_by_count": "0",
    "downloads_count": "0",
    "metadata": {
      "AssemblyAITranscriptionJobCreator": {
        "count": 1
      },
      "AssemblyAITranscriptionJobPoller": {
        "count": 1
      },
      "AssemblyAITranscriptionParser": {
        "count": 1
      },
      "ParseData": {
        "count": 2
      },
      "Prompt": {
        "count": 1
      },
      "TextOutput": {
        "count": 2
      },
      "AnthropicModel": {
        "count": 1
      },
      "total": 9
    },
    "last_tested_version": "1.0.18",
    "private": true,
    "data": {
      "nodes": [
        {
          "id": "AssemblyAITranscriptionJobCreator-RJsGH",
          "type": "genericNode",
          "position": {
            "x": -1983.975269477161,
            "y": 361.58523038501556
          },
          "data": {
            "type": "AssemblyAITranscriptionJobCreator",
            "node": {
              "template": {
                "_type": "Component",
                "audio_file": {
                  "trace_as_metadata": true,
                  "file_path": "16de7eca-a5d9-4d4e-843c-0780a1b904b3/2024-10-18_16-23-22_Parque da Cidade.m4a",
                  "fileTypes": [
                    "3ga",
                    "8svx",
                    "aac",
                    "ac3",
                    "aif",
                    "aiff",
                    "alac",
                    "amr",
                    "ape",
                    "au",
                    "dss",
                    "flac",
                    "flv",
                    "m4a",
                    "m4b",
                    "m4p",
                    "m4r",
                    "mp3",
                    "mpga",
                    "ogg",
                    "oga",
                    "mogg",
                    "opus",
                    "qcp",
                    "tta",
                    "voc",
                    "wav",
                    "wma",
                    "wv",
                    "webm",
                    "mts",
                    "m2ts",
                    "ts",
                    "mov",
                    "mp2",
                    "mp4",
                    "m4p",
                    "m4v",
                    "mxf"
                  ],
                  "list": false,
                  "required": false,
                  "placeholder": "",
                  "show": true,
                  "name": "audio_file",
                  "value": "",
                  "display_name": "Audio File",
                  "advanced": false,
                  "dynamic": false,
                  "info": "The audio file to transcribe",
                  "title_case": false,
                  "type": "file",
                  "_input_type": "FileInput",
                  "load_from_db": false
                },
                "api_key": {
                  "load_from_db": false,
                  "required": false,
                  "placeholder": "",
                  "show": true,
                  "name": "api_key",
                  "value": "",
                  "display_name": "Assembly API Key",
                  "advanced": false,
                  "input_types": [
                    "Message"
                  ],
                  "dynamic": false,
                  "info": "Your AssemblyAI API key. You can get one from https://www.assemblyai.com/",
                  "title_case": false,
                  "password": true,
                  "type": "str",
                  "_input_type": "SecretStrInput"
                },
                "audio_file_url": {
                  "trace_as_input": true,
                  "trace_as_metadata": true,
                  "load_from_db": false,
                  "list": false,
                  "required": false,
                  "placeholder": "",
                  "show": true,
                  "name": "audio_file_url",
                  "value": "",
                  "display_name": "Audio File URL",
                  "advanced": true,
                  "input_types": [
                    "Message"
                  ],
                  "dynamic": false,
                  "info": "The URL of the audio file to transcribe (Can be used instead of a File)",
                  "title_case": false,
                  "type": "str",
                  "_input_type": "MessageTextInput"
                },
                "code": {
                  "type": "code",
                  "required": true,
                  "placeholder": "",
                  "list": false,
                  "show": true,
                  "multiline": true,
                  "value": "import os\nimport assemblyai as aai\nfrom axiestudio.custom import Component\nfrom axiestudio.io import FileInput, SecretStrInput, DropdownInput, Output, BoolInput, MessageTextInput\nfrom axiestudio.schema import Data\nfrom loguru import logger\n\n\nclass AssemblyAITranscriptionJobCreator(Component):\n    display_name = \"AssemblyAI Start Transcript\"\n    description = \"Create a transcription job for an audio file using AssemblyAI with advanced options\"\n    documentation = \"https://www.assemblyai.com/docs\"\n    icon = \"🎤\"\n\n    inputs = [\n        SecretStrInput(\n            name=\"api_key\",\n            display_name=\"Assembly API Key\",\n            info=\"Your AssemblyAI API key. You can get one from https://www.assemblyai.com/\",\n        ),\n        FileInput(\n            name=\"audio_file\",\n            display_name=\"Audio File\",\n            file_types=[\n                \"3ga\",\n                \"8svx\",\n                \"aac\",\n                \"ac3\",\n                \"aif\",\n                \"aiff\",\n                \"alac\",\n                \"amr\",\n                \"ape\",\n                \"au\",\n                \"dss\",\n                \"flac\",\n                \"flv\",\n                \"m4a\",\n                \"m4b\",\n                \"m4p\",\n                \"m4r\",\n                \"mp3\",\n                \"mpga\",\n                \"ogg\",\n                \"oga\",\n                \"mogg\",\n                \"opus\",\n                \"qcp\",\n                \"tta\",\n                \"voc\",\n                \"wav\",\n                \"wma\",\n                \"wv\",\n                \"webm\",\n                \"mts\",\n                \"m2ts\",\n                \"ts\",\n                \"mov\",\n                \"mp2\",\n                \"mp4\",\n                \"m4p\",\n                \"m4v\",\n                \"mxf\",\n            ],\n            info=\"The audio file to transcribe\",\n        ),\n        MessageTextInput(\n            name=\"audio_file_url\",\n            display_name=\"Audio File URL\",\n            info=\"The URL of the audio file to transcribe (Can be used instead of a File)\",\n            advanced=True,\n        ),\n        DropdownInput(\n            name=\"speech_model\",\n            display_name=\"Speech Model\",\n            options=[\n                \"best\",\n                \"nano\",\n            ],\n            value=\"best\",\n            info=\"The speech model to use for the transcription\",\n        ),\n        BoolInput(\n            name=\"language_detection\",\n            display_name=\"Automatic Language Detection\",\n            info=\"Enable automatic language detection\",\n        ),\n        MessageTextInput(\n            name=\"language_code\",\n            display_name=\"Language\",\n            info=\"\"\"\n            The language of the audio file. Can be set manually if automatic language detection is disabled. \n            See https://www.assemblyai.com/docs/getting-started/supported-languages for a list of supported language codes.\n            \"\"\",\n        ),\n        BoolInput(\n            name=\"speaker_labels\",\n            display_name=\"Enable Speaker Labels\",\n            info=\"Enable speaker diarization\",\n        ),\n        MessageTextInput(\n            name=\"speakers_expected\",\n            display_name=\"Expected Number of Speakers\",\n            info=\"Set the expected number of speakers (optional, enter a number)\",\n            advanced=True,\n        ),\n        BoolInput(\n            name=\"punctuate\",\n            display_name=\"Punctuate\",\n            info=\"Enable automatic punctuation\",\n            advanced=True,\n            value=True,\n        ),\n        BoolInput(\n            name=\"format_text\",\n            display_name=\"Format Text\",\n            info=\"Enable text formatting\",\n            advanced=True,\n            value=True,\n        ),\n    ]\n\n    outputs = [\n        Output(display_name=\"Transcript ID\", name=\"transcript_id\", method=\"create_transcription_job\"),\n    ]\n\n    def create_transcription_job(self) -> Data:\n        aai.settings.api_key = self.api_key\n\n        # Convert speakers_expected to int if it's not empty\n        speakers_expected = None\n        if self.speakers_expected and self.speakers_expected.strip():\n            try:\n                speakers_expected = int(self.speakers_expected)\n            except ValueError:\n                self.status = \"Error: Expected Number of Speakers must be a valid integer\"\n                return Data(data={\"error\": \"Error: Expected Number of Speakers must be a valid integer\"})\n\n        language_code = self.language_code if self.language_code else None\n\n        config = aai.TranscriptionConfig(\n            speech_model=self.speech_model,\n            language_detection=self.language_detection,\n            language_code=language_code,\n            speaker_labels=self.speaker_labels,\n            speakers_expected=speakers_expected,\n            punctuate=self.punctuate,\n            format_text=self.format_text,\n        )\n\n        audio = None\n        if self.audio_file:\n            if self.audio_file_url:\n                logger.warning(f\"Both an audio file an audio URL were specified. The audio URL was ignored.\")\n\n            # Check if the file exists\n            if not os.path.exists(self.audio_file):\n                self.status = \"Error: Audio file not found\"\n                return Data(data={\"error\": \"Error: Audio file not found\"})\n            audio = self.audio_file\n        elif self.audio_file_url:\n            audio = self.audio_file_url\n        else:\n            self.status = \"Error: Either an audio file or an audio URL must be specified\"\n            return Data(data={\"error\": \"Error: Either an audio file or an audio URL must be specified\"})\n\n        try:\n            transcript = aai.Transcriber().submit(audio, config=config)\n\n            if transcript.error:\n                self.status = transcript.error\n                return Data(data={\"error\": transcript.error})\n            else:\n                result = Data(data={\"transcript_id\": transcript.id})\n                self.status = result\n                return result\n        except Exception as e:\n            self.status = f\"An error occurred: {str(e)}\"\n            return Data(data={\"error\": f\"An error occurred: {str(e)}\"})\n",
                  "fileTypes": [],
                  "file_path": "",
                  "password": false,
                  "name": "code",
                  "advanced": true,
                  "dynamic": true,
                  "info": "",
                  "load_from_db": false,
                  "title_case": false
                },
                "format_text": {
                  "trace_as_metadata": true,
                  "list": false,
                  "required": false,
                  "placeholder": "",
                  "show": true,
                  "name": "format_text",
                  "value": true,
                  "display_name": "Format Text",
                  "advanced": true,
                  "dynamic": false,
                  "info": "Enable text formatting",
                  "title_case": false,
                  "type": "bool",
                  "_input_type": "BoolInput"
                },
                "language_code": {
                  "trace_as_input": true,
                  "trace_as_metadata": true,
                  "load_from_db": false,
                  "list": false,
                  "required": false,
                  "placeholder": "",
                  "show": true,
                  "name": "language_code",
                  "value": "",
                  "display_name": "Language",
                  "advanced": false,
                  "input_types": [
                    "Message"
                  ],
                  "dynamic": false,
                  "info": "\n            The language of the audio file. Can be set manually if automatic language detection is disabled. \n            See https://www.assemblyai.com/docs/getting-started/supported-languages for a list of supported language codes.\n            ",
                  "title_case": false,
                  "type": "str",
                  "_input_type": "MessageTextInput"
                },
                "language_detection": {
                  "trace_as_metadata": true,
                  "list": false,
                  "required": false,
                  "placeholder": "",
                  "show": true,
                  "name": "language_detection",
                  "value": true,
                  "display_name": "Automatic Language Detection",
                  "advanced": false,
                  "dynamic": false,
                  "info": "Enable automatic language detection",
                  "title_case": false,
                  "type": "bool",
                  "_input_type": "BoolInput"
                },
                "punctuate": {
                  "trace_as_metadata": true,
                  "list": false,
                  "required": false,
                  "placeholder": "",
                  "show": true,
                  "name": "punctuate",
                  "value": true,
                  "display_name": "Punctuate",
                  "advanced": true,
                  "dynamic": false,
                  "info": "Enable automatic punctuation",
                  "title_case": false,
                  "type": "bool",
                  "_input_type": "BoolInput"
                },
                "speaker_labels": {
                  "trace_as_metadata": true,
                  "list": false,
                  "required": false,
                  "placeholder": "",
                  "show": true,
                  "name": "speaker_labels",
                  "value": false,
                  "display_name": "Enable Speaker Labels",
                  "advanced": false,
                  "dynamic": false,
                  "info": "Enable speaker diarization",
                  "title_case": false,
                  "type": "bool",
                  "_input_type": "BoolInput",
                  "load_from_db": false
                },
                "speakers_expected": {
                  "trace_as_input": true,
                  "trace_as_metadata": true,
                  "load_from_db": false,
                  "list": false,
                  "required": false,
                  "placeholder": "",
                  "show": true,
                  "name": "speakers_expected",
                  "value": "",
                  "display_name": "Expected Number of Speakers",
                  "advanced": true,
                  "input_types": [
                    "Message"
                  ],
                  "dynamic": false,
                  "info": "Set the expected number of speakers (optional, enter a number)",
                  "title_case": false,
                  "type": "str",
                  "_input_type": "MessageTextInput"
                },
                "speech_model": {
                  "trace_as_metadata": true,
                  "options": [
                    "best",
                    "nano"
                  ],
                  "combobox": false,
                  "required": false,
                  "placeholder": "",
                  "show": true,
                  "name": "speech_model",
                  "value": "best",
                  "display_name": "Speech Model",
                  "advanced": false,
                  "dynamic": false,
                  "info": "The speech model to use for the transcription",
                  "title_case": false,
                  "type": "str",
                  "_input_type": "DropdownInput"
                }
              },
              "description": "Create a transcription job for an audio file using AssemblyAI with advanced options",
              "icon": "🎤",
              "base_classes": [
                "Data"
              ],
              "display_name": "AssemblyAI Start Transcript",
              "documentation": "https://www.assemblyai.com/docs",
              "custom_fields": {},
              "output_types": [],
              "pinned": false,
              "conditional_paths": [],
              "frozen": false,
              "outputs": [
                {
                  "types": [
                    "Data"
                  ],
                  "selected": "Data",
                  "name": "transcript_id",
                  "display_name": "Transcript ID",
                  "method": "create_transcription_job",
                  "value": "__UNDEFINED__",
                  "cache": true
                }
              ],
              "field_order": [
                "api_key",
                "audio_file",
                "audio_file_url",
                "speech_model",
                "language_detection",
                "language_code",
                "speaker_labels",
                "speakers_expected",
                "punctuate",
                "format_text"
              ],
              "beta": false,
              "edited": false,
              "lf_version": "1.0.18"
            },
            "id": "AssemblyAITranscriptionJobCreator-RJsGH",
            "description": "Create a transcription job for an audio file using AssemblyAI with advanced options",
            "display_name": "AssemblyAI Start Transcript"
          },
          "selected": false,
          "width": 384,
          "height": 728,
          "positionAbsolute": {
            "x": -1983.975269477161,
            "y": 361.58523038501556
          },
          "dragging": false
        },
        {
          "id": "AssemblyAITranscriptionJobPoller-P0i3D",
          "type": "genericNode",
          "position": {
            "x": -1483.0265701948672,
            "y": 363.29958676560693
          },
          "data": {
            "type": "AssemblyAITranscriptionJobPoller",
            "node": {
              "template": {
                "_type": "Component",
                "transcript_id": {
                  "trace_as_metadata": true,
                  "list": false,
                  "trace_as_input": true,
                  "required": false,
                  "placeholder": "",
                  "show": true,
                  "name": "transcript_id",
                  "value": "",
                  "display_name": "Transcript ID",
                  "advanced": false,
                  "input_types": [
                    "Data"
                  ],
                  "dynamic": false,
                  "info": "The ID of the transcription job to poll",
                  "title_case": false,
                  "type": "other",
                  "_input_type": "DataInput"
                },
                "api_key": {
                  "load_from_db": false,
                  "required": false,
                  "placeholder": "",
                  "show": true,
                  "name": "api_key",
                  "value": "",
                  "display_name": "Assembly API Key",
                  "advanced": false,
                  "input_types": [
                    "Message"
                  ],
                  "dynamic": false,
                  "info": "Your AssemblyAI API key. You can get one from https://www.assemblyai.com/",
                  "title_case": false,
                  "password": true,
                  "type": "str",
                  "_input_type": "SecretStrInput"
                },
                "code": {
                  "type": "code",
                  "required": true,
                  "placeholder": "",
                  "list": false,
                  "show": true,
                  "multiline": true,
                  "value": "import assemblyai as aai\nfrom axiestudio.custom import Component\nfrom axiestudio.io import FloatInput, SecretStrInput, DataInput, Output\nfrom axiestudio.schema import Data\nfrom loguru import logger\n\n\nclass AssemblyAITranscriptionJobPoller(Component):\n    display_name = \"AssemblyAI Poll Transcript\"\n    description = \"Poll for the status of a transcription job using AssemblyAI\"\n    documentation = \"https://www.assemblyai.com/docs\"\n    icon = \"🔄\"\n\n    inputs = [\n        SecretStrInput(\n            name=\"api_key\",\n            display_name=\"Assembly API Key\",\n            info=\"Your AssemblyAI API key. You can get one from https://www.assemblyai.com/\",\n        ),\n        DataInput(\n            name=\"transcript_id\",\n            display_name=\"Transcript ID\",\n            info=\"The ID of the transcription job to poll\",\n        ),\n        FloatInput(\n            name=\"polling_interval\",\n            display_name=\"Polling Interval\",\n            value=3.0,\n            info=\"The polling interval in seconds\",\n        ),\n    ]\n\n    outputs = [\n        Output(display_name=\"Transcription Result\", name=\"transcription_result\", method=\"poll_transcription_job\"),\n    ]\n\n    def poll_transcription_job(self) -> Data:\n        \"\"\"Polls the transcription status until completion and returns the Data.\"\"\"\n        aai.settings.api_key = self.api_key\n        aai.settings.polling_interval = self.polling_interval\n\n        # check if it's an error message from the previous step\n        if self.transcript_id.data.get(\"error\"):\n            self.status = self.transcript_id.data[\"error\"]\n            return self.transcript_id\n\n        try:\n            transcript = aai.Transcript.get_by_id(self.transcript_id.data[\"transcript_id\"])\n        except Exception as e:\n            error = f\"Getting transcription failed: {str(e)}\"\n            self.status = error\n            return Data(data={\"error\": error})\n\n        if transcript.status == aai.TranscriptStatus.completed:\n            data = Data(data=transcript.json_response)\n            self.status = data\n            return data\n        else:\n            self.status = transcript.error\n            return Data(data={\"error\": transcript.error})\n",
                  "fileTypes": [],
                  "file_path": "",
                  "password": false,
                  "name": "code",
                  "advanced": true,
                  "dynamic": true,
                  "info": "",
                  "load_from_db": false,
                  "title_case": false
                },
                "polling_interval": {
                  "trace_as_metadata": true,
                  "list": false,
                  "required": false,
                  "placeholder": "",
                  "show": true,
                  "name": "polling_interval",
                  "value": 3,
                  "display_name": "Polling Interval",
                  "advanced": false,
                  "dynamic": false,
                  "info": "The polling interval in seconds",
                  "title_case": false,
                  "type": "float",
                  "_input_type": "FloatInput"
                }
              },
              "description": "Poll for the status of a transcription job using AssemblyAI",
              "icon": "🔄",
              "base_classes": [
                "Data"
              ],
              "display_name": "AssemblyAI Poll Transcript",
              "documentation": "https://www.assemblyai.com/docs",
              "custom_fields": {},
              "output_types": [],
              "pinned": false,
              "conditional_paths": [],
              "frozen": false,
              "outputs": [
                {
                  "types": [
                    "Data"
                  ],
                  "selected": "Data",
                  "name": "transcription_result",
                  "display_name": "Transcription Result",
                  "method": "poll_transcription_job",
                  "value": "__UNDEFINED__",
                  "cache": true
                }
              ],
              "field_order": [
                "api_key",
                "transcript_id",
                "polling_interval"
              ],
              "beta": false,
              "edited": false,
              "lf_version": "1.0.18"
            },
            "id": "AssemblyAITranscriptionJobPoller-P0i3D",
            "description": "Poll for the status of a transcription job using AssemblyAI",
            "display_name": "AssemblyAI Poll Transcript"
          },
          "selected": false,
          "width": 384,
          "height": 460,
          "positionAbsolute": {
            "x": -1483.0265701948672,
            "y": 363.29958676560693
          },
          "dragging": false
        },
        {
          "id": "AssemblyAITranscriptionParser-MEStb",
          "type": "genericNode",
          "position": {
            "x": -999.601736274544,
            "y": 362.06869797730684
          },
          "data": {
            "type": "AssemblyAITranscriptionParser",
            "node": {
              "template": {
                "_type": "Component",
                "transcription_result": {
                  "trace_as_metadata": true,
                  "list": false,
                  "trace_as_input": true,
                  "required": false,
                  "placeholder": "",
                  "show": true,
                  "name": "transcription_result",
                  "value": "",
                  "display_name": "Transcription Result",
                  "advanced": false,
                  "input_types": [
                    "Data"
                  ],
                  "dynamic": false,
                  "info": "The transcription result from AssemblyAI",
                  "title_case": false,
                  "type": "other",
                  "_input_type": "DataInput"
                },
                "code": {
                  "type": "code",
                  "required": true,
                  "placeholder": "",
                  "list": false,
                  "show": true,
                  "multiline": true,
                  "value": "from axiestudio.custom import Component\nfrom axiestudio.io import DataInput, Output\nfrom axiestudio.schema import Data\nfrom typing import Dict, List\nimport datetime\n\n\nclass AssemblyAITranscriptionParser(Component):\n    display_name = \"AssemblyAI Parse Transcript\"\n    description = \"Parse AssemblyAI transcription result. If Speaker Labels was enabled, format utterances with speakers and timestamps\"\n    documentation = \"https://www.assemblyai.com/docs\"\n    icon = \"📊\"\n\n    inputs = [\n        DataInput(\n            name=\"transcription_result\",\n            display_name=\"Transcription Result\",\n            info=\"The transcription result from AssemblyAI\",\n        ),\n    ]\n\n    outputs = [\n        Output(display_name=\"Parsed Transcription\", name=\"parsed_transcription\", method=\"parse_transcription\"),\n    ]\n\n    def parse_transcription(self) -> Data:\n        # check if it's an error message from the previous step\n        if self.transcription_result.data.get(\"error\"):\n            self.status = self.transcription_result.data[\"error\"]\n            return self.transcription_result\n\n        try:\n            transcription_data = self.transcription_result.data\n\n            if transcription_data.get(\"utterances\"):\n                # If speaker diarization was enabled\n                parsed_result = self.parse_with_speakers(transcription_data[\"utterances\"])\n            elif transcription_data.get(\"text\"):\n                # If speaker diarization was not enabled\n                parsed_result = transcription_data[\"text\"]\n            else:\n                raise ValueError(\"Unexpected transcription format\")\n\n            self.status = parsed_result\n            return Data(data={\"text\": parsed_result})\n        except Exception as e:\n            error_message = f\"Error parsing transcription: {str(e)}\"\n            self.status = error_message\n            return Data(data={\"error\": error_message})\n\n    def parse_with_speakers(self, utterances: List[Dict]) -> str:\n        parsed_result = []\n        for utterance in utterances:\n            speaker = utterance[\"speaker\"]\n            start_time = self.format_timestamp(utterance[\"start\"])\n            text = utterance[\"text\"]\n            parsed_result.append(f'Speaker {speaker} {start_time}\\n\"{text}\"\\n')\n\n        return \"\\n\".join(parsed_result)\n\n    def format_timestamp(self, milliseconds: int) -> str:\n        return str(datetime.timedelta(milliseconds=milliseconds)).split(\".\")[0]\n",
                  "fileTypes": [],
                  "file_path": "",
                  "password": false,
                  "name": "code",
                  "advanced": true,
                  "dynamic": true,
                  "info": "",
                  "load_from_db": false,
                  "title_case": false
                }
              },
              "description": "Parse AssemblyAI transcription result. If Speaker Labels was enabled, format utterances with speakers and timestamps",
              "icon": "📊",
              "base_classes": [
                "Data"
              ],
              "display_name": "AssemblyAI Parse Transcript",
              "documentation": "https://www.assemblyai.com/docs",
              "custom_fields": {},
              "output_types": [],
              "pinned": false,
              "conditional_paths": [],
              "frozen": false,
              "outputs": [
                {
                  "types": [
                    "Data"
                  ],
                  "selected": "Data",
                  "name": "parsed_transcription",
                  "display_name": "Parsed Transcription",
                  "method": "parse_transcription",
                  "value": "__UNDEFINED__",
                  "cache": true
                }
              ],
              "field_order": [
                "transcription_result"
              ],
              "beta": false,
              "edited": false,
              "lf_version": "1.0.18"
            },
            "id": "AssemblyAITranscriptionParser-MEStb",
            "description": "Parse AssemblyAI transcription result. If Speaker Labels was enabled, format utterances with speakers and timestamps",
            "display_name": "AssemblyAI Parse Transcript"
          },
          "selected": false,
          "width": 384,
          "height": 316,
          "positionAbsolute": {
            "x": -999.601736274544,
            "y": 362.06869797730684
          },
          "dragging": false
        },
        {
          "id": "ParseData-ODfs9",
          "type": "genericNode",
          "position": {
            "x": -526.9606152851916,
            "y": 357.55497740555177
          },
          "data": {
            "type": "ParseData",
            "node": {
              "template": {
                "_type": "Component",
                "data": {
                  "trace_as_metadata": true,
                  "list": false,
                  "trace_as_input": true,
                  "required": false,
                  "placeholder": "",
                  "show": true,
                  "name": "data",
                  "value": "",
                  "display_name": "Data",
                  "advanced": false,
                  "input_types": [
                    "Data"
                  ],
                  "dynamic": false,
                  "info": "The data to convert to text.",
                  "title_case": false,
                  "type": "other",
                  "_input_type": "DataInput"
                },
                "code": {
                  "type": "code",
                  "required": true,
                  "placeholder": "",
                  "list": false,
                  "show": true,
                  "multiline": true,
                  "value": "from axiestudio.custom import Component\nfrom axiestudio.helpers.data import data_to_text\nfrom axiestudio.io import DataInput, MultilineInput, Output, StrInput\nfrom axiestudio.schema.message import Message\n\n\nclass ParseDataComponent(Component):\n    display_name = \"Parse Data\"\n    description = \"Convert Data into plain text following a specified template.\"\n    icon = \"braces\"\n    name = \"ParseData\"\n\n    inputs = [\n        DataInput(name=\"data\", display_name=\"Data\", info=\"The data to convert to text.\"),\n        MultilineInput(\n            name=\"template\",\n            display_name=\"Template\",\n            info=\"The template to use for formatting the data. It can contain the keys {text}, {data} or any other key in the Data.\",\n            value=\"{text}\",\n        ),\n        StrInput(name=\"sep\", display_name=\"Separator\", advanced=True, value=\"\\n\"),\n    ]\n\n    outputs = [\n        Output(display_name=\"Text\", name=\"text\", method=\"parse_data\"),\n    ]\n\n    def parse_data(self) -> Message:\n        data = self.data if isinstance(self.data, list) else [self.data]\n        template = self.template\n\n        result_string = data_to_text(template, data, sep=self.sep)\n        self.status = result_string\n        return Message(text=result_string)\n",
                  "fileTypes": [],
                  "file_path": "",
                  "password": false,
                  "name": "code",
                  "advanced": true,
                  "dynamic": true,
                  "info": "",
                  "load_from_db": false,
                  "title_case": false
                },
                "sep": {
                  "trace_as_metadata": true,
                  "load_from_db": false,
                  "list": false,
                  "required": false,
                  "placeholder": "",
                  "show": true,
                  "name": "sep",
                  "value": "\n",
                  "display_name": "Separator",
                  "advanced": true,
                  "dynamic": false,
                  "info": "",
                  "title_case": false,
                  "type": "str",
                  "_input_type": "StrInput"
                },
                "template": {
                  "trace_as_input": true,
                  "multiline": true,
                  "trace_as_metadata": true,
                  "load_from_db": false,
                  "list": false,
                  "required": false,
                  "placeholder": "",
                  "show": true,
                  "name": "template",
                  "value": "{text}",
                  "display_name": "Template",
                  "advanced": false,
                  "input_types": [
                    "Message"
                  ],
                  "dynamic": false,
                  "info": "The template to use for formatting the data. It can contain the keys {text}, {data} or any other key in the Data.",
                  "title_case": false,
                  "type": "str",
                  "_input_type": "MultilineInput"
                }
              },
              "description": "Convert Data into plain text following a specified template.",
              "icon": "braces",
              "base_classes": [
                "Message"
              ],
              "display_name": "Parse Data",
              "documentation": "",
              "custom_fields": {},
              "output_types": [],
              "pinned": false,
              "conditional_paths": [],
              "frozen": false,
              "outputs": [
                {
                  "types": [
                    "Message"
                  ],
                  "selected": "Message",
                  "name": "text",
                  "display_name": "Text",
                  "method": "parse_data",
                  "value": "__UNDEFINED__",
                  "cache": true
                }
              ],
              "field_order": [
                "data",
                "template",
                "sep"
              ],
              "beta": false,
              "edited": false,
              "lf_version": "1.0.18"
            },
            "id": "ParseData-ODfs9"
          },
          "selected": false,
          "width": 384,
          "height": 378,
          "positionAbsolute": {
            "x": -526.9606152851916,
            "y": 357.55497740555177
          },
          "dragging": false
        },
        {
          "id": "Prompt-xIpUJ",
          "type": "genericNode",
          "position": {
            "x": -36.84404787733604,
            "y": 361.63435529463607
          },
          "data": {
            "type": "Prompt",
            "node": {
              "template": {
                "_type": "Component",
                "code": {
                  "type": "code",
                  "required": true,
                  "placeholder": "",
                  "list": false,
                  "show": true,
                  "multiline": true,
                  "value": "from axiestudio.base.prompts.api_utils import process_prompt_template\nfrom axiestudio.custom import Component\nfrom axiestudio.inputs.inputs import DefaultPromptField\nfrom axiestudio.io import Output, PromptInput\nfrom axiestudio.schema.message import Message\nfrom axiestudio.template.utils import update_template_values\n\n\nclass PromptComponent(Component):\n    display_name: str = \"Prompt\"\n    description: str = \"Create a prompt template with dynamic variables.\"\n    icon = \"prompts\"\n    trace_type = \"prompt\"\n    name = \"Prompt\"\n\n    inputs = [\n        PromptInput(name=\"template\", display_name=\"Template\"),\n    ]\n\n    outputs = [\n        Output(display_name=\"Prompt Message\", name=\"prompt\", method=\"build_prompt\"),\n    ]\n\n    async def build_prompt(\n        self,\n    ) -> Message:\n        prompt = await Message.from_template_and_variables(**self._attributes)\n        self.status = prompt.text\n        return prompt\n\n    def _update_template(self, frontend_node: dict):\n        prompt_template = frontend_node[\"template\"][\"template\"][\"value\"]\n        custom_fields = frontend_node[\"custom_fields\"]\n        frontend_node_template = frontend_node[\"template\"]\n        _ = process_prompt_template(\n            template=prompt_template,\n            name=\"template\",\n            custom_fields=custom_fields,\n            frontend_node_template=frontend_node_template,\n        )\n        return frontend_node\n\n    def post_code_processing(self, new_frontend_node: dict, current_frontend_node: dict):\n        \"\"\"\n        This function is called after the code validation is done.\n        \"\"\"\n        frontend_node = super().post_code_processing(new_frontend_node, current_frontend_node)\n        template = frontend_node[\"template\"][\"template\"][\"value\"]\n        # Kept it duplicated for backwards compatibility\n        _ = process_prompt_template(\n            template=template,\n            name=\"template\",\n            custom_fields=frontend_node[\"custom_fields\"],\n            frontend_node_template=frontend_node[\"template\"],\n        )\n        # Now that template is updated, we need to grab any values that were set in the current_frontend_node\n        # and update the frontend_node with those values\n        update_template_values(new_template=frontend_node, previous_template=current_frontend_node[\"template\"])\n        return frontend_node\n\n    def _get_fallback_input(self, **kwargs):\n        return DefaultPromptField(**kwargs)\n",
                  "fileTypes": [],
                  "file_path": "",
                  "password": false,
                  "name": "code",
                  "advanced": true,
                  "dynamic": true,
                  "info": "",
                  "load_from_db": false,
                  "title_case": false
                },
                "template": {
                  "trace_as_input": true,
                  "list": false,
                  "required": false,
                  "placeholder": "",
                  "show": true,
                  "name": "template",
                  "value": "Analise as notas desta reunião e crie um resumo executivo profissional seguindo esta estrutura:\n\nCabeçalho\n\n📅 Data e horário da reunião\n👥 Lista de participantes\n📋 Pauta principal\n\nConteúdo Principal\n\n💡 Principais pontos discutidos (máximo 5 tópicos, formato bullet points)\n⚖️ Decisões tomadas com suas respectivas justificativas\n❗ Pontos críticos que requerem atenção especial\n\nPlano de Ação\n\n✅ Tarefas atribuídas, organizadas por:\n\nResponsável\nPrazo de entrega\nPrioridade (Alta/Média/Baixa)\n\n📊 Status atual de cada ação (Não iniciada/Em andamento/Concluída)\n\nEncaminhamentos\n\n📌 Próximos passos\n⏳ Pendências para acompanhamento\n📆 Data da próxima reunião\n\nUse formatação clara (títulos, subtítulos e marcadores) e mantenha linguagem concisa e profissional. Destaque em negrito os responsáveis por cada ação e utilize emojis para melhorar a visualização das seções. Limite o resumo a no máximo 2 páginas.\n{transcription-text}\n",
                  "display_name": "Template",
                  "advanced": false,
                  "dynamic": false,
                  "info": "",
                  "title_case": false,
                  "type": "prompt",
                  "_input_type": "PromptInput"
                },
                "transcription-text": {
                  "field_type": "str",
                  "required": false,
                  "placeholder": "",
                  "list": false,
                  "show": true,
                  "multiline": true,
                  "value": "",
                  "fileTypes": [],
                  "file_path": "",
                  "name": "transcription-text",
                  "display_name": "transcription-text",
                  "advanced": false,
                  "input_types": [
                    "Message",
                    "Text"
                  ],
                  "dynamic": false,
                  "info": "",
                  "load_from_db": false,
                  "title_case": false,
                  "type": "str"
                }
              },
              "description": "Create a prompt template with dynamic variables.",
              "icon": "prompts",
              "is_input": null,
              "is_output": null,
              "is_composition": null,
              "base_classes": [
                "Message"
              ],
              "name": "",
              "display_name": "Prompt",
              "documentation": "",
              "custom_fields": {
                "template": [
                  "transcription-text"
                ]
              },
              "output_types": [],
              "full_path": null,
              "pinned": false,
              "conditional_paths": [],
              "frozen": false,
              "outputs": [
                {
                  "types": [
                    "Message"
                  ],
                  "selected": "Message",
                  "name": "prompt",
                  "hidden": null,
                  "display_name": "Prompt Message",
                  "method": "build_prompt",
                  "value": "__UNDEFINED__",
                  "cache": true
                }
              ],
              "field_order": [
                "template"
              ],
              "beta": false,
              "error": null,
              "edited": false,
              "lf_version": "1.0.18"
            },
            "id": "Prompt-xIpUJ"
          },
          "selected": false,
          "width": 384,
          "height": 416,
          "positionAbsolute": {
            "x": -36.84404787733604,
            "y": 361.63435529463607
          },
          "dragging": false
        },
        {
          "id": "TextOutput-f4LYm",
          "type": "genericNode",
          "position": {
            "x": 948.1925946486524,
            "y": 362.62515377913667
          },
          "data": {
            "type": "TextOutput",
            "node": {
              "template": {
                "_type": "Component",
                "code": {
                  "type": "code",
                  "required": true,
                  "placeholder": "",
                  "list": false,
                  "show": true,
                  "multiline": true,
                  "value": "from axiestudio.base.io.text import TextComponent\nfrom axiestudio.io import MultilineInput, Output\nfrom axiestudio.schema.message import Message\n\n\nclass TextOutputComponent(TextComponent):\n    display_name = \"Text Output\"\n    description = \"Display a text output in the Playground.\"\n    icon = \"type\"\n    name = \"TextOutput\"\n\n    inputs = [\n        MultilineInput(\n            name=\"input_value\",\n            display_name=\"Text\",\n            info=\"Text to be passed as output.\",\n        ),\n    ]\n    outputs = [\n        Output(display_name=\"Text\", name=\"text\", method=\"text_response\"),\n    ]\n\n    def text_response(self) -> Message:\n        message = Message(\n            text=self.input_value,\n        )\n        self.status = self.input_value\n        return message\n",
                  "fileTypes": [],
                  "file_path": "",
                  "password": false,
                  "name": "code",
                  "advanced": true,
                  "dynamic": true,
                  "info": "",
                  "load_from_db": false,
                  "title_case": false
                },
                "input_value": {
                  "trace_as_input": true,
                  "multiline": true,
                  "trace_as_metadata": true,
                  "load_from_db": false,
                  "list": false,
                  "required": false,
                  "placeholder": "",
                  "show": true,
                  "name": "input_value",
                  "value": "",
                  "display_name": "Text",
                  "advanced": false,
                  "input_types": [
                    "Message"
                  ],
                  "dynamic": false,
                  "info": "Text to be passed as output.",
                  "title_case": false,
                  "type": "str",
                  "_input_type": "MultilineInput"
                }
              },
              "description": "Display a text output in the Playground.",
              "icon": "type",
              "base_classes": [
                "Message"
              ],
              "display_name": "Text Output",
              "documentation": "",
              "custom_fields": {},
              "output_types": [],
              "pinned": false,
              "conditional_paths": [],
              "frozen": false,
              "outputs": [
                {
                  "types": [
                    "Message"
                  ],
                  "selected": "Message",
                  "name": "text",
                  "display_name": "Text",
                  "method": "text_response",
                  "value": "__UNDEFINED__",
                  "cache": true
                }
              ],
              "field_order": [
                "input_value"
              ],
              "beta": false,
              "edited": false,
              "lf_version": "1.0.18"
            },
            "id": "TextOutput-f4LYm"
          },
          "selected": false,
          "width": 384,
          "height": 302,
          "positionAbsolute": {
            "x": 948.1925946486524,
            "y": 362.62515377913667
          },
          "dragging": false
        },
        {
          "id": "TextOutput-O61dq",
          "type": "genericNode",
          "position": {
            "x": 937.7991554195826,
            "y": 1223.2271291125692
          },
          "data": {
            "type": "TextOutput",
            "node": {
              "template": {
                "_type": "Component",
                "code": {
                  "type": "code",
                  "required": true,
                  "placeholder": "",
                  "list": false,
                  "show": true,
                  "multiline": true,
                  "value": "from axiestudio.base.io.text import TextComponent\nfrom axiestudio.io import MultilineInput, Output\nfrom axiestudio.schema.message import Message\n\n\nclass TextOutputComponent(TextComponent):\n    display_name = \"Text Output\"\n    description = \"Display a text output in the Playground.\"\n    icon = \"type\"\n    name = \"TextOutput\"\n\n    inputs = [\n        MultilineInput(\n            name=\"input_value\",\n            display_name=\"Text\",\n            info=\"Text to be passed as output.\",\n        ),\n    ]\n    outputs = [\n        Output(display_name=\"Text\", name=\"text\", method=\"text_response\"),\n    ]\n\n    def text_response(self) -> Message:\n        message = Message(\n            text=self.input_value,\n        )\n        self.status = self.input_value\n        return message\n",
                  "fileTypes": [],
                  "file_path": "",
                  "password": false,
                  "name": "code",
                  "advanced": true,
                  "dynamic": true,
                  "info": "",
                  "load_from_db": false,
                  "title_case": false
                },
                "input_value": {
                  "trace_as_input": true,
                  "multiline": true,
                  "trace_as_metadata": true,
                  "load_from_db": false,
                  "list": false,
                  "required": false,
                  "placeholder": "",
                  "show": true,
                  "name": "input_value",
                  "value": "",
                  "display_name": "Text",
                  "advanced": false,
                  "input_types": [
                    "Message"
                  ],
                  "dynamic": false,
                  "info": "Text to be passed as output.",
                  "title_case": false,
                  "type": "str",
                  "_input_type": "MultilineInput"
                }
              },
              "description": "Display a text output in the Playground.",
              "icon": "type",
              "base_classes": [
                "Message"
              ],
              "display_name": "Text Output",
              "documentation": "",
              "custom_fields": {},
              "output_types": [],
              "pinned": false,
              "conditional_paths": [],
              "frozen": false,
              "outputs": [
                {
                  "types": [
                    "Message"
                  ],
                  "selected": "Message",
                  "name": "text",
                  "display_name": "Text",
                  "method": "text_response",
                  "value": "__UNDEFINED__",
                  "cache": true
                }
              ],
              "field_order": [
                "input_value"
              ],
              "beta": false,
              "edited": false,
              "lf_version": "1.0.18"
            },
            "id": "TextOutput-O61dq"
          },
          "selected": false,
          "width": 384,
          "height": 302,
          "positionAbsolute": {
            "x": 937.7991554195826,
            "y": 1223.2271291125692
          },
          "dragging": false
        },
        {
          "id": "ParseData-5wXky",
          "type": "genericNode",
          "position": {
            "x": -508.41713100654533,
            "y": 1230.6349646004066
          },
          "data": {
            "type": "ParseData",
            "node": {
              "template": {
                "_type": "Component",
                "data": {
                  "trace_as_metadata": true,
                  "list": false,
                  "trace_as_input": true,
                  "required": false,
                  "placeholder": "",
                  "show": true,
                  "name": "data",
                  "value": "",
                  "display_name": "Data",
                  "advanced": false,
                  "input_types": [
                    "Data"
                  ],
                  "dynamic": false,
                  "info": "The data to convert to text.",
                  "title_case": false,
                  "type": "other",
                  "_input_type": "DataInput"
                },
                "code": {
                  "type": "code",
                  "required": true,
                  "placeholder": "",
                  "list": false,
                  "show": true,
                  "multiline": true,
                  "value": "from axiestudio.custom import Component\nfrom axiestudio.helpers.data import data_to_text\nfrom axiestudio.io import DataInput, MultilineInput, Output, StrInput\nfrom axiestudio.schema.message import Message\n\n\nclass ParseDataComponent(Component):\n    display_name = \"Parse Data\"\n    description = \"Convert Data into plain text following a specified template.\"\n    icon = \"braces\"\n    name = \"ParseData\"\n\n    inputs = [\n        DataInput(name=\"data\", display_name=\"Data\", info=\"The data to convert to text.\"),\n        MultilineInput(\n            name=\"template\",\n            display_name=\"Template\",\n            info=\"The template to use for formatting the data. It can contain the keys {text}, {data} or any other key in the Data.\",\n            value=\"{text}\",\n        ),\n        StrInput(name=\"sep\", display_name=\"Separator\", advanced=True, value=\"\\n\"),\n    ]\n\n    outputs = [\n        Output(display_name=\"Text\", name=\"text\", method=\"parse_data\"),\n    ]\n\n    def parse_data(self) -> Message:\n        data = self.data if isinstance(self.data, list) else [self.data]\n        template = self.template\n\n        result_string = data_to_text(template, data, sep=self.sep)\n        self.status = result_string\n        return Message(text=result_string)\n",
                  "fileTypes": [],
                  "file_path": "",
                  "password": false,
                  "name": "code",
                  "advanced": true,
                  "dynamic": true,
                  "info": "",
                  "load_from_db": false,
                  "title_case": false
                },
                "sep": {
                  "trace_as_metadata": true,
                  "load_from_db": false,
                  "list": false,
                  "required": false,
                  "placeholder": "",
                  "show": true,
                  "name": "sep",
                  "value": "\n",
                  "display_name": "Separator",
                  "advanced": true,
                  "dynamic": false,
                  "info": "",
                  "title_case": false,
                  "type": "str",
                  "_input_type": "StrInput"
                },
                "template": {
                  "trace_as_input": true,
                  "multiline": true,
                  "trace_as_metadata": true,
                  "load_from_db": false,
                  "list": false,
                  "required": false,
                  "placeholder": "",
                  "show": true,
                  "name": "template",
                  "value": "{text}",
                  "display_name": "Template",
                  "advanced": false,
                  "input_types": [
                    "Message"
                  ],
                  "dynamic": false,
                  "info": "The template to use for formatting the data. It can contain the keys {text}, {data} or any other key in the Data.",
                  "title_case": false,
                  "type": "str",
                  "_input_type": "MultilineInput"
                }
              },
              "description": "Convert Data into plain text following a specified template.",
              "icon": "braces",
              "base_classes": [
                "Message"
              ],
              "display_name": "Parse Data",
              "documentation": "",
              "custom_fields": {},
              "output_types": [],
              "pinned": false,
              "conditional_paths": [],
              "frozen": false,
              "outputs": [
                {
                  "types": [
                    "Message"
                  ],
                  "selected": "Message",
                  "name": "text",
                  "display_name": "Text",
                  "method": "parse_data",
                  "value": "__UNDEFINED__",
                  "cache": true
                }
              ],
              "field_order": [
                "data",
                "template",
                "sep"
              ],
              "beta": false,
              "edited": false,
              "lf_version": "1.0.18"
            },
            "id": "ParseData-5wXky"
          },
          "selected": false,
          "width": 384,
          "height": 378,
          "positionAbsolute": {
            "x": -508.41713100654533,
            "y": 1230.6349646004066
          },
          "dragging": false
        },
        {
          "id": "AnthropicModel-2jaVJ",
          "type": "genericNode",
          "position": {
            "x": 453.2578820076046,
            "y": 348.4927445935148
          },
          "data": {
            "type": "AnthropicModel",
            "node": {
              "template": {
                "_type": "Component",
                "anthropic_api_key": {
                  "load_from_db": false,
                  "required": false,
                  "placeholder": "",
                  "show": true,
                  "name": "anthropic_api_key",
                  "value": "",
                  "display_name": "Anthropic API Key",
                  "advanced": false,
                  "input_types": [
                    "Message"
                  ],
                  "dynamic": false,
                  "info": "Your Anthropic API key.",
                  "title_case": false,
                  "password": true,
                  "type": "str",
                  "_input_type": "SecretStrInput"
                },
                "anthropic_api_url": {
                  "trace_as_input": true,
                  "trace_as_metadata": true,
                  "load_from_db": false,
                  "list": false,
                  "required": false,
                  "placeholder": "",
                  "show": true,
                  "name": "anthropic_api_url",
                  "value": "",
                  "display_name": "Anthropic API URL",
                  "advanced": true,
                  "input_types": [
                    "Message"
                  ],
                  "dynamic": false,
                  "info": "Endpoint of the Anthropic API. Defaults to 'https://api.anthropic.com' if not specified.",
                  "title_case": false,
                  "type": "str",
                  "_input_type": "MessageTextInput"
                },
                "code": {
                  "type": "code",
                  "required": true,
                  "placeholder": "",
                  "list": false,
                  "show": true,
                  "multiline": true,
                  "value": "from pydantic.v1 import SecretStr\n\nfrom axiestudio.base.models.model import LCModelComponent\nfrom axiestudio.field_typing import LanguageModel\nfrom axiestudio.io import DropdownInput, FloatInput, IntInput, MessageTextInput, SecretStrInput\n\n\nclass AnthropicModelComponent(LCModelComponent):\n    display_name = \"Anthropic\"\n    description = \"Generate text using Anthropic Chat&Completion LLMs with prefill support.\"\n    icon = \"Anthropic\"\n    name = \"AnthropicModel\"\n\n    inputs = LCModelComponent._base_inputs + [\n        IntInput(\n            name=\"max_tokens\",\n            display_name=\"Max Tokens\",\n            advanced=True,\n            value=4096,\n            info=\"The maximum number of tokens to generate. Set to 0 for unlimited tokens.\",\n        ),\n        DropdownInput(\n            name=\"model\",\n            display_name=\"Model Name\",\n            options=[\n                \"claude-3-5-sonnet-20240620\",\n                \"claude-3-opus-20240229\",\n                \"claude-3-sonnet-20240229\",\n                \"claude-3-haiku-20240307\",\n            ],\n            info=\"https://python.langchain.com/docs/integrations/chat/anthropic\",\n            value=\"claude-3-5-sonnet-20240620\",\n        ),\n        SecretStrInput(\n            name=\"anthropic_api_key\",\n            display_name=\"Anthropic API Key\",\n            info=\"Your Anthropic API key.\",\n        ),\n        FloatInput(name=\"temperature\", display_name=\"Temperature\", value=0.1),\n        MessageTextInput(\n            name=\"anthropic_api_url\",\n            display_name=\"Anthropic API URL\",\n            advanced=True,\n            info=\"Endpoint of the Anthropic API. Defaults to 'https://api.anthropic.com' if not specified.\",\n        ),\n        MessageTextInput(\n            name=\"prefill\",\n            display_name=\"Prefill\",\n            info=\"Prefill text to guide the model's response.\",\n            advanced=True,\n        ),\n    ]\n\n    def build_model(self) -> LanguageModel:  # type: ignore[type-var]\n        try:\n            from langchain_anthropic.chat_models import ChatAnthropic\n        except ImportError:\n            raise ImportError(\n                \"langchain_anthropic is not installed. Please install it with `pip install langchain_anthropic`.\"\n            )\n        model = self.model\n        anthropic_api_key = self.anthropic_api_key\n        max_tokens = self.max_tokens\n        temperature = self.temperature\n        anthropic_api_url = self.anthropic_api_url or \"https://api.anthropic.com\"\n\n        try:\n            output = ChatAnthropic(\n                model=model,\n                anthropic_api_key=(SecretStr(anthropic_api_key) if anthropic_api_key else None),\n                max_tokens_to_sample=max_tokens,  # type: ignore\n                temperature=temperature,\n                anthropic_api_url=anthropic_api_url,\n                streaming=self.stream,\n            )\n        except Exception as e:\n            raise ValueError(\"Could not connect to Anthropic API.\") from e\n\n        return output  # type: ignore\n\n    def _get_exception_message(self, exception: Exception) -> str | None:\n        \"\"\"\n        Get a message from an Anthropic exception.\n\n        Args:\n            exception (Exception): The exception to get the message from.\n\n        Returns:\n            str: The message from the exception.\n        \"\"\"\n        try:\n            from anthropic import BadRequestError\n        except ImportError:\n            return None\n        if isinstance(exception, BadRequestError):\n            message = exception.body.get(\"error\", {}).get(\"message\")  # type: ignore\n            if message:\n                return message\n        return None\n",
                  "fileTypes": [],
                  "file_path": "",
                  "password": false,
                  "name": "code",
                  "advanced": true,
                  "dynamic": true,
                  "info": "",
                  "load_from_db": false,
                  "title_case": false
                },
                "input_value": {
                  "trace_as_input": true,
                  "trace_as_metadata": true,
                  "load_from_db": false,
                  "list": false,
                  "required": false,
                  "placeholder": "",
                  "show": true,
                  "name": "input_value",
                  "value": "",
                  "display_name": "Input",
                  "advanced": false,
                  "input_types": [
                    "Message"
                  ],
                  "dynamic": false,
                  "info": "",
                  "title_case": false,
                  "type": "str",
                  "_input_type": "MessageInput"
                },
                "max_tokens": {
                  "trace_as_metadata": true,
                  "list": false,
                  "required": false,
                  "placeholder": "",
                  "show": true,
                  "name": "max_tokens",
                  "value": 4096,
                  "display_name": "Max Tokens",
                  "advanced": true,
                  "dynamic": false,
                  "info": "The maximum number of tokens to generate. Set to 0 for unlimited tokens.",
                  "title_case": false,
                  "type": "int",
                  "_input_type": "IntInput"
                },
                "model": {
                  "trace_as_metadata": true,
                  "options": [
                    "claude-3-5-sonnet-20240620",
                    "claude-3-opus-20240229",
                    "claude-3-sonnet-20240229",
                    "claude-3-haiku-20240307"
                  ],
                  "combobox": false,
                  "required": false,
                  "placeholder": "",
                  "show": true,
                  "name": "model",
                  "value": "claude-3-5-sonnet-20240620",
                  "display_name": "Model Name",
                  "advanced": false,
                  "dynamic": false,
                  "info": "https://python.langchain.com/docs/integrations/chat/anthropic",
                  "title_case": false,
                  "type": "str",
                  "_input_type": "DropdownInput"
                },
                "prefill": {
                  "trace_as_input": true,
                  "trace_as_metadata": true,
                  "load_from_db": false,
                  "list": false,
                  "required": false,
                  "placeholder": "",
                  "show": true,
                  "name": "prefill",
                  "value": "",
                  "display_name": "Prefill",
                  "advanced": true,
                  "input_types": [
                    "Message"
                  ],
                  "dynamic": false,
                  "info": "Prefill text to guide the model's response.",
                  "title_case": false,
                  "type": "str",
                  "_input_type": "MessageTextInput"
                },
                "stream": {
                  "trace_as_metadata": true,
                  "list": false,
                  "required": false,
                  "placeholder": "",
                  "show": true,
                  "name": "stream",
                  "value": false,
                  "display_name": "Stream",
                  "advanced": true,
                  "dynamic": false,
                  "info": "Stream the response from the model. Streaming works only in Chat.",
                  "title_case": false,
                  "type": "bool",
                  "_input_type": "BoolInput"
                },
                "system_message": {
                  "trace_as_input": true,
                  "trace_as_metadata": true,
                  "load_from_db": false,
                  "list": false,
                  "required": false,
                  "placeholder": "",
                  "show": true,
                  "name": "system_message",
                  "value": "",
                  "display_name": "System Message",
                  "advanced": true,
                  "input_types": [
                    "Message"
                  ],
                  "dynamic": false,
                  "info": "System message to pass to the model.",
                  "title_case": false,
                  "type": "str",
                  "_input_type": "MessageTextInput"
                },
                "temperature": {
                  "trace_as_metadata": true,
                  "list": false,
                  "required": false,
                  "placeholder": "",
                  "show": true,
                  "name": "temperature",
                  "value": "0.3",
                  "display_name": "Temperature",
                  "advanced": false,
                  "dynamic": false,
                  "info": "",
                  "title_case": false,
                  "type": "float",
                  "_input_type": "FloatInput"
                }
              },
              "description": "Generate text using Anthropic Chat&Completion LLMs with prefill support.",
              "icon": "Anthropic",
              "base_classes": [
                "LanguageModel",
                "Message"
              ],
              "display_name": "Anthropic",
              "documentation": "",
              "custom_fields": {},
              "output_types": [],
              "pinned": false,
              "conditional_paths": [],
              "frozen": false,
              "outputs": [
                {
                  "types": [
                    "Message"
                  ],
                  "selected": "Message",
                  "name": "text_output",
                  "display_name": "Text",
                  "method": "text_response",
                  "value": "__UNDEFINED__",
                  "cache": true
                },
                {
                  "types": [
                    "LanguageModel"
                  ],
                  "selected": "LanguageModel",
                  "name": "model_output",
                  "display_name": "Language Model",
                  "method": "build_model",
                  "value": "__UNDEFINED__",
                  "cache": true
                }
              ],
              "field_order": [
                "input_value",
                "system_message",
                "stream",
                "max_tokens",
                "model",
                "anthropic_api_key",
                "temperature",
                "anthropic_api_url",
                "prefill"
              ],
              "beta": false,
              "edited": false,
              "lf_version": "1.0.18"
            },
            "id": "AnthropicModel-2jaVJ"
          },
          "selected": false,
          "width": 384,
          "height": 633,
          "positionAbsolute": {
            "x": 453.2578820076046,
            "y": 348.4927445935148
          },
          "dragging": false
        }
      ],
      "edges": [
        {
          "source": "AssemblyAITranscriptionJobCreator-RJsGH",
          "sourceHandle": "{œdataTypeœ:œAssemblyAITranscriptionJobCreatorœ,œidœ:œAssemblyAITranscriptionJobCreator-RJsGHœ,œnameœ:œtranscript_idœ,œoutput_typesœ:[œDataœ]}",
          "target": "AssemblyAITranscriptionJobPoller-P0i3D",
          "targetHandle": "{œfieldNameœ:œtranscript_idœ,œidœ:œAssemblyAITranscriptionJobPoller-P0i3Dœ,œinputTypesœ:[œDataœ],œtypeœ:œotherœ}",
          "data": {
            "targetHandle": {
              "fieldName": "transcript_id",
              "id": "AssemblyAITranscriptionJobPoller-P0i3D",
              "inputTypes": [
                "Data"
              ],
              "type": "other"
            },
            "sourceHandle": {
              "dataType": "AssemblyAITranscriptionJobCreator",
              "id": "AssemblyAITranscriptionJobCreator-RJsGH",
              "name": "transcript_id",
              "output_types": [
                "Data"
              ]
            }
          },
          "id": "reactflow__edge-AssemblyAITranscriptionJobCreator-RJsGH{œdataTypeœ:œAssemblyAITranscriptionJobCreatorœ,œidœ:œAssemblyAITranscriptionJobCreator-RJsGHœ,œnameœ:œtranscript_idœ,œoutput_typesœ:[œDataœ]}-AssemblyAITranscriptionJobPoller-P0i3D{œfieldNameœ:œtranscript_idœ,œidœ:œAssemblyAITranscriptionJobPoller-P0i3Dœ,œinputTypesœ:[œDataœ],œtypeœ:œotherœ}",
          "className": "",
          "selected": false
        },
        {
          "source": "AssemblyAITranscriptionJobPoller-P0i3D",
          "sourceHandle": "{œdataTypeœ:œAssemblyAITranscriptionJobPollerœ,œidœ:œAssemblyAITranscriptionJobPoller-P0i3Dœ,œnameœ:œtranscription_resultœ,œoutput_typesœ:[œDataœ]}",
          "target": "AssemblyAITranscriptionParser-MEStb",
          "targetHandle": "{œfieldNameœ:œtranscription_resultœ,œidœ:œAssemblyAITranscriptionParser-MEStbœ,œinputTypesœ:[œDataœ],œtypeœ:œotherœ}",
          "data": {
            "targetHandle": {
              "fieldName": "transcription_result",
              "id": "AssemblyAITranscriptionParser-MEStb",
              "inputTypes": [
                "Data"
              ],
              "type": "other"
            },
            "sourceHandle": {
              "dataType": "AssemblyAITranscriptionJobPoller",
              "id": "AssemblyAITranscriptionJobPoller-P0i3D",
              "name": "transcription_result",
              "output_types": [
                "Data"
              ]
            }
          },
          "id": "reactflow__edge-AssemblyAITranscriptionJobPoller-P0i3D{œdataTypeœ:œAssemblyAITranscriptionJobPollerœ,œidœ:œAssemblyAITranscriptionJobPoller-P0i3Dœ,œnameœ:œtranscription_resultœ,œoutput_typesœ:[œDataœ]}-AssemblyAITranscriptionParser-MEStb{œfieldNameœ:œtranscription_resultœ,œidœ:œAssemblyAITranscriptionParser-MEStbœ,œinputTypesœ:[œDataœ],œtypeœ:œotherœ}",
          "className": ""
        },
        {
          "source": "AssemblyAITranscriptionParser-MEStb",
          "sourceHandle": "{œdataTypeœ:œAssemblyAITranscriptionParserœ,œidœ:œAssemblyAITranscriptionParser-MEStbœ,œnameœ:œparsed_transcriptionœ,œoutput_typesœ:[œDataœ]}",
          "target": "ParseData-ODfs9",
          "targetHandle": "{œfieldNameœ:œdataœ,œidœ:œParseData-ODfs9œ,œinputTypesœ:[œDataœ],œtypeœ:œotherœ}",
          "data": {
            "targetHandle": {
              "fieldName": "data",
              "id": "ParseData-ODfs9",
              "inputTypes": [
                "Data"
              ],
              "type": "other"
            },
            "sourceHandle": {
              "dataType": "AssemblyAITranscriptionParser",
              "id": "AssemblyAITranscriptionParser-MEStb",
              "name": "parsed_transcription",
              "output_types": [
                "Data"
              ]
            }
          },
          "id": "reactflow__edge-AssemblyAITranscriptionParser-MEStb{œdataTypeœ:œAssemblyAITranscriptionParserœ,œidœ:œAssemblyAITranscriptionParser-MEStbœ,œnameœ:œparsed_transcriptionœ,œoutput_typesœ:[œDataœ]}-ParseData-ODfs9{œfieldNameœ:œdataœ,œidœ:œParseData-ODfs9œ,œinputTypesœ:[œDataœ],œtypeœ:œotherœ}",
          "className": ""
        },
        {
          "source": "ParseData-ODfs9",
          "sourceHandle": "{œdataTypeœ:œParseDataœ,œidœ:œParseData-ODfs9œ,œnameœ:œtextœ,œoutput_typesœ:[œMessageœ]}",
          "target": "Prompt-xIpUJ",
          "targetHandle": "{œfieldNameœ:œtranscription-textœ,œidœ:œPrompt-xIpUJœ,œinputTypesœ:[œMessageœ,œTextœ],œtypeœ:œstrœ}",
          "data": {
            "targetHandle": {
              "fieldName": "transcription-text",
              "id": "Prompt-xIpUJ",
              "inputTypes": [
                "Message",
                "Text"
              ],
              "type": "str"
            },
            "sourceHandle": {
              "dataType": "ParseData",
              "id": "ParseData-ODfs9",
              "name": "text",
              "output_types": [
                "Message"
              ]
            }
          },
          "id": "reactflow__edge-ParseData-ODfs9{œdataTypeœ:œParseDataœ,œidœ:œParseData-ODfs9œ,œnameœ:œtextœ,œoutput_typesœ:[œMessageœ]}-Prompt-xIpUJ{œfieldNameœ:œtranscription-textœ,œidœ:œPrompt-xIpUJœ,œinputTypesœ:[œMessageœ,œTextœ],œtypeœ:œstrœ}",
          "className": ""
        },
        {
          "source": "AssemblyAITranscriptionParser-MEStb",
          "sourceHandle": "{œdataTypeœ:œAssemblyAITranscriptionParserœ,œidœ:œAssemblyAITranscriptionParser-MEStbœ,œnameœ:œparsed_transcriptionœ,œoutput_typesœ:[œDataœ]}",
          "target": "ParseData-5wXky",
          "targetHandle": "{œfieldNameœ:œdataœ,œidœ:œParseData-5wXkyœ,œinputTypesœ:[œDataœ],œtypeœ:œotherœ}",
          "data": {
            "targetHandle": {
              "fieldName": "data",
              "id": "ParseData-5wXky",
              "inputTypes": [
                "Data"
              ],
              "type": "other"
            },
            "sourceHandle": {
              "dataType": "AssemblyAITranscriptionParser",
              "id": "AssemblyAITranscriptionParser-MEStb",
              "name": "parsed_transcription",
              "output_types": [
                "Data"
              ]
            }
          },
          "id": "reactflow__edge-AssemblyAITranscriptionParser-MEStb{œdataTypeœ:œAssemblyAITranscriptionParserœ,œidœ:œAssemblyAITranscriptionParser-MEStbœ,œnameœ:œparsed_transcriptionœ,œoutput_typesœ:[œDataœ]}-ParseData-5wXky{œfieldNameœ:œdataœ,œidœ:œParseData-5wXkyœ,œinputTypesœ:[œDataœ],œtypeœ:œotherœ}"
        },
        {
          "source": "ParseData-5wXky",
          "sourceHandle": "{œdataTypeœ:œParseDataœ,œidœ:œParseData-5wXkyœ,œnameœ:œtextœ,œoutput_typesœ:[œMessageœ]}",
          "target": "TextOutput-O61dq",
          "targetHandle": "{œfieldNameœ:œinput_valueœ,œidœ:œTextOutput-O61dqœ,œinputTypesœ:[œMessageœ],œtypeœ:œstrœ}",
          "data": {
            "targetHandle": {
              "fieldName": "input_value",
              "id": "TextOutput-O61dq",
              "inputTypes": [
                "Message"
              ],
              "type": "str"
            },
            "sourceHandle": {
              "dataType": "ParseData",
              "id": "ParseData-5wXky",
              "name": "text",
              "output_types": [
                "Message"
              ]
            }
          },
          "id": "reactflow__edge-ParseData-5wXky{œdataTypeœ:œParseDataœ,œidœ:œParseData-5wXkyœ,œnameœ:œtextœ,œoutput_typesœ:[œMessageœ]}-TextOutput-O61dq{œfieldNameœ:œinput_valueœ,œidœ:œTextOutput-O61dqœ,œinputTypesœ:[œMessageœ],œtypeœ:œstrœ}"
        },
        {
          "source": "Prompt-xIpUJ",
          "sourceHandle": "{œdataTypeœ:œPromptœ,œidœ:œPrompt-xIpUJœ,œnameœ:œpromptœ,œoutput_typesœ:[œMessageœ]}",
          "target": "AnthropicModel-2jaVJ",
          "targetHandle": "{œfieldNameœ:œinput_valueœ,œidœ:œAnthropicModel-2jaVJœ,œinputTypesœ:[œMessageœ],œtypeœ:œstrœ}",
          "data": {
            "targetHandle": {
              "fieldName": "input_value",
              "id": "AnthropicModel-2jaVJ",
              "inputTypes": [
                "Message"
              ],
              "type": "str"
            },
            "sourceHandle": {
              "dataType": "Prompt",
              "id": "Prompt-xIpUJ",
              "name": "prompt",
              "output_types": [
                "Message"
              ]
            }
          },
          "id": "reactflow__edge-Prompt-xIpUJ{œdataTypeœ:œPromptœ,œidœ:œPrompt-xIpUJœ,œnameœ:œpromptœ,œoutput_typesœ:[œMessageœ]}-AnthropicModel-2jaVJ{œfieldNameœ:œinput_valueœ,œidœ:œAnthropicModel-2jaVJœ,œinputTypesœ:[œMessageœ],œtypeœ:œstrœ}"
        },
        {
          "source": "AnthropicModel-2jaVJ",
          "sourceHandle": "{œdataTypeœ:œAnthropicModelœ,œidœ:œAnthropicModel-2jaVJœ,œnameœ:œtext_outputœ,œoutput_typesœ:[œMessageœ]}",
          "target": "TextOutput-f4LYm",
          "targetHandle": "{œfieldNameœ:œinput_valueœ,œidœ:œTextOutput-f4LYmœ,œinputTypesœ:[œMessageœ],œtypeœ:œstrœ}",
          "data": {
            "targetHandle": {
              "fieldName": "input_value",
              "id": "TextOutput-f4LYm",
              "inputTypes": [
                "Message"
              ],
              "type": "str"
            },
            "sourceHandle": {
              "dataType": "AnthropicModel",
              "id": "AnthropicModel-2jaVJ",
              "name": "text_output",
              "output_types": [
                "Message"
              ]
            }
          },
          "id": "reactflow__edge-AnthropicModel-2jaVJ{œdataTypeœ:œAnthropicModelœ,œidœ:œAnthropicModel-2jaVJœ,œnameœ:œtext_outputœ,œoutput_typesœ:[œMessageœ]}-TextOutput-f4LYm{œfieldNameœ:œinput_valueœ,œidœ:œTextOutput-f4LYmœ,œinputTypesœ:[œMessageœ],œtypeœ:œstrœ}"
        }
      ],
      "viewport": {
        "x": 861.1638512437444,
        "y": 255.6687011284912,
        "zoom": 0.24211934595490453
      }
    },
    "date_created": "2024-10-19T00:00:51.600Z",
    "date_updated": "2024-10-19T00:00:51.799Z",
    "status": "Public",
    "sort": null,
    "user_updated": "7f659ad3-3e77-4820-bf5e-94d5832026de",
    "user_created": {
      "username": "renanbrandao",
      "first_name": "Renan",
      "last_name": "Brandão",
      "id": "7f659ad3-3e77-4820-bf5e-94d5832026de"
    },
    "tags": []
  },
  "conversion": {
    "converted_at": "2025-08-19T18:08:56.099Z",
    "converted_from": "langflow",
    "converted_to": "axiestudio",
    "conversions_made": 64,
    "converter_version": "1.0.0"
  }
}