{
  "id": "11db727c-f3ba-40db-97f7-2d9daca38d44",
  "name": "Optimistic Planck",
  "description": "Uncover Business Opportunities with NLP. (Converted from Langflow Store for AxieStudio compatibility)",
  "type": "FLOW",
  "is_component": false,
  "author": {
    "username": "cironunes ",
    "first_name": "Ciro",
    "last_name": "Alves Justino Nunes",
    "id": "619d483a-31ee-4773-a55c-09185055d644",
    "full_name": "Ciro Alves Justino Nunes"
  },
  "store_url": "https://www.langflow.store/store/component/11db727c-f3ba-40db-97f7-2d9daca38d44",
  "stats": {
    "downloads": 0,
    "likes": 0
  },
  "dates": {
    "created": "2024-04-16T19:35:40.467Z",
    "updated": "2024-04-16T19:35:40.510Z",
    "downloaded": "2025-08-19T17:50:05.437Z"
  },
  "tags": [],
  "technical": {
    "last_tested_version": "0.6.5",
    "private": true,
    "status": "Public"
  },
  "data": {
    "nodes": [
      {
        "width": 384,
        "height": 678,
        "id": "ChatOpenAI-J1DJj",
        "type": "genericNode",
        "position": {
          "x": 180.53417199682815,
          "y": -120.89634657977172
        },
        "data": {
          "type": "ChatOpenAI",
          "node": {
            "template": {
              "openai_api_key": {
                "type": "Document",
                "required": true,
                "placeholder": "",
                "list": false,
                "show": true,
                "multiline": false,
                "fileTypes": [],
                "file_path": "",
                "password": false,
                "name": "openai_api_key",
                "display_name": "openai_api_key",
                "advanced": false,
                "dynamic": false,
                "info": ""
              },
              "code": {
                "type": "code",
                "required": true,
                "placeholder": "",
                "list": false,
                "show": true,
                "multiline": true,
                "value": "from typing import Optional, Union\n\nfrom langchain.llms import BaseLLM\nfrom langchain_community.chat_models.openai import ChatOpenAI\n\nfrom axiestudio import CustomComponent\nfrom axiestudio.field_typing import BaseLanguageModel, NestedDict\n\nfrom langchain.schema import Document\n\n\nclass ChatOpenAIComponent(CustomComponent):\n    display_name = \"ChatOpenAI\"\n    description = \"`OpenAI` Chat large language models API.\"\n\n    def build_config(self):\n        return {\n            \"max_tokens\": {\n                \"display_name\": \"Max Tokens\",\n                \"field_type\": \"int\",\n                \"advanced\": False,\n                \"required\": False,\n            },\n            \"model_kwargs\": {\n                \"display_name\": \"Model Kwargs\",\n                \"field_type\": \"NestedDict\",\n                \"advanced\": True,\n                \"required\": False,\n            },\n            \"model_name\": {\n                \"display_name\": \"Model Name\",\n                \"field_type\": \"str\",\n                \"advanced\": False,\n                \"required\": False,\n                \"options\": [\n                    \"gpt-4-turbo-preview\",\n                    \"gpt-4-0125-preview\",\n                    \"gpt-4-1106-preview\",\n                    \"gpt-4-vision-preview\",\n                    \"gpt-3.5-turbo-0125\",\n                    \"gpt-3.5-turbo-1106\",\n                ],\n            },\n            \"openai_api_base\": {\n                \"display_name\": \"OpenAI API Base\",\n                \"field_type\": \"str\",\n                \"advanced\": False,\n                \"required\": False,\n                \"info\": (\n                    \"The base URL of the OpenAI API. Defaults to https://api.openai.com/v1.\\n\\n\"\n                    \"You can change this to use other APIs like JinaChat, LocalAI and Prem.\"\n                ),\n            },\n            \"temperature\": {\n                \"display_name\": \"Temperature\",\n                \"field_type\": \"float\",\n                \"advanced\": False,\n                \"required\": False,\n                \"value\": 0.7,\n            },\n        }\n\n    def build(\n        self,\n        openai_api_key: Document= None,\n        max_tokens: Optional[int] = 256,\n        model_kwargs: NestedDict = {},\n        model_name: str = \"gpt-4-1106-preview\",\n        openai_api_base: Optional[str] = None,\n        temperature: float = 0.7,\n    ) -> Union[BaseLanguageModel, BaseLLM]:\n        if not openai_api_base:\n            openai_api_base = \"https://api.openai.com/v1\"\n        return ChatOpenAI(\n            max_tokens=max_tokens,\n            model_kwargs=model_kwargs,\n            model=model_name,\n            base_url=openai_api_base,\n            api_key=openai_api_key,\n            temperature=temperature,\n            streaming=True\n        )\n",
                "fileTypes": [],
                "file_path": "",
                "password": false,
                "name": "code",
                "advanced": false,
                "dynamic": true,
                "info": ""
              },
              "max_tokens": {
                "type": "int",
                "required": false,
                "placeholder": "",
                "list": false,
                "show": true,
                "multiline": false,
                "value": "512",
                "fileTypes": [],
                "file_path": "",
                "password": false,
                "name": "max_tokens",
                "display_name": "Max Tokens",
                "advanced": false,
                "dynamic": false,
                "info": ""
              },
              "model_kwargs": {
                "type": "NestedDict",
                "required": false,
                "placeholder": "",
                "list": false,
                "show": true,
                "multiline": false,
                "value": {},
                "fileTypes": [],
                "file_path": "",
                "password": false,
                "name": "model_kwargs",
                "display_name": "Model Kwargs",
                "advanced": true,
                "dynamic": false,
                "info": ""
              },
              "model_name": {
                "type": "str",
                "required": false,
                "placeholder": "",
                "list": true,
                "show": true,
                "multiline": false,
                "value": "gpt-4-1106-preview",
                "fileTypes": [],
                "file_path": "",
                "password": false,
                "options": [
                  "gpt-4-turbo-preview",
                  "gpt-4-0125-preview",
                  "gpt-4-1106-preview",
                  "gpt-4-vision-preview",
                  "gpt-3.5-turbo-0125",
                  "gpt-3.5-turbo-1106"
                ],
                "name": "model_name",
                "display_name": "Model Name",
                "advanced": false,
                "dynamic": false,
                "info": ""
              },
              "openai_api_base": {
                "type": "str",
                "required": false,
                "placeholder": "",
                "list": false,
                "show": true,
                "multiline": false,
                "fileTypes": [],
                "file_path": "",
                "password": false,
                "name": "openai_api_base",
                "display_name": "OpenAI API Base",
                "advanced": false,
                "dynamic": false,
                "info": "The base URL of the OpenAI API. Defaults to https://api.openai.com/v1.\n\nYou can change this to use other APIs like JinaChat, LocalAI and Prem."
              },
              "temperature": {
                "type": "float",
                "required": false,
                "placeholder": "",
                "list": false,
                "show": true,
                "multiline": false,
                "value": "0",
                "fileTypes": [],
                "file_path": "",
                "password": false,
                "name": "temperature",
                "display_name": "Temperature",
                "advanced": false,
                "dynamic": false,
                "info": "",
                "rangeSpec": {
                  "min": -1,
                  "max": 1,
                  "step": 0.1
                }
              },
              "_type": "CustomComponent"
            },
            "description": "`OpenAI` Chat large language models API.",
            "base_classes": [
              "BaseLanguageModel",
              "BaseLLM",
              "BaseLanguageModel"
            ],
            "display_name": "ChatOpenAI",
            "documentation": "",
            "custom_fields": {
              "max_tokens": null,
              "model_kwargs": null,
              "model_name": null,
              "openai_api_base": null,
              "openai_api_key": null,
              "temperature": null
            },
            "output_types": [
              "BaseLanguageModel",
              "BaseLLM"
            ],
            "field_formatters": {},
            "beta": true
          },
          "id": "ChatOpenAI-J1DJj",
          "description": "`OpenAI` Chat large language models API.",
          "display_name": "ChatOpenAI",
          "showNode": true
        },
        "selected": false,
        "positionAbsolute": {
          "x": 180.53417199682815,
          "y": -120.89634657977172
        },
        "dragging": false
      },
      {
        "width": 384,
        "height": 874,
        "id": "Data-a859e",
        "type": "genericNode",
        "position": {
          "x": 1168.0364913339606,
          "y": 1383.808902898777
        },
        "data": {
          "type": "Data",
          "node": {
            "template": {
              "api_key": {
                "type": "str",
                "required": true,
                "placeholder": "",
                "list": false,
                "show": true,
                "multiline": false,
                "fileTypes": [],
                "file_path": "",
                "password": true,
                "name": "api_key",
                "display_name": "API Key",
                "advanced": false,
                "dynamic": false,
                "info": "",
                "title_case": true,
                "value": ""
              },
              "code": {
                "type": "code",
                "required": true,
                "placeholder": "",
                "list": false,
                "show": true,
                "multiline": true,
                "value": "from typing import Optional, Union\r\nfrom langchain.schema import BaseRetriever\r\nfrom langchain_community.vectorstores import VectorStore\r\nfrom axiestudio import CustomComponent\r\nfrom elasticsearch import Elasticsearch\r\nfrom langchain_elasticsearch import ElasticsearchStore\r\n\r\nclass LexicComponent(CustomComponent):\r\n    display_name = \"Elastic Vector Store\"\r\n    description = \"Retrierver léxico\"\r\n\r\n    def build_config(self):\r\n        return {\r\n            \"api_key\": {\"display_name\": \"API Key\", \"password\": True},\r\n            \"host\": {\"display_name\": \"Host\"},\r\n            \"port\": {\"display_name\": \"Port\"},\r\n            \"query_field\": {\"display_name\": \"Text Field\"},\r\n        }\r\n\r\n    def build(\r\n        self,\r\n        query_field:str,\r\n        index_name:str,\r\n        api_key: str,\r\n        host: str,\r\n        port: int = 9200,\r\n        timeout: Optional[int] = 10,\r\n        verify_certs:Optional[bool]=True\r\n    ) -> Union[VectorStore, ElasticsearchStore, BaseRetriever]:\r\n        \r\n        def custom_query(query: str, *args, **kwargs):\r\n            new_query_body = {\r\n                    \"_source\": {\r\n                      \"excludes\": [\"embedding\", \"text\"]\r\n                    },\r\n        \r\n                    \"query\": {\r\n                          \"multi_match\": {\r\n                              \"query\": query,\r\n                              \"fields\":[\"metadata.title^1.5\",\"content^1.2\", \"content.original\"],\r\n                              \"fuzziness\":\"AUTO\"\r\n                              }\r\n                          }\r\n                }\r\n            return new_query_body\r\n        \r\n        strategy=ElasticsearchStore.ApproxRetrievalStrategy(hybrid=True)\r\n        strategy.query=custom_query\r\n\r\n        client = Elasticsearch(\r\n            hosts=f'{host}:{port}', \r\n            api_key=api_key,\r\n            verify_certs=verify_certs,\r\n            timeout=timeout,\r\n            max_retries = 3\r\n            )\r\n        vs = ElasticsearchStore(\r\n                es_connection=client, \r\n                index_name = index_name,\r\n                query_field = query_field,\r\n                strategy=strategy\r\n                \r\n            )\r\n        return vs\r\n",
                "fileTypes": [],
                "file_path": "",
                "password": false,
                "name": "code",
                "advanced": false,
                "dynamic": true,
                "info": "",
                "title_case": true
              },
              "host": {
                "type": "str",
                "required": true,
                "placeholder": "",
                "list": false,
                "show": true,
                "multiline": false,
                "fileTypes": [],
                "file_path": "",
                "password": false,
                "name": "host",
                "display_name": "Host",
                "advanced": false,
                "dynamic": false,
                "info": "",
                "title_case": true,
                "value": "https://elastic-apm.devops.sankhya.com.br"
              },
              "index_name": {
                "type": "str",
                "required": true,
                "placeholder": "",
                "list": false,
                "show": true,
                "multiline": false,
                "fileTypes": [],
                "file_path": "",
                "password": false,
                "name": "index_name",
                "advanced": false,
                "dynamic": false,
                "info": "",
                "title_case": true,
                "value": "ai-service-desk-gpt"
              },
              "port": {
                "type": "int",
                "required": true,
                "placeholder": "",
                "list": false,
                "show": true,
                "multiline": false,
                "value": "443",
                "fileTypes": [],
                "file_path": "",
                "password": false,
                "name": "port",
                "display_name": "Port",
                "advanced": false,
                "dynamic": false,
                "info": "",
                "title_case": true
              },
              "query_field": {
                "type": "str",
                "required": true,
                "placeholder": "",
                "list": false,
                "show": true,
                "multiline": false,
                "fileTypes": [],
                "file_path": "",
                "password": false,
                "name": "query_field",
                "display_name": "Text Field",
                "advanced": false,
                "dynamic": false,
                "info": "",
                "title_case": true,
                "value": "content"
              },
              "timeout": {
                "type": "int",
                "required": false,
                "placeholder": "",
                "list": false,
                "show": true,
                "multiline": false,
                "value": "30",
                "fileTypes": [],
                "file_path": "",
                "password": false,
                "name": "timeout",
                "advanced": false,
                "dynamic": false,
                "info": "",
                "title_case": true
              },
              "verify_certs": {
                "type": "bool",
                "required": false,
                "placeholder": "",
                "list": false,
                "show": true,
                "multiline": false,
                "value": true,
                "fileTypes": [],
                "file_path": "",
                "password": false,
                "name": "verify_certs",
                "advanced": false,
                "dynamic": false,
                "info": "",
                "title_case": true
              },
              "_type": "CustomComponent"
            },
            "description": "Retrierver léxico",
            "base_classes": [
              "VectorStore",
              "VectorStore",
              "ElasticsearchStore",
              "BaseRetriever"
            ],
            "display_name": "Elastic Lexic Search",
            "documentation": "",
            "custom_fields": {
              "query_field": null,
              "index_name": null,
              "api_key": null,
              "host": null,
              "port": null,
              "timeout": null,
              "verify_certs": null
            },
            "output_types": [
              "VectorStore",
              "ElasticsearchStore",
              "BaseRetriever"
            ],
            "field_formatters": {},
            "beta": true
          },
          "id": "Data-a859e",
          "description": "Retrierver léxico",
          "display_name": "Elastic Lexic Search"
        },
        "selected": false,
        "positionAbsolute": {
          "x": 1168.0364913339606,
          "y": 1383.808902898777
        }
      },
      {
        "width": 384,
        "height": 668,
        "id": "OpenAIEmbeddings-S41SL",
        "type": "genericNode",
        "position": {
          "x": 191.43025613974737,
          "y": 1387.6963869996252
        },
        "data": {
          "type": "OpenAIEmbeddings",
          "node": {
            "template": {
              "openai_api_key": {
                "type": "Document",
                "required": true,
                "placeholder": "",
                "list": false,
                "show": true,
                "multiline": false,
                "fileTypes": [],
                "file_path": "",
                "password": false,
                "name": "openai_api_key",
                "display_name": "openai_api_key",
                "advanced": false,
                "dynamic": false,
                "info": ""
              },
              "allowed_special": {
                "type": "str",
                "required": true,
                "placeholder": "",
                "list": true,
                "show": true,
                "multiline": false,
                "value": [],
                "fileTypes": [],
                "file_path": "",
                "password": false,
                "name": "allowed_special",
                "display_name": "Allowed Special",
                "advanced": true,
                "dynamic": false,
                "info": ""
              },
              "chunk_size": {
                "type": "int",
                "required": true,
                "placeholder": "",
                "list": false,
                "show": true,
                "multiline": false,
                "value": 1000,
                "fileTypes": [],
                "file_path": "",
                "password": false,
                "name": "chunk_size",
                "display_name": "Chunk Size",
                "advanced": true,
                "dynamic": false,
                "info": ""
              },
              "client": {
                "type": "Any",
                "required": false,
                "placeholder": "",
                "list": false,
                "show": true,
                "multiline": false,
                "fileTypes": [],
                "file_path": "",
                "password": false,
                "name": "client",
                "display_name": "Client",
                "advanced": true,
                "dynamic": false,
                "info": ""
              },
              "code": {
                "type": "code",
                "required": true,
                "placeholder": "",
                "list": false,
                "show": true,
                "multiline": true,
                "value": "from typing import Any, Callable, Dict, List, Optional, Union\n\nfrom langchain_community.embeddings.openai import OpenAIEmbeddings\nfrom axiestudio import CustomComponent\nfrom axiestudio.field_typing import NestedDict\nfrom pydantic.v1.types import SecretStr\n\n\nclass OpenAIEmbeddingsComponent(CustomComponent):\n    display_name = \"OpenAIEmbeddings\"\n    description = \"OpenAI embedding models\"\n\n    def build_config(self):\n        return {\n            \"allowed_special\": {\n                \"display_name\": \"Allowed Special\",\n                \"advanced\": True,\n                \"field_type\": \"str\",\n                \"is_list\": True,\n            },\n            \"default_headers\": {\n                \"display_name\": \"Default Headers\",\n                \"advanced\": True,\n                \"field_type\": \"dict\",\n            },\n            \"default_query\": {\n                \"display_name\": \"Default Query\",\n                \"advanced\": True,\n                \"field_type\": \"NestedDict\",\n            },\n            \"disallowed_special\": {\n                \"display_name\": \"Disallowed Special\",\n                \"advanced\": True,\n                \"field_type\": \"str\",\n                \"is_list\": True,\n            },\n            \"chunk_size\": {\"display_name\": \"Chunk Size\", \"advanced\": True},\n            \"client\": {\"display_name\": \"Client\", \"advanced\": True},\n            \"deployment\": {\"display_name\": \"Deployment\", \"advanced\": True},\n            \"embedding_ctx_length\": {\n                \"display_name\": \"Embedding Context Length\",\n                \"advanced\": True,\n            },\n            \"max_retries\": {\"display_name\": \"Max Retries\"},\n            \"model\": {\n                \"display_name\": \"Model\",\n                \"advanced\": False,\n                \"options\": [\"text-embedding-3-small\", \"text-embedding-3-large\", \"text-embedding-ada-002\"],\n            },\n            \"model_kwargs\": {\"display_name\": \"Model Kwargs\", \"advanced\": True},\n            \"openai_api_base\": {\"display_name\": \"OpenAI API Base\", \"password\": True, \"advanced\": True},\n            \"openai_api_type\": {\"display_name\": \"OpenAI API Type\", \"advanced\": True, \"password\": True},\n            \"openai_api_version\": {\n                \"display_name\": \"OpenAI API Version\",\n                \"advanced\": True,\n            },\n            \"openai_organization\": {\n                \"display_name\": \"OpenAI Organization\",\n                \"advanced\": True,\n            },\n            \"openai_proxy\": {\"display_name\": \"OpenAI Proxy\", \"advanced\": True},\n            \"request_timeout\": {\"display_name\": \"Request Timeout\", \"advanced\": True},\n            \"show_progress_bar\": {\n                \"display_name\": \"Show Progress Bar\",\n                \"advanced\": True,\n            },\n            \"skip_empty\": {\"display_name\": \"Skip Empty\", \"advanced\": True},\n            \"tiktoken_model_name\": {\"display_name\": \"TikToken Model Name\"},\n            \"tikToken_enable\": {\"display_name\": \"TikToken Enable\", \"advanced\": True},\n        }\n\n    def build(\n        self,\n        default_headers: Optional[Dict[str, str]] = None,\n        default_query: Optional[NestedDict] = {},\n        allowed_special: List[str] = [],\n        disallowed_special: List[str] = [\"all\"],\n        chunk_size: int = 1000,\n        client: Optional[Any] = None,\n        deployment: str = \"text-embedding-3-small\",\n        embedding_ctx_length: int = 8191,\n        max_retries: int = 6,\n        model: str = \"text-embedding-3-small\",\n        model_kwargs: NestedDict = {},\n        openai_api_base: Optional[str] = None,\n        openai_api_key: Document = None,\n        openai_api_type: Optional[str] = None,\n        openai_api_version: Optional[str] = None,\n        openai_organization: Optional[str] = None,\n        openai_proxy: Optional[str] = None,\n        request_timeout: Optional[float] = None,\n        show_progress_bar: bool = False,\n        skip_empty: bool = False,\n        tiktoken_enable: bool = True,\n        tiktoken_model_name: Optional[str] = None,\n    ) -> Union[OpenAIEmbeddings, Callable]:\n        # This is to avoid errors with Vector Stores (e.g Chroma)\n        if disallowed_special == [\"all\"]:\n            disallowed_special = \"all\"  # type: ignore\n\n        api_key = SecretStr(openai_api_key) if openai_api_key else None\n\n        return OpenAIEmbeddings(\n            tiktoken_enabled=tiktoken_enable,\n            default_headers=default_headers,\n            default_query=default_query,\n            allowed_special=set(allowed_special),\n            disallowed_special=\"all\",\n            chunk_size=chunk_size,\n            client=client,\n            deployment=deployment,\n            embedding_ctx_length=embedding_ctx_length,\n            max_retries=max_retries,\n            model=model,\n            model_kwargs=model_kwargs,\n            base_url=openai_api_base,\n            api_key=openai_api_key,\n            openai_api_type=openai_api_type,\n            api_version=openai_api_version,\n            organization=openai_organization,\n            openai_proxy=openai_proxy,\n            timeout=request_timeout,\n            show_progress_bar=show_progress_bar,\n            skip_empty=skip_empty,\n            tiktoken_model_name=tiktoken_model_name,\n        )\n",
                "fileTypes": [],
                "file_path": "",
                "password": false,
                "name": "code",
                "advanced": false,
                "dynamic": true,
                "info": ""
              },
              "default_headers": {
                "type": "dict",
                "required": false,
                "placeholder": "",
                "list": false,
                "show": true,
                "multiline": false,
                "fileTypes": [],
                "file_path": "",
                "password": false,
                "name": "default_headers",
                "display_name": "Default Headers",
                "advanced": true,
                "dynamic": false,
                "info": ""
              },
              "default_query": {
                "type": "NestedDict",
                "required": false,
                "placeholder": "",
                "list": false,
                "show": true,
                "multiline": false,
                "value": {},
                "fileTypes": [],
                "file_path": "",
                "password": false,
                "name": "default_query",
                "display_name": "Default Query",
                "advanced": true,
                "dynamic": false,
                "info": ""
              },
              "deployment": {
                "type": "str",
                "required": true,
                "placeholder": "",
                "list": false,
                "show": true,
                "multiline": false,
                "value": "text-embedding-3-small",
                "fileTypes": [],
                "file_path": "",
                "password": false,
                "name": "deployment",
                "display_name": "Deployment",
                "advanced": true,
                "dynamic": false,
                "info": ""
              },
              "disallowed_special": {
                "type": "str",
                "required": true,
                "placeholder": "",
                "list": true,
                "show": true,
                "multiline": false,
                "value": [
                  "all"
                ],
                "fileTypes": [],
                "file_path": "",
                "password": false,
                "name": "disallowed_special",
                "display_name": "Disallowed Special",
                "advanced": true,
                "dynamic": false,
                "info": ""
              },
              "embedding_ctx_length": {
                "type": "int",
                "required": true,
                "placeholder": "",
                "list": false,
                "show": true,
                "multiline": false,
                "value": 8191,
                "fileTypes": [],
                "file_path": "",
                "password": false,
                "name": "embedding_ctx_length",
                "display_name": "Embedding Context Length",
                "advanced": true,
                "dynamic": false,
                "info": ""
              },
              "max_retries": {
                "type": "int",
                "required": true,
                "placeholder": "",
                "list": false,
                "show": true,
                "multiline": false,
                "value": "3",
                "fileTypes": [],
                "file_path": "",
                "password": false,
                "name": "max_retries",
                "display_name": "Max Retries",
                "advanced": false,
                "dynamic": false,
                "info": ""
              },
              "model": {
                "type": "str",
                "required": true,
                "placeholder": "",
                "list": true,
                "show": true,
                "multiline": false,
                "value": "text-embedding-ada-002",
                "fileTypes": [],
                "file_path": "",
                "password": false,
                "options": [
                  "text-embedding-3-small",
                  "text-embedding-3-large",
                  "text-embedding-ada-002"
                ],
                "name": "model",
                "display_name": "Model",
                "advanced": false,
                "dynamic": false,
                "info": ""
              },
              "model_kwargs": {
                "type": "NestedDict",
                "required": true,
                "placeholder": "",
                "list": false,
                "show": true,
                "multiline": false,
                "value": {},
                "fileTypes": [],
                "file_path": "",
                "password": false,
                "name": "model_kwargs",
                "display_name": "Model Kwargs",
                "advanced": true,
                "dynamic": false,
                "info": ""
              },
              "openai_api_base": {
                "type": "str",
                "required": false,
                "placeholder": "",
                "list": false,
                "show": true,
                "multiline": false,
                "fileTypes": [],
                "file_path": "",
                "password": true,
                "name": "openai_api_base",
                "display_name": "OpenAI API Base",
                "advanced": true,
                "dynamic": false,
                "info": "",
                "value": ""
              },
              "openai_api_type": {
                "type": "str",
                "required": false,
                "placeholder": "",
                "list": false,
                "show": true,
                "multiline": false,
                "fileTypes": [],
                "file_path": "",
                "password": true,
                "name": "openai_api_type",
                "display_name": "OpenAI API Type",
                "advanced": true,
                "dynamic": false,
                "info": "",
                "value": ""
              },
              "openai_api_version": {
                "type": "str",
                "required": false,
                "placeholder": "",
                "list": false,
                "show": true,
                "multiline": false,
                "fileTypes": [],
                "file_path": "",
                "password": false,
                "name": "openai_api_version",
                "display_name": "OpenAI API Version",
                "advanced": true,
                "dynamic": false,
                "info": ""
              },
              "openai_organization": {
                "type": "str",
                "required": false,
                "placeholder": "",
                "list": false,
                "show": true,
                "multiline": false,
                "fileTypes": [],
                "file_path": "",
                "password": false,
                "name": "openai_organization",
                "display_name": "OpenAI Organization",
                "advanced": true,
                "dynamic": false,
                "info": ""
              },
              "openai_proxy": {
                "type": "str",
                "required": false,
                "placeholder": "",
                "list": false,
                "show": true,
                "multiline": false,
                "fileTypes": [],
                "file_path": "",
                "password": false,
                "name": "openai_proxy",
                "display_name": "OpenAI Proxy",
                "advanced": true,
                "dynamic": false,
                "info": ""
              },
              "request_timeout": {
                "type": "float",
                "required": false,
                "placeholder": "",
                "list": false,
                "show": true,
                "multiline": false,
                "fileTypes": [],
                "file_path": "",
                "password": false,
                "name": "request_timeout",
                "display_name": "Request Timeout",
                "advanced": true,
                "dynamic": false,
                "info": "",
                "rangeSpec": {
                  "min": -1,
                  "max": 1,
                  "step": 0.1
                }
              },
              "show_progress_bar": {
                "type": "bool",
                "required": true,
                "placeholder": "",
                "list": false,
                "show": true,
                "multiline": false,
                "value": false,
                "fileTypes": [],
                "file_path": "",
                "password": false,
                "name": "show_progress_bar",
                "display_name": "Show Progress Bar",
                "advanced": true,
                "dynamic": false,
                "info": ""
              },
              "skip_empty": {
                "type": "bool",
                "required": true,
                "placeholder": "",
                "list": false,
                "show": true,
                "multiline": false,
                "value": false,
                "fileTypes": [],
                "file_path": "",
                "password": false,
                "name": "skip_empty",
                "display_name": "Skip Empty",
                "advanced": true,
                "dynamic": false,
                "info": ""
              },
              "tiktoken_enable": {
                "type": "bool",
                "required": true,
                "placeholder": "",
                "list": false,
                "show": true,
                "multiline": false,
                "value": true,
                "fileTypes": [],
                "file_path": "",
                "password": false,
                "name": "tiktoken_enable",
                "display_name": "tiktoken_enable",
                "advanced": false,
                "dynamic": false,
                "info": ""
              },
              "tiktoken_model_name": {
                "type": "str",
                "required": false,
                "placeholder": "",
                "list": false,
                "show": true,
                "multiline": false,
                "fileTypes": [],
                "file_path": "",
                "password": false,
                "name": "tiktoken_model_name",
                "display_name": "TikToken Model Name",
                "advanced": false,
                "dynamic": false,
                "info": ""
              },
              "_type": "CustomComponent"
            },
            "description": "OpenAI embedding models",
            "base_classes": [
              "OpenAIEmbeddings",
              "Embeddings",
              "Callable"
            ],
            "display_name": "OpenAIEmbeddings",
            "documentation": "",
            "custom_fields": {
              "allowed_special": null,
              "chunk_size": null,
              "client": null,
              "default_headers": null,
              "default_query": null,
              "deployment": null,
              "disallowed_special": null,
              "embedding_ctx_length": null,
              "max_retries": null,
              "model": null,
              "model_kwargs": null,
              "openai_api_base": null,
              "openai_api_key": null,
              "openai_api_type": null,
              "openai_api_version": null,
              "openai_organization": null,
              "openai_proxy": null,
              "request_timeout": null,
              "show_progress_bar": null,
              "skip_empty": null,
              "tiktoken_enable": null,
              "tiktoken_model_name": null
            },
            "output_types": [
              "OpenAIEmbeddings",
              "Callable"
            ],
            "field_formatters": {},
            "beta": true
          },
          "id": "OpenAIEmbeddings-S41SL",
          "description": "OpenAI embedding models",
          "display_name": "OpenAIEmbeddings"
        },
        "selected": false,
        "dragging": false,
        "positionAbsolute": {
          "x": 191.43025613974737,
          "y": 1387.6963869996252
        }
      },
      {
        "width": 384,
        "height": 443,
        "id": "Data-yJux8",
        "type": "genericNode",
        "position": {
          "x": 1640.8771027501032,
          "y": 1385.3581852382488
        },
        "data": {
          "type": "Data",
          "node": {
            "template": {
              "lexic_vector_store": {
                "type": "VectorStore",
                "required": true,
                "placeholder": "",
                "list": false,
                "show": true,
                "multiline": false,
                "fileTypes": [],
                "file_path": "",
                "password": false,
                "name": "lexic_vector_store",
                "advanced": false,
                "dynamic": false,
                "info": "",
                "title_case": true
              },
              "semantic_vector_store": {
                "type": "VectorStore",
                "required": true,
                "placeholder": "",
                "list": false,
                "show": true,
                "multiline": false,
                "fileTypes": [],
                "file_path": "",
                "password": false,
                "name": "semantic_vector_store",
                "advanced": false,
                "dynamic": false,
                "info": "",
                "title_case": true
              },
              "code": {
                "type": "code",
                "required": true,
                "placeholder": "",
                "list": false,
                "show": true,
                "multiline": true,
                "value": "from axiestudio import CustomComponent\r\nfrom axiestudio.field_typing import VectorStore, Chain\r\nfrom langchain.retrievers import EnsembleRetriever\r\n\r\n\r\nclass Component(CustomComponent):\r\n    documentation: str = \"http://docs.axiestudio.org/components/custom\"\r\n    display_name = \"Ensemble Retriever\"\r\n\r\n    def build(self, semantic_vector_store: VectorStore, lexic_vector_store: VectorStore, k_refs: int=3) -> EnsembleRetriever:\r\n        \r\n        semantic_store_retriever = semantic_vector_store.as_retriever(search_kwargs={\"k\": k_refs})\r\n        lexic_store_retriever = lexic_vector_store.as_retriever(search_kwargs={\"k\": k_refs})\r\n        \r\n        ensemble_retriever = EnsembleRetriever(retrievers = [semantic_store_retriever, lexic_store_retriever], weights=[0.5, 0.5],\r\n)\r\n\r\n        return ensemble_retriever",
                "fileTypes": [],
                "file_path": "",
                "password": false,
                "name": "code",
                "advanced": false,
                "dynamic": true,
                "info": "",
                "title_case": true
              },
              "k_refs": {
                "type": "int",
                "required": true,
                "placeholder": "",
                "list": false,
                "show": true,
                "multiline": false,
                "value": "1",
                "fileTypes": [],
                "file_path": "",
                "password": false,
                "name": "k_refs",
                "advanced": false,
                "dynamic": false,
                "info": "",
                "title_case": true
              },
              "_type": "CustomComponent"
            },
            "base_classes": [
              "EnsembleRetriever",
              "BaseRetriever"
            ],
            "display_name": "Ensemble Retriever",
            "documentation": "http://docs.axiestudio.org/components/custom",
            "custom_fields": {
              "semantic_vector_store": null,
              "lexic_vector_store": null,
              "k_refs": null
            },
            "output_types": [
              "EnsembleRetriever"
            ],
            "field_formatters": {},
            "beta": true
          },
          "id": "Data-yJux8",
          "display_name": "Ensemble Retriever"
        },
        "selected": false,
        "positionAbsolute": {
          "x": 1640.8771027501032,
          "y": 1385.3581852382488
        }
      },
      {
        "width": 384,
        "height": 564,
        "id": "PromptTemplate-lMXPR",
        "type": "genericNode",
        "position": {
          "x": 701.9387271148743,
          "y": 641.2705676994295
        },
        "data": {
          "type": "PromptTemplate",
          "node": {
            "template": {
              "output_parser": {
                "type": "BaseOutputParser",
                "required": false,
                "placeholder": "",
                "list": false,
                "show": false,
                "multiline": false,
                "fileTypes": [],
                "password": false,
                "name": "output_parser",
                "advanced": false,
                "dynamic": true,
                "info": "",
                "title_case": true
              },
              "input_types": {
                "type": "dict",
                "required": false,
                "placeholder": "",
                "list": false,
                "show": false,
                "multiline": false,
                "fileTypes": [],
                "password": false,
                "name": "input_types",
                "advanced": false,
                "dynamic": true,
                "info": "",
                "title_case": true
              },
              "input_variables": {
                "type": "str",
                "required": true,
                "placeholder": "",
                "list": true,
                "show": false,
                "multiline": false,
                "fileTypes": [],
                "password": false,
                "name": "input_variables",
                "advanced": false,
                "dynamic": true,
                "info": "",
                "title_case": true,
                "value": [
                  "chat_history",
                  "context",
                  "question"
                ]
              },
              "metadata": {
                "type": "dict",
                "required": false,
                "placeholder": "",
                "list": false,
                "show": false,
                "multiline": false,
                "fileTypes": [],
                "password": false,
                "name": "metadata",
                "advanced": false,
                "dynamic": true,
                "info": "",
                "title_case": true
              },
              "name": {
                "type": "str",
                "required": false,
                "placeholder": "",
                "list": false,
                "show": false,
                "multiline": false,
                "fileTypes": [],
                "password": false,
                "name": "name",
                "advanced": false,
                "dynamic": true,
                "info": "",
                "title_case": true
              },
              "partial_variables": {
                "type": "dict",
                "required": false,
                "placeholder": "",
                "list": false,
                "show": false,
                "multiline": false,
                "fileTypes": [],
                "password": false,
                "name": "partial_variables",
                "advanced": false,
                "dynamic": true,
                "info": "",
                "title_case": true
              },
              "tags": {
                "type": "str",
                "required": false,
                "placeholder": "",
                "list": true,
                "show": false,
                "multiline": false,
                "fileTypes": [],
                "password": false,
                "name": "tags",
                "advanced": false,
                "dynamic": true,
                "info": "",
                "title_case": true
              },
              "template": {
                "type": "prompt",
                "required": true,
                "placeholder": "",
                "list": false,
                "show": true,
                "multiline": true,
                "fileTypes": [],
                "password": false,
                "name": "template",
                "advanced": false,
                "dynamic": true,
                "info": "",
                "title_case": true,
                "value": "Always respond in Portuguese.\nAlways end the response with more than one source documentsi f available: Reference: (URL + Title)\nUnderstand the messages as questions about the subject. \nProvide didactic objective responses to these questions. \nIf necessary, use a step-by-step approach.\nAnonymize sensitive data, such as addresses, emails, CPFs, and passwords. \nYou are responding to questions about the Sankhya ecosystem.\nIf you come across keywords out of context, understand that they may be specific terms within the ecosystem.\nIf the keyword is a document identifier, ticket, or service order, provide a brief summary of the content.\nLimit yourself to the provided context. If you cannot find the answer within it, apologize.\nThe content that addresses the question may be distributed (or not) across one or more context passages.\n\n----Conversation History----\n{chat_history}\n----End History----\n\n----Context----\n{context}\n----End Context----\n\nUser Input:\n\n{question}"
              },
              "template_format": {
                "type": "str",
                "required": false,
                "placeholder": "",
                "list": false,
                "show": false,
                "multiline": false,
                "value": "f-string",
                "fileTypes": [],
                "password": false,
                "name": "template_format",
                "advanced": false,
                "dynamic": true,
                "info": "",
                "title_case": true
              },
              "validate_template": {
                "type": "bool",
                "required": false,
                "placeholder": "",
                "list": false,
                "show": false,
                "multiline": false,
                "value": false,
                "fileTypes": [],
                "password": false,
                "name": "validate_template",
                "advanced": false,
                "dynamic": true,
                "info": "",
                "title_case": true
              },
              "_type": "PromptTemplate",
              "context": {
                "type": "str",
                "required": false,
                "placeholder": "",
                "list": false,
                "show": true,
                "multiline": true,
                "value": "",
                "fileTypes": [],
                "file_path": "",
                "password": false,
                "name": "context",
                "display_name": "context",
                "advanced": false,
                "input_types": [
                  "Document",
                  "BaseOutputParser"
                ],
                "dynamic": false,
                "info": "",
                "title_case": true
              },
              "question": {
                "type": "str",
                "required": false,
                "placeholder": "",
                "list": false,
                "show": true,
                "multiline": true,
                "value": "",
                "fileTypes": [],
                "file_path": "",
                "password": false,
                "name": "question",
                "display_name": "question",
                "advanced": false,
                "input_types": [
                  "Document",
                  "BaseOutputParser"
                ],
                "dynamic": false,
                "info": "",
                "title_case": true
              },
              "chat_history": {
                "type": "str",
                "required": false,
                "placeholder": "",
                "list": false,
                "show": true,
                "multiline": true,
                "value": "",
                "fileTypes": [],
                "file_path": "",
                "password": false,
                "name": "chat_history",
                "display_name": "chat_history",
                "advanced": false,
                "input_types": [
                  "Document",
                  "BaseOutputParser"
                ],
                "dynamic": false,
                "info": "",
                "title_case": true
              }
            },
            "description": "A prompt template for a language model.",
            "icon": null,
            "base_classes": [
              "StringPromptTemplate",
              "PromptTemplate",
              "BasePromptTemplate"
            ],
            "name": "",
            "display_name": "PromptTemplate",
            "documentation": "https://python.langchain.com/docs/modules/model_io/prompts/prompt_templates/",
            "custom_fields": {
              "": [
                "chat_history",
                "context",
                "question"
              ]
            },
            "output_types": [],
            "full_path": null,
            "field_formatters": {},
            "beta": false,
            "error": null
          },
          "id": "PromptTemplate-lMXPR",
          "description": "A prompt template for a language model.",
          "display_name": "PromptTemplate"
        },
        "selected": false,
        "positionAbsolute": {
          "x": 701.9387271148743,
          "y": 641.2705676994295
        }
      },
      {
        "width": 384,
        "height": 684,
        "id": "ConversationBufferWindowMemory-mO9jO",
        "type": "genericNode",
        "position": {
          "x": 1410.5295510157168,
          "y": 75.54514370219583
        },
        "data": {
          "type": "ConversationBufferWindowMemory",
          "node": {
            "template": {
              "chat_memory": {
                "type": "BaseChatMessageHistory",
                "required": false,
                "placeholder": "",
                "list": false,
                "show": true,
                "multiline": false,
                "fileTypes": [],
                "password": false,
                "name": "chat_memory",
                "advanced": false,
                "dynamic": false,
                "info": "",
                "title_case": true
              },
              "ai_prefix": {
                "type": "str",
                "required": false,
                "placeholder": "",
                "list": false,
                "show": false,
                "multiline": false,
                "value": "AI",
                "fileTypes": [],
                "password": false,
                "name": "ai_prefix",
                "advanced": false,
                "dynamic": false,
                "info": "",
                "title_case": true
              },
              "human_prefix": {
                "type": "str",
                "required": false,
                "placeholder": "",
                "list": false,
                "show": false,
                "multiline": false,
                "value": "Human",
                "fileTypes": [],
                "password": false,
                "name": "human_prefix",
                "advanced": false,
                "dynamic": false,
                "info": "",
                "title_case": true
              },
              "input_key": {
                "type": "str",
                "required": false,
                "placeholder": "",
                "list": false,
                "show": true,
                "multiline": false,
                "value": "question",
                "fileTypes": [],
                "file_path": "",
                "password": false,
                "name": "input_key",
                "advanced": false,
                "dynamic": false,
                "info": "The variable to be used as Chat Input when more than one variable is available.",
                "title_case": true
              },
              "k": {
                "type": "int",
                "required": true,
                "placeholder": "",
                "list": false,
                "show": true,
                "multiline": false,
                "value": "4",
                "fileTypes": [],
                "password": false,
                "name": "k",
                "display_name": "Memory Size",
                "advanced": false,
                "dynamic": false,
                "info": "",
                "title_case": true
              },
              "memory_key": {
                "type": "str",
                "required": false,
                "placeholder": "",
                "list": false,
                "show": true,
                "multiline": false,
                "value": "chat_history",
                "fileTypes": [],
                "password": false,
                "name": "memory_key",
                "advanced": false,
                "dynamic": false,
                "info": "",
                "title_case": true
              },
              "output_key": {
                "type": "str",
                "required": false,
                "placeholder": "",
                "list": false,
                "show": true,
                "multiline": false,
                "value": "answer",
                "fileTypes": [],
                "file_path": "",
                "password": false,
                "name": "output_key",
                "advanced": false,
                "dynamic": false,
                "info": "The variable to be used as Chat Output (e.g. answer in a ConversationalRetrievalChain)",
                "title_case": true
              },
              "return_messages": {
                "type": "bool",
                "required": false,
                "placeholder": "",
                "list": false,
                "show": true,
                "multiline": false,
                "fileTypes": [],
                "file_path": "",
                "password": false,
                "name": "return_messages",
                "advanced": false,
                "dynamic": false,
                "info": "",
                "title_case": true,
                "value": true
              },
              "_type": "ConversationBufferWindowMemory"
            },
            "description": "Buffer for storing conversation memory inside a limited size window.",
            "base_classes": [
              "BaseChatMemory",
              "ConversationBufferWindowMemory",
              "BaseMemory"
            ],
            "display_name": "ConversationBufferWindowMemory",
            "documentation": "https://python.langchain.com/docs/modules/memory/how_to/buffer_window",
            "custom_fields": {},
            "output_types": [],
            "field_formatters": {},
            "beta": false
          },
          "id": "ConversationBufferWindowMemory-mO9jO",
          "showNode": true
        },
        "selected": false,
        "positionAbsolute": {
          "x": 1410.5295510157168,
          "y": 75.54514370219583
        },
        "dragging": false
      },
      {
        "width": 384,
        "height": 541,
        "id": "Data-TuWJV",
        "type": "genericNode",
        "position": {
          "x": 2189.0539870501448,
          "y": 781.9391210522786
        },
        "data": {
          "type": "Data",
          "node": {
            "template": {
              "document_prompt": {
                "type": "PromptTemplate",
                "required": true,
                "placeholder": "",
                "list": false,
                "show": true,
                "multiline": false,
                "fileTypes": [],
                "file_path": "",
                "password": false,
                "name": "document_prompt",
                "display_name": "document_prompt",
                "advanced": false,
                "dynamic": false,
                "info": ""
              },
              "llm": {
                "type": "BaseLanguageModel",
                "required": true,
                "placeholder": "",
                "list": false,
                "show": true,
                "multiline": false,
                "fileTypes": [],
                "file_path": "",
                "password": false,
                "name": "llm",
                "display_name": "llm",
                "advanced": false,
                "dynamic": false,
                "info": ""
              },
              "memory": {
                "type": "BaseMemory",
                "required": false,
                "placeholder": "",
                "list": false,
                "show": true,
                "multiline": false,
                "fileTypes": [],
                "file_path": "",
                "password": false,
                "name": "memory",
                "display_name": "memory",
                "advanced": false,
                "dynamic": false,
                "info": ""
              },
              "rephrase_llm": {
                "type": "BaseLanguageModel",
                "required": true,
                "placeholder": "",
                "list": false,
                "show": true,
                "multiline": false,
                "fileTypes": [],
                "file_path": "",
                "password": false,
                "name": "rephrase_llm",
                "display_name": "rephrase_llm",
                "advanced": false,
                "dynamic": false,
                "info": ""
              },
              "retriever": {
                "type": "BaseRetriever",
                "required": true,
                "placeholder": "",
                "list": false,
                "show": true,
                "multiline": false,
                "fileTypes": [],
                "file_path": "",
                "password": false,
                "name": "retriever",
                "display_name": "retriever",
                "advanced": false,
                "dynamic": false,
                "info": ""
              },
              "code": {
                "type": "code",
                "required": true,
                "placeholder": "",
                "list": false,
                "show": true,
                "multiline": true,
                "value": "from axiestudio import CustomComponent\r\n\r\nfrom langchain.chains import (\r\n    StuffDocumentsChain, LLMChain, ConversationalRetrievalChain\r\n)\r\nfrom langchain_core.prompts import PromptTemplate\r\n\r\nfrom typing import Optional, Union, Callable\r\nfrom axiestudio.field_typing import BaseLanguageModel, BaseMemory, Chain\r\nimport logging\r\nlogging.basicConfig(level=logging.WARNING)\r\n\r\nfrom langchain_core.retrievers import BaseRetriever\r\nfrom langchain.chains.conversational_retrieval.prompts import CONDENSE_QUESTION_PROMPT\r\n#from langchain.chains.question_answering import load_qa_chain\r\n\r\n\r\nclass ConversationChainComponent(CustomComponent):\r\n    display_name = \"CustomConversationRetrievalChain\"\r\n    description = \"Chain to have a conversation and load context from memory.\"\r\n\r\n    def build(\r\n        self,\r\n        llm: BaseLanguageModel,\r\n        rephrase_llm:BaseLanguageModel,\r\n        document_prompt:PromptTemplate,\r\n        retriever: BaseRetriever,\r\n        memory: Optional[BaseMemory] = None,\r\n        \r\n    ) -> Union[Chain, Callable]:\r\n        \r\n        if memory:\r\n        \r\n                memory.human_prefix = 'Me'\r\n                memory.ai_prefix = 'You'\r\n        \r\n        stuff_prompt = PromptTemplate(\r\n                input_variables=[\"page_content\", \"source\", \"title\", \"category_name\", \"section_name\"],\r\n                template=\"\"\"<doc id=\"context\">\\n--Source Document--\\nURL: {source}\\nTítulo: {title} ({section_name}/{category_name})\\n--End Source--\\n{page_content}\"\"\"\r\n            )\r\n    \r\n        \r\n        llm_chain = LLMChain(llm=llm, prompt=document_prompt, return_final_only = False)\r\n        document_variable_name = \"context\"\r\n        document_separator: str = \"\\n</doc>\"\r\n        sttuf = StuffDocumentsChain(\r\n            llm_chain=llm_chain,\r\n            document_variable_name=document_variable_name,\r\n            document_prompt=stuff_prompt,\r\n        )\r\n \r\n                    \r\n        question_generator_chain = LLMChain(llm=rephrase_llm, prompt=CONDENSE_QUESTION_PROMPT)\r\n        chain = ConversationalRetrievalChain(\r\n            combine_docs_chain=sttuf,\r\n            retriever=retriever,\r\n            question_generator=question_generator_chain,\r\n            memory = memory,\r\n            rephrase_question = False,\r\n            return_generated_question = False,\r\n            return_source_documents = True\r\n        )\r\n                \r\n        return chain\r\n",
                "fileTypes": [],
                "file_path": "",
                "password": false,
                "name": "code",
                "advanced": false,
                "dynamic": true,
                "info": ""
              },
              "_type": "CustomComponent"
            },
            "description": "Chain to have a conversation and load context from memory.",
            "base_classes": [
              "Chain",
              "Callable"
            ],
            "display_name": "CustomConversationRetrievalChain",
            "documentation": "",
            "custom_fields": {
              "document_prompt": null,
              "llm": null,
              "memory": null,
              "rephrase_llm": null,
              "retriever": null
            },
            "output_types": [
              "Chain",
              "Callable"
            ],
            "field_formatters": {},
            "beta": true
          },
          "id": "Data-TuWJV",
          "description": "Chain to have a conversation and load context from memory.",
          "display_name": "CustomConversationRetrievalChain"
        },
        "selected": false,
        "positionAbsolute": {
          "x": 2189.0539870501448,
          "y": 781.9391210522786
        },
        "dragging": false
      },
      {
        "width": 384,
        "height": 678,
        "id": "ChatOpenAI-4KDsG",
        "type": "genericNode",
        "position": {
          "x": 183.5017087242719,
          "y": 612.0786708769291
        },
        "data": {
          "type": "ChatOpenAI",
          "node": {
            "template": {
              "openai_api_key": {
                "type": "Document",
                "required": true,
                "placeholder": "",
                "list": false,
                "show": true,
                "multiline": false,
                "fileTypes": [],
                "file_path": "",
                "password": false,
                "name": "openai_api_key",
                "display_name": "openai_api_key",
                "advanced": false,
                "dynamic": false,
                "info": ""
              },
              "code": {
                "type": "code",
                "required": true,
                "placeholder": "",
                "list": false,
                "show": true,
                "multiline": true,
                "value": "from typing import Optional, Union\n\nfrom langchain.llms import BaseLLM\nfrom langchain_community.chat_models.openai import ChatOpenAI\n\nfrom axiestudio import CustomComponent\nfrom axiestudio.field_typing import BaseLanguageModel, NestedDict\n\nfrom langchain.schema import Document\n\n\nclass ChatOpenAIComponent(CustomComponent):\n    display_name = \"ChatOpenAI\"\n    description = \"`OpenAI` Chat large language models API.\"\n\n    def build_config(self):\n        return {\n            \"max_tokens\": {\n                \"display_name\": \"Max Tokens\",\n                \"field_type\": \"int\",\n                \"advanced\": False,\n                \"required\": False,\n            },\n            \"model_kwargs\": {\n                \"display_name\": \"Model Kwargs\",\n                \"field_type\": \"NestedDict\",\n                \"advanced\": True,\n                \"required\": False,\n            },\n            \"model_name\": {\n                \"display_name\": \"Model Name\",\n                \"field_type\": \"str\",\n                \"advanced\": False,\n                \"required\": False,\n                \"options\": [\n                    \"gpt-4-turbo-preview\",\n                    \"gpt-4-0125-preview\",\n                    \"gpt-4-1106-preview\",\n                    \"gpt-4-vision-preview\",\n                    \"gpt-3.5-turbo-0125\",\n                    \"gpt-3.5-turbo-1106\",\n                ],\n            },\n            \"openai_api_base\": {\n                \"display_name\": \"OpenAI API Base\",\n                \"field_type\": \"str\",\n                \"advanced\": False,\n                \"required\": False,\n                \"info\": (\n                    \"The base URL of the OpenAI API. Defaults to https://api.openai.com/v1.\\n\\n\"\n                    \"You can change this to use other APIs like JinaChat, LocalAI and Prem.\"\n                ),\n            },\n            \"temperature\": {\n                \"display_name\": \"Temperature\",\n                \"field_type\": \"float\",\n                \"advanced\": False,\n                \"required\": False,\n                \"value\": 0.7,\n            },\n        }\n\n    def build(\n        self,\n        max_tokens: Optional[int] = 256,\n        model_kwargs: NestedDict = {},\n        model_name: str = \"gpt-4-1106-preview\",\n        openai_api_base: Optional[str] = None,\n        openai_api_key: Document = None,\n        temperature: float = 0.7,\n    ) -> Union[BaseLanguageModel, BaseLLM]:\n        if not openai_api_base:\n            openai_api_base = \"https://api.openai.com/v1\"\n        return ChatOpenAI(\n            max_tokens=max_tokens,\n            model_kwargs=model_kwargs,\n            model=model_name,\n            base_url=openai_api_base,\n            api_key=openai_api_key,\n            temperature=temperature,\n            streaming=False\n        )\n",
                "fileTypes": [],
                "file_path": "",
                "password": false,
                "name": "code",
                "advanced": false,
                "dynamic": true,
                "info": ""
              },
              "max_tokens": {
                "type": "int",
                "required": false,
                "placeholder": "",
                "list": false,
                "show": true,
                "multiline": false,
                "value": "256",
                "fileTypes": [],
                "file_path": "",
                "password": false,
                "name": "max_tokens",
                "display_name": "Max Tokens",
                "advanced": false,
                "dynamic": false,
                "info": ""
              },
              "model_kwargs": {
                "type": "NestedDict",
                "required": false,
                "placeholder": "",
                "list": false,
                "show": true,
                "multiline": false,
                "value": {},
                "fileTypes": [],
                "file_path": "",
                "password": false,
                "name": "model_kwargs",
                "display_name": "Model Kwargs",
                "advanced": true,
                "dynamic": false,
                "info": ""
              },
              "model_name": {
                "type": "str",
                "required": false,
                "placeholder": "",
                "list": true,
                "show": true,
                "multiline": false,
                "value": "gpt-3.5-turbo-0125",
                "fileTypes": [],
                "file_path": "",
                "password": false,
                "options": [
                  "gpt-4-turbo-preview",
                  "gpt-4-0125-preview",
                  "gpt-4-1106-preview",
                  "gpt-4-vision-preview",
                  "gpt-3.5-turbo-0125",
                  "gpt-3.5-turbo-1106"
                ],
                "name": "model_name",
                "display_name": "Model Name",
                "advanced": false,
                "dynamic": false,
                "info": ""
              },
              "openai_api_base": {
                "type": "str",
                "required": false,
                "placeholder": "",
                "list": false,
                "show": true,
                "multiline": false,
                "fileTypes": [],
                "file_path": "",
                "password": false,
                "name": "openai_api_base",
                "display_name": "OpenAI API Base",
                "advanced": false,
                "dynamic": false,
                "info": "The base URL of the OpenAI API. Defaults to https://api.openai.com/v1.\n\nYou can change this to use other APIs like JinaChat, LocalAI and Prem."
              },
              "temperature": {
                "type": "float",
                "required": false,
                "placeholder": "",
                "list": false,
                "show": true,
                "multiline": false,
                "value": "0",
                "fileTypes": [],
                "file_path": "",
                "password": false,
                "name": "temperature",
                "display_name": "Temperature",
                "advanced": false,
                "dynamic": false,
                "info": "",
                "rangeSpec": {
                  "min": -1,
                  "max": 1,
                  "step": 0.1
                }
              },
              "_type": "CustomComponent"
            },
            "description": "`OpenAI` Chat large language models API.",
            "base_classes": [
              "BaseLanguageModel",
              "BaseLLM",
              "BaseLanguageModel"
            ],
            "display_name": "ChatOpenAI",
            "documentation": "",
            "custom_fields": {
              "max_tokens": null,
              "model_kwargs": null,
              "model_name": null,
              "openai_api_base": null,
              "openai_api_key": null,
              "temperature": null
            },
            "output_types": [
              "BaseLanguageModel",
              "BaseLLM"
            ],
            "field_formatters": {},
            "beta": true
          },
          "id": "ChatOpenAI-4KDsG",
          "description": "`OpenAI` Chat large language models API.",
          "display_name": "ChatOpenAI",
          "showNode": true
        },
        "selected": false,
        "positionAbsolute": {
          "x": 183.5017087242719,
          "y": 612.0786708769291
        },
        "dragging": false
      },
      {
        "width": 384,
        "height": 348,
        "id": "Data-N2Fec",
        "type": "genericNode",
        "position": {
          "x": -393.75030822163694,
          "y": 718.1309647467108
        },
        "data": {
          "type": "Data",
          "node": {
            "template": {
              "api_key": {
                "type": "str",
                "required": true,
                "placeholder": "",
                "list": false,
                "show": true,
                "multiline": false,
                "fileTypes": [],
                "file_path": "",
                "password": true,
                "name": "api_key",
                "advanced": false,
                "dynamic": false,
                "info": "",
                "title_case": true,
                "value": ""
              },
              "code": {
                "type": "code",
                "required": true,
                "placeholder": "",
                "list": false,
                "show": true,
                "multiline": true,
                "value": "from axiestudio import CustomComponent\nfrom langchain.schema import Document\n\n\nclass Component(CustomComponent):\n    display_name = \"OpenAI API Key\"\n\n    def build_config(self):\n        return {\"api_key\": {\"openai_api_key\": \"OpenAI API Key\", \"password\": True}}\n\n    def build(self, api_key: str) -> Document:\n        return api_key\n",
                "fileTypes": [],
                "file_path": "",
                "password": false,
                "name": "code",
                "advanced": false,
                "dynamic": true,
                "info": "",
                "title_case": true
              },
              "_type": "CustomComponent"
            },
            "base_classes": [
              "Document"
            ],
            "display_name": "OpenAI API Key",
            "documentation": "",
            "custom_fields": {
              "api_key": null
            },
            "output_types": [
              "Document"
            ],
            "field_formatters": {},
            "beta": true
          },
          "id": "Data-N2Fec",
          "display_name": "OpenAI API Key"
        },
        "selected": false,
        "dragging": false,
        "positionAbsolute": {
          "x": -393.75030822163694,
          "y": 718.1309647467108
        }
      },
      {
        "width": 384,
        "height": 750,
        "id": "Data-UqqRJ",
        "type": "genericNode",
        "position": {
          "x": 688.4995909115455,
          "y": 1390.9102331536226
        },
        "data": {
          "type": "Data",
          "node": {
            "template": {
              "embedding": {
                "type": "Embeddings",
                "required": false,
                "placeholder": "",
                "list": false,
                "show": true,
                "multiline": false,
                "fileTypes": [],
                "file_path": "",
                "password": false,
                "name": "embedding",
                "display_name": "Embedding",
                "advanced": false,
                "dynamic": false,
                "info": "",
                "title_case": true
              },
              "chroma_client_auth_credentials": {
                "type": "str",
                "required": true,
                "placeholder": "",
                "list": false,
                "show": true,
                "multiline": false,
                "fileTypes": [],
                "file_path": "",
                "password": true,
                "name": "chroma_client_auth_credentials",
                "display_name": "Chroma Token",
                "advanced": false,
                "dynamic": false,
                "info": "",
                "title_case": true,
                "value": ""
              },
              "chroma_server_host": {
                "type": "str",
                "required": false,
                "placeholder": "",
                "list": false,
                "show": true,
                "multiline": false,
                "fileTypes": [],
                "file_path": "",
                "password": false,
                "name": "chroma_server_host",
                "display_name": "Server Host",
                "advanced": false,
                "dynamic": false,
                "info": "",
                "title_case": true,
                "value": "vectordb.sandbox.sankhya.com.br"
              },
              "chroma_server_port": {
                "type": "int",
                "required": false,
                "placeholder": "",
                "list": false,
                "show": true,
                "multiline": false,
                "fileTypes": [],
                "file_path": "",
                "password": false,
                "name": "chroma_server_port",
                "display_name": "Server Port",
                "advanced": false,
                "dynamic": false,
                "info": "",
                "title_case": true,
                "value": "443"
              },
              "chroma_server_ssl_enabled": {
                "type": "bool",
                "required": true,
                "placeholder": "",
                "list": false,
                "show": true,
                "multiline": false,
                "value": true,
                "fileTypes": [],
                "file_path": "",
                "password": false,
                "name": "chroma_server_ssl_enabled",
                "display_name": "Server SSL Enabled",
                "advanced": false,
                "dynamic": false,
                "info": "",
                "title_case": true
              },
              "code": {
                "type": "code",
                "required": true,
                "placeholder": "",
                "list": false,
                "show": true,
                "multiline": true,
                "value": "from typing import List, Optional, Union\nfrom axiestudio import CustomComponent\n\nfrom langchain.vectorstores import Chroma\nfrom langchain.schema import Document\nfrom langchain.vectorstores.base import VectorStore\nfrom langchain.schema import BaseRetriever\nfrom langchain.embeddings.base import Embeddings\nimport chromadb\nfrom chromadb.config import Settings\n\nfrom axiestudio.field_typing import Data\n\n\nclass ChromaComponent(CustomComponent):\n    \"\"\"\n    A custom component for implementing a Vector Store using Chroma.\n    \"\"\"\n    \n    display_name = \"Chroma Vector Store\"\n    description = \"Retrierver semântico\"\n\n    def build_config(self):\n        \"\"\"\n        Builds the configuration for the component.\n\n        Returns:\n        - dict: A dictionary containing the configuration options for the component.\n        \"\"\"\n        return {\n            \"collection_name\": {\"display_name\": \"Collection Name\", \"value\": \"axiestudio\"},\n            \"persistence\": {\n                \"display_name\": \"Persistence\",\n                \"options\": [\"In-Memory\", \"Local Directory\", \"Container\"],\n                \"value\": \"In-Memory\",\n            },\n            \"persist_directory\": {\"display_name\": \"Persist Directory\", \"input_types\": [\"str\", \"Data\"]},\n            \"embedding\": {\"display_name\": \"Embedding\"},\n            \"chroma_server_host\": {\"display_name\": \"Server Host\"},\n            \"chroma_server_port\": {\"display_name\": \"Server Port\"},\n            \"chroma_server_grpc_port\": {\n                \"display_name\": \"Server gRPC Port\",\n                \"advanced\": True,\n            },\n            \"chroma_server_ssl_enabled\": {\n                \"display_name\": \"Server SSL Enabled\"\n            },\n            \"chroma_client_auth_credentials\": {\n                \"display_name\": \"Chroma Token\",\n                \"password\": True\n            }\n        }\n\n    def build(\n        self,\n        collection_name: str,\n        chroma_server_ssl_enabled: bool,\n        chroma_client_auth_credentials:str,\n        embedding: Optional[Embeddings] = None,\n        chroma_server_host: Optional[str] = None,\n        chroma_server_port: Optional[int] = None,\n    ) -> Union[VectorStore, Chroma, BaseRetriever]:\n        \n        settings=Settings(chroma_client_auth_provider=\"chromadb.auth.token.TokenAuthClientProvider\", \n                                                      chroma_client_auth_credentials=chroma_client_auth_credentials, \n                                                      chroma_client_auth_token_transport_header=\"X_CHROMA_TOKEN\"\n                                                     )\n                                                     \n        chroma_client = chromadb.HttpClient(\n            host=chroma_server_host, \n            port=chroma_server_port, \n            ssl=chroma_server_ssl_enabled, \n            settings=settings\n            )\n\n        return Chroma(client=chroma_client, embedding_function=embedding, collection_name=collection_name)",
                "fileTypes": [],
                "file_path": "",
                "password": false,
                "name": "code",
                "advanced": false,
                "dynamic": true,
                "info": "",
                "title_case": true
              },
              "collection_name": {
                "type": "str",
                "required": true,
                "placeholder": "",
                "list": false,
                "show": true,
                "multiline": false,
                "value": "ai-service-desk-gpt",
                "fileTypes": [],
                "file_path": "",
                "password": false,
                "name": "collection_name",
                "display_name": "Collection Name",
                "advanced": false,
                "dynamic": false,
                "info": "",
                "title_case": true
              },
              "_type": "CustomComponent"
            },
            "description": "Retrierver semântico",
            "base_classes": [
              "VectorStore",
              "Chroma",
              "VectorStore",
              "BaseRetriever"
            ],
            "display_name": "Chroma Vector Store",
            "documentation": "",
            "custom_fields": {
              "collection_name": null,
              "chroma_server_ssl_enabled": null,
              "chroma_client_auth_credentials": null,
              "embedding": null,
              "chroma_server_host": null,
              "chroma_server_port": null
            },
            "output_types": [
              "VectorStore",
              "Chroma",
              "BaseRetriever"
            ],
            "field_formatters": {},
            "beta": true
          },
          "id": "Data-UqqRJ",
          "description": "Retrierver semântico",
          "display_name": "Chroma Vector Store"
        },
        "selected": false,
        "positionAbsolute": {
          "x": 688.4995909115455,
          "y": 1390.9102331536226
        }
      }
    ],
    "edges": [
      {
        "source": "Data-yJux8",
        "target": "Data-TuWJV",
        "sourceHandle": "{œbaseClassesœ:[œEnsembleRetrieverœ,œBaseRetrieverœ],œdataTypeœ:œDataœ,œidœ:œData-yJux8œ}",
        "targetHandle": "{œfieldNameœ:œretrieverœ,œidœ:œData-TuWJVœ,œinputTypesœ:null,œtypeœ:œBaseRetrieverœ}",
        "id": "reactflow__edge-Data-yJux8{œbaseClassesœ:[œEnsembleRetrieverœ,œBaseRetrieverœ],œdataTypeœ:œDataœ,œidœ:œData-yJux8œ}-Data-TuWJV{œfieldNameœ:œretrieverœ,œidœ:œData-TuWJVœ,œinputTypesœ:null,œtypeœ:œBaseRetrieverœ}",
        "data": {
          "targetHandle": {
            "fieldName": "retriever",
            "id": "Data-TuWJV",
            "inputTypes": null,
            "type": "BaseRetriever"
          },
          "sourceHandle": {
            "baseClasses": [
              "EnsembleRetriever",
              "BaseRetriever"
            ],
            "dataType": "Data",
            "id": "Data-yJux8"
          }
        },
        "style": {
          "stroke": "#555"
        },
        "className": "stroke-gray-900  stroke-connection",
        "animated": false,
        "selected": false
      },
      {
        "source": "PromptTemplate-lMXPR",
        "target": "Data-TuWJV",
        "sourceHandle": "{œbaseClassesœ:[œStringPromptTemplateœ,œPromptTemplateœ,œBasePromptTemplateœ],œdataTypeœ:œPromptTemplateœ,œidœ:œPromptTemplate-lMXPRœ}",
        "targetHandle": "{œfieldNameœ:œdocument_promptœ,œidœ:œData-TuWJVœ,œinputTypesœ:null,œtypeœ:œPromptTemplateœ}",
        "id": "reactflow__edge-PromptTemplate-lMXPR{œbaseClassesœ:[œStringPromptTemplateœ,œPromptTemplateœ,œBasePromptTemplateœ],œdataTypeœ:œPromptTemplateœ,œidœ:œPromptTemplate-lMXPRœ}-Data-TuWJV{œfieldNameœ:œdocument_promptœ,œidœ:œData-TuWJVœ,œinputTypesœ:null,œtypeœ:œPromptTemplateœ}",
        "data": {
          "targetHandle": {
            "fieldName": "document_prompt",
            "id": "Data-TuWJV",
            "inputTypes": null,
            "type": "PromptTemplate"
          },
          "sourceHandle": {
            "baseClasses": [
              "StringPromptTemplate",
              "PromptTemplate",
              "BasePromptTemplate"
            ],
            "dataType": "PromptTemplate",
            "id": "PromptTemplate-lMXPR"
          }
        },
        "style": {
          "stroke": "#555"
        },
        "className": "stroke-gray-900  stroke-connection",
        "animated": false,
        "selected": false
      },
      {
        "source": "ConversationBufferWindowMemory-mO9jO",
        "target": "Data-TuWJV",
        "sourceHandle": "{œbaseClassesœ:[œBaseChatMemoryœ,œConversationBufferWindowMemoryœ,œBaseMemoryœ],œdataTypeœ:œConversationBufferWindowMemoryœ,œidœ:œConversationBufferWindowMemory-mO9jOœ}",
        "targetHandle": "{œfieldNameœ:œmemoryœ,œidœ:œData-TuWJVœ,œinputTypesœ:null,œtypeœ:œBaseMemoryœ}",
        "id": "reactflow__edge-ConversationBufferWindowMemory-mO9jO{œbaseClassesœ:[œBaseChatMemoryœ,œConversationBufferWindowMemoryœ,œBaseMemoryœ],œdataTypeœ:œConversationBufferWindowMemoryœ,œidœ:œConversationBufferWindowMemory-mO9jOœ}-Data-TuWJV{œfieldNameœ:œmemoryœ,œidœ:œData-TuWJVœ,œinputTypesœ:null,œtypeœ:œBaseMemoryœ}",
        "data": {
          "targetHandle": {
            "fieldName": "memory",
            "id": "Data-TuWJV",
            "inputTypes": null,
            "type": "BaseMemory"
          },
          "sourceHandle": {
            "baseClasses": [
              "BaseChatMemory",
              "ConversationBufferWindowMemory",
              "BaseMemory"
            ],
            "dataType": "ConversationBufferWindowMemory",
            "id": "ConversationBufferWindowMemory-mO9jO"
          }
        },
        "style": {
          "stroke": "#555"
        },
        "className": "stroke-gray-900  stroke-connection",
        "animated": false,
        "selected": false
      },
      {
        "source": "ChatOpenAI-4KDsG",
        "target": "Data-TuWJV",
        "sourceHandle": "{œbaseClassesœ:[œBaseLanguageModelœ,œBaseLLMœ,œBaseLanguageModelœ],œdataTypeœ:œChatOpenAIœ,œidœ:œChatOpenAI-4KDsGœ}",
        "targetHandle": "{œfieldNameœ:œrephrase_llmœ,œidœ:œData-TuWJVœ,œinputTypesœ:null,œtypeœ:œBaseLanguageModelœ}",
        "id": "reactflow__edge-ChatOpenAI-4KDsG{œbaseClassesœ:[œBaseLanguageModelœ,œBaseLLMœ,œBaseLanguageModelœ],œdataTypeœ:œChatOpenAIœ,œidœ:œChatOpenAI-4KDsGœ}-Data-TuWJV{œfieldNameœ:œrephrase_llmœ,œidœ:œData-TuWJVœ,œinputTypesœ:null,œtypeœ:œBaseLanguageModelœ}",
        "data": {
          "targetHandle": {
            "fieldName": "rephrase_llm",
            "id": "Data-TuWJV",
            "inputTypes": null,
            "type": "BaseLanguageModel"
          },
          "sourceHandle": {
            "baseClasses": [
              "BaseLanguageModel",
              "BaseLLM",
              "BaseLanguageModel"
            ],
            "dataType": "ChatOpenAI",
            "id": "ChatOpenAI-4KDsG"
          }
        },
        "style": {
          "stroke": "#555"
        },
        "className": "stroke-gray-900  stroke-connection",
        "animated": false,
        "selected": false
      },
      {
        "source": "Data-N2Fec",
        "target": "ChatOpenAI-J1DJj",
        "sourceHandle": "{œbaseClassesœ:[œDocumentœ],œdataTypeœ:œDataœ,œidœ:œData-N2Fecœ}",
        "targetHandle": "{œfieldNameœ:œopenai_api_keyœ,œidœ:œChatOpenAI-J1DJjœ,œinputTypesœ:null,œtypeœ:œDocumentœ}",
        "id": "reactflow__edge-Data-N2Fec{œbaseClassesœ:[œDocumentœ],œdataTypeœ:œDataœ,œidœ:œData-N2Fecœ}-ChatOpenAI-J1DJj{œfieldNameœ:œopenai_api_keyœ,œidœ:œChatOpenAI-J1DJjœ,œinputTypesœ:null,œtypeœ:œDocumentœ}",
        "data": {
          "targetHandle": {
            "fieldName": "openai_api_key",
            "id": "ChatOpenAI-J1DJj",
            "inputTypes": null,
            "type": "Document"
          },
          "sourceHandle": {
            "baseClasses": [
              "Document"
            ],
            "dataType": "Data",
            "id": "Data-N2Fec"
          }
        },
        "style": {
          "stroke": "#555"
        },
        "className": "stroke-gray-900  stroke-connection",
        "animated": false,
        "selected": false
      },
      {
        "source": "Data-N2Fec",
        "target": "ChatOpenAI-4KDsG",
        "sourceHandle": "{œbaseClassesœ:[œDocumentœ],œdataTypeœ:œDataœ,œidœ:œData-N2Fecœ}",
        "targetHandle": "{œfieldNameœ:œopenai_api_keyœ,œidœ:œChatOpenAI-4KDsGœ,œinputTypesœ:null,œtypeœ:œDocumentœ}",
        "id": "reactflow__edge-Data-N2Fec{œbaseClassesœ:[œDocumentœ],œdataTypeœ:œDataœ,œidœ:œData-N2Fecœ}-ChatOpenAI-4KDsG{œfieldNameœ:œopenai_api_keyœ,œidœ:œChatOpenAI-4KDsGœ,œinputTypesœ:null,œtypeœ:œDocumentœ}",
        "data": {
          "targetHandle": {
            "fieldName": "openai_api_key",
            "id": "ChatOpenAI-4KDsG",
            "inputTypes": null,
            "type": "Document"
          },
          "sourceHandle": {
            "baseClasses": [
              "Document"
            ],
            "dataType": "Data",
            "id": "Data-N2Fec"
          }
        },
        "style": {
          "stroke": "#555"
        },
        "className": "stroke-gray-900  stroke-connection",
        "animated": false,
        "selected": false
      },
      {
        "source": "OpenAIEmbeddings-S41SL",
        "target": "Data-UqqRJ",
        "sourceHandle": "{œbaseClassesœ:[œOpenAIEmbeddingsœ,œEmbeddingsœ,œCallableœ],œdataTypeœ:œOpenAIEmbeddingsœ,œidœ:œOpenAIEmbeddings-S41SLœ}",
        "targetHandle": "{œfieldNameœ:œembeddingœ,œidœ:œData-UqqRJœ,œinputTypesœ:null,œtypeœ:œEmbeddingsœ}",
        "id": "reactflow__edge-OpenAIEmbeddings-S41SL{œbaseClassesœ:[œOpenAIEmbeddingsœ,œEmbeddingsœ,œCallableœ],œdataTypeœ:œOpenAIEmbeddingsœ,œidœ:œOpenAIEmbeddings-S41SLœ}-Data-UqqRJ{œfieldNameœ:œembeddingœ,œidœ:œData-UqqRJœ,œinputTypesœ:null,œtypeœ:œEmbeddingsœ}",
        "data": {
          "targetHandle": {
            "fieldName": "embedding",
            "id": "Data-UqqRJ",
            "inputTypes": null,
            "type": "Embeddings"
          },
          "sourceHandle": {
            "baseClasses": [
              "OpenAIEmbeddings",
              "Embeddings",
              "Callable"
            ],
            "dataType": "OpenAIEmbeddings",
            "id": "OpenAIEmbeddings-S41SL"
          }
        },
        "style": {
          "stroke": "#555"
        },
        "className": "stroke-gray-900  stroke-connection",
        "animated": false,
        "selected": false
      },
      {
        "source": "Data-a859e",
        "target": "Data-yJux8",
        "sourceHandle": "{œbaseClassesœ:[œVectorStoreœ,œVectorStoreœ,œElasticsearchStoreœ,œBaseRetrieverœ],œdataTypeœ:œDataœ,œidœ:œData-a859eœ}",
        "targetHandle": "{œfieldNameœ:œlexic_vector_storeœ,œidœ:œData-yJux8œ,œinputTypesœ:null,œtypeœ:œVectorStoreœ}",
        "id": "reactflow__edge-Data-a859e{œbaseClassesœ:[œVectorStoreœ,œVectorStoreœ,œElasticsearchStoreœ,œBaseRetrieverœ],œdataTypeœ:œDataœ,œidœ:œData-a859eœ}-Data-yJux8{œfieldNameœ:œlexic_vector_storeœ,œidœ:œData-yJux8œ,œinputTypesœ:null,œtypeœ:œVectorStoreœ}",
        "data": {
          "targetHandle": {
            "fieldName": "lexic_vector_store",
            "id": "Data-yJux8",
            "inputTypes": null,
            "type": "VectorStore"
          },
          "sourceHandle": {
            "baseClasses": [
              "VectorStore",
              "VectorStore",
              "ElasticsearchStore",
              "BaseRetriever"
            ],
            "dataType": "Data",
            "id": "Data-a859e"
          }
        },
        "style": {
          "stroke": "#555"
        },
        "className": "stroke-gray-900  stroke-connection",
        "animated": false,
        "selected": false
      },
      {
        "source": "Data-UqqRJ",
        "target": "Data-yJux8",
        "sourceHandle": "{œbaseClassesœ:[œVectorStoreœ,œChromaœ,œVectorStoreœ,œBaseRetrieverœ],œdataTypeœ:œDataœ,œidœ:œData-UqqRJœ}",
        "targetHandle": "{œfieldNameœ:œsemantic_vector_storeœ,œidœ:œData-yJux8œ,œinputTypesœ:null,œtypeœ:œVectorStoreœ}",
        "id": "reactflow__edge-Data-UqqRJ{œbaseClassesœ:[œVectorStoreœ,œChromaœ,œVectorStoreœ,œBaseRetrieverœ],œdataTypeœ:œDataœ,œidœ:œData-UqqRJœ}-Data-yJux8{œfieldNameœ:œsemantic_vector_storeœ,œidœ:œData-yJux8œ,œinputTypesœ:null,œtypeœ:œVectorStoreœ}",
        "data": {
          "targetHandle": {
            "fieldName": "semantic_vector_store",
            "id": "Data-yJux8",
            "inputTypes": null,
            "type": "VectorStore"
          },
          "sourceHandle": {
            "baseClasses": [
              "VectorStore",
              "Chroma",
              "VectorStore",
              "BaseRetriever"
            ],
            "dataType": "Data",
            "id": "Data-UqqRJ"
          }
        },
        "style": {
          "stroke": "#555"
        },
        "className": "stroke-gray-900  stroke-connection",
        "animated": false,
        "selected": false
      },
      {
        "source": "Data-N2Fec",
        "sourceHandle": "{œbaseClassesœ:[œDocumentœ],œdataTypeœ:œDataœ,œidœ:œData-N2Fecœ}",
        "target": "OpenAIEmbeddings-S41SL",
        "targetHandle": "{œfieldNameœ:œopenai_api_keyœ,œidœ:œOpenAIEmbeddings-S41SLœ,œinputTypesœ:null,œtypeœ:œDocumentœ}",
        "data": {
          "targetHandle": {
            "fieldName": "openai_api_key",
            "id": "OpenAIEmbeddings-S41SL",
            "inputTypes": null,
            "type": "Document"
          },
          "sourceHandle": {
            "baseClasses": [
              "Document"
            ],
            "dataType": "Data",
            "id": "Data-N2Fec"
          }
        },
        "style": {
          "stroke": "#555"
        },
        "className": "stroke-gray-900  stroke-connection",
        "animated": false,
        "id": "reactflow__edge-Data-N2Fec{œbaseClassesœ:[œDocumentœ],œdataTypeœ:œDataœ,œidœ:œData-N2Fecœ}-OpenAIEmbeddings-S41SL{œfieldNameœ:œopenai_api_keyœ,œidœ:œOpenAIEmbeddings-S41SLœ,œinputTypesœ:null,œtypeœ:œDocumentœ}"
      },
      {
        "source": "ChatOpenAI-J1DJj",
        "sourceHandle": "{œbaseClassesœ:[œBaseLanguageModelœ,œBaseLLMœ,œBaseLanguageModelœ],œdataTypeœ:œChatOpenAIœ,œidœ:œChatOpenAI-J1DJjœ}",
        "target": "Data-TuWJV",
        "targetHandle": "{œfieldNameœ:œllmœ,œidœ:œData-TuWJVœ,œinputTypesœ:null,œtypeœ:œBaseLanguageModelœ}",
        "data": {
          "targetHandle": {
            "fieldName": "llm",
            "id": "Data-TuWJV",
            "inputTypes": null,
            "type": "BaseLanguageModel"
          },
          "sourceHandle": {
            "baseClasses": [
              "BaseLanguageModel",
              "BaseLLM",
              "BaseLanguageModel"
            ],
            "dataType": "ChatOpenAI",
            "id": "ChatOpenAI-J1DJj"
          }
        },
        "style": {
          "stroke": "#555"
        },
        "className": "stroke-gray-900  stroke-connection",
        "animated": false,
        "id": "reactflow__edge-ChatOpenAI-J1DJj{œbaseClassesœ:[œBaseLanguageModelœ,œBaseLLMœ,œBaseLanguageModelœ],œdataTypeœ:œChatOpenAIœ,œidœ:œChatOpenAI-J1DJjœ}-Data-TuWJV{œfieldNameœ:œllmœ,œidœ:œData-TuWJVœ,œinputTypesœ:null,œtypeœ:œBaseLanguageModelœ}"
      }
    ],
    "viewport": {
      "x": 334.4364037495927,
      "y": 23.17403253168709,
      "zoom": 0.5743491774985184
    }
  },
  "metadata": {
    "ChatOpenAI": {
      "count": 2
    },
    "Data": {
      "count": 5
    },
    "OpenAIEmbeddings": {
      "count": 1
    },
    "PromptTemplate": {
      "count": 1
    },
    "ConversationBufferWindowMemory": {
      "count": 1
    },
    "total": 10
  },
  "original": {
    "id": "11db727c-f3ba-40db-97f7-2d9daca38d44",
    "name": "Optimistic Planck",
    "description": "Uncover Business Opportunities with NLP.",
    "is_component": false,
    "liked_by_count": "0",
    "downloads_count": "0",
    "metadata": {
      "ChatOpenAI": {
        "count": 2
      },
      "Data": {
        "count": 5
      },
      "OpenAIEmbeddings": {
        "count": 1
      },
      "PromptTemplate": {
        "count": 1
      },
      "ConversationBufferWindowMemory": {
        "count": 1
      },
      "total": 10
    },
    "last_tested_version": "0.6.5",
    "private": true,
    "data": {
      "nodes": [
        {
          "width": 384,
          "height": 678,
          "id": "ChatOpenAI-J1DJj",
          "type": "genericNode",
          "position": {
            "x": 180.53417199682815,
            "y": -120.89634657977172
          },
          "data": {
            "type": "ChatOpenAI",
            "node": {
              "template": {
                "openai_api_key": {
                  "type": "Document",
                  "required": true,
                  "placeholder": "",
                  "list": false,
                  "show": true,
                  "multiline": false,
                  "fileTypes": [],
                  "file_path": "",
                  "password": false,
                  "name": "openai_api_key",
                  "display_name": "openai_api_key",
                  "advanced": false,
                  "dynamic": false,
                  "info": ""
                },
                "code": {
                  "type": "code",
                  "required": true,
                  "placeholder": "",
                  "list": false,
                  "show": true,
                  "multiline": true,
                  "value": "from typing import Optional, Union\n\nfrom langchain.llms import BaseLLM\nfrom langchain_community.chat_models.openai import ChatOpenAI\n\nfrom axiestudio import CustomComponent\nfrom axiestudio.field_typing import BaseLanguageModel, NestedDict\n\nfrom langchain.schema import Document\n\n\nclass ChatOpenAIComponent(CustomComponent):\n    display_name = \"ChatOpenAI\"\n    description = \"`OpenAI` Chat large language models API.\"\n\n    def build_config(self):\n        return {\n            \"max_tokens\": {\n                \"display_name\": \"Max Tokens\",\n                \"field_type\": \"int\",\n                \"advanced\": False,\n                \"required\": False,\n            },\n            \"model_kwargs\": {\n                \"display_name\": \"Model Kwargs\",\n                \"field_type\": \"NestedDict\",\n                \"advanced\": True,\n                \"required\": False,\n            },\n            \"model_name\": {\n                \"display_name\": \"Model Name\",\n                \"field_type\": \"str\",\n                \"advanced\": False,\n                \"required\": False,\n                \"options\": [\n                    \"gpt-4-turbo-preview\",\n                    \"gpt-4-0125-preview\",\n                    \"gpt-4-1106-preview\",\n                    \"gpt-4-vision-preview\",\n                    \"gpt-3.5-turbo-0125\",\n                    \"gpt-3.5-turbo-1106\",\n                ],\n            },\n            \"openai_api_base\": {\n                \"display_name\": \"OpenAI API Base\",\n                \"field_type\": \"str\",\n                \"advanced\": False,\n                \"required\": False,\n                \"info\": (\n                    \"The base URL of the OpenAI API. Defaults to https://api.openai.com/v1.\\n\\n\"\n                    \"You can change this to use other APIs like JinaChat, LocalAI and Prem.\"\n                ),\n            },\n            \"temperature\": {\n                \"display_name\": \"Temperature\",\n                \"field_type\": \"float\",\n                \"advanced\": False,\n                \"required\": False,\n                \"value\": 0.7,\n            },\n        }\n\n    def build(\n        self,\n        openai_api_key: Document= None,\n        max_tokens: Optional[int] = 256,\n        model_kwargs: NestedDict = {},\n        model_name: str = \"gpt-4-1106-preview\",\n        openai_api_base: Optional[str] = None,\n        temperature: float = 0.7,\n    ) -> Union[BaseLanguageModel, BaseLLM]:\n        if not openai_api_base:\n            openai_api_base = \"https://api.openai.com/v1\"\n        return ChatOpenAI(\n            max_tokens=max_tokens,\n            model_kwargs=model_kwargs,\n            model=model_name,\n            base_url=openai_api_base,\n            api_key=openai_api_key,\n            temperature=temperature,\n            streaming=True\n        )\n",
                  "fileTypes": [],
                  "file_path": "",
                  "password": false,
                  "name": "code",
                  "advanced": false,
                  "dynamic": true,
                  "info": ""
                },
                "max_tokens": {
                  "type": "int",
                  "required": false,
                  "placeholder": "",
                  "list": false,
                  "show": true,
                  "multiline": false,
                  "value": "512",
                  "fileTypes": [],
                  "file_path": "",
                  "password": false,
                  "name": "max_tokens",
                  "display_name": "Max Tokens",
                  "advanced": false,
                  "dynamic": false,
                  "info": ""
                },
                "model_kwargs": {
                  "type": "NestedDict",
                  "required": false,
                  "placeholder": "",
                  "list": false,
                  "show": true,
                  "multiline": false,
                  "value": {},
                  "fileTypes": [],
                  "file_path": "",
                  "password": false,
                  "name": "model_kwargs",
                  "display_name": "Model Kwargs",
                  "advanced": true,
                  "dynamic": false,
                  "info": ""
                },
                "model_name": {
                  "type": "str",
                  "required": false,
                  "placeholder": "",
                  "list": true,
                  "show": true,
                  "multiline": false,
                  "value": "gpt-4-1106-preview",
                  "fileTypes": [],
                  "file_path": "",
                  "password": false,
                  "options": [
                    "gpt-4-turbo-preview",
                    "gpt-4-0125-preview",
                    "gpt-4-1106-preview",
                    "gpt-4-vision-preview",
                    "gpt-3.5-turbo-0125",
                    "gpt-3.5-turbo-1106"
                  ],
                  "name": "model_name",
                  "display_name": "Model Name",
                  "advanced": false,
                  "dynamic": false,
                  "info": ""
                },
                "openai_api_base": {
                  "type": "str",
                  "required": false,
                  "placeholder": "",
                  "list": false,
                  "show": true,
                  "multiline": false,
                  "fileTypes": [],
                  "file_path": "",
                  "password": false,
                  "name": "openai_api_base",
                  "display_name": "OpenAI API Base",
                  "advanced": false,
                  "dynamic": false,
                  "info": "The base URL of the OpenAI API. Defaults to https://api.openai.com/v1.\n\nYou can change this to use other APIs like JinaChat, LocalAI and Prem."
                },
                "temperature": {
                  "type": "float",
                  "required": false,
                  "placeholder": "",
                  "list": false,
                  "show": true,
                  "multiline": false,
                  "value": "0",
                  "fileTypes": [],
                  "file_path": "",
                  "password": false,
                  "name": "temperature",
                  "display_name": "Temperature",
                  "advanced": false,
                  "dynamic": false,
                  "info": "",
                  "rangeSpec": {
                    "min": -1,
                    "max": 1,
                    "step": 0.1
                  }
                },
                "_type": "CustomComponent"
              },
              "description": "`OpenAI` Chat large language models API.",
              "base_classes": [
                "BaseLanguageModel",
                "BaseLLM",
                "BaseLanguageModel"
              ],
              "display_name": "ChatOpenAI",
              "documentation": "",
              "custom_fields": {
                "max_tokens": null,
                "model_kwargs": null,
                "model_name": null,
                "openai_api_base": null,
                "openai_api_key": null,
                "temperature": null
              },
              "output_types": [
                "BaseLanguageModel",
                "BaseLLM"
              ],
              "field_formatters": {},
              "beta": true
            },
            "id": "ChatOpenAI-J1DJj",
            "description": "`OpenAI` Chat large language models API.",
            "display_name": "ChatOpenAI",
            "showNode": true
          },
          "selected": false,
          "positionAbsolute": {
            "x": 180.53417199682815,
            "y": -120.89634657977172
          },
          "dragging": false
        },
        {
          "width": 384,
          "height": 874,
          "id": "Data-a859e",
          "type": "genericNode",
          "position": {
            "x": 1168.0364913339606,
            "y": 1383.808902898777
          },
          "data": {
            "type": "Data",
            "node": {
              "template": {
                "api_key": {
                  "type": "str",
                  "required": true,
                  "placeholder": "",
                  "list": false,
                  "show": true,
                  "multiline": false,
                  "fileTypes": [],
                  "file_path": "",
                  "password": true,
                  "name": "api_key",
                  "display_name": "API Key",
                  "advanced": false,
                  "dynamic": false,
                  "info": "",
                  "title_case": true,
                  "value": ""
                },
                "code": {
                  "type": "code",
                  "required": true,
                  "placeholder": "",
                  "list": false,
                  "show": true,
                  "multiline": true,
                  "value": "from typing import Optional, Union\r\nfrom langchain.schema import BaseRetriever\r\nfrom langchain_community.vectorstores import VectorStore\r\nfrom axiestudio import CustomComponent\r\nfrom elasticsearch import Elasticsearch\r\nfrom langchain_elasticsearch import ElasticsearchStore\r\n\r\nclass LexicComponent(CustomComponent):\r\n    display_name = \"Elastic Vector Store\"\r\n    description = \"Retrierver léxico\"\r\n\r\n    def build_config(self):\r\n        return {\r\n            \"api_key\": {\"display_name\": \"API Key\", \"password\": True},\r\n            \"host\": {\"display_name\": \"Host\"},\r\n            \"port\": {\"display_name\": \"Port\"},\r\n            \"query_field\": {\"display_name\": \"Text Field\"},\r\n        }\r\n\r\n    def build(\r\n        self,\r\n        query_field:str,\r\n        index_name:str,\r\n        api_key: str,\r\n        host: str,\r\n        port: int = 9200,\r\n        timeout: Optional[int] = 10,\r\n        verify_certs:Optional[bool]=True\r\n    ) -> Union[VectorStore, ElasticsearchStore, BaseRetriever]:\r\n        \r\n        def custom_query(query: str, *args, **kwargs):\r\n            new_query_body = {\r\n                    \"_source\": {\r\n                      \"excludes\": [\"embedding\", \"text\"]\r\n                    },\r\n        \r\n                    \"query\": {\r\n                          \"multi_match\": {\r\n                              \"query\": query,\r\n                              \"fields\":[\"metadata.title^1.5\",\"content^1.2\", \"content.original\"],\r\n                              \"fuzziness\":\"AUTO\"\r\n                              }\r\n                          }\r\n                }\r\n            return new_query_body\r\n        \r\n        strategy=ElasticsearchStore.ApproxRetrievalStrategy(hybrid=True)\r\n        strategy.query=custom_query\r\n\r\n        client = Elasticsearch(\r\n            hosts=f'{host}:{port}', \r\n            api_key=api_key,\r\n            verify_certs=verify_certs,\r\n            timeout=timeout,\r\n            max_retries = 3\r\n            )\r\n        vs = ElasticsearchStore(\r\n                es_connection=client, \r\n                index_name = index_name,\r\n                query_field = query_field,\r\n                strategy=strategy\r\n                \r\n            )\r\n        return vs\r\n",
                  "fileTypes": [],
                  "file_path": "",
                  "password": false,
                  "name": "code",
                  "advanced": false,
                  "dynamic": true,
                  "info": "",
                  "title_case": true
                },
                "host": {
                  "type": "str",
                  "required": true,
                  "placeholder": "",
                  "list": false,
                  "show": true,
                  "multiline": false,
                  "fileTypes": [],
                  "file_path": "",
                  "password": false,
                  "name": "host",
                  "display_name": "Host",
                  "advanced": false,
                  "dynamic": false,
                  "info": "",
                  "title_case": true,
                  "value": "https://elastic-apm.devops.sankhya.com.br"
                },
                "index_name": {
                  "type": "str",
                  "required": true,
                  "placeholder": "",
                  "list": false,
                  "show": true,
                  "multiline": false,
                  "fileTypes": [],
                  "file_path": "",
                  "password": false,
                  "name": "index_name",
                  "advanced": false,
                  "dynamic": false,
                  "info": "",
                  "title_case": true,
                  "value": "ai-service-desk-gpt"
                },
                "port": {
                  "type": "int",
                  "required": true,
                  "placeholder": "",
                  "list": false,
                  "show": true,
                  "multiline": false,
                  "value": "443",
                  "fileTypes": [],
                  "file_path": "",
                  "password": false,
                  "name": "port",
                  "display_name": "Port",
                  "advanced": false,
                  "dynamic": false,
                  "info": "",
                  "title_case": true
                },
                "query_field": {
                  "type": "str",
                  "required": true,
                  "placeholder": "",
                  "list": false,
                  "show": true,
                  "multiline": false,
                  "fileTypes": [],
                  "file_path": "",
                  "password": false,
                  "name": "query_field",
                  "display_name": "Text Field",
                  "advanced": false,
                  "dynamic": false,
                  "info": "",
                  "title_case": true,
                  "value": "content"
                },
                "timeout": {
                  "type": "int",
                  "required": false,
                  "placeholder": "",
                  "list": false,
                  "show": true,
                  "multiline": false,
                  "value": "30",
                  "fileTypes": [],
                  "file_path": "",
                  "password": false,
                  "name": "timeout",
                  "advanced": false,
                  "dynamic": false,
                  "info": "",
                  "title_case": true
                },
                "verify_certs": {
                  "type": "bool",
                  "required": false,
                  "placeholder": "",
                  "list": false,
                  "show": true,
                  "multiline": false,
                  "value": true,
                  "fileTypes": [],
                  "file_path": "",
                  "password": false,
                  "name": "verify_certs",
                  "advanced": false,
                  "dynamic": false,
                  "info": "",
                  "title_case": true
                },
                "_type": "CustomComponent"
              },
              "description": "Retrierver léxico",
              "base_classes": [
                "VectorStore",
                "VectorStore",
                "ElasticsearchStore",
                "BaseRetriever"
              ],
              "display_name": "Elastic Lexic Search",
              "documentation": "",
              "custom_fields": {
                "query_field": null,
                "index_name": null,
                "api_key": null,
                "host": null,
                "port": null,
                "timeout": null,
                "verify_certs": null
              },
              "output_types": [
                "VectorStore",
                "ElasticsearchStore",
                "BaseRetriever"
              ],
              "field_formatters": {},
              "beta": true
            },
            "id": "Data-a859e",
            "description": "Retrierver léxico",
            "display_name": "Elastic Lexic Search"
          },
          "selected": false,
          "positionAbsolute": {
            "x": 1168.0364913339606,
            "y": 1383.808902898777
          }
        },
        {
          "width": 384,
          "height": 668,
          "id": "OpenAIEmbeddings-S41SL",
          "type": "genericNode",
          "position": {
            "x": 191.43025613974737,
            "y": 1387.6963869996252
          },
          "data": {
            "type": "OpenAIEmbeddings",
            "node": {
              "template": {
                "openai_api_key": {
                  "type": "Document",
                  "required": true,
                  "placeholder": "",
                  "list": false,
                  "show": true,
                  "multiline": false,
                  "fileTypes": [],
                  "file_path": "",
                  "password": false,
                  "name": "openai_api_key",
                  "display_name": "openai_api_key",
                  "advanced": false,
                  "dynamic": false,
                  "info": ""
                },
                "allowed_special": {
                  "type": "str",
                  "required": true,
                  "placeholder": "",
                  "list": true,
                  "show": true,
                  "multiline": false,
                  "value": [],
                  "fileTypes": [],
                  "file_path": "",
                  "password": false,
                  "name": "allowed_special",
                  "display_name": "Allowed Special",
                  "advanced": true,
                  "dynamic": false,
                  "info": ""
                },
                "chunk_size": {
                  "type": "int",
                  "required": true,
                  "placeholder": "",
                  "list": false,
                  "show": true,
                  "multiline": false,
                  "value": 1000,
                  "fileTypes": [],
                  "file_path": "",
                  "password": false,
                  "name": "chunk_size",
                  "display_name": "Chunk Size",
                  "advanced": true,
                  "dynamic": false,
                  "info": ""
                },
                "client": {
                  "type": "Any",
                  "required": false,
                  "placeholder": "",
                  "list": false,
                  "show": true,
                  "multiline": false,
                  "fileTypes": [],
                  "file_path": "",
                  "password": false,
                  "name": "client",
                  "display_name": "Client",
                  "advanced": true,
                  "dynamic": false,
                  "info": ""
                },
                "code": {
                  "type": "code",
                  "required": true,
                  "placeholder": "",
                  "list": false,
                  "show": true,
                  "multiline": true,
                  "value": "from typing import Any, Callable, Dict, List, Optional, Union\n\nfrom langchain_community.embeddings.openai import OpenAIEmbeddings\nfrom axiestudio import CustomComponent\nfrom axiestudio.field_typing import NestedDict\nfrom pydantic.v1.types import SecretStr\n\n\nclass OpenAIEmbeddingsComponent(CustomComponent):\n    display_name = \"OpenAIEmbeddings\"\n    description = \"OpenAI embedding models\"\n\n    def build_config(self):\n        return {\n            \"allowed_special\": {\n                \"display_name\": \"Allowed Special\",\n                \"advanced\": True,\n                \"field_type\": \"str\",\n                \"is_list\": True,\n            },\n            \"default_headers\": {\n                \"display_name\": \"Default Headers\",\n                \"advanced\": True,\n                \"field_type\": \"dict\",\n            },\n            \"default_query\": {\n                \"display_name\": \"Default Query\",\n                \"advanced\": True,\n                \"field_type\": \"NestedDict\",\n            },\n            \"disallowed_special\": {\n                \"display_name\": \"Disallowed Special\",\n                \"advanced\": True,\n                \"field_type\": \"str\",\n                \"is_list\": True,\n            },\n            \"chunk_size\": {\"display_name\": \"Chunk Size\", \"advanced\": True},\n            \"client\": {\"display_name\": \"Client\", \"advanced\": True},\n            \"deployment\": {\"display_name\": \"Deployment\", \"advanced\": True},\n            \"embedding_ctx_length\": {\n                \"display_name\": \"Embedding Context Length\",\n                \"advanced\": True,\n            },\n            \"max_retries\": {\"display_name\": \"Max Retries\"},\n            \"model\": {\n                \"display_name\": \"Model\",\n                \"advanced\": False,\n                \"options\": [\"text-embedding-3-small\", \"text-embedding-3-large\", \"text-embedding-ada-002\"],\n            },\n            \"model_kwargs\": {\"display_name\": \"Model Kwargs\", \"advanced\": True},\n            \"openai_api_base\": {\"display_name\": \"OpenAI API Base\", \"password\": True, \"advanced\": True},\n            \"openai_api_type\": {\"display_name\": \"OpenAI API Type\", \"advanced\": True, \"password\": True},\n            \"openai_api_version\": {\n                \"display_name\": \"OpenAI API Version\",\n                \"advanced\": True,\n            },\n            \"openai_organization\": {\n                \"display_name\": \"OpenAI Organization\",\n                \"advanced\": True,\n            },\n            \"openai_proxy\": {\"display_name\": \"OpenAI Proxy\", \"advanced\": True},\n            \"request_timeout\": {\"display_name\": \"Request Timeout\", \"advanced\": True},\n            \"show_progress_bar\": {\n                \"display_name\": \"Show Progress Bar\",\n                \"advanced\": True,\n            },\n            \"skip_empty\": {\"display_name\": \"Skip Empty\", \"advanced\": True},\n            \"tiktoken_model_name\": {\"display_name\": \"TikToken Model Name\"},\n            \"tikToken_enable\": {\"display_name\": \"TikToken Enable\", \"advanced\": True},\n        }\n\n    def build(\n        self,\n        default_headers: Optional[Dict[str, str]] = None,\n        default_query: Optional[NestedDict] = {},\n        allowed_special: List[str] = [],\n        disallowed_special: List[str] = [\"all\"],\n        chunk_size: int = 1000,\n        client: Optional[Any] = None,\n        deployment: str = \"text-embedding-3-small\",\n        embedding_ctx_length: int = 8191,\n        max_retries: int = 6,\n        model: str = \"text-embedding-3-small\",\n        model_kwargs: NestedDict = {},\n        openai_api_base: Optional[str] = None,\n        openai_api_key: Document = None,\n        openai_api_type: Optional[str] = None,\n        openai_api_version: Optional[str] = None,\n        openai_organization: Optional[str] = None,\n        openai_proxy: Optional[str] = None,\n        request_timeout: Optional[float] = None,\n        show_progress_bar: bool = False,\n        skip_empty: bool = False,\n        tiktoken_enable: bool = True,\n        tiktoken_model_name: Optional[str] = None,\n    ) -> Union[OpenAIEmbeddings, Callable]:\n        # This is to avoid errors with Vector Stores (e.g Chroma)\n        if disallowed_special == [\"all\"]:\n            disallowed_special = \"all\"  # type: ignore\n\n        api_key = SecretStr(openai_api_key) if openai_api_key else None\n\n        return OpenAIEmbeddings(\n            tiktoken_enabled=tiktoken_enable,\n            default_headers=default_headers,\n            default_query=default_query,\n            allowed_special=set(allowed_special),\n            disallowed_special=\"all\",\n            chunk_size=chunk_size,\n            client=client,\n            deployment=deployment,\n            embedding_ctx_length=embedding_ctx_length,\n            max_retries=max_retries,\n            model=model,\n            model_kwargs=model_kwargs,\n            base_url=openai_api_base,\n            api_key=openai_api_key,\n            openai_api_type=openai_api_type,\n            api_version=openai_api_version,\n            organization=openai_organization,\n            openai_proxy=openai_proxy,\n            timeout=request_timeout,\n            show_progress_bar=show_progress_bar,\n            skip_empty=skip_empty,\n            tiktoken_model_name=tiktoken_model_name,\n        )\n",
                  "fileTypes": [],
                  "file_path": "",
                  "password": false,
                  "name": "code",
                  "advanced": false,
                  "dynamic": true,
                  "info": ""
                },
                "default_headers": {
                  "type": "dict",
                  "required": false,
                  "placeholder": "",
                  "list": false,
                  "show": true,
                  "multiline": false,
                  "fileTypes": [],
                  "file_path": "",
                  "password": false,
                  "name": "default_headers",
                  "display_name": "Default Headers",
                  "advanced": true,
                  "dynamic": false,
                  "info": ""
                },
                "default_query": {
                  "type": "NestedDict",
                  "required": false,
                  "placeholder": "",
                  "list": false,
                  "show": true,
                  "multiline": false,
                  "value": {},
                  "fileTypes": [],
                  "file_path": "",
                  "password": false,
                  "name": "default_query",
                  "display_name": "Default Query",
                  "advanced": true,
                  "dynamic": false,
                  "info": ""
                },
                "deployment": {
                  "type": "str",
                  "required": true,
                  "placeholder": "",
                  "list": false,
                  "show": true,
                  "multiline": false,
                  "value": "text-embedding-3-small",
                  "fileTypes": [],
                  "file_path": "",
                  "password": false,
                  "name": "deployment",
                  "display_name": "Deployment",
                  "advanced": true,
                  "dynamic": false,
                  "info": ""
                },
                "disallowed_special": {
                  "type": "str",
                  "required": true,
                  "placeholder": "",
                  "list": true,
                  "show": true,
                  "multiline": false,
                  "value": [
                    "all"
                  ],
                  "fileTypes": [],
                  "file_path": "",
                  "password": false,
                  "name": "disallowed_special",
                  "display_name": "Disallowed Special",
                  "advanced": true,
                  "dynamic": false,
                  "info": ""
                },
                "embedding_ctx_length": {
                  "type": "int",
                  "required": true,
                  "placeholder": "",
                  "list": false,
                  "show": true,
                  "multiline": false,
                  "value": 8191,
                  "fileTypes": [],
                  "file_path": "",
                  "password": false,
                  "name": "embedding_ctx_length",
                  "display_name": "Embedding Context Length",
                  "advanced": true,
                  "dynamic": false,
                  "info": ""
                },
                "max_retries": {
                  "type": "int",
                  "required": true,
                  "placeholder": "",
                  "list": false,
                  "show": true,
                  "multiline": false,
                  "value": "3",
                  "fileTypes": [],
                  "file_path": "",
                  "password": false,
                  "name": "max_retries",
                  "display_name": "Max Retries",
                  "advanced": false,
                  "dynamic": false,
                  "info": ""
                },
                "model": {
                  "type": "str",
                  "required": true,
                  "placeholder": "",
                  "list": true,
                  "show": true,
                  "multiline": false,
                  "value": "text-embedding-ada-002",
                  "fileTypes": [],
                  "file_path": "",
                  "password": false,
                  "options": [
                    "text-embedding-3-small",
                    "text-embedding-3-large",
                    "text-embedding-ada-002"
                  ],
                  "name": "model",
                  "display_name": "Model",
                  "advanced": false,
                  "dynamic": false,
                  "info": ""
                },
                "model_kwargs": {
                  "type": "NestedDict",
                  "required": true,
                  "placeholder": "",
                  "list": false,
                  "show": true,
                  "multiline": false,
                  "value": {},
                  "fileTypes": [],
                  "file_path": "",
                  "password": false,
                  "name": "model_kwargs",
                  "display_name": "Model Kwargs",
                  "advanced": true,
                  "dynamic": false,
                  "info": ""
                },
                "openai_api_base": {
                  "type": "str",
                  "required": false,
                  "placeholder": "",
                  "list": false,
                  "show": true,
                  "multiline": false,
                  "fileTypes": [],
                  "file_path": "",
                  "password": true,
                  "name": "openai_api_base",
                  "display_name": "OpenAI API Base",
                  "advanced": true,
                  "dynamic": false,
                  "info": "",
                  "value": ""
                },
                "openai_api_type": {
                  "type": "str",
                  "required": false,
                  "placeholder": "",
                  "list": false,
                  "show": true,
                  "multiline": false,
                  "fileTypes": [],
                  "file_path": "",
                  "password": true,
                  "name": "openai_api_type",
                  "display_name": "OpenAI API Type",
                  "advanced": true,
                  "dynamic": false,
                  "info": "",
                  "value": ""
                },
                "openai_api_version": {
                  "type": "str",
                  "required": false,
                  "placeholder": "",
                  "list": false,
                  "show": true,
                  "multiline": false,
                  "fileTypes": [],
                  "file_path": "",
                  "password": false,
                  "name": "openai_api_version",
                  "display_name": "OpenAI API Version",
                  "advanced": true,
                  "dynamic": false,
                  "info": ""
                },
                "openai_organization": {
                  "type": "str",
                  "required": false,
                  "placeholder": "",
                  "list": false,
                  "show": true,
                  "multiline": false,
                  "fileTypes": [],
                  "file_path": "",
                  "password": false,
                  "name": "openai_organization",
                  "display_name": "OpenAI Organization",
                  "advanced": true,
                  "dynamic": false,
                  "info": ""
                },
                "openai_proxy": {
                  "type": "str",
                  "required": false,
                  "placeholder": "",
                  "list": false,
                  "show": true,
                  "multiline": false,
                  "fileTypes": [],
                  "file_path": "",
                  "password": false,
                  "name": "openai_proxy",
                  "display_name": "OpenAI Proxy",
                  "advanced": true,
                  "dynamic": false,
                  "info": ""
                },
                "request_timeout": {
                  "type": "float",
                  "required": false,
                  "placeholder": "",
                  "list": false,
                  "show": true,
                  "multiline": false,
                  "fileTypes": [],
                  "file_path": "",
                  "password": false,
                  "name": "request_timeout",
                  "display_name": "Request Timeout",
                  "advanced": true,
                  "dynamic": false,
                  "info": "",
                  "rangeSpec": {
                    "min": -1,
                    "max": 1,
                    "step": 0.1
                  }
                },
                "show_progress_bar": {
                  "type": "bool",
                  "required": true,
                  "placeholder": "",
                  "list": false,
                  "show": true,
                  "multiline": false,
                  "value": false,
                  "fileTypes": [],
                  "file_path": "",
                  "password": false,
                  "name": "show_progress_bar",
                  "display_name": "Show Progress Bar",
                  "advanced": true,
                  "dynamic": false,
                  "info": ""
                },
                "skip_empty": {
                  "type": "bool",
                  "required": true,
                  "placeholder": "",
                  "list": false,
                  "show": true,
                  "multiline": false,
                  "value": false,
                  "fileTypes": [],
                  "file_path": "",
                  "password": false,
                  "name": "skip_empty",
                  "display_name": "Skip Empty",
                  "advanced": true,
                  "dynamic": false,
                  "info": ""
                },
                "tiktoken_enable": {
                  "type": "bool",
                  "required": true,
                  "placeholder": "",
                  "list": false,
                  "show": true,
                  "multiline": false,
                  "value": true,
                  "fileTypes": [],
                  "file_path": "",
                  "password": false,
                  "name": "tiktoken_enable",
                  "display_name": "tiktoken_enable",
                  "advanced": false,
                  "dynamic": false,
                  "info": ""
                },
                "tiktoken_model_name": {
                  "type": "str",
                  "required": false,
                  "placeholder": "",
                  "list": false,
                  "show": true,
                  "multiline": false,
                  "fileTypes": [],
                  "file_path": "",
                  "password": false,
                  "name": "tiktoken_model_name",
                  "display_name": "TikToken Model Name",
                  "advanced": false,
                  "dynamic": false,
                  "info": ""
                },
                "_type": "CustomComponent"
              },
              "description": "OpenAI embedding models",
              "base_classes": [
                "OpenAIEmbeddings",
                "Embeddings",
                "Callable"
              ],
              "display_name": "OpenAIEmbeddings",
              "documentation": "",
              "custom_fields": {
                "allowed_special": null,
                "chunk_size": null,
                "client": null,
                "default_headers": null,
                "default_query": null,
                "deployment": null,
                "disallowed_special": null,
                "embedding_ctx_length": null,
                "max_retries": null,
                "model": null,
                "model_kwargs": null,
                "openai_api_base": null,
                "openai_api_key": null,
                "openai_api_type": null,
                "openai_api_version": null,
                "openai_organization": null,
                "openai_proxy": null,
                "request_timeout": null,
                "show_progress_bar": null,
                "skip_empty": null,
                "tiktoken_enable": null,
                "tiktoken_model_name": null
              },
              "output_types": [
                "OpenAIEmbeddings",
                "Callable"
              ],
              "field_formatters": {},
              "beta": true
            },
            "id": "OpenAIEmbeddings-S41SL",
            "description": "OpenAI embedding models",
            "display_name": "OpenAIEmbeddings"
          },
          "selected": false,
          "dragging": false,
          "positionAbsolute": {
            "x": 191.43025613974737,
            "y": 1387.6963869996252
          }
        },
        {
          "width": 384,
          "height": 443,
          "id": "Data-yJux8",
          "type": "genericNode",
          "position": {
            "x": 1640.8771027501032,
            "y": 1385.3581852382488
          },
          "data": {
            "type": "Data",
            "node": {
              "template": {
                "lexic_vector_store": {
                  "type": "VectorStore",
                  "required": true,
                  "placeholder": "",
                  "list": false,
                  "show": true,
                  "multiline": false,
                  "fileTypes": [],
                  "file_path": "",
                  "password": false,
                  "name": "lexic_vector_store",
                  "advanced": false,
                  "dynamic": false,
                  "info": "",
                  "title_case": true
                },
                "semantic_vector_store": {
                  "type": "VectorStore",
                  "required": true,
                  "placeholder": "",
                  "list": false,
                  "show": true,
                  "multiline": false,
                  "fileTypes": [],
                  "file_path": "",
                  "password": false,
                  "name": "semantic_vector_store",
                  "advanced": false,
                  "dynamic": false,
                  "info": "",
                  "title_case": true
                },
                "code": {
                  "type": "code",
                  "required": true,
                  "placeholder": "",
                  "list": false,
                  "show": true,
                  "multiline": true,
                  "value": "from axiestudio import CustomComponent\r\nfrom axiestudio.field_typing import VectorStore, Chain\r\nfrom langchain.retrievers import EnsembleRetriever\r\n\r\n\r\nclass Component(CustomComponent):\r\n    documentation: str = \"http://docs.axiestudio.org/components/custom\"\r\n    display_name = \"Ensemble Retriever\"\r\n\r\n    def build(self, semantic_vector_store: VectorStore, lexic_vector_store: VectorStore, k_refs: int=3) -> EnsembleRetriever:\r\n        \r\n        semantic_store_retriever = semantic_vector_store.as_retriever(search_kwargs={\"k\": k_refs})\r\n        lexic_store_retriever = lexic_vector_store.as_retriever(search_kwargs={\"k\": k_refs})\r\n        \r\n        ensemble_retriever = EnsembleRetriever(retrievers = [semantic_store_retriever, lexic_store_retriever], weights=[0.5, 0.5],\r\n)\r\n\r\n        return ensemble_retriever",
                  "fileTypes": [],
                  "file_path": "",
                  "password": false,
                  "name": "code",
                  "advanced": false,
                  "dynamic": true,
                  "info": "",
                  "title_case": true
                },
                "k_refs": {
                  "type": "int",
                  "required": true,
                  "placeholder": "",
                  "list": false,
                  "show": true,
                  "multiline": false,
                  "value": "1",
                  "fileTypes": [],
                  "file_path": "",
                  "password": false,
                  "name": "k_refs",
                  "advanced": false,
                  "dynamic": false,
                  "info": "",
                  "title_case": true
                },
                "_type": "CustomComponent"
              },
              "base_classes": [
                "EnsembleRetriever",
                "BaseRetriever"
              ],
              "display_name": "Ensemble Retriever",
              "documentation": "http://docs.axiestudio.org/components/custom",
              "custom_fields": {
                "semantic_vector_store": null,
                "lexic_vector_store": null,
                "k_refs": null
              },
              "output_types": [
                "EnsembleRetriever"
              ],
              "field_formatters": {},
              "beta": true
            },
            "id": "Data-yJux8",
            "display_name": "Ensemble Retriever"
          },
          "selected": false,
          "positionAbsolute": {
            "x": 1640.8771027501032,
            "y": 1385.3581852382488
          }
        },
        {
          "width": 384,
          "height": 564,
          "id": "PromptTemplate-lMXPR",
          "type": "genericNode",
          "position": {
            "x": 701.9387271148743,
            "y": 641.2705676994295
          },
          "data": {
            "type": "PromptTemplate",
            "node": {
              "template": {
                "output_parser": {
                  "type": "BaseOutputParser",
                  "required": false,
                  "placeholder": "",
                  "list": false,
                  "show": false,
                  "multiline": false,
                  "fileTypes": [],
                  "password": false,
                  "name": "output_parser",
                  "advanced": false,
                  "dynamic": true,
                  "info": "",
                  "title_case": true
                },
                "input_types": {
                  "type": "dict",
                  "required": false,
                  "placeholder": "",
                  "list": false,
                  "show": false,
                  "multiline": false,
                  "fileTypes": [],
                  "password": false,
                  "name": "input_types",
                  "advanced": false,
                  "dynamic": true,
                  "info": "",
                  "title_case": true
                },
                "input_variables": {
                  "type": "str",
                  "required": true,
                  "placeholder": "",
                  "list": true,
                  "show": false,
                  "multiline": false,
                  "fileTypes": [],
                  "password": false,
                  "name": "input_variables",
                  "advanced": false,
                  "dynamic": true,
                  "info": "",
                  "title_case": true,
                  "value": [
                    "chat_history",
                    "context",
                    "question"
                  ]
                },
                "metadata": {
                  "type": "dict",
                  "required": false,
                  "placeholder": "",
                  "list": false,
                  "show": false,
                  "multiline": false,
                  "fileTypes": [],
                  "password": false,
                  "name": "metadata",
                  "advanced": false,
                  "dynamic": true,
                  "info": "",
                  "title_case": true
                },
                "name": {
                  "type": "str",
                  "required": false,
                  "placeholder": "",
                  "list": false,
                  "show": false,
                  "multiline": false,
                  "fileTypes": [],
                  "password": false,
                  "name": "name",
                  "advanced": false,
                  "dynamic": true,
                  "info": "",
                  "title_case": true
                },
                "partial_variables": {
                  "type": "dict",
                  "required": false,
                  "placeholder": "",
                  "list": false,
                  "show": false,
                  "multiline": false,
                  "fileTypes": [],
                  "password": false,
                  "name": "partial_variables",
                  "advanced": false,
                  "dynamic": true,
                  "info": "",
                  "title_case": true
                },
                "tags": {
                  "type": "str",
                  "required": false,
                  "placeholder": "",
                  "list": true,
                  "show": false,
                  "multiline": false,
                  "fileTypes": [],
                  "password": false,
                  "name": "tags",
                  "advanced": false,
                  "dynamic": true,
                  "info": "",
                  "title_case": true
                },
                "template": {
                  "type": "prompt",
                  "required": true,
                  "placeholder": "",
                  "list": false,
                  "show": true,
                  "multiline": true,
                  "fileTypes": [],
                  "password": false,
                  "name": "template",
                  "advanced": false,
                  "dynamic": true,
                  "info": "",
                  "title_case": true,
                  "value": "Always respond in Portuguese.\nAlways end the response with more than one source documentsi f available: Reference: (URL + Title)\nUnderstand the messages as questions about the subject. \nProvide didactic objective responses to these questions. \nIf necessary, use a step-by-step approach.\nAnonymize sensitive data, such as addresses, emails, CPFs, and passwords. \nYou are responding to questions about the Sankhya ecosystem.\nIf you come across keywords out of context, understand that they may be specific terms within the ecosystem.\nIf the keyword is a document identifier, ticket, or service order, provide a brief summary of the content.\nLimit yourself to the provided context. If you cannot find the answer within it, apologize.\nThe content that addresses the question may be distributed (or not) across one or more context passages.\n\n----Conversation History----\n{chat_history}\n----End History----\n\n----Context----\n{context}\n----End Context----\n\nUser Input:\n\n{question}"
                },
                "template_format": {
                  "type": "str",
                  "required": false,
                  "placeholder": "",
                  "list": false,
                  "show": false,
                  "multiline": false,
                  "value": "f-string",
                  "fileTypes": [],
                  "password": false,
                  "name": "template_format",
                  "advanced": false,
                  "dynamic": true,
                  "info": "",
                  "title_case": true
                },
                "validate_template": {
                  "type": "bool",
                  "required": false,
                  "placeholder": "",
                  "list": false,
                  "show": false,
                  "multiline": false,
                  "value": false,
                  "fileTypes": [],
                  "password": false,
                  "name": "validate_template",
                  "advanced": false,
                  "dynamic": true,
                  "info": "",
                  "title_case": true
                },
                "_type": "PromptTemplate",
                "context": {
                  "type": "str",
                  "required": false,
                  "placeholder": "",
                  "list": false,
                  "show": true,
                  "multiline": true,
                  "value": "",
                  "fileTypes": [],
                  "file_path": "",
                  "password": false,
                  "name": "context",
                  "display_name": "context",
                  "advanced": false,
                  "input_types": [
                    "Document",
                    "BaseOutputParser"
                  ],
                  "dynamic": false,
                  "info": "",
                  "title_case": true
                },
                "question": {
                  "type": "str",
                  "required": false,
                  "placeholder": "",
                  "list": false,
                  "show": true,
                  "multiline": true,
                  "value": "",
                  "fileTypes": [],
                  "file_path": "",
                  "password": false,
                  "name": "question",
                  "display_name": "question",
                  "advanced": false,
                  "input_types": [
                    "Document",
                    "BaseOutputParser"
                  ],
                  "dynamic": false,
                  "info": "",
                  "title_case": true
                },
                "chat_history": {
                  "type": "str",
                  "required": false,
                  "placeholder": "",
                  "list": false,
                  "show": true,
                  "multiline": true,
                  "value": "",
                  "fileTypes": [],
                  "file_path": "",
                  "password": false,
                  "name": "chat_history",
                  "display_name": "chat_history",
                  "advanced": false,
                  "input_types": [
                    "Document",
                    "BaseOutputParser"
                  ],
                  "dynamic": false,
                  "info": "",
                  "title_case": true
                }
              },
              "description": "A prompt template for a language model.",
              "icon": null,
              "base_classes": [
                "StringPromptTemplate",
                "PromptTemplate",
                "BasePromptTemplate"
              ],
              "name": "",
              "display_name": "PromptTemplate",
              "documentation": "https://python.langchain.com/docs/modules/model_io/prompts/prompt_templates/",
              "custom_fields": {
                "": [
                  "chat_history",
                  "context",
                  "question"
                ]
              },
              "output_types": [],
              "full_path": null,
              "field_formatters": {},
              "beta": false,
              "error": null
            },
            "id": "PromptTemplate-lMXPR",
            "description": "A prompt template for a language model.",
            "display_name": "PromptTemplate"
          },
          "selected": false,
          "positionAbsolute": {
            "x": 701.9387271148743,
            "y": 641.2705676994295
          }
        },
        {
          "width": 384,
          "height": 684,
          "id": "ConversationBufferWindowMemory-mO9jO",
          "type": "genericNode",
          "position": {
            "x": 1410.5295510157168,
            "y": 75.54514370219583
          },
          "data": {
            "type": "ConversationBufferWindowMemory",
            "node": {
              "template": {
                "chat_memory": {
                  "type": "BaseChatMessageHistory",
                  "required": false,
                  "placeholder": "",
                  "list": false,
                  "show": true,
                  "multiline": false,
                  "fileTypes": [],
                  "password": false,
                  "name": "chat_memory",
                  "advanced": false,
                  "dynamic": false,
                  "info": "",
                  "title_case": true
                },
                "ai_prefix": {
                  "type": "str",
                  "required": false,
                  "placeholder": "",
                  "list": false,
                  "show": false,
                  "multiline": false,
                  "value": "AI",
                  "fileTypes": [],
                  "password": false,
                  "name": "ai_prefix",
                  "advanced": false,
                  "dynamic": false,
                  "info": "",
                  "title_case": true
                },
                "human_prefix": {
                  "type": "str",
                  "required": false,
                  "placeholder": "",
                  "list": false,
                  "show": false,
                  "multiline": false,
                  "value": "Human",
                  "fileTypes": [],
                  "password": false,
                  "name": "human_prefix",
                  "advanced": false,
                  "dynamic": false,
                  "info": "",
                  "title_case": true
                },
                "input_key": {
                  "type": "str",
                  "required": false,
                  "placeholder": "",
                  "list": false,
                  "show": true,
                  "multiline": false,
                  "value": "question",
                  "fileTypes": [],
                  "file_path": "",
                  "password": false,
                  "name": "input_key",
                  "advanced": false,
                  "dynamic": false,
                  "info": "The variable to be used as Chat Input when more than one variable is available.",
                  "title_case": true
                },
                "k": {
                  "type": "int",
                  "required": true,
                  "placeholder": "",
                  "list": false,
                  "show": true,
                  "multiline": false,
                  "value": "4",
                  "fileTypes": [],
                  "password": false,
                  "name": "k",
                  "display_name": "Memory Size",
                  "advanced": false,
                  "dynamic": false,
                  "info": "",
                  "title_case": true
                },
                "memory_key": {
                  "type": "str",
                  "required": false,
                  "placeholder": "",
                  "list": false,
                  "show": true,
                  "multiline": false,
                  "value": "chat_history",
                  "fileTypes": [],
                  "password": false,
                  "name": "memory_key",
                  "advanced": false,
                  "dynamic": false,
                  "info": "",
                  "title_case": true
                },
                "output_key": {
                  "type": "str",
                  "required": false,
                  "placeholder": "",
                  "list": false,
                  "show": true,
                  "multiline": false,
                  "value": "answer",
                  "fileTypes": [],
                  "file_path": "",
                  "password": false,
                  "name": "output_key",
                  "advanced": false,
                  "dynamic": false,
                  "info": "The variable to be used as Chat Output (e.g. answer in a ConversationalRetrievalChain)",
                  "title_case": true
                },
                "return_messages": {
                  "type": "bool",
                  "required": false,
                  "placeholder": "",
                  "list": false,
                  "show": true,
                  "multiline": false,
                  "fileTypes": [],
                  "file_path": "",
                  "password": false,
                  "name": "return_messages",
                  "advanced": false,
                  "dynamic": false,
                  "info": "",
                  "title_case": true,
                  "value": true
                },
                "_type": "ConversationBufferWindowMemory"
              },
              "description": "Buffer for storing conversation memory inside a limited size window.",
              "base_classes": [
                "BaseChatMemory",
                "ConversationBufferWindowMemory",
                "BaseMemory"
              ],
              "display_name": "ConversationBufferWindowMemory",
              "documentation": "https://python.langchain.com/docs/modules/memory/how_to/buffer_window",
              "custom_fields": {},
              "output_types": [],
              "field_formatters": {},
              "beta": false
            },
            "id": "ConversationBufferWindowMemory-mO9jO",
            "showNode": true
          },
          "selected": false,
          "positionAbsolute": {
            "x": 1410.5295510157168,
            "y": 75.54514370219583
          },
          "dragging": false
        },
        {
          "width": 384,
          "height": 541,
          "id": "Data-TuWJV",
          "type": "genericNode",
          "position": {
            "x": 2189.0539870501448,
            "y": 781.9391210522786
          },
          "data": {
            "type": "Data",
            "node": {
              "template": {
                "document_prompt": {
                  "type": "PromptTemplate",
                  "required": true,
                  "placeholder": "",
                  "list": false,
                  "show": true,
                  "multiline": false,
                  "fileTypes": [],
                  "file_path": "",
                  "password": false,
                  "name": "document_prompt",
                  "display_name": "document_prompt",
                  "advanced": false,
                  "dynamic": false,
                  "info": ""
                },
                "llm": {
                  "type": "BaseLanguageModel",
                  "required": true,
                  "placeholder": "",
                  "list": false,
                  "show": true,
                  "multiline": false,
                  "fileTypes": [],
                  "file_path": "",
                  "password": false,
                  "name": "llm",
                  "display_name": "llm",
                  "advanced": false,
                  "dynamic": false,
                  "info": ""
                },
                "memory": {
                  "type": "BaseMemory",
                  "required": false,
                  "placeholder": "",
                  "list": false,
                  "show": true,
                  "multiline": false,
                  "fileTypes": [],
                  "file_path": "",
                  "password": false,
                  "name": "memory",
                  "display_name": "memory",
                  "advanced": false,
                  "dynamic": false,
                  "info": ""
                },
                "rephrase_llm": {
                  "type": "BaseLanguageModel",
                  "required": true,
                  "placeholder": "",
                  "list": false,
                  "show": true,
                  "multiline": false,
                  "fileTypes": [],
                  "file_path": "",
                  "password": false,
                  "name": "rephrase_llm",
                  "display_name": "rephrase_llm",
                  "advanced": false,
                  "dynamic": false,
                  "info": ""
                },
                "retriever": {
                  "type": "BaseRetriever",
                  "required": true,
                  "placeholder": "",
                  "list": false,
                  "show": true,
                  "multiline": false,
                  "fileTypes": [],
                  "file_path": "",
                  "password": false,
                  "name": "retriever",
                  "display_name": "retriever",
                  "advanced": false,
                  "dynamic": false,
                  "info": ""
                },
                "code": {
                  "type": "code",
                  "required": true,
                  "placeholder": "",
                  "list": false,
                  "show": true,
                  "multiline": true,
                  "value": "from axiestudio import CustomComponent\r\n\r\nfrom langchain.chains import (\r\n    StuffDocumentsChain, LLMChain, ConversationalRetrievalChain\r\n)\r\nfrom langchain_core.prompts import PromptTemplate\r\n\r\nfrom typing import Optional, Union, Callable\r\nfrom axiestudio.field_typing import BaseLanguageModel, BaseMemory, Chain\r\nimport logging\r\nlogging.basicConfig(level=logging.WARNING)\r\n\r\nfrom langchain_core.retrievers import BaseRetriever\r\nfrom langchain.chains.conversational_retrieval.prompts import CONDENSE_QUESTION_PROMPT\r\n#from langchain.chains.question_answering import load_qa_chain\r\n\r\n\r\nclass ConversationChainComponent(CustomComponent):\r\n    display_name = \"CustomConversationRetrievalChain\"\r\n    description = \"Chain to have a conversation and load context from memory.\"\r\n\r\n    def build(\r\n        self,\r\n        llm: BaseLanguageModel,\r\n        rephrase_llm:BaseLanguageModel,\r\n        document_prompt:PromptTemplate,\r\n        retriever: BaseRetriever,\r\n        memory: Optional[BaseMemory] = None,\r\n        \r\n    ) -> Union[Chain, Callable]:\r\n        \r\n        if memory:\r\n        \r\n                memory.human_prefix = 'Me'\r\n                memory.ai_prefix = 'You'\r\n        \r\n        stuff_prompt = PromptTemplate(\r\n                input_variables=[\"page_content\", \"source\", \"title\", \"category_name\", \"section_name\"],\r\n                template=\"\"\"<doc id=\"context\">\\n--Source Document--\\nURL: {source}\\nTítulo: {title} ({section_name}/{category_name})\\n--End Source--\\n{page_content}\"\"\"\r\n            )\r\n    \r\n        \r\n        llm_chain = LLMChain(llm=llm, prompt=document_prompt, return_final_only = False)\r\n        document_variable_name = \"context\"\r\n        document_separator: str = \"\\n</doc>\"\r\n        sttuf = StuffDocumentsChain(\r\n            llm_chain=llm_chain,\r\n            document_variable_name=document_variable_name,\r\n            document_prompt=stuff_prompt,\r\n        )\r\n \r\n                    \r\n        question_generator_chain = LLMChain(llm=rephrase_llm, prompt=CONDENSE_QUESTION_PROMPT)\r\n        chain = ConversationalRetrievalChain(\r\n            combine_docs_chain=sttuf,\r\n            retriever=retriever,\r\n            question_generator=question_generator_chain,\r\n            memory = memory,\r\n            rephrase_question = False,\r\n            return_generated_question = False,\r\n            return_source_documents = True\r\n        )\r\n                \r\n        return chain\r\n",
                  "fileTypes": [],
                  "file_path": "",
                  "password": false,
                  "name": "code",
                  "advanced": false,
                  "dynamic": true,
                  "info": ""
                },
                "_type": "CustomComponent"
              },
              "description": "Chain to have a conversation and load context from memory.",
              "base_classes": [
                "Chain",
                "Callable"
              ],
              "display_name": "CustomConversationRetrievalChain",
              "documentation": "",
              "custom_fields": {
                "document_prompt": null,
                "llm": null,
                "memory": null,
                "rephrase_llm": null,
                "retriever": null
              },
              "output_types": [
                "Chain",
                "Callable"
              ],
              "field_formatters": {},
              "beta": true
            },
            "id": "Data-TuWJV",
            "description": "Chain to have a conversation and load context from memory.",
            "display_name": "CustomConversationRetrievalChain"
          },
          "selected": false,
          "positionAbsolute": {
            "x": 2189.0539870501448,
            "y": 781.9391210522786
          },
          "dragging": false
        },
        {
          "width": 384,
          "height": 678,
          "id": "ChatOpenAI-4KDsG",
          "type": "genericNode",
          "position": {
            "x": 183.5017087242719,
            "y": 612.0786708769291
          },
          "data": {
            "type": "ChatOpenAI",
            "node": {
              "template": {
                "openai_api_key": {
                  "type": "Document",
                  "required": true,
                  "placeholder": "",
                  "list": false,
                  "show": true,
                  "multiline": false,
                  "fileTypes": [],
                  "file_path": "",
                  "password": false,
                  "name": "openai_api_key",
                  "display_name": "openai_api_key",
                  "advanced": false,
                  "dynamic": false,
                  "info": ""
                },
                "code": {
                  "type": "code",
                  "required": true,
                  "placeholder": "",
                  "list": false,
                  "show": true,
                  "multiline": true,
                  "value": "from typing import Optional, Union\n\nfrom langchain.llms import BaseLLM\nfrom langchain_community.chat_models.openai import ChatOpenAI\n\nfrom axiestudio import CustomComponent\nfrom axiestudio.field_typing import BaseLanguageModel, NestedDict\n\nfrom langchain.schema import Document\n\n\nclass ChatOpenAIComponent(CustomComponent):\n    display_name = \"ChatOpenAI\"\n    description = \"`OpenAI` Chat large language models API.\"\n\n    def build_config(self):\n        return {\n            \"max_tokens\": {\n                \"display_name\": \"Max Tokens\",\n                \"field_type\": \"int\",\n                \"advanced\": False,\n                \"required\": False,\n            },\n            \"model_kwargs\": {\n                \"display_name\": \"Model Kwargs\",\n                \"field_type\": \"NestedDict\",\n                \"advanced\": True,\n                \"required\": False,\n            },\n            \"model_name\": {\n                \"display_name\": \"Model Name\",\n                \"field_type\": \"str\",\n                \"advanced\": False,\n                \"required\": False,\n                \"options\": [\n                    \"gpt-4-turbo-preview\",\n                    \"gpt-4-0125-preview\",\n                    \"gpt-4-1106-preview\",\n                    \"gpt-4-vision-preview\",\n                    \"gpt-3.5-turbo-0125\",\n                    \"gpt-3.5-turbo-1106\",\n                ],\n            },\n            \"openai_api_base\": {\n                \"display_name\": \"OpenAI API Base\",\n                \"field_type\": \"str\",\n                \"advanced\": False,\n                \"required\": False,\n                \"info\": (\n                    \"The base URL of the OpenAI API. Defaults to https://api.openai.com/v1.\\n\\n\"\n                    \"You can change this to use other APIs like JinaChat, LocalAI and Prem.\"\n                ),\n            },\n            \"temperature\": {\n                \"display_name\": \"Temperature\",\n                \"field_type\": \"float\",\n                \"advanced\": False,\n                \"required\": False,\n                \"value\": 0.7,\n            },\n        }\n\n    def build(\n        self,\n        max_tokens: Optional[int] = 256,\n        model_kwargs: NestedDict = {},\n        model_name: str = \"gpt-4-1106-preview\",\n        openai_api_base: Optional[str] = None,\n        openai_api_key: Document = None,\n        temperature: float = 0.7,\n    ) -> Union[BaseLanguageModel, BaseLLM]:\n        if not openai_api_base:\n            openai_api_base = \"https://api.openai.com/v1\"\n        return ChatOpenAI(\n            max_tokens=max_tokens,\n            model_kwargs=model_kwargs,\n            model=model_name,\n            base_url=openai_api_base,\n            api_key=openai_api_key,\n            temperature=temperature,\n            streaming=False\n        )\n",
                  "fileTypes": [],
                  "file_path": "",
                  "password": false,
                  "name": "code",
                  "advanced": false,
                  "dynamic": true,
                  "info": ""
                },
                "max_tokens": {
                  "type": "int",
                  "required": false,
                  "placeholder": "",
                  "list": false,
                  "show": true,
                  "multiline": false,
                  "value": "256",
                  "fileTypes": [],
                  "file_path": "",
                  "password": false,
                  "name": "max_tokens",
                  "display_name": "Max Tokens",
                  "advanced": false,
                  "dynamic": false,
                  "info": ""
                },
                "model_kwargs": {
                  "type": "NestedDict",
                  "required": false,
                  "placeholder": "",
                  "list": false,
                  "show": true,
                  "multiline": false,
                  "value": {},
                  "fileTypes": [],
                  "file_path": "",
                  "password": false,
                  "name": "model_kwargs",
                  "display_name": "Model Kwargs",
                  "advanced": true,
                  "dynamic": false,
                  "info": ""
                },
                "model_name": {
                  "type": "str",
                  "required": false,
                  "placeholder": "",
                  "list": true,
                  "show": true,
                  "multiline": false,
                  "value": "gpt-3.5-turbo-0125",
                  "fileTypes": [],
                  "file_path": "",
                  "password": false,
                  "options": [
                    "gpt-4-turbo-preview",
                    "gpt-4-0125-preview",
                    "gpt-4-1106-preview",
                    "gpt-4-vision-preview",
                    "gpt-3.5-turbo-0125",
                    "gpt-3.5-turbo-1106"
                  ],
                  "name": "model_name",
                  "display_name": "Model Name",
                  "advanced": false,
                  "dynamic": false,
                  "info": ""
                },
                "openai_api_base": {
                  "type": "str",
                  "required": false,
                  "placeholder": "",
                  "list": false,
                  "show": true,
                  "multiline": false,
                  "fileTypes": [],
                  "file_path": "",
                  "password": false,
                  "name": "openai_api_base",
                  "display_name": "OpenAI API Base",
                  "advanced": false,
                  "dynamic": false,
                  "info": "The base URL of the OpenAI API. Defaults to https://api.openai.com/v1.\n\nYou can change this to use other APIs like JinaChat, LocalAI and Prem."
                },
                "temperature": {
                  "type": "float",
                  "required": false,
                  "placeholder": "",
                  "list": false,
                  "show": true,
                  "multiline": false,
                  "value": "0",
                  "fileTypes": [],
                  "file_path": "",
                  "password": false,
                  "name": "temperature",
                  "display_name": "Temperature",
                  "advanced": false,
                  "dynamic": false,
                  "info": "",
                  "rangeSpec": {
                    "min": -1,
                    "max": 1,
                    "step": 0.1
                  }
                },
                "_type": "CustomComponent"
              },
              "description": "`OpenAI` Chat large language models API.",
              "base_classes": [
                "BaseLanguageModel",
                "BaseLLM",
                "BaseLanguageModel"
              ],
              "display_name": "ChatOpenAI",
              "documentation": "",
              "custom_fields": {
                "max_tokens": null,
                "model_kwargs": null,
                "model_name": null,
                "openai_api_base": null,
                "openai_api_key": null,
                "temperature": null
              },
              "output_types": [
                "BaseLanguageModel",
                "BaseLLM"
              ],
              "field_formatters": {},
              "beta": true
            },
            "id": "ChatOpenAI-4KDsG",
            "description": "`OpenAI` Chat large language models API.",
            "display_name": "ChatOpenAI",
            "showNode": true
          },
          "selected": false,
          "positionAbsolute": {
            "x": 183.5017087242719,
            "y": 612.0786708769291
          },
          "dragging": false
        },
        {
          "width": 384,
          "height": 348,
          "id": "Data-N2Fec",
          "type": "genericNode",
          "position": {
            "x": -393.75030822163694,
            "y": 718.1309647467108
          },
          "data": {
            "type": "Data",
            "node": {
              "template": {
                "api_key": {
                  "type": "str",
                  "required": true,
                  "placeholder": "",
                  "list": false,
                  "show": true,
                  "multiline": false,
                  "fileTypes": [],
                  "file_path": "",
                  "password": true,
                  "name": "api_key",
                  "advanced": false,
                  "dynamic": false,
                  "info": "",
                  "title_case": true,
                  "value": ""
                },
                "code": {
                  "type": "code",
                  "required": true,
                  "placeholder": "",
                  "list": false,
                  "show": true,
                  "multiline": true,
                  "value": "from axiestudio import CustomComponent\nfrom langchain.schema import Document\n\n\nclass Component(CustomComponent):\n    display_name = \"OpenAI API Key\"\n\n    def build_config(self):\n        return {\"api_key\": {\"openai_api_key\": \"OpenAI API Key\", \"password\": True}}\n\n    def build(self, api_key: str) -> Document:\n        return api_key\n",
                  "fileTypes": [],
                  "file_path": "",
                  "password": false,
                  "name": "code",
                  "advanced": false,
                  "dynamic": true,
                  "info": "",
                  "title_case": true
                },
                "_type": "CustomComponent"
              },
              "base_classes": [
                "Document"
              ],
              "display_name": "OpenAI API Key",
              "documentation": "",
              "custom_fields": {
                "api_key": null
              },
              "output_types": [
                "Document"
              ],
              "field_formatters": {},
              "beta": true
            },
            "id": "Data-N2Fec",
            "display_name": "OpenAI API Key"
          },
          "selected": false,
          "dragging": false,
          "positionAbsolute": {
            "x": -393.75030822163694,
            "y": 718.1309647467108
          }
        },
        {
          "width": 384,
          "height": 750,
          "id": "Data-UqqRJ",
          "type": "genericNode",
          "position": {
            "x": 688.4995909115455,
            "y": 1390.9102331536226
          },
          "data": {
            "type": "Data",
            "node": {
              "template": {
                "embedding": {
                  "type": "Embeddings",
                  "required": false,
                  "placeholder": "",
                  "list": false,
                  "show": true,
                  "multiline": false,
                  "fileTypes": [],
                  "file_path": "",
                  "password": false,
                  "name": "embedding",
                  "display_name": "Embedding",
                  "advanced": false,
                  "dynamic": false,
                  "info": "",
                  "title_case": true
                },
                "chroma_client_auth_credentials": {
                  "type": "str",
                  "required": true,
                  "placeholder": "",
                  "list": false,
                  "show": true,
                  "multiline": false,
                  "fileTypes": [],
                  "file_path": "",
                  "password": true,
                  "name": "chroma_client_auth_credentials",
                  "display_name": "Chroma Token",
                  "advanced": false,
                  "dynamic": false,
                  "info": "",
                  "title_case": true,
                  "value": ""
                },
                "chroma_server_host": {
                  "type": "str",
                  "required": false,
                  "placeholder": "",
                  "list": false,
                  "show": true,
                  "multiline": false,
                  "fileTypes": [],
                  "file_path": "",
                  "password": false,
                  "name": "chroma_server_host",
                  "display_name": "Server Host",
                  "advanced": false,
                  "dynamic": false,
                  "info": "",
                  "title_case": true,
                  "value": "vectordb.sandbox.sankhya.com.br"
                },
                "chroma_server_port": {
                  "type": "int",
                  "required": false,
                  "placeholder": "",
                  "list": false,
                  "show": true,
                  "multiline": false,
                  "fileTypes": [],
                  "file_path": "",
                  "password": false,
                  "name": "chroma_server_port",
                  "display_name": "Server Port",
                  "advanced": false,
                  "dynamic": false,
                  "info": "",
                  "title_case": true,
                  "value": "443"
                },
                "chroma_server_ssl_enabled": {
                  "type": "bool",
                  "required": true,
                  "placeholder": "",
                  "list": false,
                  "show": true,
                  "multiline": false,
                  "value": true,
                  "fileTypes": [],
                  "file_path": "",
                  "password": false,
                  "name": "chroma_server_ssl_enabled",
                  "display_name": "Server SSL Enabled",
                  "advanced": false,
                  "dynamic": false,
                  "info": "",
                  "title_case": true
                },
                "code": {
                  "type": "code",
                  "required": true,
                  "placeholder": "",
                  "list": false,
                  "show": true,
                  "multiline": true,
                  "value": "from typing import List, Optional, Union\nfrom axiestudio import CustomComponent\n\nfrom langchain.vectorstores import Chroma\nfrom langchain.schema import Document\nfrom langchain.vectorstores.base import VectorStore\nfrom langchain.schema import BaseRetriever\nfrom langchain.embeddings.base import Embeddings\nimport chromadb\nfrom chromadb.config import Settings\n\nfrom axiestudio.field_typing import Data\n\n\nclass ChromaComponent(CustomComponent):\n    \"\"\"\n    A custom component for implementing a Vector Store using Chroma.\n    \"\"\"\n    \n    display_name = \"Chroma Vector Store\"\n    description = \"Retrierver semântico\"\n\n    def build_config(self):\n        \"\"\"\n        Builds the configuration for the component.\n\n        Returns:\n        - dict: A dictionary containing the configuration options for the component.\n        \"\"\"\n        return {\n            \"collection_name\": {\"display_name\": \"Collection Name\", \"value\": \"axiestudio\"},\n            \"persistence\": {\n                \"display_name\": \"Persistence\",\n                \"options\": [\"In-Memory\", \"Local Directory\", \"Container\"],\n                \"value\": \"In-Memory\",\n            },\n            \"persist_directory\": {\"display_name\": \"Persist Directory\", \"input_types\": [\"str\", \"Data\"]},\n            \"embedding\": {\"display_name\": \"Embedding\"},\n            \"chroma_server_host\": {\"display_name\": \"Server Host\"},\n            \"chroma_server_port\": {\"display_name\": \"Server Port\"},\n            \"chroma_server_grpc_port\": {\n                \"display_name\": \"Server gRPC Port\",\n                \"advanced\": True,\n            },\n            \"chroma_server_ssl_enabled\": {\n                \"display_name\": \"Server SSL Enabled\"\n            },\n            \"chroma_client_auth_credentials\": {\n                \"display_name\": \"Chroma Token\",\n                \"password\": True\n            }\n        }\n\n    def build(\n        self,\n        collection_name: str,\n        chroma_server_ssl_enabled: bool,\n        chroma_client_auth_credentials:str,\n        embedding: Optional[Embeddings] = None,\n        chroma_server_host: Optional[str] = None,\n        chroma_server_port: Optional[int] = None,\n    ) -> Union[VectorStore, Chroma, BaseRetriever]:\n        \n        settings=Settings(chroma_client_auth_provider=\"chromadb.auth.token.TokenAuthClientProvider\", \n                                                      chroma_client_auth_credentials=chroma_client_auth_credentials, \n                                                      chroma_client_auth_token_transport_header=\"X_CHROMA_TOKEN\"\n                                                     )\n                                                     \n        chroma_client = chromadb.HttpClient(\n            host=chroma_server_host, \n            port=chroma_server_port, \n            ssl=chroma_server_ssl_enabled, \n            settings=settings\n            )\n\n        return Chroma(client=chroma_client, embedding_function=embedding, collection_name=collection_name)",
                  "fileTypes": [],
                  "file_path": "",
                  "password": false,
                  "name": "code",
                  "advanced": false,
                  "dynamic": true,
                  "info": "",
                  "title_case": true
                },
                "collection_name": {
                  "type": "str",
                  "required": true,
                  "placeholder": "",
                  "list": false,
                  "show": true,
                  "multiline": false,
                  "value": "ai-service-desk-gpt",
                  "fileTypes": [],
                  "file_path": "",
                  "password": false,
                  "name": "collection_name",
                  "display_name": "Collection Name",
                  "advanced": false,
                  "dynamic": false,
                  "info": "",
                  "title_case": true
                },
                "_type": "CustomComponent"
              },
              "description": "Retrierver semântico",
              "base_classes": [
                "VectorStore",
                "Chroma",
                "VectorStore",
                "BaseRetriever"
              ],
              "display_name": "Chroma Vector Store",
              "documentation": "",
              "custom_fields": {
                "collection_name": null,
                "chroma_server_ssl_enabled": null,
                "chroma_client_auth_credentials": null,
                "embedding": null,
                "chroma_server_host": null,
                "chroma_server_port": null
              },
              "output_types": [
                "VectorStore",
                "Chroma",
                "BaseRetriever"
              ],
              "field_formatters": {},
              "beta": true
            },
            "id": "Data-UqqRJ",
            "description": "Retrierver semântico",
            "display_name": "Chroma Vector Store"
          },
          "selected": false,
          "positionAbsolute": {
            "x": 688.4995909115455,
            "y": 1390.9102331536226
          }
        }
      ],
      "edges": [
        {
          "source": "Data-yJux8",
          "target": "Data-TuWJV",
          "sourceHandle": "{œbaseClassesœ:[œEnsembleRetrieverœ,œBaseRetrieverœ],œdataTypeœ:œDataœ,œidœ:œData-yJux8œ}",
          "targetHandle": "{œfieldNameœ:œretrieverœ,œidœ:œData-TuWJVœ,œinputTypesœ:null,œtypeœ:œBaseRetrieverœ}",
          "id": "reactflow__edge-Data-yJux8{œbaseClassesœ:[œEnsembleRetrieverœ,œBaseRetrieverœ],œdataTypeœ:œDataœ,œidœ:œData-yJux8œ}-Data-TuWJV{œfieldNameœ:œretrieverœ,œidœ:œData-TuWJVœ,œinputTypesœ:null,œtypeœ:œBaseRetrieverœ}",
          "data": {
            "targetHandle": {
              "fieldName": "retriever",
              "id": "Data-TuWJV",
              "inputTypes": null,
              "type": "BaseRetriever"
            },
            "sourceHandle": {
              "baseClasses": [
                "EnsembleRetriever",
                "BaseRetriever"
              ],
              "dataType": "Data",
              "id": "Data-yJux8"
            }
          },
          "style": {
            "stroke": "#555"
          },
          "className": "stroke-gray-900  stroke-connection",
          "animated": false,
          "selected": false
        },
        {
          "source": "PromptTemplate-lMXPR",
          "target": "Data-TuWJV",
          "sourceHandle": "{œbaseClassesœ:[œStringPromptTemplateœ,œPromptTemplateœ,œBasePromptTemplateœ],œdataTypeœ:œPromptTemplateœ,œidœ:œPromptTemplate-lMXPRœ}",
          "targetHandle": "{œfieldNameœ:œdocument_promptœ,œidœ:œData-TuWJVœ,œinputTypesœ:null,œtypeœ:œPromptTemplateœ}",
          "id": "reactflow__edge-PromptTemplate-lMXPR{œbaseClassesœ:[œStringPromptTemplateœ,œPromptTemplateœ,œBasePromptTemplateœ],œdataTypeœ:œPromptTemplateœ,œidœ:œPromptTemplate-lMXPRœ}-Data-TuWJV{œfieldNameœ:œdocument_promptœ,œidœ:œData-TuWJVœ,œinputTypesœ:null,œtypeœ:œPromptTemplateœ}",
          "data": {
            "targetHandle": {
              "fieldName": "document_prompt",
              "id": "Data-TuWJV",
              "inputTypes": null,
              "type": "PromptTemplate"
            },
            "sourceHandle": {
              "baseClasses": [
                "StringPromptTemplate",
                "PromptTemplate",
                "BasePromptTemplate"
              ],
              "dataType": "PromptTemplate",
              "id": "PromptTemplate-lMXPR"
            }
          },
          "style": {
            "stroke": "#555"
          },
          "className": "stroke-gray-900  stroke-connection",
          "animated": false,
          "selected": false
        },
        {
          "source": "ConversationBufferWindowMemory-mO9jO",
          "target": "Data-TuWJV",
          "sourceHandle": "{œbaseClassesœ:[œBaseChatMemoryœ,œConversationBufferWindowMemoryœ,œBaseMemoryœ],œdataTypeœ:œConversationBufferWindowMemoryœ,œidœ:œConversationBufferWindowMemory-mO9jOœ}",
          "targetHandle": "{œfieldNameœ:œmemoryœ,œidœ:œData-TuWJVœ,œinputTypesœ:null,œtypeœ:œBaseMemoryœ}",
          "id": "reactflow__edge-ConversationBufferWindowMemory-mO9jO{œbaseClassesœ:[œBaseChatMemoryœ,œConversationBufferWindowMemoryœ,œBaseMemoryœ],œdataTypeœ:œConversationBufferWindowMemoryœ,œidœ:œConversationBufferWindowMemory-mO9jOœ}-Data-TuWJV{œfieldNameœ:œmemoryœ,œidœ:œData-TuWJVœ,œinputTypesœ:null,œtypeœ:œBaseMemoryœ}",
          "data": {
            "targetHandle": {
              "fieldName": "memory",
              "id": "Data-TuWJV",
              "inputTypes": null,
              "type": "BaseMemory"
            },
            "sourceHandle": {
              "baseClasses": [
                "BaseChatMemory",
                "ConversationBufferWindowMemory",
                "BaseMemory"
              ],
              "dataType": "ConversationBufferWindowMemory",
              "id": "ConversationBufferWindowMemory-mO9jO"
            }
          },
          "style": {
            "stroke": "#555"
          },
          "className": "stroke-gray-900  stroke-connection",
          "animated": false,
          "selected": false
        },
        {
          "source": "ChatOpenAI-4KDsG",
          "target": "Data-TuWJV",
          "sourceHandle": "{œbaseClassesœ:[œBaseLanguageModelœ,œBaseLLMœ,œBaseLanguageModelœ],œdataTypeœ:œChatOpenAIœ,œidœ:œChatOpenAI-4KDsGœ}",
          "targetHandle": "{œfieldNameœ:œrephrase_llmœ,œidœ:œData-TuWJVœ,œinputTypesœ:null,œtypeœ:œBaseLanguageModelœ}",
          "id": "reactflow__edge-ChatOpenAI-4KDsG{œbaseClassesœ:[œBaseLanguageModelœ,œBaseLLMœ,œBaseLanguageModelœ],œdataTypeœ:œChatOpenAIœ,œidœ:œChatOpenAI-4KDsGœ}-Data-TuWJV{œfieldNameœ:œrephrase_llmœ,œidœ:œData-TuWJVœ,œinputTypesœ:null,œtypeœ:œBaseLanguageModelœ}",
          "data": {
            "targetHandle": {
              "fieldName": "rephrase_llm",
              "id": "Data-TuWJV",
              "inputTypes": null,
              "type": "BaseLanguageModel"
            },
            "sourceHandle": {
              "baseClasses": [
                "BaseLanguageModel",
                "BaseLLM",
                "BaseLanguageModel"
              ],
              "dataType": "ChatOpenAI",
              "id": "ChatOpenAI-4KDsG"
            }
          },
          "style": {
            "stroke": "#555"
          },
          "className": "stroke-gray-900  stroke-connection",
          "animated": false,
          "selected": false
        },
        {
          "source": "Data-N2Fec",
          "target": "ChatOpenAI-J1DJj",
          "sourceHandle": "{œbaseClassesœ:[œDocumentœ],œdataTypeœ:œDataœ,œidœ:œData-N2Fecœ}",
          "targetHandle": "{œfieldNameœ:œopenai_api_keyœ,œidœ:œChatOpenAI-J1DJjœ,œinputTypesœ:null,œtypeœ:œDocumentœ}",
          "id": "reactflow__edge-Data-N2Fec{œbaseClassesœ:[œDocumentœ],œdataTypeœ:œDataœ,œidœ:œData-N2Fecœ}-ChatOpenAI-J1DJj{œfieldNameœ:œopenai_api_keyœ,œidœ:œChatOpenAI-J1DJjœ,œinputTypesœ:null,œtypeœ:œDocumentœ}",
          "data": {
            "targetHandle": {
              "fieldName": "openai_api_key",
              "id": "ChatOpenAI-J1DJj",
              "inputTypes": null,
              "type": "Document"
            },
            "sourceHandle": {
              "baseClasses": [
                "Document"
              ],
              "dataType": "Data",
              "id": "Data-N2Fec"
            }
          },
          "style": {
            "stroke": "#555"
          },
          "className": "stroke-gray-900  stroke-connection",
          "animated": false,
          "selected": false
        },
        {
          "source": "Data-N2Fec",
          "target": "ChatOpenAI-4KDsG",
          "sourceHandle": "{œbaseClassesœ:[œDocumentœ],œdataTypeœ:œDataœ,œidœ:œData-N2Fecœ}",
          "targetHandle": "{œfieldNameœ:œopenai_api_keyœ,œidœ:œChatOpenAI-4KDsGœ,œinputTypesœ:null,œtypeœ:œDocumentœ}",
          "id": "reactflow__edge-Data-N2Fec{œbaseClassesœ:[œDocumentœ],œdataTypeœ:œDataœ,œidœ:œData-N2Fecœ}-ChatOpenAI-4KDsG{œfieldNameœ:œopenai_api_keyœ,œidœ:œChatOpenAI-4KDsGœ,œinputTypesœ:null,œtypeœ:œDocumentœ}",
          "data": {
            "targetHandle": {
              "fieldName": "openai_api_key",
              "id": "ChatOpenAI-4KDsG",
              "inputTypes": null,
              "type": "Document"
            },
            "sourceHandle": {
              "baseClasses": [
                "Document"
              ],
              "dataType": "Data",
              "id": "Data-N2Fec"
            }
          },
          "style": {
            "stroke": "#555"
          },
          "className": "stroke-gray-900  stroke-connection",
          "animated": false,
          "selected": false
        },
        {
          "source": "OpenAIEmbeddings-S41SL",
          "target": "Data-UqqRJ",
          "sourceHandle": "{œbaseClassesœ:[œOpenAIEmbeddingsœ,œEmbeddingsœ,œCallableœ],œdataTypeœ:œOpenAIEmbeddingsœ,œidœ:œOpenAIEmbeddings-S41SLœ}",
          "targetHandle": "{œfieldNameœ:œembeddingœ,œidœ:œData-UqqRJœ,œinputTypesœ:null,œtypeœ:œEmbeddingsœ}",
          "id": "reactflow__edge-OpenAIEmbeddings-S41SL{œbaseClassesœ:[œOpenAIEmbeddingsœ,œEmbeddingsœ,œCallableœ],œdataTypeœ:œOpenAIEmbeddingsœ,œidœ:œOpenAIEmbeddings-S41SLœ}-Data-UqqRJ{œfieldNameœ:œembeddingœ,œidœ:œData-UqqRJœ,œinputTypesœ:null,œtypeœ:œEmbeddingsœ}",
          "data": {
            "targetHandle": {
              "fieldName": "embedding",
              "id": "Data-UqqRJ",
              "inputTypes": null,
              "type": "Embeddings"
            },
            "sourceHandle": {
              "baseClasses": [
                "OpenAIEmbeddings",
                "Embeddings",
                "Callable"
              ],
              "dataType": "OpenAIEmbeddings",
              "id": "OpenAIEmbeddings-S41SL"
            }
          },
          "style": {
            "stroke": "#555"
          },
          "className": "stroke-gray-900  stroke-connection",
          "animated": false,
          "selected": false
        },
        {
          "source": "Data-a859e",
          "target": "Data-yJux8",
          "sourceHandle": "{œbaseClassesœ:[œVectorStoreœ,œVectorStoreœ,œElasticsearchStoreœ,œBaseRetrieverœ],œdataTypeœ:œDataœ,œidœ:œData-a859eœ}",
          "targetHandle": "{œfieldNameœ:œlexic_vector_storeœ,œidœ:œData-yJux8œ,œinputTypesœ:null,œtypeœ:œVectorStoreœ}",
          "id": "reactflow__edge-Data-a859e{œbaseClassesœ:[œVectorStoreœ,œVectorStoreœ,œElasticsearchStoreœ,œBaseRetrieverœ],œdataTypeœ:œDataœ,œidœ:œData-a859eœ}-Data-yJux8{œfieldNameœ:œlexic_vector_storeœ,œidœ:œData-yJux8œ,œinputTypesœ:null,œtypeœ:œVectorStoreœ}",
          "data": {
            "targetHandle": {
              "fieldName": "lexic_vector_store",
              "id": "Data-yJux8",
              "inputTypes": null,
              "type": "VectorStore"
            },
            "sourceHandle": {
              "baseClasses": [
                "VectorStore",
                "VectorStore",
                "ElasticsearchStore",
                "BaseRetriever"
              ],
              "dataType": "Data",
              "id": "Data-a859e"
            }
          },
          "style": {
            "stroke": "#555"
          },
          "className": "stroke-gray-900  stroke-connection",
          "animated": false,
          "selected": false
        },
        {
          "source": "Data-UqqRJ",
          "target": "Data-yJux8",
          "sourceHandle": "{œbaseClassesœ:[œVectorStoreœ,œChromaœ,œVectorStoreœ,œBaseRetrieverœ],œdataTypeœ:œDataœ,œidœ:œData-UqqRJœ}",
          "targetHandle": "{œfieldNameœ:œsemantic_vector_storeœ,œidœ:œData-yJux8œ,œinputTypesœ:null,œtypeœ:œVectorStoreœ}",
          "id": "reactflow__edge-Data-UqqRJ{œbaseClassesœ:[œVectorStoreœ,œChromaœ,œVectorStoreœ,œBaseRetrieverœ],œdataTypeœ:œDataœ,œidœ:œData-UqqRJœ}-Data-yJux8{œfieldNameœ:œsemantic_vector_storeœ,œidœ:œData-yJux8œ,œinputTypesœ:null,œtypeœ:œVectorStoreœ}",
          "data": {
            "targetHandle": {
              "fieldName": "semantic_vector_store",
              "id": "Data-yJux8",
              "inputTypes": null,
              "type": "VectorStore"
            },
            "sourceHandle": {
              "baseClasses": [
                "VectorStore",
                "Chroma",
                "VectorStore",
                "BaseRetriever"
              ],
              "dataType": "Data",
              "id": "Data-UqqRJ"
            }
          },
          "style": {
            "stroke": "#555"
          },
          "className": "stroke-gray-900  stroke-connection",
          "animated": false,
          "selected": false
        },
        {
          "source": "Data-N2Fec",
          "sourceHandle": "{œbaseClassesœ:[œDocumentœ],œdataTypeœ:œDataœ,œidœ:œData-N2Fecœ}",
          "target": "OpenAIEmbeddings-S41SL",
          "targetHandle": "{œfieldNameœ:œopenai_api_keyœ,œidœ:œOpenAIEmbeddings-S41SLœ,œinputTypesœ:null,œtypeœ:œDocumentœ}",
          "data": {
            "targetHandle": {
              "fieldName": "openai_api_key",
              "id": "OpenAIEmbeddings-S41SL",
              "inputTypes": null,
              "type": "Document"
            },
            "sourceHandle": {
              "baseClasses": [
                "Document"
              ],
              "dataType": "Data",
              "id": "Data-N2Fec"
            }
          },
          "style": {
            "stroke": "#555"
          },
          "className": "stroke-gray-900  stroke-connection",
          "animated": false,
          "id": "reactflow__edge-Data-N2Fec{œbaseClassesœ:[œDocumentœ],œdataTypeœ:œDataœ,œidœ:œData-N2Fecœ}-OpenAIEmbeddings-S41SL{œfieldNameœ:œopenai_api_keyœ,œidœ:œOpenAIEmbeddings-S41SLœ,œinputTypesœ:null,œtypeœ:œDocumentœ}"
        },
        {
          "source": "ChatOpenAI-J1DJj",
          "sourceHandle": "{œbaseClassesœ:[œBaseLanguageModelœ,œBaseLLMœ,œBaseLanguageModelœ],œdataTypeœ:œChatOpenAIœ,œidœ:œChatOpenAI-J1DJjœ}",
          "target": "Data-TuWJV",
          "targetHandle": "{œfieldNameœ:œllmœ,œidœ:œData-TuWJVœ,œinputTypesœ:null,œtypeœ:œBaseLanguageModelœ}",
          "data": {
            "targetHandle": {
              "fieldName": "llm",
              "id": "Data-TuWJV",
              "inputTypes": null,
              "type": "BaseLanguageModel"
            },
            "sourceHandle": {
              "baseClasses": [
                "BaseLanguageModel",
                "BaseLLM",
                "BaseLanguageModel"
              ],
              "dataType": "ChatOpenAI",
              "id": "ChatOpenAI-J1DJj"
            }
          },
          "style": {
            "stroke": "#555"
          },
          "className": "stroke-gray-900  stroke-connection",
          "animated": false,
          "id": "reactflow__edge-ChatOpenAI-J1DJj{œbaseClassesœ:[œBaseLanguageModelœ,œBaseLLMœ,œBaseLanguageModelœ],œdataTypeœ:œChatOpenAIœ,œidœ:œChatOpenAI-J1DJjœ}-Data-TuWJV{œfieldNameœ:œllmœ,œidœ:œData-TuWJVœ,œinputTypesœ:null,œtypeœ:œBaseLanguageModelœ}"
        }
      ],
      "viewport": {
        "x": 334.4364037495927,
        "y": 23.17403253168709,
        "zoom": 0.5743491774985184
      }
    },
    "date_created": "2024-04-16T19:35:40.467Z",
    "date_updated": "2024-04-16T19:35:40.510Z",
    "status": "Public",
    "sort": null,
    "user_updated": "619d483a-31ee-4773-a55c-09185055d644",
    "user_created": {
      "username": "cironunes ",
      "first_name": "Ciro",
      "last_name": "Alves Justino Nunes",
      "id": "619d483a-31ee-4773-a55c-09185055d644"
    },
    "tags": []
  },
  "conversion": {
    "converted_at": "2025-08-19T18:08:54.205Z",
    "converted_from": "langflow",
    "converted_to": "axiestudio",
    "conversions_made": 34,
    "converter_version": "1.0.0"
  }
}