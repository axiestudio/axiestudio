{
  "id": "91557024-81e5-4e6e-8ac0-63864c430bc1",
  "name": "Vector Store RAG",
  "description": "Visit https://pre-release.langflow.org/tutorials/rag-with-astradb for a detailed guide of this project.\nThis project give you both Ingestion and RAG in a single file. You'll need to visit https://astra.datastax.com/ to create an Astra DB instance, your Token and grab an API Endpoint.\nRunning this project requires you to add a file in the Files component, then define a Collection Name and click on the Play icon on the Astra DB component. \n\nAfter the ingestion ends you are ready to click on the Run button at the lower left corner and start asking questions about your data. (Converted from Langflow Store for AxieStudio compatibility)",
  "type": "FLOW",
  "is_component": false,
  "author": {
    "username": "liuc146",
    "first_name": "畅",
    "last_name": "刘",
    "id": "4f9b4bde-8907-4a03-a128-bee19154abb6",
    "full_name": "畅 刘"
  },
  "store_url": "https://www.langflow.store/store/component/91557024-81e5-4e6e-8ac0-63864c430bc1",
  "stats": {
    "downloads": 0,
    "likes": 0
  },
  "dates": {
    "created": "2024-08-09T02:11:53.114Z",
    "updated": "2024-08-09T02:11:53.173Z",
    "downloaded": "2025-08-19T17:50:05.393Z"
  },
  "tags": [
    {
      "tags_id": {
        "name": "Agent",
        "id": "ccabb590-c9e8-4e56-9d6c-309955936c6c"
      }
    },
    {
      "tags_id": {
        "name": "Memory",
        "id": "e660a9ea-35fb-4587-bfbd-13dba4c556d1"
      }
    }
  ],
  "technical": {
    "last_tested_version": "1.0.0a61",
    "private": false,
    "status": "Public"
  },
  "data": {
    "nodes": [
      {
        "data": {
          "id": "File-HuaYa",
          "node": {
            "base_classes": [
              "Record"
            ],
            "beta": false,
            "custom_fields": {
              "path": null,
              "silent_errors": null
            },
            "description": "A generic file loader.",
            "display_name": "File",
            "documentation": "",
            "field_formatters": {},
            "field_order": [],
            "frozen": false,
            "icon": "file-text",
            "output_types": [
              "Record"
            ],
            "template": {
              "_type": "CustomComponent",
              "code": {
                "type": "code",
                "required": true,
                "placeholder": "",
                "list": false,
                "show": true,
                "multiline": true,
                "value": "from pathlib import Path\nfrom typing import Any, Dict\n\nfrom axiestudio.base.data.utils import TEXT_FILE_TYPES, parse_text_file_to_record\nfrom axiestudio.custom import CustomComponent\nfrom axiestudio.schema import Record\n\n\nclass FileComponent(CustomComponent):\n    display_name = \"File\"\n    description = \"A generic file loader.\"\n    icon = \"file-text\"\n\n    def build_config(self) -> Dict[str, Any]:\n        return {\n            \"path\": {\n                \"display_name\": \"Path\",\n                \"field_type\": \"file\",\n                \"file_types\": TEXT_FILE_TYPES,\n                \"info\": f\"Supported file types: {', '.join(TEXT_FILE_TYPES)}\",\n            },\n            \"silent_errors\": {\n                \"display_name\": \"Silent Errors\",\n                \"advanced\": True,\n                \"info\": \"If true, errors will not raise an exception.\",\n            },\n        }\n\n    def load_file(self, path: str, silent_errors: bool = False) -> Record:\n        resolved_path = self.resolve_path(path)\n        path_obj = Path(resolved_path)\n        extension = path_obj.suffix[1:].lower()\n        if extension == \"doc\":\n            raise ValueError(\"doc files are not supported. Please save as .docx\")\n        if extension not in TEXT_FILE_TYPES:\n            raise ValueError(f\"Unsupported file type: {extension}\")\n        record = parse_text_file_to_record(resolved_path, silent_errors)\n        self.status = record if record else \"No data\"\n        return record or Record()\n\n    def build(\n        self,\n        path: str,\n        silent_errors: bool = False,\n    ) -> Record:\n        record = self.load_file(path, silent_errors)\n        self.status = record\n        return record\n",
                "fileTypes": [],
                "file_path": "",
                "password": false,
                "name": "code",
                "advanced": true,
                "dynamic": true,
                "info": "",
                "load_from_db": false,
                "title_case": false
              },
              "path": {
                "advanced": false,
                "display_name": "Path",
                "dynamic": false,
                "fileTypes": [
                  ".txt",
                  ".md",
                  ".mdx",
                  ".csv",
                  ".json",
                  ".yaml",
                  ".yml",
                  ".xml",
                  ".html",
                  ".htm",
                  ".pdf",
                  ".docx",
                  ".py",
                  ".sh",
                  ".sql",
                  ".js",
                  ".ts",
                  ".tsx"
                ],
                "file_path": "6d97cbed-e0a8-465f-a844-c6768c974a0c/门禁卡办理指南.docx",
                "info": "Supported file types: txt, md, mdx, csv, json, yaml, yml, xml, html, htm, pdf, docx, py, sh, sql, js, ts, tsx",
                "list": false,
                "load_from_db": false,
                "multiline": false,
                "name": "path",
                "password": false,
                "placeholder": "",
                "required": true,
                "show": true,
                "title_case": false,
                "type": "file",
                "value": ""
              },
              "silent_errors": {
                "advanced": true,
                "display_name": "Silent Errors",
                "dynamic": false,
                "fileTypes": [],
                "file_path": "",
                "info": "If true, errors will not raise an exception.",
                "list": false,
                "load_from_db": false,
                "multiline": false,
                "name": "silent_errors",
                "password": false,
                "placeholder": "",
                "required": false,
                "show": true,
                "title_case": false,
                "type": "bool",
                "value": false
              }
            }
          },
          "type": "File"
        },
        "dragging": false,
        "height": 289,
        "id": "File-HuaYa",
        "position": {
          "x": 2315.247555586142,
          "y": 1895.9553117551404
        },
        "positionAbsolute": {
          "x": 2315.247555586142,
          "y": 1895.9553117551404
        },
        "selected": false,
        "type": "genericNode",
        "width": 384
      },
      {
        "data": {
          "id": "RecursiveCharacterTextSplitter-xDukX",
          "node": {
            "base_classes": [
              "Record"
            ],
            "beta": false,
            "custom_fields": {
              "chunk_overlap": null,
              "chunk_size": null,
              "inputs": null,
              "separators": null
            },
            "description": "Split text into chunks of a specified length.",
            "display_name": "Recursive Character Text Splitter",
            "documentation": "https://docs.axiestudio.org/components/text-splitters#recursivecharactertextsplitter",
            "field_formatters": {},
            "field_order": [],
            "frozen": false,
            "output_types": [
              "Record"
            ],
            "template": {
              "_type": "CustomComponent",
              "chunk_overlap": {
                "advanced": false,
                "display_name": "Chunk Overlap",
                "dynamic": false,
                "fileTypes": [],
                "file_path": "",
                "info": "The amount of overlap between chunks.",
                "list": false,
                "load_from_db": false,
                "multiline": false,
                "name": "chunk_overlap",
                "password": false,
                "placeholder": "",
                "required": false,
                "show": true,
                "title_case": false,
                "type": "int",
                "value": 200
              },
              "chunk_size": {
                "advanced": false,
                "display_name": "Chunk Size",
                "dynamic": false,
                "fileTypes": [],
                "file_path": "",
                "info": "The maximum length of each chunk.",
                "list": false,
                "load_from_db": false,
                "multiline": false,
                "name": "chunk_size",
                "password": false,
                "placeholder": "",
                "required": false,
                "show": true,
                "title_case": false,
                "type": "int",
                "value": 1000
              },
              "code": {
                "type": "code",
                "required": true,
                "placeholder": "",
                "list": false,
                "show": true,
                "multiline": true,
                "value": "from typing import Optional\n\nfrom langchain_core.documents import Document\nfrom langchain_text_splitters import RecursiveCharacterTextSplitter\n\nfrom axiestudio.custom import CustomComponent\nfrom axiestudio.schema import Record\nfrom axiestudio.utils.util import build_loader_repr_from_records, unescape_string\n\n\nclass RecursiveCharacterTextSplitterComponent(CustomComponent):\n    display_name: str = \"Recursive Character Text Splitter\"\n    description: str = \"Split text into chunks of a specified length.\"\n    documentation: str = \"https://docs.axiestudio.org/components/text-splitters#recursivecharactertextsplitter\"\n\n    def build_config(self):\n        return {\n            \"inputs\": {\n                \"display_name\": \"Input\",\n                \"info\": \"The texts to split.\",\n                \"input_types\": [\"Document\", \"Record\"],\n            },\n            \"separators\": {\n                \"display_name\": \"Separators\",\n                \"info\": 'The characters to split on.\\nIf left empty defaults to [\"\\\\n\\\\n\", \"\\\\n\", \" \", \"\"].',\n                \"is_list\": True,\n            },\n            \"chunk_size\": {\n                \"display_name\": \"Chunk Size\",\n                \"info\": \"The maximum length of each chunk.\",\n                \"field_type\": \"int\",\n                \"value\": 1000,\n            },\n            \"chunk_overlap\": {\n                \"display_name\": \"Chunk Overlap\",\n                \"info\": \"The amount of overlap between chunks.\",\n                \"field_type\": \"int\",\n                \"value\": 200,\n            },\n            \"code\": {\"show\": False},\n        }\n\n    def build(\n        self,\n        inputs: list[Document],\n        separators: Optional[list[str]] = None,\n        chunk_size: Optional[int] = 1000,\n        chunk_overlap: Optional[int] = 200,\n    ) -> list[Record]:\n        \"\"\"\n        Split text into chunks of a specified length.\n\n        Args:\n            separators (list[str]): The characters to split on.\n            chunk_size (int): The maximum length of each chunk.\n            chunk_overlap (int): The amount of overlap between chunks.\n            length_function (function): The function to use to calculate the length of the text.\n\n        Returns:\n            list[str]: The chunks of text.\n        \"\"\"\n\n        if separators == \"\":\n            separators = None\n        elif separators:\n            # check if the separators list has escaped characters\n            # if there are escaped characters, unescape them\n            separators = [unescape_string(x) for x in separators]\n\n        # Make sure chunk_size and chunk_overlap are ints\n        if isinstance(chunk_size, str):\n            chunk_size = int(chunk_size)\n        if isinstance(chunk_overlap, str):\n            chunk_overlap = int(chunk_overlap)\n        splitter = RecursiveCharacterTextSplitter(\n            separators=separators,\n            chunk_size=chunk_size,\n            chunk_overlap=chunk_overlap,\n        )\n        documents = []\n        for _input in inputs:\n            if isinstance(_input, Record):\n                documents.append(_input.to_lc_document())\n            else:\n                documents.append(_input)\n        docs = splitter.split_documents(documents)\n        records = self.to_records(docs)\n        self.repr_value = build_loader_repr_from_records(records)\n        return records\n",
                "fileTypes": [],
                "file_path": "",
                "password": false,
                "name": "code",
                "advanced": true,
                "dynamic": true,
                "info": "",
                "load_from_db": false,
                "title_case": false
              },
              "inputs": {
                "advanced": false,
                "display_name": "Input",
                "dynamic": false,
                "fileTypes": [],
                "file_path": "",
                "info": "The texts to split.",
                "input_types": [
                  "Document",
                  "Record"
                ],
                "list": true,
                "load_from_db": false,
                "multiline": false,
                "name": "inputs",
                "password": false,
                "placeholder": "",
                "required": true,
                "show": true,
                "title_case": false,
                "type": "Document"
              },
              "separators": {
                "advanced": false,
                "display_name": "Separators",
                "dynamic": false,
                "fileTypes": [],
                "file_path": "",
                "info": "The characters to split on.\nIf left empty defaults to [\"\\n\\n\", \"\\n\", \" \", \"\"].",
                "input_types": [
                  "Text"
                ],
                "list": true,
                "load_from_db": false,
                "multiline": false,
                "name": "separators",
                "password": false,
                "placeholder": "",
                "required": false,
                "show": true,
                "title_case": false,
                "type": "str",
                "value": [
                  ""
                ]
              }
            }
          },
          "type": "RecursiveCharacterTextSplitter"
        },
        "dragging": false,
        "height": 509,
        "id": "RecursiveCharacterTextSplitter-xDukX",
        "position": {
          "x": 2879.592221916358,
          "y": 1947.0518332301283
        },
        "positionAbsolute": {
          "x": 2879.592221916358,
          "y": 1947.0518332301283
        },
        "selected": true,
        "type": "genericNode",
        "width": 384
      },
      {
        "id": "VectorStoreAgent-WgSW5",
        "type": "genericNode",
        "position": {
          "x": 4894.6381604279795,
          "y": 2197.5888349249067
        },
        "data": {
          "type": "VectorStoreAgent",
          "node": {
            "template": {
              "llm": {
                "type": "BaseLanguageModel",
                "required": true,
                "placeholder": "",
                "list": false,
                "show": true,
                "multiline": false,
                "fileTypes": [],
                "file_path": "",
                "password": false,
                "name": "llm",
                "display_name": "LLM",
                "advanced": false,
                "dynamic": false,
                "info": "",
                "load_from_db": false,
                "title_case": false
              },
              "vector_store_toolkit": {
                "type": "VectorStoreToolkit",
                "required": true,
                "placeholder": "",
                "list": false,
                "show": true,
                "multiline": false,
                "fileTypes": [],
                "file_path": "",
                "password": false,
                "name": "vector_store_toolkit",
                "display_name": "Vector Store Info",
                "advanced": false,
                "dynamic": false,
                "info": "",
                "load_from_db": false,
                "title_case": false
              },
              "code": {
                "type": "code",
                "required": true,
                "placeholder": "",
                "list": false,
                "show": true,
                "multiline": true,
                "value": "from typing import Callable, Union\n\nfrom langchain.agents import AgentExecutor, create_vectorstore_agent\nfrom langchain.agents.agent_toolkits.vectorstore.toolkit import VectorStoreToolkit\n\nfrom axiestudio.custom import CustomComponent\nfrom axiestudio.field_typing import BaseLanguageModel\n\n\nclass VectorStoreAgentComponent(CustomComponent):\n    display_name = \"VectorStoreAgent\"\n    description = \"Construct an agent from a Vector Store.\"\n\n    def build_config(self):\n        return {\n            \"llm\": {\"display_name\": \"LLM\"},\n            \"vector_store_toolkit\": {\"display_name\": \"Vector Store Info\"},\n        }\n\n    def build(\n        self,\n        llm: BaseLanguageModel,\n        vector_store_toolkit: VectorStoreToolkit,\n    ) -> Union[AgentExecutor, Callable]:\n        return create_vectorstore_agent(llm=llm, toolkit=vector_store_toolkit)\n",
                "fileTypes": [],
                "file_path": "",
                "password": false,
                "name": "code",
                "advanced": true,
                "dynamic": true,
                "info": "",
                "load_from_db": false,
                "title_case": false
              },
              "_type": "CustomComponent"
            },
            "description": "Construct an agent from a Vector Store.",
            "base_classes": [
              "AgentExecutor",
              "Callable",
              "Chain",
              "Generic",
              "object",
              "Runnable",
              "RunnableSerializable",
              "Serializable"
            ],
            "display_name": "VectorStoreAgent",
            "documentation": "",
            "custom_fields": {
              "llm": null,
              "vector_store_toolkit": null
            },
            "output_types": [
              "AgentExecutor",
              "Callable"
            ],
            "field_formatters": {},
            "frozen": false,
            "field_order": [],
            "beta": false
          },
          "id": "VectorStoreAgent-WgSW5"
        },
        "selected": false,
        "width": 384,
        "height": 299,
        "positionAbsolute": {
          "x": 4894.6381604279795,
          "y": 2197.5888349249067
        },
        "dragging": false
      },
      {
        "id": "VectorStoreInfo-titeR",
        "type": "genericNode",
        "position": {
          "x": 3887.351008104284,
          "y": 1850.548645897195
        },
        "data": {
          "type": "VectorStoreInfo",
          "node": {
            "template": {
              "vectorstore": {
                "type": "VectorStore",
                "required": true,
                "placeholder": "",
                "list": false,
                "show": true,
                "multiline": false,
                "fileTypes": [],
                "file_path": "",
                "password": false,
                "name": "vectorstore",
                "display_name": "VectorStore",
                "advanced": false,
                "dynamic": false,
                "info": "",
                "load_from_db": false,
                "title_case": false
              },
              "code": {
                "type": "code",
                "required": true,
                "placeholder": "",
                "list": false,
                "show": true,
                "multiline": true,
                "value": "from langchain.agents.agent_toolkits.vectorstore.toolkit import VectorStoreInfo\nfrom langchain_core.vectorstores import VectorStore\n\nfrom axiestudio.custom import CustomComponent\n\n\nclass VectorStoreInfoComponent(CustomComponent):\n    display_name = \"VectorStoreInfo\"\n    description = \"Information about a VectorStore\"\n\n    def build_config(self):\n        return {\n            \"vectorstore\": {\"display_name\": \"VectorStore\"},\n            \"description\": {\"display_name\": \"Description\", \"multiline\": True},\n            \"name\": {\"display_name\": \"Name\"},\n        }\n\n    def build(\n        self,\n        vectorstore: VectorStore,\n        description: str,\n        name: str,\n    ) -> VectorStoreInfo:\n        return VectorStoreInfo(vectorstore=vectorstore, description=description, name=name)\n",
                "fileTypes": [],
                "file_path": "",
                "password": false,
                "name": "code",
                "advanced": true,
                "dynamic": true,
                "info": "",
                "load_from_db": false,
                "title_case": false
              },
              "description": {
                "type": "str",
                "required": true,
                "placeholder": "",
                "list": false,
                "show": true,
                "multiline": true,
                "fileTypes": [],
                "file_path": "",
                "password": false,
                "name": "description",
                "display_name": "Description",
                "advanced": false,
                "dynamic": false,
                "info": "",
                "load_from_db": false,
                "title_case": false,
                "input_types": [
                  "Text"
                ],
                "value": "金域蓝湾知识库"
              },
              "name": {
                "type": "str",
                "required": true,
                "placeholder": "",
                "list": false,
                "show": true,
                "multiline": false,
                "fileTypes": [],
                "file_path": "",
                "password": false,
                "name": "name",
                "display_name": "Name",
                "advanced": false,
                "dynamic": false,
                "info": "",
                "load_from_db": false,
                "title_case": false,
                "input_types": [
                  "Text"
                ],
                "value": "金域蓝湾知识库"
              },
              "_type": "CustomComponent"
            },
            "description": "Information about a VectorStore",
            "base_classes": [
              "VectorStoreInfo"
            ],
            "display_name": "VectorStoreInfo",
            "documentation": "",
            "custom_fields": {
              "vectorstore": null,
              "description": null,
              "name": null
            },
            "output_types": [
              "VectorStoreInfo"
            ],
            "field_formatters": {},
            "frozen": false,
            "field_order": [],
            "beta": false
          },
          "id": "VectorStoreInfo-titeR"
        },
        "selected": false,
        "width": 384,
        "height": 439,
        "positionAbsolute": {
          "x": 3887.351008104284,
          "y": 1850.548645897195
        },
        "dragging": false
      },
      {
        "id": "VectorStoreToolkit-ka4Sk",
        "type": "genericNode",
        "position": {
          "x": 4361.144096242854,
          "y": 2120.4047091413377
        },
        "data": {
          "type": "VectorStoreToolkit",
          "node": {
            "template": {
              "llm": {
                "type": "BaseLanguageModel",
                "required": true,
                "placeholder": "",
                "list": false,
                "show": true,
                "multiline": false,
                "fileTypes": [],
                "file_path": "",
                "password": false,
                "name": "llm",
                "display_name": "LLM",
                "advanced": false,
                "dynamic": false,
                "info": "",
                "load_from_db": false,
                "title_case": false
              },
              "vectorstore_info": {
                "type": "VectorStoreInfo",
                "required": true,
                "placeholder": "",
                "list": false,
                "show": true,
                "multiline": false,
                "fileTypes": [],
                "file_path": "",
                "password": false,
                "name": "vectorstore_info",
                "display_name": "Vector Store Info",
                "advanced": false,
                "dynamic": false,
                "info": "",
                "load_from_db": false,
                "title_case": false
              },
              "code": {
                "type": "code",
                "required": true,
                "placeholder": "",
                "list": false,
                "show": true,
                "multiline": true,
                "value": "from typing import Union\n\nfrom langchain.agents.agent_toolkits.vectorstore.toolkit import VectorStoreInfo, VectorStoreToolkit\n\nfrom axiestudio.custom import CustomComponent\nfrom axiestudio.field_typing import BaseLanguageModel, Tool\n\n\nclass VectorStoreToolkitComponent(CustomComponent):\n    display_name = \"VectorStoreToolkit\"\n    description = \"Toolkit for interacting with a Vector Store.\"\n\n    def build_config(self):\n        return {\n            \"vectorstore_info\": {\"display_name\": \"Vector Store Info\"},\n            \"llm\": {\"display_name\": \"LLM\"},\n        }\n\n    def build(\n        self,\n        vectorstore_info: VectorStoreInfo,\n        llm: BaseLanguageModel,\n    ) -> Union[Tool, VectorStoreToolkit]:\n        return VectorStoreToolkit(vectorstore_info=vectorstore_info, llm=llm)\n",
                "fileTypes": [],
                "file_path": "",
                "password": false,
                "name": "code",
                "advanced": true,
                "dynamic": true,
                "info": "",
                "load_from_db": false,
                "title_case": false
              },
              "_type": "CustomComponent"
            },
            "description": "Toolkit for interacting with a Vector Store.",
            "base_classes": [
              "BaseTool",
              "BaseToolkit",
              "Generic",
              "object",
              "Runnable",
              "RunnableSerializable",
              "Serializable",
              "Tool",
              "VectorStoreToolkit"
            ],
            "display_name": "VectorStoreToolkit",
            "documentation": "",
            "custom_fields": {
              "vectorstore_info": null,
              "llm": null
            },
            "output_types": [
              "Tool",
              "VectorStoreToolkit"
            ],
            "field_formatters": {},
            "frozen": false,
            "field_order": [],
            "beta": false
          },
          "id": "VectorStoreToolkit-ka4Sk"
        },
        "selected": false,
        "width": 384,
        "height": 299,
        "positionAbsolute": {
          "x": 4361.144096242854,
          "y": 2120.4047091413377
        },
        "dragging": false
      },
      {
        "id": "FAISS-WvisE",
        "type": "genericNode",
        "position": {
          "x": 3419.737829810998,
          "y": 1734.7783347955092
        },
        "data": {
          "type": "FAISS",
          "node": {
            "template": {
              "embedding": {
                "type": "Embeddings",
                "required": true,
                "placeholder": "",
                "list": false,
                "show": true,
                "multiline": false,
                "fileTypes": [],
                "file_path": "",
                "password": false,
                "name": "embedding",
                "display_name": "Embedding",
                "advanced": false,
                "dynamic": false,
                "info": "",
                "load_from_db": false,
                "title_case": false
              },
              "inputs": {
                "type": "Record",
                "required": true,
                "placeholder": "",
                "list": true,
                "show": true,
                "multiline": false,
                "fileTypes": [],
                "file_path": "",
                "password": false,
                "name": "inputs",
                "display_name": "Input",
                "advanced": false,
                "input_types": [
                  "Document",
                  "Record"
                ],
                "dynamic": false,
                "info": "",
                "load_from_db": false,
                "title_case": false
              },
              "code": {
                "type": "code",
                "required": true,
                "placeholder": "",
                "list": false,
                "show": true,
                "multiline": true,
                "value": "from typing import List, Text, Union\n\nfrom langchain_community.vectorstores.faiss import FAISS\nfrom langchain_core.retrievers import BaseRetriever\nfrom langchain_core.vectorstores import VectorStore\n\nfrom axiestudio.custom import CustomComponent\nfrom axiestudio.field_typing import Embeddings\nfrom axiestudio.schema import Record\n\n\nclass FAISSComponent(CustomComponent):\n    display_name = \"FAISS\"\n    description = \"Ingest documents into FAISS Vector Store.\"\n    documentation = \"https://python.langchain.com/docs/modules/data_connection/vectorstores/integrations/faiss\"\n\n    def build_config(self):\n        return {\n            \"inputs\": {\"display_name\": \"Input\", \"input_types\": [\"Document\", \"Record\"]},\n            \"embedding\": {\"display_name\": \"Embedding\"},\n            \"folder_path\": {\n                \"display_name\": \"Folder Path\",\n                \"info\": \"Path to save the FAISS index. It will be relative to where Langflow is running.\",\n            },\n            \"index_name\": {\"display_name\": \"Index Name\"},\n        }\n\n    def build(\n        self,\n        embedding: Embeddings,\n        inputs: List[Record],\n        folder_path: str,\n        index_name: str = \"axiestudio_index\",\n    ) -> Union[VectorStore, FAISS, BaseRetriever]:\n        documents = []\n        for _input in inputs or []:\n            if isinstance(_input, Record):\n                documents.append(_input.to_lc_document())\n            else:\n                documents.append(_input)\n        vector_store = FAISS.from_documents(documents=documents, embedding=embedding)\n        if not folder_path:\n            raise ValueError(\"Folder path is required to save the FAISS index.\")\n        path = self.resolve_path(folder_path)\n        vector_store.save_local(Text(path), index_name)\n        return vector_store\n",
                "fileTypes": [],
                "file_path": "",
                "password": false,
                "name": "code",
                "advanced": true,
                "dynamic": true,
                "info": "",
                "load_from_db": false,
                "title_case": false
              },
              "folder_path": {
                "type": "str",
                "required": true,
                "placeholder": "",
                "list": false,
                "show": true,
                "multiline": false,
                "fileTypes": [],
                "file_path": "",
                "password": false,
                "name": "folder_path",
                "display_name": "Folder Path",
                "advanced": false,
                "dynamic": false,
                "info": "Path to save the FAISS index. It will be relative to where Langflow is running.",
                "load_from_db": false,
                "title_case": false,
                "input_types": [
                  "Text"
                ],
                "value": "/Users/liuchang/Desktop"
              },
              "index_name": {
                "type": "str",
                "required": false,
                "placeholder": "",
                "list": false,
                "show": true,
                "multiline": false,
                "value": "axiestudio_index",
                "fileTypes": [],
                "file_path": "",
                "password": false,
                "name": "index_name",
                "display_name": "Index Name",
                "advanced": false,
                "dynamic": false,
                "info": "",
                "load_from_db": false,
                "title_case": false,
                "input_types": [
                  "Text"
                ]
              },
              "_type": "CustomComponent"
            },
            "description": "Ingest documents into FAISS Vector Store.",
            "base_classes": [
              "BaseRetriever",
              "FAISS",
              "Generic",
              "object",
              "Runnable",
              "RunnableSerializable",
              "Serializable",
              "VectorStore"
            ],
            "display_name": "FAISS",
            "documentation": "https://python.langchain.com/docs/modules/data_connection/vectorstores/integrations/faiss",
            "custom_fields": {
              "embedding": null,
              "inputs": null,
              "folder_path": null,
              "index_name": null
            },
            "output_types": [
              "VectorStore",
              "FAISS",
              "BaseRetriever"
            ],
            "field_formatters": {},
            "frozen": false,
            "field_order": [],
            "beta": false
          },
          "id": "FAISS-WvisE"
        },
        "selected": false,
        "width": 384,
        "height": 487,
        "positionAbsolute": {
          "x": 3419.737829810998,
          "y": 1734.7783347955092
        },
        "dragging": false
      },
      {
        "id": "AzureOpenAIEmbeddings-XzhaS",
        "type": "genericNode",
        "position": {
          "x": 2861.485973786855,
          "y": 1399.0032332016522
        },
        "data": {
          "type": "AzureOpenAIEmbeddings",
          "node": {
            "template": {
              "api_key": {
                "type": "str",
                "required": true,
                "placeholder": "",
                "list": false,
                "show": true,
                "multiline": false,
                "fileTypes": [],
                "file_path": "",
                "password": true,
                "name": "api_key",
                "display_name": "API Key",
                "advanced": false,
                "dynamic": false,
                "info": "",
                "load_from_db": false,
                "title_case": false,
                "input_types": [
                  "Text"
                ],
                "value": ""
              },
              "api_version": {
                "type": "str",
                "required": true,
                "placeholder": "",
                "list": true,
                "show": true,
                "multiline": false,
                "value": "2023-08-01-preview",
                "fileTypes": [],
                "file_path": "",
                "password": false,
                "options": [
                  "2022-12-01",
                  "2023-03-15-preview",
                  "2023-05-15",
                  "2023-06-01-preview",
                  "2023-07-01-preview",
                  "2023-08-01-preview"
                ],
                "name": "api_version",
                "display_name": "API Version",
                "advanced": true,
                "dynamic": false,
                "info": "",
                "load_from_db": false,
                "title_case": false,
                "input_types": [
                  "Text"
                ]
              },
              "azure_deployment": {
                "type": "str",
                "required": true,
                "placeholder": "",
                "list": false,
                "show": true,
                "multiline": false,
                "fileTypes": [],
                "file_path": "",
                "password": false,
                "name": "azure_deployment",
                "display_name": "Deployment Name",
                "advanced": false,
                "dynamic": false,
                "info": "",
                "load_from_db": false,
                "title_case": false,
                "input_types": [
                  "Text"
                ],
                "value": "aics-onewo-test-gpt-35"
              },
              "azure_endpoint": {
                "type": "str",
                "required": true,
                "placeholder": "",
                "list": false,
                "show": true,
                "multiline": false,
                "fileTypes": [],
                "file_path": "",
                "password": false,
                "name": "azure_endpoint",
                "display_name": "Azure Endpoint",
                "advanced": false,
                "dynamic": false,
                "info": "Your Azure endpoint, including the resource.. Example: `https://example-resource.azure.openai.com/`",
                "load_from_db": false,
                "title_case": false,
                "input_types": [
                  "Text"
                ],
                "value": "https://onewo-sweden-central.openai.azure.com/"
              },
              "code": {
                "type": "code",
                "required": true,
                "placeholder": "",
                "list": false,
                "show": true,
                "multiline": true,
                "value": "from typing import Optional\nfrom langchain_core.embeddings import Embeddings\nfrom langchain_openai import AzureOpenAIEmbeddings\nfrom pydantic.v1 import SecretStr\n\nfrom axiestudio.custom import CustomComponent\n\n\nclass AzureOpenAIEmbeddingsComponent(CustomComponent):\n    display_name: str = \"Azure OpenAI Embeddings\"\n    description: str = \"Generate embeddings using Azure OpenAI models.\"\n    documentation: str = \"https://python.langchain.com/docs/integrations/text_embedding/azureopenai\"\n    beta = False\n    icon = \"Azure\"\n\n    API_VERSION_OPTIONS = [\n        \"2022-12-01\",\n        \"2023-03-15-preview\",\n        \"2023-05-15\",\n        \"2023-06-01-preview\",\n        \"2023-07-01-preview\",\n        \"2023-08-01-preview\",\n    ]\n\n    def build_config(self):\n        return {\n            \"azure_endpoint\": {\n                \"display_name\": \"Azure Endpoint\",\n                \"required\": True,\n                \"info\": \"Your Azure endpoint, including the resource.. Example: `https://example-resource.azure.openai.com/`\",\n            },\n            \"azure_deployment\": {\n                \"display_name\": \"Deployment Name\",\n                \"required\": True,\n            },\n            \"api_version\": {\n                \"display_name\": \"API Version\",\n                \"options\": self.API_VERSION_OPTIONS,\n                \"value\": self.API_VERSION_OPTIONS[-1],\n                \"advanced\": True,\n            },\n            \"api_key\": {\n                \"display_name\": \"API Key\",\n                \"required\": True,\n                \"password\": True,\n            },\n            \"code\": {\"show\": False},\n            \"dimensions\": {\n                \"display_name\": \"Dimensions\",\n                \"info\": \"The number of dimensions the resulting output embeddings should have. Only supported by certain models.\",\n                \"advanced\": True,\n            },\n        }\n\n    def build(\n        self,\n        azure_endpoint: str,\n        azure_deployment: str,\n        api_version: str,\n        api_key: str,\n        dimensions: Optional[int] = None,\n    ) -> Embeddings:\n        if api_key:\n            azure_api_key = SecretStr(api_key)\n        else:\n            azure_api_key = None\n        try:\n            embeddings = AzureOpenAIEmbeddings(\n                azure_endpoint=azure_endpoint,\n                azure_deployment=azure_deployment,\n                api_version=api_version,\n                api_key=azure_api_key,\n                dimensions=dimensions,\n            )\n\n        except Exception as e:\n            raise ValueError(\"Could not connect to AzureOpenAIEmbeddings API.\") from e\n\n        return embeddings\n",
                "fileTypes": [],
                "file_path": "",
                "password": false,
                "name": "code",
                "advanced": true,
                "dynamic": true,
                "info": "",
                "load_from_db": false,
                "title_case": false
              },
              "dimensions": {
                "type": "int",
                "required": false,
                "placeholder": "",
                "list": false,
                "show": true,
                "multiline": false,
                "fileTypes": [],
                "file_path": "",
                "password": false,
                "name": "dimensions",
                "display_name": "Dimensions",
                "advanced": true,
                "dynamic": false,
                "info": "The number of dimensions the resulting output embeddings should have. Only supported by certain models.",
                "load_from_db": false,
                "title_case": false
              },
              "_type": "CustomComponent"
            },
            "description": "Generate embeddings using Azure OpenAI models.",
            "icon": "Azure",
            "base_classes": [
              "Embeddings"
            ],
            "display_name": "Azure OpenAI Embeddings",
            "documentation": "https://python.langchain.com/docs/integrations/text_embedding/azureopenai",
            "custom_fields": {
              "azure_endpoint": null,
              "azure_deployment": null,
              "api_version": null,
              "api_key": null,
              "dimensions": null
            },
            "output_types": [
              "Embeddings"
            ],
            "field_formatters": {},
            "frozen": false,
            "field_order": [],
            "beta": false
          },
          "id": "AzureOpenAIEmbeddings-XzhaS"
        },
        "selected": false,
        "width": 384,
        "height": 516,
        "positionAbsolute": {
          "x": 2861.485973786855,
          "y": 1399.0032332016522
        },
        "dragging": false
      }
    ],
    "edges": [
      {
        "className": "",
        "data": {
          "sourceHandle": {
            "baseClasses": [
              "Record"
            ],
            "dataType": "File",
            "id": "File-HuaYa"
          },
          "targetHandle": {
            "fieldName": "inputs",
            "id": "RecursiveCharacterTextSplitter-xDukX",
            "inputTypes": [
              "Document",
              "Record"
            ],
            "type": "Document"
          }
        },
        "id": "reactflow__edge-File-HuaYa{œbaseClassesœ:[œRecordœ],œdataTypeœ:œFileœ,œidœ:œFile-HuaYaœ}-RecursiveCharacterTextSplitter-xDukX{œfieldNameœ:œinputsœ,œidœ:œRecursiveCharacterTextSplitter-xDukXœ,œinputTypesœ:[œDocumentœ,œRecordœ],œtypeœ:œDocumentœ}",
        "selected": false,
        "source": "File-HuaYa",
        "sourceHandle": "{œbaseClassesœ:[œRecordœ],œdataTypeœ:œFileœ,œidœ:œFile-HuaYaœ}",
        "style": {
          "stroke": "#555"
        },
        "target": "RecursiveCharacterTextSplitter-xDukX",
        "targetHandle": "{œfieldNameœ:œinputsœ,œidœ:œRecursiveCharacterTextSplitter-xDukXœ,œinputTypesœ:[œDocumentœ,œRecordœ],œtypeœ:œDocumentœ}"
      },
      {
        "source": "VectorStoreInfo-titeR",
        "sourceHandle": "{œbaseClassesœ:[œVectorStoreInfoœ],œdataTypeœ:œVectorStoreInfoœ,œidœ:œVectorStoreInfo-titeRœ}",
        "target": "VectorStoreToolkit-ka4Sk",
        "targetHandle": "{œfieldNameœ:œvectorstore_infoœ,œidœ:œVectorStoreToolkit-ka4Skœ,œinputTypesœ:null,œtypeœ:œVectorStoreInfoœ}",
        "data": {
          "targetHandle": {
            "fieldName": "vectorstore_info",
            "id": "VectorStoreToolkit-ka4Sk",
            "inputTypes": null,
            "type": "VectorStoreInfo"
          },
          "sourceHandle": {
            "baseClasses": [
              "VectorStoreInfo"
            ],
            "dataType": "VectorStoreInfo",
            "id": "VectorStoreInfo-titeR"
          }
        },
        "id": "reactflow__edge-VectorStoreInfo-titeR{œbaseClassesœ:[œVectorStoreInfoœ],œdataTypeœ:œVectorStoreInfoœ,œidœ:œVectorStoreInfo-titeRœ}-VectorStoreToolkit-ka4Sk{œfieldNameœ:œvectorstore_infoœ,œidœ:œVectorStoreToolkit-ka4Skœ,œinputTypesœ:null,œtypeœ:œVectorStoreInfoœ}",
        "className": ""
      },
      {
        "source": "VectorStoreToolkit-ka4Sk",
        "sourceHandle": "{œbaseClassesœ:[œBaseToolœ,œBaseToolkitœ,œGenericœ,œobjectœ,œRunnableœ,œRunnableSerializableœ,œSerializableœ,œToolœ,œVectorStoreToolkitœ],œdataTypeœ:œVectorStoreToolkitœ,œidœ:œVectorStoreToolkit-ka4Skœ}",
        "target": "VectorStoreAgent-WgSW5",
        "targetHandle": "{œfieldNameœ:œvector_store_toolkitœ,œidœ:œVectorStoreAgent-WgSW5œ,œinputTypesœ:null,œtypeœ:œVectorStoreToolkitœ}",
        "data": {
          "targetHandle": {
            "fieldName": "vector_store_toolkit",
            "id": "VectorStoreAgent-WgSW5",
            "inputTypes": null,
            "type": "VectorStoreToolkit"
          },
          "sourceHandle": {
            "baseClasses": [
              "BaseTool",
              "BaseToolkit",
              "Generic",
              "object",
              "Runnable",
              "RunnableSerializable",
              "Serializable",
              "Tool",
              "VectorStoreToolkit"
            ],
            "dataType": "VectorStoreToolkit",
            "id": "VectorStoreToolkit-ka4Sk"
          }
        },
        "id": "reactflow__edge-VectorStoreToolkit-ka4Sk{œbaseClassesœ:[œBaseToolœ,œBaseToolkitœ,œGenericœ,œobjectœ,œRunnableœ,œRunnableSerializableœ,œSerializableœ,œToolœ,œVectorStoreToolkitœ],œdataTypeœ:œVectorStoreToolkitœ,œidœ:œVectorStoreToolkit-ka4Skœ}-VectorStoreAgent-WgSW5{œfieldNameœ:œvector_store_toolkitœ,œidœ:œVectorStoreAgent-WgSW5œ,œinputTypesœ:null,œtypeœ:œVectorStoreToolkitœ}",
        "className": ""
      },
      {
        "source": "FAISS-WvisE",
        "sourceHandle": "{œbaseClassesœ:[œBaseRetrieverœ,œFAISSœ,œGenericœ,œobjectœ,œRunnableœ,œRunnableSerializableœ,œSerializableœ,œVectorStoreœ],œdataTypeœ:œFAISSœ,œidœ:œFAISS-WvisEœ}",
        "target": "VectorStoreInfo-titeR",
        "targetHandle": "{œfieldNameœ:œvectorstoreœ,œidœ:œVectorStoreInfo-titeRœ,œinputTypesœ:null,œtypeœ:œVectorStoreœ}",
        "data": {
          "targetHandle": {
            "fieldName": "vectorstore",
            "id": "VectorStoreInfo-titeR",
            "inputTypes": null,
            "type": "VectorStore"
          },
          "sourceHandle": {
            "baseClasses": [
              "BaseRetriever",
              "FAISS",
              "Generic",
              "object",
              "Runnable",
              "RunnableSerializable",
              "Serializable",
              "VectorStore"
            ],
            "dataType": "FAISS",
            "id": "FAISS-WvisE"
          }
        },
        "id": "reactflow__edge-FAISS-WvisE{œbaseClassesœ:[œBaseRetrieverœ,œFAISSœ,œGenericœ,œobjectœ,œRunnableœ,œRunnableSerializableœ,œSerializableœ,œVectorStoreœ],œdataTypeœ:œFAISSœ,œidœ:œFAISS-WvisEœ}-VectorStoreInfo-titeR{œfieldNameœ:œvectorstoreœ,œidœ:œVectorStoreInfo-titeRœ,œinputTypesœ:null,œtypeœ:œVectorStoreœ}",
        "className": ""
      },
      {
        "source": "RecursiveCharacterTextSplitter-xDukX",
        "sourceHandle": "{œbaseClassesœ:[œRecordœ],œdataTypeœ:œRecursiveCharacterTextSplitterœ,œidœ:œRecursiveCharacterTextSplitter-xDukXœ}",
        "target": "FAISS-WvisE",
        "targetHandle": "{œfieldNameœ:œinputsœ,œidœ:œFAISS-WvisEœ,œinputTypesœ:[œDocumentœ,œRecordœ],œtypeœ:œRecordœ}",
        "data": {
          "targetHandle": {
            "fieldName": "inputs",
            "id": "FAISS-WvisE",
            "inputTypes": [
              "Document",
              "Record"
            ],
            "type": "Record"
          },
          "sourceHandle": {
            "baseClasses": [
              "Record"
            ],
            "dataType": "RecursiveCharacterTextSplitter",
            "id": "RecursiveCharacterTextSplitter-xDukX"
          }
        },
        "id": "reactflow__edge-RecursiveCharacterTextSplitter-xDukX{œbaseClassesœ:[œRecordœ],œdataTypeœ:œRecursiveCharacterTextSplitterœ,œidœ:œRecursiveCharacterTextSplitter-xDukXœ}-FAISS-WvisE{œfieldNameœ:œinputsœ,œidœ:œFAISS-WvisEœ,œinputTypesœ:[œDocumentœ,œRecordœ],œtypeœ:��Recordœ}",
        "className": ""
      },
      {
        "source": "AzureOpenAIEmbeddings-XzhaS",
        "sourceHandle": "{œbaseClassesœ:[œEmbeddingsœ],œdataTypeœ:œAzureOpenAIEmbeddingsœ,œidœ:œAzureOpenAIEmbeddings-XzhaSœ}",
        "target": "FAISS-WvisE",
        "targetHandle": "{œfieldNameœ:œembeddingœ,œidœ:œFAISS-WvisEœ,œinputTypesœ:null,œtypeœ:œEmbeddingsœ}",
        "data": {
          "targetHandle": {
            "fieldName": "embedding",
            "id": "FAISS-WvisE",
            "inputTypes": null,
            "type": "Embeddings"
          },
          "sourceHandle": {
            "baseClasses": [
              "Embeddings"
            ],
            "dataType": "AzureOpenAIEmbeddings",
            "id": "AzureOpenAIEmbeddings-XzhaS"
          }
        },
        "id": "reactflow__edge-AzureOpenAIEmbeddings-XzhaS{œbaseClassesœ:[œEmbeddingsœ],œdataTypeœ:œAzureOpenAIEmbeddingsœ,œidœ:œAzureOpenAIEmbeddings-XzhaSœ}-FAISS-WvisE{œfieldNameœ:œembeddingœ,œidœ:œFAISS-WvisEœ,œinputTypesœ:null,œtypeœ:œEmbeddingsœ}",
        "className": ""
      }
    ],
    "viewport": {
      "x": -708.737852850978,
      "y": -327.70302971960484,
      "zoom": 0.3868323282338439
    }
  },
  "metadata": {
    "File": {
      "count": 1
    },
    "RecursiveCharacterTextSplitter": {
      "count": 1
    },
    "VectorStoreAgent": {
      "count": 1
    },
    "VectorStoreInfo": {
      "count": 1
    },
    "VectorStoreToolkit": {
      "count": 1
    },
    "FAISS": {
      "count": 1
    },
    "AzureOpenAIEmbeddings": {
      "count": 1
    },
    "total": 7
  },
  "original": {
    "id": "91557024-81e5-4e6e-8ac0-63864c430bc1",
    "name": "Vector Store RAG",
    "description": "Visit https://pre-release.langflow.org/tutorials/rag-with-astradb for a detailed guide of this project.\nThis project give you both Ingestion and RAG in a single file. You'll need to visit https://astra.datastax.com/ to create an Astra DB instance, your Token and grab an API Endpoint.\nRunning this project requires you to add a file in the Files component, then define a Collection Name and click on the Play icon on the Astra DB component. \n\nAfter the ingestion ends you are ready to click on the Run button at the lower left corner and start asking questions about your data.",
    "is_component": false,
    "liked_by_count": "8",
    "downloads_count": "62",
    "metadata": {
      "File": {
        "count": 1
      },
      "RecursiveCharacterTextSplitter": {
        "count": 1
      },
      "VectorStoreAgent": {
        "count": 1
      },
      "VectorStoreInfo": {
        "count": 1
      },
      "VectorStoreToolkit": {
        "count": 1
      },
      "FAISS": {
        "count": 1
      },
      "AzureOpenAIEmbeddings": {
        "count": 1
      },
      "total": 7
    },
    "last_tested_version": "1.0.0a61",
    "private": false,
    "data": {
      "nodes": [
        {
          "data": {
            "id": "File-HuaYa",
            "node": {
              "base_classes": [
                "Record"
              ],
              "beta": false,
              "custom_fields": {
                "path": null,
                "silent_errors": null
              },
              "description": "A generic file loader.",
              "display_name": "File",
              "documentation": "",
              "field_formatters": {},
              "field_order": [],
              "frozen": false,
              "icon": "file-text",
              "output_types": [
                "Record"
              ],
              "template": {
                "_type": "CustomComponent",
                "code": {
                  "type": "code",
                  "required": true,
                  "placeholder": "",
                  "list": false,
                  "show": true,
                  "multiline": true,
                  "value": "from pathlib import Path\nfrom typing import Any, Dict\n\nfrom axiestudio.base.data.utils import TEXT_FILE_TYPES, parse_text_file_to_record\nfrom axiestudio.custom import CustomComponent\nfrom axiestudio.schema import Record\n\n\nclass FileComponent(CustomComponent):\n    display_name = \"File\"\n    description = \"A generic file loader.\"\n    icon = \"file-text\"\n\n    def build_config(self) -> Dict[str, Any]:\n        return {\n            \"path\": {\n                \"display_name\": \"Path\",\n                \"field_type\": \"file\",\n                \"file_types\": TEXT_FILE_TYPES,\n                \"info\": f\"Supported file types: {', '.join(TEXT_FILE_TYPES)}\",\n            },\n            \"silent_errors\": {\n                \"display_name\": \"Silent Errors\",\n                \"advanced\": True,\n                \"info\": \"If true, errors will not raise an exception.\",\n            },\n        }\n\n    def load_file(self, path: str, silent_errors: bool = False) -> Record:\n        resolved_path = self.resolve_path(path)\n        path_obj = Path(resolved_path)\n        extension = path_obj.suffix[1:].lower()\n        if extension == \"doc\":\n            raise ValueError(\"doc files are not supported. Please save as .docx\")\n        if extension not in TEXT_FILE_TYPES:\n            raise ValueError(f\"Unsupported file type: {extension}\")\n        record = parse_text_file_to_record(resolved_path, silent_errors)\n        self.status = record if record else \"No data\"\n        return record or Record()\n\n    def build(\n        self,\n        path: str,\n        silent_errors: bool = False,\n    ) -> Record:\n        record = self.load_file(path, silent_errors)\n        self.status = record\n        return record\n",
                  "fileTypes": [],
                  "file_path": "",
                  "password": false,
                  "name": "code",
                  "advanced": true,
                  "dynamic": true,
                  "info": "",
                  "load_from_db": false,
                  "title_case": false
                },
                "path": {
                  "advanced": false,
                  "display_name": "Path",
                  "dynamic": false,
                  "fileTypes": [
                    ".txt",
                    ".md",
                    ".mdx",
                    ".csv",
                    ".json",
                    ".yaml",
                    ".yml",
                    ".xml",
                    ".html",
                    ".htm",
                    ".pdf",
                    ".docx",
                    ".py",
                    ".sh",
                    ".sql",
                    ".js",
                    ".ts",
                    ".tsx"
                  ],
                  "file_path": "6d97cbed-e0a8-465f-a844-c6768c974a0c/门禁卡办理指南.docx",
                  "info": "Supported file types: txt, md, mdx, csv, json, yaml, yml, xml, html, htm, pdf, docx, py, sh, sql, js, ts, tsx",
                  "list": false,
                  "load_from_db": false,
                  "multiline": false,
                  "name": "path",
                  "password": false,
                  "placeholder": "",
                  "required": true,
                  "show": true,
                  "title_case": false,
                  "type": "file",
                  "value": ""
                },
                "silent_errors": {
                  "advanced": true,
                  "display_name": "Silent Errors",
                  "dynamic": false,
                  "fileTypes": [],
                  "file_path": "",
                  "info": "If true, errors will not raise an exception.",
                  "list": false,
                  "load_from_db": false,
                  "multiline": false,
                  "name": "silent_errors",
                  "password": false,
                  "placeholder": "",
                  "required": false,
                  "show": true,
                  "title_case": false,
                  "type": "bool",
                  "value": false
                }
              }
            },
            "type": "File"
          },
          "dragging": false,
          "height": 289,
          "id": "File-HuaYa",
          "position": {
            "x": 2315.247555586142,
            "y": 1895.9553117551404
          },
          "positionAbsolute": {
            "x": 2315.247555586142,
            "y": 1895.9553117551404
          },
          "selected": false,
          "type": "genericNode",
          "width": 384
        },
        {
          "data": {
            "id": "RecursiveCharacterTextSplitter-xDukX",
            "node": {
              "base_classes": [
                "Record"
              ],
              "beta": false,
              "custom_fields": {
                "chunk_overlap": null,
                "chunk_size": null,
                "inputs": null,
                "separators": null
              },
              "description": "Split text into chunks of a specified length.",
              "display_name": "Recursive Character Text Splitter",
              "documentation": "https://docs.axiestudio.org/components/text-splitters#recursivecharactertextsplitter",
              "field_formatters": {},
              "field_order": [],
              "frozen": false,
              "output_types": [
                "Record"
              ],
              "template": {
                "_type": "CustomComponent",
                "chunk_overlap": {
                  "advanced": false,
                  "display_name": "Chunk Overlap",
                  "dynamic": false,
                  "fileTypes": [],
                  "file_path": "",
                  "info": "The amount of overlap between chunks.",
                  "list": false,
                  "load_from_db": false,
                  "multiline": false,
                  "name": "chunk_overlap",
                  "password": false,
                  "placeholder": "",
                  "required": false,
                  "show": true,
                  "title_case": false,
                  "type": "int",
                  "value": 200
                },
                "chunk_size": {
                  "advanced": false,
                  "display_name": "Chunk Size",
                  "dynamic": false,
                  "fileTypes": [],
                  "file_path": "",
                  "info": "The maximum length of each chunk.",
                  "list": false,
                  "load_from_db": false,
                  "multiline": false,
                  "name": "chunk_size",
                  "password": false,
                  "placeholder": "",
                  "required": false,
                  "show": true,
                  "title_case": false,
                  "type": "int",
                  "value": 1000
                },
                "code": {
                  "type": "code",
                  "required": true,
                  "placeholder": "",
                  "list": false,
                  "show": true,
                  "multiline": true,
                  "value": "from typing import Optional\n\nfrom langchain_core.documents import Document\nfrom langchain_text_splitters import RecursiveCharacterTextSplitter\n\nfrom axiestudio.custom import CustomComponent\nfrom axiestudio.schema import Record\nfrom axiestudio.utils.util import build_loader_repr_from_records, unescape_string\n\n\nclass RecursiveCharacterTextSplitterComponent(CustomComponent):\n    display_name: str = \"Recursive Character Text Splitter\"\n    description: str = \"Split text into chunks of a specified length.\"\n    documentation: str = \"https://docs.axiestudio.org/components/text-splitters#recursivecharactertextsplitter\"\n\n    def build_config(self):\n        return {\n            \"inputs\": {\n                \"display_name\": \"Input\",\n                \"info\": \"The texts to split.\",\n                \"input_types\": [\"Document\", \"Record\"],\n            },\n            \"separators\": {\n                \"display_name\": \"Separators\",\n                \"info\": 'The characters to split on.\\nIf left empty defaults to [\"\\\\n\\\\n\", \"\\\\n\", \" \", \"\"].',\n                \"is_list\": True,\n            },\n            \"chunk_size\": {\n                \"display_name\": \"Chunk Size\",\n                \"info\": \"The maximum length of each chunk.\",\n                \"field_type\": \"int\",\n                \"value\": 1000,\n            },\n            \"chunk_overlap\": {\n                \"display_name\": \"Chunk Overlap\",\n                \"info\": \"The amount of overlap between chunks.\",\n                \"field_type\": \"int\",\n                \"value\": 200,\n            },\n            \"code\": {\"show\": False},\n        }\n\n    def build(\n        self,\n        inputs: list[Document],\n        separators: Optional[list[str]] = None,\n        chunk_size: Optional[int] = 1000,\n        chunk_overlap: Optional[int] = 200,\n    ) -> list[Record]:\n        \"\"\"\n        Split text into chunks of a specified length.\n\n        Args:\n            separators (list[str]): The characters to split on.\n            chunk_size (int): The maximum length of each chunk.\n            chunk_overlap (int): The amount of overlap between chunks.\n            length_function (function): The function to use to calculate the length of the text.\n\n        Returns:\n            list[str]: The chunks of text.\n        \"\"\"\n\n        if separators == \"\":\n            separators = None\n        elif separators:\n            # check if the separators list has escaped characters\n            # if there are escaped characters, unescape them\n            separators = [unescape_string(x) for x in separators]\n\n        # Make sure chunk_size and chunk_overlap are ints\n        if isinstance(chunk_size, str):\n            chunk_size = int(chunk_size)\n        if isinstance(chunk_overlap, str):\n            chunk_overlap = int(chunk_overlap)\n        splitter = RecursiveCharacterTextSplitter(\n            separators=separators,\n            chunk_size=chunk_size,\n            chunk_overlap=chunk_overlap,\n        )\n        documents = []\n        for _input in inputs:\n            if isinstance(_input, Record):\n                documents.append(_input.to_lc_document())\n            else:\n                documents.append(_input)\n        docs = splitter.split_documents(documents)\n        records = self.to_records(docs)\n        self.repr_value = build_loader_repr_from_records(records)\n        return records\n",
                  "fileTypes": [],
                  "file_path": "",
                  "password": false,
                  "name": "code",
                  "advanced": true,
                  "dynamic": true,
                  "info": "",
                  "load_from_db": false,
                  "title_case": false
                },
                "inputs": {
                  "advanced": false,
                  "display_name": "Input",
                  "dynamic": false,
                  "fileTypes": [],
                  "file_path": "",
                  "info": "The texts to split.",
                  "input_types": [
                    "Document",
                    "Record"
                  ],
                  "list": true,
                  "load_from_db": false,
                  "multiline": false,
                  "name": "inputs",
                  "password": false,
                  "placeholder": "",
                  "required": true,
                  "show": true,
                  "title_case": false,
                  "type": "Document"
                },
                "separators": {
                  "advanced": false,
                  "display_name": "Separators",
                  "dynamic": false,
                  "fileTypes": [],
                  "file_path": "",
                  "info": "The characters to split on.\nIf left empty defaults to [\"\\n\\n\", \"\\n\", \" \", \"\"].",
                  "input_types": [
                    "Text"
                  ],
                  "list": true,
                  "load_from_db": false,
                  "multiline": false,
                  "name": "separators",
                  "password": false,
                  "placeholder": "",
                  "required": false,
                  "show": true,
                  "title_case": false,
                  "type": "str",
                  "value": [
                    ""
                  ]
                }
              }
            },
            "type": "RecursiveCharacterTextSplitter"
          },
          "dragging": false,
          "height": 509,
          "id": "RecursiveCharacterTextSplitter-xDukX",
          "position": {
            "x": 2879.592221916358,
            "y": 1947.0518332301283
          },
          "positionAbsolute": {
            "x": 2879.592221916358,
            "y": 1947.0518332301283
          },
          "selected": true,
          "type": "genericNode",
          "width": 384
        },
        {
          "id": "VectorStoreAgent-WgSW5",
          "type": "genericNode",
          "position": {
            "x": 4894.6381604279795,
            "y": 2197.5888349249067
          },
          "data": {
            "type": "VectorStoreAgent",
            "node": {
              "template": {
                "llm": {
                  "type": "BaseLanguageModel",
                  "required": true,
                  "placeholder": "",
                  "list": false,
                  "show": true,
                  "multiline": false,
                  "fileTypes": [],
                  "file_path": "",
                  "password": false,
                  "name": "llm",
                  "display_name": "LLM",
                  "advanced": false,
                  "dynamic": false,
                  "info": "",
                  "load_from_db": false,
                  "title_case": false
                },
                "vector_store_toolkit": {
                  "type": "VectorStoreToolkit",
                  "required": true,
                  "placeholder": "",
                  "list": false,
                  "show": true,
                  "multiline": false,
                  "fileTypes": [],
                  "file_path": "",
                  "password": false,
                  "name": "vector_store_toolkit",
                  "display_name": "Vector Store Info",
                  "advanced": false,
                  "dynamic": false,
                  "info": "",
                  "load_from_db": false,
                  "title_case": false
                },
                "code": {
                  "type": "code",
                  "required": true,
                  "placeholder": "",
                  "list": false,
                  "show": true,
                  "multiline": true,
                  "value": "from typing import Callable, Union\n\nfrom langchain.agents import AgentExecutor, create_vectorstore_agent\nfrom langchain.agents.agent_toolkits.vectorstore.toolkit import VectorStoreToolkit\n\nfrom axiestudio.custom import CustomComponent\nfrom axiestudio.field_typing import BaseLanguageModel\n\n\nclass VectorStoreAgentComponent(CustomComponent):\n    display_name = \"VectorStoreAgent\"\n    description = \"Construct an agent from a Vector Store.\"\n\n    def build_config(self):\n        return {\n            \"llm\": {\"display_name\": \"LLM\"},\n            \"vector_store_toolkit\": {\"display_name\": \"Vector Store Info\"},\n        }\n\n    def build(\n        self,\n        llm: BaseLanguageModel,\n        vector_store_toolkit: VectorStoreToolkit,\n    ) -> Union[AgentExecutor, Callable]:\n        return create_vectorstore_agent(llm=llm, toolkit=vector_store_toolkit)\n",
                  "fileTypes": [],
                  "file_path": "",
                  "password": false,
                  "name": "code",
                  "advanced": true,
                  "dynamic": true,
                  "info": "",
                  "load_from_db": false,
                  "title_case": false
                },
                "_type": "CustomComponent"
              },
              "description": "Construct an agent from a Vector Store.",
              "base_classes": [
                "AgentExecutor",
                "Callable",
                "Chain",
                "Generic",
                "object",
                "Runnable",
                "RunnableSerializable",
                "Serializable"
              ],
              "display_name": "VectorStoreAgent",
              "documentation": "",
              "custom_fields": {
                "llm": null,
                "vector_store_toolkit": null
              },
              "output_types": [
                "AgentExecutor",
                "Callable"
              ],
              "field_formatters": {},
              "frozen": false,
              "field_order": [],
              "beta": false
            },
            "id": "VectorStoreAgent-WgSW5"
          },
          "selected": false,
          "width": 384,
          "height": 299,
          "positionAbsolute": {
            "x": 4894.6381604279795,
            "y": 2197.5888349249067
          },
          "dragging": false
        },
        {
          "id": "VectorStoreInfo-titeR",
          "type": "genericNode",
          "position": {
            "x": 3887.351008104284,
            "y": 1850.548645897195
          },
          "data": {
            "type": "VectorStoreInfo",
            "node": {
              "template": {
                "vectorstore": {
                  "type": "VectorStore",
                  "required": true,
                  "placeholder": "",
                  "list": false,
                  "show": true,
                  "multiline": false,
                  "fileTypes": [],
                  "file_path": "",
                  "password": false,
                  "name": "vectorstore",
                  "display_name": "VectorStore",
                  "advanced": false,
                  "dynamic": false,
                  "info": "",
                  "load_from_db": false,
                  "title_case": false
                },
                "code": {
                  "type": "code",
                  "required": true,
                  "placeholder": "",
                  "list": false,
                  "show": true,
                  "multiline": true,
                  "value": "from langchain.agents.agent_toolkits.vectorstore.toolkit import VectorStoreInfo\nfrom langchain_core.vectorstores import VectorStore\n\nfrom axiestudio.custom import CustomComponent\n\n\nclass VectorStoreInfoComponent(CustomComponent):\n    display_name = \"VectorStoreInfo\"\n    description = \"Information about a VectorStore\"\n\n    def build_config(self):\n        return {\n            \"vectorstore\": {\"display_name\": \"VectorStore\"},\n            \"description\": {\"display_name\": \"Description\", \"multiline\": True},\n            \"name\": {\"display_name\": \"Name\"},\n        }\n\n    def build(\n        self,\n        vectorstore: VectorStore,\n        description: str,\n        name: str,\n    ) -> VectorStoreInfo:\n        return VectorStoreInfo(vectorstore=vectorstore, description=description, name=name)\n",
                  "fileTypes": [],
                  "file_path": "",
                  "password": false,
                  "name": "code",
                  "advanced": true,
                  "dynamic": true,
                  "info": "",
                  "load_from_db": false,
                  "title_case": false
                },
                "description": {
                  "type": "str",
                  "required": true,
                  "placeholder": "",
                  "list": false,
                  "show": true,
                  "multiline": true,
                  "fileTypes": [],
                  "file_path": "",
                  "password": false,
                  "name": "description",
                  "display_name": "Description",
                  "advanced": false,
                  "dynamic": false,
                  "info": "",
                  "load_from_db": false,
                  "title_case": false,
                  "input_types": [
                    "Text"
                  ],
                  "value": "金域蓝湾知识库"
                },
                "name": {
                  "type": "str",
                  "required": true,
                  "placeholder": "",
                  "list": false,
                  "show": true,
                  "multiline": false,
                  "fileTypes": [],
                  "file_path": "",
                  "password": false,
                  "name": "name",
                  "display_name": "Name",
                  "advanced": false,
                  "dynamic": false,
                  "info": "",
                  "load_from_db": false,
                  "title_case": false,
                  "input_types": [
                    "Text"
                  ],
                  "value": "金域蓝湾知识库"
                },
                "_type": "CustomComponent"
              },
              "description": "Information about a VectorStore",
              "base_classes": [
                "VectorStoreInfo"
              ],
              "display_name": "VectorStoreInfo",
              "documentation": "",
              "custom_fields": {
                "vectorstore": null,
                "description": null,
                "name": null
              },
              "output_types": [
                "VectorStoreInfo"
              ],
              "field_formatters": {},
              "frozen": false,
              "field_order": [],
              "beta": false
            },
            "id": "VectorStoreInfo-titeR"
          },
          "selected": false,
          "width": 384,
          "height": 439,
          "positionAbsolute": {
            "x": 3887.351008104284,
            "y": 1850.548645897195
          },
          "dragging": false
        },
        {
          "id": "VectorStoreToolkit-ka4Sk",
          "type": "genericNode",
          "position": {
            "x": 4361.144096242854,
            "y": 2120.4047091413377
          },
          "data": {
            "type": "VectorStoreToolkit",
            "node": {
              "template": {
                "llm": {
                  "type": "BaseLanguageModel",
                  "required": true,
                  "placeholder": "",
                  "list": false,
                  "show": true,
                  "multiline": false,
                  "fileTypes": [],
                  "file_path": "",
                  "password": false,
                  "name": "llm",
                  "display_name": "LLM",
                  "advanced": false,
                  "dynamic": false,
                  "info": "",
                  "load_from_db": false,
                  "title_case": false
                },
                "vectorstore_info": {
                  "type": "VectorStoreInfo",
                  "required": true,
                  "placeholder": "",
                  "list": false,
                  "show": true,
                  "multiline": false,
                  "fileTypes": [],
                  "file_path": "",
                  "password": false,
                  "name": "vectorstore_info",
                  "display_name": "Vector Store Info",
                  "advanced": false,
                  "dynamic": false,
                  "info": "",
                  "load_from_db": false,
                  "title_case": false
                },
                "code": {
                  "type": "code",
                  "required": true,
                  "placeholder": "",
                  "list": false,
                  "show": true,
                  "multiline": true,
                  "value": "from typing import Union\n\nfrom langchain.agents.agent_toolkits.vectorstore.toolkit import VectorStoreInfo, VectorStoreToolkit\n\nfrom axiestudio.custom import CustomComponent\nfrom axiestudio.field_typing import BaseLanguageModel, Tool\n\n\nclass VectorStoreToolkitComponent(CustomComponent):\n    display_name = \"VectorStoreToolkit\"\n    description = \"Toolkit for interacting with a Vector Store.\"\n\n    def build_config(self):\n        return {\n            \"vectorstore_info\": {\"display_name\": \"Vector Store Info\"},\n            \"llm\": {\"display_name\": \"LLM\"},\n        }\n\n    def build(\n        self,\n        vectorstore_info: VectorStoreInfo,\n        llm: BaseLanguageModel,\n    ) -> Union[Tool, VectorStoreToolkit]:\n        return VectorStoreToolkit(vectorstore_info=vectorstore_info, llm=llm)\n",
                  "fileTypes": [],
                  "file_path": "",
                  "password": false,
                  "name": "code",
                  "advanced": true,
                  "dynamic": true,
                  "info": "",
                  "load_from_db": false,
                  "title_case": false
                },
                "_type": "CustomComponent"
              },
              "description": "Toolkit for interacting with a Vector Store.",
              "base_classes": [
                "BaseTool",
                "BaseToolkit",
                "Generic",
                "object",
                "Runnable",
                "RunnableSerializable",
                "Serializable",
                "Tool",
                "VectorStoreToolkit"
              ],
              "display_name": "VectorStoreToolkit",
              "documentation": "",
              "custom_fields": {
                "vectorstore_info": null,
                "llm": null
              },
              "output_types": [
                "Tool",
                "VectorStoreToolkit"
              ],
              "field_formatters": {},
              "frozen": false,
              "field_order": [],
              "beta": false
            },
            "id": "VectorStoreToolkit-ka4Sk"
          },
          "selected": false,
          "width": 384,
          "height": 299,
          "positionAbsolute": {
            "x": 4361.144096242854,
            "y": 2120.4047091413377
          },
          "dragging": false
        },
        {
          "id": "FAISS-WvisE",
          "type": "genericNode",
          "position": {
            "x": 3419.737829810998,
            "y": 1734.7783347955092
          },
          "data": {
            "type": "FAISS",
            "node": {
              "template": {
                "embedding": {
                  "type": "Embeddings",
                  "required": true,
                  "placeholder": "",
                  "list": false,
                  "show": true,
                  "multiline": false,
                  "fileTypes": [],
                  "file_path": "",
                  "password": false,
                  "name": "embedding",
                  "display_name": "Embedding",
                  "advanced": false,
                  "dynamic": false,
                  "info": "",
                  "load_from_db": false,
                  "title_case": false
                },
                "inputs": {
                  "type": "Record",
                  "required": true,
                  "placeholder": "",
                  "list": true,
                  "show": true,
                  "multiline": false,
                  "fileTypes": [],
                  "file_path": "",
                  "password": false,
                  "name": "inputs",
                  "display_name": "Input",
                  "advanced": false,
                  "input_types": [
                    "Document",
                    "Record"
                  ],
                  "dynamic": false,
                  "info": "",
                  "load_from_db": false,
                  "title_case": false
                },
                "code": {
                  "type": "code",
                  "required": true,
                  "placeholder": "",
                  "list": false,
                  "show": true,
                  "multiline": true,
                  "value": "from typing import List, Text, Union\n\nfrom langchain_community.vectorstores.faiss import FAISS\nfrom langchain_core.retrievers import BaseRetriever\nfrom langchain_core.vectorstores import VectorStore\n\nfrom axiestudio.custom import CustomComponent\nfrom axiestudio.field_typing import Embeddings\nfrom axiestudio.schema import Record\n\n\nclass FAISSComponent(CustomComponent):\n    display_name = \"FAISS\"\n    description = \"Ingest documents into FAISS Vector Store.\"\n    documentation = \"https://python.langchain.com/docs/modules/data_connection/vectorstores/integrations/faiss\"\n\n    def build_config(self):\n        return {\n            \"inputs\": {\"display_name\": \"Input\", \"input_types\": [\"Document\", \"Record\"]},\n            \"embedding\": {\"display_name\": \"Embedding\"},\n            \"folder_path\": {\n                \"display_name\": \"Folder Path\",\n                \"info\": \"Path to save the FAISS index. It will be relative to where Langflow is running.\",\n            },\n            \"index_name\": {\"display_name\": \"Index Name\"},\n        }\n\n    def build(\n        self,\n        embedding: Embeddings,\n        inputs: List[Record],\n        folder_path: str,\n        index_name: str = \"axiestudio_index\",\n    ) -> Union[VectorStore, FAISS, BaseRetriever]:\n        documents = []\n        for _input in inputs or []:\n            if isinstance(_input, Record):\n                documents.append(_input.to_lc_document())\n            else:\n                documents.append(_input)\n        vector_store = FAISS.from_documents(documents=documents, embedding=embedding)\n        if not folder_path:\n            raise ValueError(\"Folder path is required to save the FAISS index.\")\n        path = self.resolve_path(folder_path)\n        vector_store.save_local(Text(path), index_name)\n        return vector_store\n",
                  "fileTypes": [],
                  "file_path": "",
                  "password": false,
                  "name": "code",
                  "advanced": true,
                  "dynamic": true,
                  "info": "",
                  "load_from_db": false,
                  "title_case": false
                },
                "folder_path": {
                  "type": "str",
                  "required": true,
                  "placeholder": "",
                  "list": false,
                  "show": true,
                  "multiline": false,
                  "fileTypes": [],
                  "file_path": "",
                  "password": false,
                  "name": "folder_path",
                  "display_name": "Folder Path",
                  "advanced": false,
                  "dynamic": false,
                  "info": "Path to save the FAISS index. It will be relative to where Langflow is running.",
                  "load_from_db": false,
                  "title_case": false,
                  "input_types": [
                    "Text"
                  ],
                  "value": "/Users/liuchang/Desktop"
                },
                "index_name": {
                  "type": "str",
                  "required": false,
                  "placeholder": "",
                  "list": false,
                  "show": true,
                  "multiline": false,
                  "value": "axiestudio_index",
                  "fileTypes": [],
                  "file_path": "",
                  "password": false,
                  "name": "index_name",
                  "display_name": "Index Name",
                  "advanced": false,
                  "dynamic": false,
                  "info": "",
                  "load_from_db": false,
                  "title_case": false,
                  "input_types": [
                    "Text"
                  ]
                },
                "_type": "CustomComponent"
              },
              "description": "Ingest documents into FAISS Vector Store.",
              "base_classes": [
                "BaseRetriever",
                "FAISS",
                "Generic",
                "object",
                "Runnable",
                "RunnableSerializable",
                "Serializable",
                "VectorStore"
              ],
              "display_name": "FAISS",
              "documentation": "https://python.langchain.com/docs/modules/data_connection/vectorstores/integrations/faiss",
              "custom_fields": {
                "embedding": null,
                "inputs": null,
                "folder_path": null,
                "index_name": null
              },
              "output_types": [
                "VectorStore",
                "FAISS",
                "BaseRetriever"
              ],
              "field_formatters": {},
              "frozen": false,
              "field_order": [],
              "beta": false
            },
            "id": "FAISS-WvisE"
          },
          "selected": false,
          "width": 384,
          "height": 487,
          "positionAbsolute": {
            "x": 3419.737829810998,
            "y": 1734.7783347955092
          },
          "dragging": false
        },
        {
          "id": "AzureOpenAIEmbeddings-XzhaS",
          "type": "genericNode",
          "position": {
            "x": 2861.485973786855,
            "y": 1399.0032332016522
          },
          "data": {
            "type": "AzureOpenAIEmbeddings",
            "node": {
              "template": {
                "api_key": {
                  "type": "str",
                  "required": true,
                  "placeholder": "",
                  "list": false,
                  "show": true,
                  "multiline": false,
                  "fileTypes": [],
                  "file_path": "",
                  "password": true,
                  "name": "api_key",
                  "display_name": "API Key",
                  "advanced": false,
                  "dynamic": false,
                  "info": "",
                  "load_from_db": false,
                  "title_case": false,
                  "input_types": [
                    "Text"
                  ],
                  "value": ""
                },
                "api_version": {
                  "type": "str",
                  "required": true,
                  "placeholder": "",
                  "list": true,
                  "show": true,
                  "multiline": false,
                  "value": "2023-08-01-preview",
                  "fileTypes": [],
                  "file_path": "",
                  "password": false,
                  "options": [
                    "2022-12-01",
                    "2023-03-15-preview",
                    "2023-05-15",
                    "2023-06-01-preview",
                    "2023-07-01-preview",
                    "2023-08-01-preview"
                  ],
                  "name": "api_version",
                  "display_name": "API Version",
                  "advanced": true,
                  "dynamic": false,
                  "info": "",
                  "load_from_db": false,
                  "title_case": false,
                  "input_types": [
                    "Text"
                  ]
                },
                "azure_deployment": {
                  "type": "str",
                  "required": true,
                  "placeholder": "",
                  "list": false,
                  "show": true,
                  "multiline": false,
                  "fileTypes": [],
                  "file_path": "",
                  "password": false,
                  "name": "azure_deployment",
                  "display_name": "Deployment Name",
                  "advanced": false,
                  "dynamic": false,
                  "info": "",
                  "load_from_db": false,
                  "title_case": false,
                  "input_types": [
                    "Text"
                  ],
                  "value": "aics-onewo-test-gpt-35"
                },
                "azure_endpoint": {
                  "type": "str",
                  "required": true,
                  "placeholder": "",
                  "list": false,
                  "show": true,
                  "multiline": false,
                  "fileTypes": [],
                  "file_path": "",
                  "password": false,
                  "name": "azure_endpoint",
                  "display_name": "Azure Endpoint",
                  "advanced": false,
                  "dynamic": false,
                  "info": "Your Azure endpoint, including the resource.. Example: `https://example-resource.azure.openai.com/`",
                  "load_from_db": false,
                  "title_case": false,
                  "input_types": [
                    "Text"
                  ],
                  "value": "https://onewo-sweden-central.openai.azure.com/"
                },
                "code": {
                  "type": "code",
                  "required": true,
                  "placeholder": "",
                  "list": false,
                  "show": true,
                  "multiline": true,
                  "value": "from typing import Optional\nfrom langchain_core.embeddings import Embeddings\nfrom langchain_openai import AzureOpenAIEmbeddings\nfrom pydantic.v1 import SecretStr\n\nfrom axiestudio.custom import CustomComponent\n\n\nclass AzureOpenAIEmbeddingsComponent(CustomComponent):\n    display_name: str = \"Azure OpenAI Embeddings\"\n    description: str = \"Generate embeddings using Azure OpenAI models.\"\n    documentation: str = \"https://python.langchain.com/docs/integrations/text_embedding/azureopenai\"\n    beta = False\n    icon = \"Azure\"\n\n    API_VERSION_OPTIONS = [\n        \"2022-12-01\",\n        \"2023-03-15-preview\",\n        \"2023-05-15\",\n        \"2023-06-01-preview\",\n        \"2023-07-01-preview\",\n        \"2023-08-01-preview\",\n    ]\n\n    def build_config(self):\n        return {\n            \"azure_endpoint\": {\n                \"display_name\": \"Azure Endpoint\",\n                \"required\": True,\n                \"info\": \"Your Azure endpoint, including the resource.. Example: `https://example-resource.azure.openai.com/`\",\n            },\n            \"azure_deployment\": {\n                \"display_name\": \"Deployment Name\",\n                \"required\": True,\n            },\n            \"api_version\": {\n                \"display_name\": \"API Version\",\n                \"options\": self.API_VERSION_OPTIONS,\n                \"value\": self.API_VERSION_OPTIONS[-1],\n                \"advanced\": True,\n            },\n            \"api_key\": {\n                \"display_name\": \"API Key\",\n                \"required\": True,\n                \"password\": True,\n            },\n            \"code\": {\"show\": False},\n            \"dimensions\": {\n                \"display_name\": \"Dimensions\",\n                \"info\": \"The number of dimensions the resulting output embeddings should have. Only supported by certain models.\",\n                \"advanced\": True,\n            },\n        }\n\n    def build(\n        self,\n        azure_endpoint: str,\n        azure_deployment: str,\n        api_version: str,\n        api_key: str,\n        dimensions: Optional[int] = None,\n    ) -> Embeddings:\n        if api_key:\n            azure_api_key = SecretStr(api_key)\n        else:\n            azure_api_key = None\n        try:\n            embeddings = AzureOpenAIEmbeddings(\n                azure_endpoint=azure_endpoint,\n                azure_deployment=azure_deployment,\n                api_version=api_version,\n                api_key=azure_api_key,\n                dimensions=dimensions,\n            )\n\n        except Exception as e:\n            raise ValueError(\"Could not connect to AzureOpenAIEmbeddings API.\") from e\n\n        return embeddings\n",
                  "fileTypes": [],
                  "file_path": "",
                  "password": false,
                  "name": "code",
                  "advanced": true,
                  "dynamic": true,
                  "info": "",
                  "load_from_db": false,
                  "title_case": false
                },
                "dimensions": {
                  "type": "int",
                  "required": false,
                  "placeholder": "",
                  "list": false,
                  "show": true,
                  "multiline": false,
                  "fileTypes": [],
                  "file_path": "",
                  "password": false,
                  "name": "dimensions",
                  "display_name": "Dimensions",
                  "advanced": true,
                  "dynamic": false,
                  "info": "The number of dimensions the resulting output embeddings should have. Only supported by certain models.",
                  "load_from_db": false,
                  "title_case": false
                },
                "_type": "CustomComponent"
              },
              "description": "Generate embeddings using Azure OpenAI models.",
              "icon": "Azure",
              "base_classes": [
                "Embeddings"
              ],
              "display_name": "Azure OpenAI Embeddings",
              "documentation": "https://python.langchain.com/docs/integrations/text_embedding/azureopenai",
              "custom_fields": {
                "azure_endpoint": null,
                "azure_deployment": null,
                "api_version": null,
                "api_key": null,
                "dimensions": null
              },
              "output_types": [
                "Embeddings"
              ],
              "field_formatters": {},
              "frozen": false,
              "field_order": [],
              "beta": false
            },
            "id": "AzureOpenAIEmbeddings-XzhaS"
          },
          "selected": false,
          "width": 384,
          "height": 516,
          "positionAbsolute": {
            "x": 2861.485973786855,
            "y": 1399.0032332016522
          },
          "dragging": false
        }
      ],
      "edges": [
        {
          "className": "",
          "data": {
            "sourceHandle": {
              "baseClasses": [
                "Record"
              ],
              "dataType": "File",
              "id": "File-HuaYa"
            },
            "targetHandle": {
              "fieldName": "inputs",
              "id": "RecursiveCharacterTextSplitter-xDukX",
              "inputTypes": [
                "Document",
                "Record"
              ],
              "type": "Document"
            }
          },
          "id": "reactflow__edge-File-HuaYa{œbaseClassesœ:[œRecordœ],œdataTypeœ:œFileœ,œidœ:œFile-HuaYaœ}-RecursiveCharacterTextSplitter-xDukX{œfieldNameœ:œinputsœ,œidœ:œRecursiveCharacterTextSplitter-xDukXœ,œinputTypesœ:[œDocumentœ,œRecordœ],œtypeœ:œDocumentœ}",
          "selected": false,
          "source": "File-HuaYa",
          "sourceHandle": "{œbaseClassesœ:[œRecordœ],œdataTypeœ:œFileœ,œidœ:œFile-HuaYaœ}",
          "style": {
            "stroke": "#555"
          },
          "target": "RecursiveCharacterTextSplitter-xDukX",
          "targetHandle": "{œfieldNameœ:œinputsœ,œidœ:œRecursiveCharacterTextSplitter-xDukXœ,œinputTypesœ:[œDocumentœ,œRecordœ],œtypeœ:œDocumentœ}"
        },
        {
          "source": "VectorStoreInfo-titeR",
          "sourceHandle": "{œbaseClassesœ:[œVectorStoreInfoœ],œdataTypeœ:œVectorStoreInfoœ,œidœ:œVectorStoreInfo-titeRœ}",
          "target": "VectorStoreToolkit-ka4Sk",
          "targetHandle": "{œfieldNameœ:œvectorstore_infoœ,œidœ:œVectorStoreToolkit-ka4Skœ,œinputTypesœ:null,œtypeœ:œVectorStoreInfoœ}",
          "data": {
            "targetHandle": {
              "fieldName": "vectorstore_info",
              "id": "VectorStoreToolkit-ka4Sk",
              "inputTypes": null,
              "type": "VectorStoreInfo"
            },
            "sourceHandle": {
              "baseClasses": [
                "VectorStoreInfo"
              ],
              "dataType": "VectorStoreInfo",
              "id": "VectorStoreInfo-titeR"
            }
          },
          "id": "reactflow__edge-VectorStoreInfo-titeR{œbaseClassesœ:[œVectorStoreInfoœ],œdataTypeœ:œVectorStoreInfoœ,œidœ:œVectorStoreInfo-titeRœ}-VectorStoreToolkit-ka4Sk{œfieldNameœ:œvectorstore_infoœ,œidœ:œVectorStoreToolkit-ka4Skœ,œinputTypesœ:null,œtypeœ:œVectorStoreInfoœ}",
          "className": ""
        },
        {
          "source": "VectorStoreToolkit-ka4Sk",
          "sourceHandle": "{œbaseClassesœ:[œBaseToolœ,œBaseToolkitœ,œGenericœ,œobjectœ,œRunnableœ,œRunnableSerializableœ,œSerializableœ,œToolœ,œVectorStoreToolkitœ],œdataTypeœ:œVectorStoreToolkitœ,œidœ:œVectorStoreToolkit-ka4Skœ}",
          "target": "VectorStoreAgent-WgSW5",
          "targetHandle": "{œfieldNameœ:œvector_store_toolkitœ,œidœ:œVectorStoreAgent-WgSW5œ,œinputTypesœ:null,œtypeœ:œVectorStoreToolkitœ}",
          "data": {
            "targetHandle": {
              "fieldName": "vector_store_toolkit",
              "id": "VectorStoreAgent-WgSW5",
              "inputTypes": null,
              "type": "VectorStoreToolkit"
            },
            "sourceHandle": {
              "baseClasses": [
                "BaseTool",
                "BaseToolkit",
                "Generic",
                "object",
                "Runnable",
                "RunnableSerializable",
                "Serializable",
                "Tool",
                "VectorStoreToolkit"
              ],
              "dataType": "VectorStoreToolkit",
              "id": "VectorStoreToolkit-ka4Sk"
            }
          },
          "id": "reactflow__edge-VectorStoreToolkit-ka4Sk{œbaseClassesœ:[œBaseToolœ,œBaseToolkitœ,œGenericœ,œobjectœ,œRunnableœ,œRunnableSerializableœ,œSerializableœ,œToolœ,œVectorStoreToolkitœ],œdataTypeœ:œVectorStoreToolkitœ,œidœ:œVectorStoreToolkit-ka4Skœ}-VectorStoreAgent-WgSW5{œfieldNameœ:œvector_store_toolkitœ,œidœ:œVectorStoreAgent-WgSW5œ,œinputTypesœ:null,œtypeœ:œVectorStoreToolkitœ}",
          "className": ""
        },
        {
          "source": "FAISS-WvisE",
          "sourceHandle": "{œbaseClassesœ:[œBaseRetrieverœ,œFAISSœ,œGenericœ,œobjectœ,œRunnableœ,œRunnableSerializableœ,œSerializableœ,œVectorStoreœ],œdataTypeœ:œFAISSœ,œidœ:œFAISS-WvisEœ}",
          "target": "VectorStoreInfo-titeR",
          "targetHandle": "{œfieldNameœ:œvectorstoreœ,œidœ:œVectorStoreInfo-titeRœ,œinputTypesœ:null,œtypeœ:œVectorStoreœ}",
          "data": {
            "targetHandle": {
              "fieldName": "vectorstore",
              "id": "VectorStoreInfo-titeR",
              "inputTypes": null,
              "type": "VectorStore"
            },
            "sourceHandle": {
              "baseClasses": [
                "BaseRetriever",
                "FAISS",
                "Generic",
                "object",
                "Runnable",
                "RunnableSerializable",
                "Serializable",
                "VectorStore"
              ],
              "dataType": "FAISS",
              "id": "FAISS-WvisE"
            }
          },
          "id": "reactflow__edge-FAISS-WvisE{œbaseClassesœ:[œBaseRetrieverœ,œFAISSœ,œGenericœ,œobjectœ,œRunnableœ,œRunnableSerializableœ,œSerializableœ,œVectorStoreœ],œdataTypeœ:œFAISSœ,œidœ:œFAISS-WvisEœ}-VectorStoreInfo-titeR{œfieldNameœ:œvectorstoreœ,œidœ:œVectorStoreInfo-titeRœ,œinputTypesœ:null,œtypeœ:œVectorStoreœ}",
          "className": ""
        },
        {
          "source": "RecursiveCharacterTextSplitter-xDukX",
          "sourceHandle": "{œbaseClassesœ:[œRecordœ],œdataTypeœ:œRecursiveCharacterTextSplitterœ,œidœ:œRecursiveCharacterTextSplitter-xDukXœ}",
          "target": "FAISS-WvisE",
          "targetHandle": "{œfieldNameœ:œinputsœ,œidœ:œFAISS-WvisEœ,œinputTypesœ:[œDocumentœ,œRecordœ],œtypeœ:œRecordœ}",
          "data": {
            "targetHandle": {
              "fieldName": "inputs",
              "id": "FAISS-WvisE",
              "inputTypes": [
                "Document",
                "Record"
              ],
              "type": "Record"
            },
            "sourceHandle": {
              "baseClasses": [
                "Record"
              ],
              "dataType": "RecursiveCharacterTextSplitter",
              "id": "RecursiveCharacterTextSplitter-xDukX"
            }
          },
          "id": "reactflow__edge-RecursiveCharacterTextSplitter-xDukX{œbaseClassesœ:[œRecordœ],œdataTypeœ:œRecursiveCharacterTextSplitterœ,œidœ:œRecursiveCharacterTextSplitter-xDukXœ}-FAISS-WvisE{œfieldNameœ:œinputsœ,œidœ:œFAISS-WvisEœ,œinputTypesœ:[œDocumentœ,œRecordœ],œtypeœ:��Recordœ}",
          "className": ""
        },
        {
          "source": "AzureOpenAIEmbeddings-XzhaS",
          "sourceHandle": "{œbaseClassesœ:[œEmbeddingsœ],œdataTypeœ:œAzureOpenAIEmbeddingsœ,œidœ:œAzureOpenAIEmbeddings-XzhaSœ}",
          "target": "FAISS-WvisE",
          "targetHandle": "{œfieldNameœ:œembeddingœ,œidœ:œFAISS-WvisEœ,œinputTypesœ:null,œtypeœ:œEmbeddingsœ}",
          "data": {
            "targetHandle": {
              "fieldName": "embedding",
              "id": "FAISS-WvisE",
              "inputTypes": null,
              "type": "Embeddings"
            },
            "sourceHandle": {
              "baseClasses": [
                "Embeddings"
              ],
              "dataType": "AzureOpenAIEmbeddings",
              "id": "AzureOpenAIEmbeddings-XzhaS"
            }
          },
          "id": "reactflow__edge-AzureOpenAIEmbeddings-XzhaS{œbaseClassesœ:[œEmbeddingsœ],œdataTypeœ:œAzureOpenAIEmbeddingsœ,œidœ:œAzureOpenAIEmbeddings-XzhaSœ}-FAISS-WvisE{œfieldNameœ:œembeddingœ,œidœ:œFAISS-WvisEœ,œinputTypesœ:null,œtypeœ:œEmbeddingsœ}",
          "className": ""
        }
      ],
      "viewport": {
        "x": -708.737852850978,
        "y": -327.70302971960484,
        "zoom": 0.3868323282338439
      }
    },
    "date_created": "2024-08-09T02:11:53.114Z",
    "date_updated": "2024-08-09T02:11:53.173Z",
    "status": "Public",
    "sort": null,
    "user_updated": "4f9b4bde-8907-4a03-a128-bee19154abb6",
    "user_created": {
      "username": "liuc146",
      "first_name": "畅",
      "last_name": "刘",
      "id": "4f9b4bde-8907-4a03-a128-bee19154abb6"
    },
    "tags": [
      {
        "tags_id": {
          "name": "Agent",
          "id": "ccabb590-c9e8-4e56-9d6c-309955936c6c"
        }
      },
      {
        "tags_id": {
          "name": "Memory",
          "id": "e660a9ea-35fb-4587-bfbd-13dba4c556d1"
        }
      }
    ]
  },
  "conversion": {
    "converted_at": "2025-08-19T18:09:01.887Z",
    "converted_from": "langflow",
    "converted_to": "axiestudio",
    "conversions_made": 38,
    "converter_version": "1.0.0"
  }
}