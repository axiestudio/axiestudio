{
  "id": "91aeccfa-2fef-4b58-9b29-ba7a6bbac8a7",
  "name": "argobot_241105",
  "description": "Promptly Ingenious! (Converted from Langflow Store for AxieStudio compatibility)",
  "type": "FLOW",
  "is_component": false,
  "author": {
    "username": "michelepastorello",
    "first_name": "Michele",
    "last_name": "Pastorello",
    "id": "1ccd9106-4dc3-4c07-a3ce-4e2e1c4aad76",
    "full_name": "Michele Pastorello"
  },
  "store_url": "https://www.langflow.store/store/component/91aeccfa-2fef-4b58-9b29-ba7a6bbac8a7",
  "stats": {
    "downloads": 0,
    "likes": 0
  },
  "dates": {
    "created": "2024-11-05T09:51:55.789Z",
    "updated": "2024-11-05T09:51:56.874Z",
    "downloaded": "2025-08-19T17:50:07.563Z"
  },
  "tags": [],
  "technical": {
    "last_tested_version": "1.0.19.post2",
    "private": true,
    "status": "Public"
  },
  "data": {
    "nodes": [
      {
        "id": "ChatInput-m8BPn",
        "type": "genericNode",
        "position": {
          "x": -3840.442893127972,
          "y": -840.2534582182356
        },
        "data": {
          "type": "ChatInput",
          "node": {
            "template": {
              "_type": "Component",
              "files": {
                "trace_as_metadata": true,
                "file_path": "",
                "fileTypes": [
                  "txt",
                  "md",
                  "mdx",
                  "csv",
                  "json",
                  "yaml",
                  "yml",
                  "xml",
                  "html",
                  "htm",
                  "pdf",
                  "docx",
                  "py",
                  "sh",
                  "sql",
                  "js",
                  "ts",
                  "tsx",
                  "jpg",
                  "jpeg",
                  "png",
                  "bmp",
                  "image"
                ],
                "list": true,
                "required": false,
                "placeholder": "",
                "show": true,
                "name": "files",
                "value": "",
                "display_name": "Files",
                "advanced": true,
                "dynamic": false,
                "info": "Files to be sent with the message.",
                "title_case": false,
                "type": "file",
                "_input_type": "FileInput"
              },
              "code": {
                "type": "code",
                "required": true,
                "placeholder": "",
                "list": false,
                "show": true,
                "multiline": true,
                "value": "from axiestudio.base.data.utils import IMG_FILE_TYPES, TEXT_FILE_TYPES\nfrom axiestudio.base.io.chat import ChatComponent\nfrom axiestudio.inputs import BoolInput\nfrom axiestudio.io import DropdownInput, FileInput, MessageTextInput, MultilineInput, Output\nfrom axiestudio.memory import store_message\nfrom axiestudio.schema.message import Message\nfrom axiestudio.utils.constants import MESSAGE_SENDER_AI, MESSAGE_SENDER_NAME_USER, MESSAGE_SENDER_USER\n\n\nclass ChatInput(ChatComponent):\n    display_name = \"Chat Input\"\n    description = \"Get chat inputs from the Playground.\"\n    icon = \"ChatInput\"\n    name = \"ChatInput\"\n\n    inputs = [\n        MultilineInput(\n            name=\"input_value\",\n            display_name=\"Text\",\n            value=\"\",\n            info=\"Message to be passed as input.\",\n        ),\n        BoolInput(\n            name=\"should_store_message\",\n            display_name=\"Store Messages\",\n            info=\"Store the message in the history.\",\n            value=True,\n            advanced=True,\n        ),\n        DropdownInput(\n            name=\"sender\",\n            display_name=\"Sender Type\",\n            options=[MESSAGE_SENDER_AI, MESSAGE_SENDER_USER],\n            value=MESSAGE_SENDER_USER,\n            info=\"Type of sender.\",\n            advanced=True,\n        ),\n        MessageTextInput(\n            name=\"sender_name\",\n            display_name=\"Sender Name\",\n            info=\"Name of the sender.\",\n            value=MESSAGE_SENDER_NAME_USER,\n            advanced=True,\n        ),\n        MessageTextInput(\n            name=\"session_id\",\n            display_name=\"Session ID\",\n            info=\"The session ID of the chat. If empty, the current session ID parameter will be used.\",\n            advanced=True,\n        ),\n        FileInput(\n            name=\"files\",\n            display_name=\"Files\",\n            file_types=TEXT_FILE_TYPES + IMG_FILE_TYPES,\n            info=\"Files to be sent with the message.\",\n            advanced=True,\n            is_list=True,\n        ),\n    ]\n    outputs = [\n        Output(display_name=\"Message\", name=\"message\", method=\"message_response\"),\n    ]\n\n    def message_response(self) -> Message:\n        message = Message(\n            text=self.input_value,\n            sender=self.sender,\n            sender_name=self.sender_name,\n            session_id=self.session_id,\n            files=self.files,\n        )\n\n        if (\n            self.session_id\n            and isinstance(message, Message)\n            and isinstance(message.text, str)\n            and self.should_store_message\n        ):\n            store_message(\n                message,\n                flow_id=self.graph.flow_id,\n            )\n            self.message.value = message\n\n        self.status = message\n        return message\n",
                "fileTypes": [],
                "file_path": "",
                "password": false,
                "name": "code",
                "advanced": true,
                "dynamic": true,
                "info": "",
                "load_from_db": false,
                "title_case": false
              },
              "input_value": {
                "trace_as_input": true,
                "multiline": true,
                "trace_as_metadata": true,
                "load_from_db": false,
                "list": false,
                "required": false,
                "placeholder": "",
                "show": true,
                "name": "input_value",
                "value": "bollettini 2024 RS58",
                "display_name": "Text",
                "advanced": false,
                "input_types": [
                  "Message"
                ],
                "dynamic": false,
                "info": "Message to be passed as input.",
                "title_case": false,
                "type": "str",
                "_input_type": "MultilineInput"
              },
              "sender": {
                "trace_as_metadata": true,
                "options": [
                  "Machine",
                  "User"
                ],
                "combobox": false,
                "required": false,
                "placeholder": "",
                "show": true,
                "name": "sender",
                "value": "User",
                "display_name": "Sender Type",
                "advanced": true,
                "dynamic": false,
                "info": "Type of sender.",
                "title_case": false,
                "type": "str",
                "_input_type": "DropdownInput"
              },
              "sender_name": {
                "trace_as_input": true,
                "trace_as_metadata": true,
                "load_from_db": false,
                "list": false,
                "required": false,
                "placeholder": "",
                "show": true,
                "name": "sender_name",
                "value": "User",
                "display_name": "Sender Name",
                "advanced": true,
                "input_types": [
                  "Message"
                ],
                "dynamic": false,
                "info": "Name of the sender.",
                "title_case": false,
                "type": "str",
                "_input_type": "MessageTextInput"
              },
              "session_id": {
                "trace_as_input": true,
                "trace_as_metadata": true,
                "load_from_db": false,
                "list": false,
                "required": false,
                "placeholder": "",
                "show": true,
                "name": "session_id",
                "value": "",
                "display_name": "Session ID",
                "advanced": true,
                "input_types": [
                  "Message"
                ],
                "dynamic": false,
                "info": "The session ID of the chat. If empty, the current session ID parameter will be used.",
                "title_case": false,
                "type": "str",
                "_input_type": "MessageTextInput"
              },
              "should_store_message": {
                "trace_as_metadata": true,
                "list": false,
                "required": false,
                "placeholder": "",
                "show": true,
                "name": "should_store_message",
                "value": true,
                "display_name": "Store Messages",
                "advanced": true,
                "dynamic": false,
                "info": "Store the message in the history.",
                "title_case": false,
                "type": "bool",
                "_input_type": "BoolInput"
              }
            },
            "description": "Get chat inputs from the Playground.",
            "icon": "ChatInput",
            "base_classes": [
              "Message"
            ],
            "display_name": "Chat Input",
            "documentation": "",
            "custom_fields": {},
            "output_types": [],
            "pinned": false,
            "conditional_paths": [],
            "frozen": false,
            "outputs": [
              {
                "types": [
                  "Message"
                ],
                "selected": "Message",
                "name": "message",
                "display_name": "Message",
                "method": "message_response",
                "value": "__UNDEFINED__",
                "cache": true
              }
            ],
            "field_order": [
              "input_value",
              "should_store_message",
              "sender",
              "sender_name",
              "session_id",
              "files"
            ],
            "beta": false,
            "edited": false,
            "metadata": {},
            "lf_version": "1.0.19"
          },
          "id": "ChatInput-m8BPn",
          "description": "Get chat inputs from the Playground.",
          "display_name": "Chat Input"
        },
        "selected": false,
        "width": 384,
        "height": 289,
        "dragging": false,
        "positionAbsolute": {
          "x": -3840.442893127972,
          "y": -840.2534582182356
        }
      },
      {
        "id": "File-fuRv5",
        "type": "genericNode",
        "position": {
          "x": -3840.697134801784,
          "y": -1781.1269065103281
        },
        "data": {
          "type": "File",
          "node": {
            "template": {
              "_type": "Component",
              "path": {
                "trace_as_metadata": true,
                "file_path": "",
                "fileTypes": [
                  "txt",
                  "md",
                  "mdx",
                  "csv",
                  "json",
                  "yaml",
                  "yml",
                  "xml",
                  "html",
                  "htm",
                  "pdf",
                  "docx",
                  "py",
                  "sh",
                  "sql",
                  "js",
                  "ts",
                  "tsx"
                ],
                "list": false,
                "required": false,
                "placeholder": "",
                "show": true,
                "name": "path",
                "value": "",
                "display_name": "Path",
                "advanced": false,
                "dynamic": false,
                "info": "Supported file types: txt, md, mdx, csv, json, yaml, yml, xml, html, htm, pdf, docx, py, sh, sql, js, ts, tsx",
                "title_case": false,
                "type": "file",
                "_input_type": "FileInput",
                "load_from_db": false
              },
              "code": {
                "type": "code",
                "required": true,
                "placeholder": "",
                "list": false,
                "show": true,
                "multiline": true,
                "value": "from pathlib import Path\n\nfrom axiestudio.base.data.utils import TEXT_FILE_TYPES, parse_text_file_to_data\nfrom axiestudio.custom import Component\nfrom axiestudio.io import BoolInput, FileInput, Output\nfrom axiestudio.schema import Data\n\n\nclass FileComponent(Component):\n    display_name = \"File\"\n    description = \"A generic file loader.\"\n    icon = \"file-text\"\n    name = \"File\"\n\n    inputs = [\n        FileInput(\n            name=\"path\",\n            display_name=\"Path\",\n            file_types=TEXT_FILE_TYPES,\n            info=f\"Supported file types: {', '.join(TEXT_FILE_TYPES)}\",\n        ),\n        BoolInput(\n            name=\"silent_errors\",\n            display_name=\"Silent Errors\",\n            advanced=True,\n            info=\"If true, errors will not raise an exception.\",\n        ),\n    ]\n\n    outputs = [\n        Output(display_name=\"Data\", name=\"data\", method=\"load_file\"),\n    ]\n\n    def load_file(self) -> Data:\n        if not self.path:\n            msg = \"Please, upload a file to use this component.\"\n            raise ValueError(msg)\n        resolved_path = self.resolve_path(self.path)\n        silent_errors = self.silent_errors\n\n        extension = Path(resolved_path).suffix[1:].lower()\n\n        if extension == \"doc\":\n            msg = \"doc files are not supported. Please save as .docx\"\n            raise ValueError(msg)\n        if extension not in TEXT_FILE_TYPES:\n            msg = f\"Unsupported file type: {extension}\"\n            raise ValueError(msg)\n\n        data = parse_text_file_to_data(resolved_path, silent_errors)\n        self.status = data or \"No data\"\n        return data or Data()\n",
                "fileTypes": [],
                "file_path": "",
                "password": false,
                "name": "code",
                "advanced": true,
                "dynamic": true,
                "info": "",
                "load_from_db": false,
                "title_case": false
              },
              "silent_errors": {
                "trace_as_metadata": true,
                "list": false,
                "required": false,
                "placeholder": "",
                "show": true,
                "name": "silent_errors",
                "value": false,
                "display_name": "Silent Errors",
                "advanced": true,
                "dynamic": false,
                "info": "If true, errors will not raise an exception.",
                "title_case": false,
                "type": "bool",
                "_input_type": "BoolInput"
              }
            },
            "description": "A generic file loader.",
            "icon": "file-text",
            "base_classes": [
              "Data"
            ],
            "display_name": "File",
            "documentation": "",
            "custom_fields": {},
            "output_types": [],
            "pinned": false,
            "conditional_paths": [],
            "frozen": false,
            "outputs": [
              {
                "types": [
                  "Data"
                ],
                "selected": "Data",
                "name": "data",
                "display_name": "Data",
                "method": "load_file",
                "value": "__UNDEFINED__",
                "cache": true
              }
            ],
            "field_order": [
              "path",
              "silent_errors"
            ],
            "beta": false,
            "edited": false,
            "metadata": {}
          },
          "id": "File-fuRv5",
          "description": "A generic file loader.",
          "display_name": "File"
        },
        "selected": false,
        "width": 384,
        "height": 289,
        "positionAbsolute": {
          "x": -3840.697134801784,
          "y": -1781.1269065103281
        },
        "dragging": false
      },
      {
        "id": "SplitText-EeRBo",
        "type": "genericNode",
        "position": {
          "x": -3440.0583005778117,
          "y": -1781.5434660399417
        },
        "data": {
          "type": "SplitText",
          "node": {
            "template": {
              "_type": "Component",
              "data_inputs": {
                "trace_as_metadata": true,
                "list": true,
                "required": false,
                "placeholder": "",
                "show": true,
                "name": "data_inputs",
                "value": "",
                "display_name": "Data Inputs",
                "advanced": false,
                "input_types": [
                  "Data"
                ],
                "dynamic": false,
                "info": "The data to split.",
                "title_case": false,
                "type": "other",
                "_input_type": "HandleInput"
              },
              "chunk_overlap": {
                "trace_as_metadata": true,
                "list": false,
                "required": false,
                "placeholder": "",
                "show": true,
                "name": "chunk_overlap",
                "value": 200,
                "display_name": "Chunk Overlap",
                "advanced": false,
                "dynamic": false,
                "info": "Number of characters to overlap between chunks.",
                "title_case": false,
                "type": "int",
                "_input_type": "IntInput"
              },
              "chunk_size": {
                "trace_as_metadata": true,
                "list": false,
                "required": false,
                "placeholder": "",
                "show": true,
                "name": "chunk_size",
                "value": 4096,
                "display_name": "Chunk Size",
                "advanced": false,
                "dynamic": false,
                "info": "The maximum number of characters in each chunk.",
                "title_case": false,
                "type": "int",
                "_input_type": "IntInput",
                "load_from_db": false
              },
              "code": {
                "type": "code",
                "required": true,
                "placeholder": "",
                "list": false,
                "show": true,
                "multiline": true,
                "value": "from langchain_text_splitters import CharacterTextSplitter\n\nfrom axiestudio.custom import Component\nfrom axiestudio.io import HandleInput, IntInput, MessageTextInput, Output\nfrom axiestudio.schema import Data\nfrom axiestudio.utils.util import unescape_string\n\n\nclass SplitTextComponent(Component):\n    display_name: str = \"Split Text\"\n    description: str = \"Split text into chunks based on specified criteria.\"\n    icon = \"scissors-line-dashed\"\n    name = \"SplitText\"\n\n    inputs = [\n        HandleInput(\n            name=\"data_inputs\",\n            display_name=\"Data Inputs\",\n            info=\"The data to split.\",\n            input_types=[\"Data\"],\n            is_list=True,\n        ),\n        IntInput(\n            name=\"chunk_overlap\",\n            display_name=\"Chunk Overlap\",\n            info=\"Number of characters to overlap between chunks.\",\n            value=200,\n        ),\n        IntInput(\n            name=\"chunk_size\",\n            display_name=\"Chunk Size\",\n            info=\"The maximum number of characters in each chunk.\",\n            value=1000,\n        ),\n        MessageTextInput(\n            name=\"separator\",\n            display_name=\"Separator\",\n            info=\"The character to split on. Defaults to newline.\",\n            value=\"\\n\",\n        ),\n    ]\n\n    outputs = [\n        Output(display_name=\"Chunks\", name=\"chunks\", method=\"split_text\"),\n    ]\n\n    def _docs_to_data(self, docs):\n        return [Data(text=doc.page_content, data=doc.metadata) for doc in docs]\n\n    def split_text(self) -> list[Data]:\n        separator = unescape_string(self.separator)\n\n        documents = [_input.to_lc_document() for _input in self.data_inputs if isinstance(_input, Data)]\n\n        splitter = CharacterTextSplitter(\n            chunk_overlap=self.chunk_overlap,\n            chunk_size=self.chunk_size,\n            separator=separator,\n        )\n        docs = splitter.split_documents(documents)\n        data = self._docs_to_data(docs)\n        self.status = data\n        return data\n",
                "fileTypes": [],
                "file_path": "",
                "password": false,
                "name": "code",
                "advanced": true,
                "dynamic": true,
                "info": "",
                "load_from_db": false,
                "title_case": false
              },
              "separator": {
                "trace_as_input": true,
                "trace_as_metadata": true,
                "load_from_db": false,
                "list": false,
                "required": false,
                "placeholder": "",
                "show": true,
                "name": "separator",
                "value": "\\n\\n",
                "display_name": "Separator",
                "advanced": false,
                "input_types": [
                  "Message"
                ],
                "dynamic": false,
                "info": "The character to split on. Defaults to newline.",
                "title_case": false,
                "type": "str",
                "_input_type": "MessageTextInput"
              }
            },
            "description": "Split text into chunks based on specified criteria.",
            "icon": "scissors-line-dashed",
            "base_classes": [
              "Data"
            ],
            "display_name": "Split Text",
            "documentation": "",
            "custom_fields": {},
            "output_types": [],
            "pinned": false,
            "conditional_paths": [],
            "frozen": false,
            "outputs": [
              {
                "types": [
                  "Data"
                ],
                "selected": "Data",
                "name": "chunks",
                "display_name": "Chunks",
                "method": "split_text",
                "value": "__UNDEFINED__",
                "cache": true
              }
            ],
            "field_order": [
              "data_inputs",
              "chunk_overlap",
              "chunk_size",
              "separator"
            ],
            "beta": false,
            "edited": false,
            "metadata": {}
          },
          "id": "SplitText-EeRBo",
          "description": "Split text into chunks based on specified criteria.",
          "display_name": "Split Text"
        },
        "selected": false,
        "width": 384,
        "height": 525,
        "positionAbsolute": {
          "x": -3440.0583005778117,
          "y": -1781.5434660399417
        },
        "dragging": false
      },
      {
        "id": "Chroma-tlfnm",
        "type": "genericNode",
        "position": {
          "x": -3040.8232840137243,
          "y": -1782.315478764621
        },
        "data": {
          "type": "Chroma",
          "node": {
            "template": {
              "_type": "Component",
              "embedding": {
                "trace_as_metadata": true,
                "list": false,
                "required": false,
                "placeholder": "",
                "show": true,
                "name": "embedding",
                "value": "",
                "display_name": "Embedding",
                "advanced": false,
                "input_types": [
                  "Embeddings"
                ],
                "dynamic": false,
                "info": "",
                "title_case": false,
                "type": "other",
                "_input_type": "HandleInput"
              },
              "ingest_data": {
                "trace_as_metadata": true,
                "list": true,
                "trace_as_input": true,
                "required": false,
                "placeholder": "",
                "show": true,
                "name": "ingest_data",
                "value": "",
                "display_name": "Ingest Data",
                "advanced": false,
                "input_types": [
                  "Data"
                ],
                "dynamic": false,
                "info": "",
                "title_case": false,
                "type": "other",
                "_input_type": "DataInput"
              },
              "allow_duplicates": {
                "trace_as_metadata": true,
                "list": false,
                "required": false,
                "placeholder": "",
                "show": true,
                "name": "allow_duplicates",
                "value": false,
                "display_name": "Allow Duplicates",
                "advanced": true,
                "dynamic": false,
                "info": "If false, will not add documents that are already in the Vector Store.",
                "title_case": false,
                "type": "bool",
                "_input_type": "BoolInput"
              },
              "chroma_server_cors_allow_origins": {
                "trace_as_metadata": true,
                "load_from_db": false,
                "list": false,
                "required": false,
                "placeholder": "",
                "show": true,
                "name": "chroma_server_cors_allow_origins",
                "value": "",
                "display_name": "Server CORS Allow Origins",
                "advanced": true,
                "dynamic": false,
                "info": "",
                "title_case": false,
                "type": "str",
                "_input_type": "StrInput"
              },
              "chroma_server_grpc_port": {
                "trace_as_metadata": true,
                "list": false,
                "required": false,
                "placeholder": "",
                "show": true,
                "name": "chroma_server_grpc_port",
                "value": "",
                "display_name": "Server gRPC Port",
                "advanced": true,
                "dynamic": false,
                "info": "",
                "title_case": false,
                "type": "int",
                "_input_type": "IntInput"
              },
              "chroma_server_host": {
                "trace_as_metadata": true,
                "load_from_db": false,
                "list": false,
                "required": false,
                "placeholder": "",
                "show": true,
                "name": "chroma_server_host",
                "value": "",
                "display_name": "Server Host",
                "advanced": true,
                "dynamic": false,
                "info": "",
                "title_case": false,
                "type": "str",
                "_input_type": "StrInput"
              },
              "chroma_server_http_port": {
                "trace_as_metadata": true,
                "list": false,
                "required": false,
                "placeholder": "",
                "show": true,
                "name": "chroma_server_http_port",
                "value": 0,
                "display_name": "Server HTTP Port",
                "advanced": true,
                "dynamic": false,
                "info": "",
                "title_case": false,
                "type": "int",
                "_input_type": "IntInput",
                "load_from_db": false
              },
              "chroma_server_ssl_enabled": {
                "trace_as_metadata": true,
                "list": false,
                "required": false,
                "placeholder": "",
                "show": true,
                "name": "chroma_server_ssl_enabled",
                "value": false,
                "display_name": "Server SSL Enabled",
                "advanced": true,
                "dynamic": false,
                "info": "",
                "title_case": false,
                "type": "bool",
                "_input_type": "BoolInput"
              },
              "code": {
                "type": "code",
                "required": true,
                "placeholder": "",
                "list": false,
                "show": true,
                "multiline": true,
                "value": "from copy import deepcopy\n\nfrom chromadb.config import Settings\nfrom langchain_chroma import Chroma\nfrom loguru import logger\n\nfrom axiestudio.base.vectorstores.model import LCVectorStoreComponent, check_cached_vector_store\nfrom axiestudio.base.vectorstores.utils import chroma_collection_to_data\nfrom axiestudio.io import BoolInput, DataInput, DropdownInput, HandleInput, IntInput, MultilineInput, StrInput\nfrom axiestudio.schema import Data\n\n\nclass ChromaVectorStoreComponent(LCVectorStoreComponent):\n    \"\"\"\n    Chroma Vector Store with search capabilities\n    \"\"\"\n\n    display_name: str = \"Chroma DB\"\n    description: str = \"Chroma Vector Store with search capabilities\"\n    documentation = \"https://python.langchain.com/docs/integrations/vectorstores/chroma\"\n    name = \"Chroma\"\n    icon = \"Chroma\"\n\n    inputs = [\n        StrInput(\n            name=\"collection_name\",\n            display_name=\"Collection Name\",\n            value=\"axiestudio\",\n        ),\n        StrInput(\n            name=\"persist_directory\",\n            display_name=\"Persist Directory\",\n        ),\n        MultilineInput(\n            name=\"search_query\",\n            display_name=\"Search Query\",\n        ),\n        DataInput(\n            name=\"ingest_data\",\n            display_name=\"Ingest Data\",\n            is_list=True,\n        ),\n        HandleInput(name=\"embedding\", display_name=\"Embedding\", input_types=[\"Embeddings\"]),\n        StrInput(\n            name=\"chroma_server_cors_allow_origins\",\n            display_name=\"Server CORS Allow Origins\",\n            advanced=True,\n        ),\n        StrInput(\n            name=\"chroma_server_host\",\n            display_name=\"Server Host\",\n            advanced=True,\n        ),\n        IntInput(\n            name=\"chroma_server_http_port\",\n            display_name=\"Server HTTP Port\",\n            advanced=True,\n        ),\n        IntInput(\n            name=\"chroma_server_grpc_port\",\n            display_name=\"Server gRPC Port\",\n            advanced=True,\n        ),\n        BoolInput(\n            name=\"chroma_server_ssl_enabled\",\n            display_name=\"Server SSL Enabled\",\n            advanced=True,\n        ),\n        BoolInput(\n            name=\"allow_duplicates\",\n            display_name=\"Allow Duplicates\",\n            advanced=True,\n            info=\"If false, will not add documents that are already in the Vector Store.\",\n        ),\n        DropdownInput(\n            name=\"search_type\",\n            display_name=\"Search Type\",\n            options=[\"Similarity\", \"MMR\"],\n            value=\"Similarity\",\n            advanced=True,\n        ),\n        IntInput(\n            name=\"number_of_results\",\n            display_name=\"Number of Results\",\n            info=\"Number of results to return.\",\n            advanced=True,\n            value=10,\n        ),\n        IntInput(\n            name=\"limit\",\n            display_name=\"Limit\",\n            advanced=True,\n            info=\"Limit the number of records to compare when Allow Duplicates is False.\",\n        ),\n    ]\n\n    @check_cached_vector_store\n    def build_vector_store(self) -> Chroma:\n        \"\"\"\n        Builds the Chroma object.\n        \"\"\"\n        try:\n            from chromadb import Client\n            from langchain_chroma import Chroma\n        except ImportError as e:\n            msg = \"Could not import Chroma integration package. Please install it with `pip install langchain-chroma`.\"\n            raise ImportError(msg) from e\n        # Chroma settings\n        chroma_settings = None\n        client = None\n        if self.chroma_server_host:\n            chroma_settings = Settings(\n                chroma_server_cors_allow_origins=self.chroma_server_cors_allow_origins or [],\n                chroma_server_host=self.chroma_server_host,\n                chroma_server_http_port=self.chroma_server_http_port or None,\n                chroma_server_grpc_port=self.chroma_server_grpc_port or None,\n                chroma_server_ssl_enabled=self.chroma_server_ssl_enabled,\n            )\n            client = Client(settings=chroma_settings)\n\n        # Check persist_directory and expand it if it is a relative path\n        persist_directory = self.resolve_path(self.persist_directory) if self.persist_directory is not None else None\n\n        chroma = Chroma(\n            persist_directory=persist_directory,\n            client=client,\n            embedding_function=self.embedding,\n            collection_name=self.collection_name,\n        )\n\n        self._add_documents_to_vector_store(chroma)\n        self.status = chroma_collection_to_data(chroma.get(limit=self.limit))\n        return chroma\n\n    def _add_documents_to_vector_store(self, vector_store: \"Chroma\") -> None:\n        \"\"\"\n        Adds documents to the Vector Store.\n        \"\"\"\n        if not self.ingest_data:\n            self.status = \"\"\n            return\n\n        _stored_documents_without_id = []\n        if self.allow_duplicates:\n            stored_data = []\n        else:\n            stored_data = chroma_collection_to_data(vector_store.get(limit=self.limit))\n            for value in deepcopy(stored_data):\n                del value.id\n                _stored_documents_without_id.append(value)\n\n        documents = []\n        for _input in self.ingest_data or []:\n            if isinstance(_input, Data):\n                if _input not in _stored_documents_without_id:\n                    documents.append(_input.to_lc_document())\n            else:\n                msg = \"Vector Store Inputs must be Data objects.\"\n                raise TypeError(msg)\n\n        if documents and self.embedding is not None:\n            logger.debug(f\"Adding {len(documents)} documents to the Vector Store.\")\n            vector_store.add_documents(documents)\n        else:\n            logger.debug(\"No documents to add to the Vector Store.\")\n",
                "fileTypes": [],
                "file_path": "",
                "password": false,
                "name": "code",
                "advanced": true,
                "dynamic": true,
                "info": "",
                "load_from_db": false,
                "title_case": false
              },
              "collection_name": {
                "trace_as_metadata": true,
                "load_from_db": false,
                "list": false,
                "required": false,
                "placeholder": "",
                "show": true,
                "name": "collection_name",
                "value": "6670772A5",
                "display_name": "Collection Name",
                "advanced": false,
                "dynamic": false,
                "info": "",
                "title_case": false,
                "type": "str",
                "_input_type": "StrInput"
              },
              "limit": {
                "trace_as_metadata": true,
                "list": false,
                "required": false,
                "placeholder": "",
                "show": true,
                "name": "limit",
                "value": "",
                "display_name": "Limit",
                "advanced": true,
                "dynamic": false,
                "info": "Limit the number of records to compare when Allow Duplicates is False.",
                "title_case": false,
                "type": "int",
                "_input_type": "IntInput"
              },
              "number_of_results": {
                "trace_as_metadata": true,
                "list": false,
                "required": false,
                "placeholder": "",
                "show": true,
                "name": "number_of_results",
                "value": 10,
                "display_name": "Number of Results",
                "advanced": true,
                "dynamic": false,
                "info": "Number of results to return.",
                "title_case": false,
                "type": "int",
                "_input_type": "IntInput"
              },
              "persist_directory": {
                "trace_as_metadata": true,
                "load_from_db": false,
                "list": false,
                "required": false,
                "placeholder": "",
                "show": true,
                "name": "persist_directory",
                "value": "Documents/GitHub/argobot/OIB",
                "display_name": "Persist Directory",
                "advanced": false,
                "dynamic": false,
                "info": "",
                "title_case": false,
                "type": "str",
                "_input_type": "StrInput"
              },
              "search_query": {
                "trace_as_input": true,
                "multiline": true,
                "trace_as_metadata": true,
                "load_from_db": false,
                "list": false,
                "required": false,
                "placeholder": "",
                "show": true,
                "name": "search_query",
                "value": "prova",
                "display_name": "Search Query",
                "advanced": false,
                "input_types": [
                  "Message"
                ],
                "dynamic": false,
                "info": "",
                "title_case": false,
                "type": "str",
                "_input_type": "MultilineInput"
              },
              "search_type": {
                "trace_as_metadata": true,
                "options": [
                  "Similarity",
                  "MMR"
                ],
                "combobox": false,
                "required": false,
                "placeholder": "",
                "show": true,
                "name": "search_type",
                "value": "Similarity",
                "display_name": "Search Type",
                "advanced": true,
                "dynamic": false,
                "info": "",
                "title_case": false,
                "type": "str",
                "_input_type": "DropdownInput"
              }
            },
            "description": "Chroma Vector Store with search capabilities",
            "icon": "Chroma",
            "base_classes": [
              "Data",
              "Retriever",
              "VectorStore"
            ],
            "display_name": "Chroma DB",
            "documentation": "https://python.langchain.com/docs/integrations/vectorstores/chroma",
            "custom_fields": {},
            "output_types": [],
            "pinned": false,
            "conditional_paths": [],
            "frozen": false,
            "outputs": [
              {
                "types": [
                  "Retriever"
                ],
                "selected": "Retriever",
                "name": "base_retriever",
                "display_name": "Retriever",
                "method": "build_base_retriever",
                "value": "__UNDEFINED__",
                "cache": true,
                "required_inputs": []
              },
              {
                "types": [
                  "Data"
                ],
                "selected": "Data",
                "name": "search_results",
                "display_name": "Search Results",
                "method": "search_documents",
                "value": "__UNDEFINED__",
                "cache": true,
                "required_inputs": [
                  "number_of_results",
                  "search_query",
                  "search_type"
                ]
              },
              {
                "types": [
                  "VectorStore"
                ],
                "selected": "VectorStore",
                "name": "vector_store",
                "display_name": "Vector Store",
                "method": "cast_vector_store",
                "value": "__UNDEFINED__",
                "cache": true,
                "required_inputs": []
              }
            ],
            "field_order": [
              "collection_name",
              "persist_directory",
              "search_query",
              "ingest_data",
              "embedding",
              "chroma_server_cors_allow_origins",
              "chroma_server_host",
              "chroma_server_http_port",
              "chroma_server_grpc_port",
              "chroma_server_ssl_enabled",
              "allow_duplicates",
              "search_type",
              "number_of_results",
              "limit"
            ],
            "beta": false,
            "edited": false,
            "metadata": {}
          },
          "id": "Chroma-tlfnm",
          "description": "Chroma Vector Store with search capabilities",
          "display_name": "Chroma DB"
        },
        "selected": false,
        "width": 384,
        "height": 637,
        "positionAbsolute": {
          "x": -3040.8232840137243,
          "y": -1782.315478764621
        },
        "dragging": false
      },
      {
        "id": "Prompt-JkmeG",
        "type": "genericNode",
        "position": {
          "x": -3040.661801882445,
          "y": -840.6863892111868
        },
        "data": {
          "type": "Prompt",
          "node": {
            "template": {
              "_type": "Component",
              "code": {
                "type": "code",
                "required": true,
                "placeholder": "",
                "list": false,
                "show": true,
                "multiline": true,
                "value": "from axiestudio.base.prompts.api_utils import process_prompt_template\nfrom axiestudio.custom import Component\nfrom axiestudio.inputs.inputs import DefaultPromptField\nfrom axiestudio.io import Output, PromptInput\nfrom axiestudio.schema.message import Message\nfrom axiestudio.template.utils import update_template_values\n\n\nclass PromptComponent(Component):\n    display_name: str = \"Prompt\"\n    description: str = \"Create a prompt template with dynamic variables.\"\n    icon = \"prompts\"\n    trace_type = \"prompt\"\n    name = \"Prompt\"\n\n    inputs = [\n        PromptInput(name=\"template\", display_name=\"Template\"),\n    ]\n\n    outputs = [\n        Output(display_name=\"Prompt Message\", name=\"prompt\", method=\"build_prompt\"),\n    ]\n\n    async def build_prompt(\n        self,\n    ) -> Message:\n        prompt = await Message.from_template_and_variables(**self._attributes)\n        self.status = prompt.text\n        return prompt\n\n    def _update_template(self, frontend_node: dict):\n        prompt_template = frontend_node[\"template\"][\"template\"][\"value\"]\n        custom_fields = frontend_node[\"custom_fields\"]\n        frontend_node_template = frontend_node[\"template\"]\n        _ = process_prompt_template(\n            template=prompt_template,\n            name=\"template\",\n            custom_fields=custom_fields,\n            frontend_node_template=frontend_node_template,\n        )\n        return frontend_node\n\n    def post_code_processing(self, new_frontend_node: dict, current_frontend_node: dict):\n        \"\"\"\n        This function is called after the code validation is done.\n        \"\"\"\n        frontend_node = super().post_code_processing(new_frontend_node, current_frontend_node)\n        template = frontend_node[\"template\"][\"template\"][\"value\"]\n        # Kept it duplicated for backwards compatibility\n        _ = process_prompt_template(\n            template=template,\n            name=\"template\",\n            custom_fields=frontend_node[\"custom_fields\"],\n            frontend_node_template=frontend_node[\"template\"],\n        )\n        # Now that template is updated, we need to grab any values that were set in the current_frontend_node\n        # and update the frontend_node with those values\n        update_template_values(new_template=frontend_node, previous_template=current_frontend_node[\"template\"])\n        return frontend_node\n\n    def _get_fallback_input(self, **kwargs):\n        return DefaultPromptField(**kwargs)\n",
                "fileTypes": [],
                "file_path": "",
                "password": false,
                "name": "code",
                "advanced": true,
                "dynamic": true,
                "info": "",
                "load_from_db": false,
                "title_case": false
              },
              "template": {
                "trace_as_input": true,
                "list": false,
                "required": false,
                "placeholder": "",
                "show": true,
                "name": "template",
                "value": "CN - connector\nEC - electronic controller\nEH - heating element\nF - fuse\nK - relay\nM - electrical motor\nR - resistance\nRP - position sensor\nS - switch\nSG - accelerometer\nSL - level sensor\nSP - position sensor\nSQ - micro-switch\nSR - speed sensor\nST - temperature sensor\nXM - ground point\nXS - connector\nYV - solenoid valve",
                "display_name": "Template",
                "advanced": false,
                "dynamic": false,
                "info": "",
                "title_case": false,
                "type": "prompt",
                "_input_type": "PromptInput"
              }
            },
            "description": "Create a prompt template with dynamic variables.",
            "icon": "prompts",
            "is_input": null,
            "is_output": null,
            "is_composition": null,
            "base_classes": [
              "Message"
            ],
            "name": "",
            "display_name": "Glossary",
            "documentation": "",
            "custom_fields": {
              "template": []
            },
            "output_types": [],
            "full_path": null,
            "pinned": false,
            "conditional_paths": [],
            "frozen": false,
            "outputs": [
              {
                "types": [
                  "Message"
                ],
                "selected": "Message",
                "name": "prompt",
                "hidden": null,
                "display_name": "Prompt Message",
                "method": "build_prompt",
                "value": "__UNDEFINED__",
                "cache": true
              }
            ],
            "field_order": [
              "template"
            ],
            "beta": false,
            "error": null,
            "edited": false,
            "lf_version": "1.0.19"
          },
          "id": "Prompt-JkmeG"
        },
        "selected": false,
        "width": 384,
        "height": 305,
        "positionAbsolute": {
          "x": -3040.661801882445,
          "y": -840.6863892111868
        },
        "dragging": false
      },
      {
        "id": "CustomComponent-ShIul",
        "type": "genericNode",
        "position": {
          "x": -3440.7651390470974,
          "y": -840.5645718300633
        },
        "data": {
          "type": "TractorInfoParser",
          "node": {
            "template": {
              "_type": "Component",
              "code": {
                "type": "code",
                "required": true,
                "placeholder": "",
                "list": false,
                "show": true,
                "multiline": true,
                "value": "from axiestudio.custom import Component\nfrom axiestudio.io import MessageInput, Output\nfrom typing import Dict, Any\nimport re\n\nclass TractorInfoParser(Component):\n    display_name = \"Tractor Info Parser\"\n    description = \"Extracts tractor information from the question and creates separate outputs.\"\n    icon = \"🚜\"\n    name = \"TractorInfoParser\"\n    inputs = [\n        MessageInput(\n            name=\"user_question\",\n            display_name=\"User Question\",\n            info=\"Enter a question containing tractor information\",\n        ),\n    ]\n    outputs = [\n        Output(name=\"tractor_model_code\", display_name=\"Tractor Model Code\", method=\"get_tractor_model_code\"),\n        Output(name=\"suspect_parameter_number\", display_name=\"Suspect Parameter Number\", method=\"get_suspect_parameter_number\"),\n        Output(name=\"failure_mode_identifier\", display_name=\"Failure Mode Identifier\", method=\"get_failure_mode_identifier\"),\n        Output(name=\"technical_bulletin_code\", display_name=\"Technical Bulletin Code\", method=\"get_technical_bulletin_code\"),\n        Output(name=\"service_campaign_code\", display_name=\"Service Campaign Code\", method=\"get_service_campaign_code\"),\n        Output(name=\"year\", display_name=\"Year\", method=\"get_year\"),\n    ]\n\n    def __init__(self, _code=None, _user_id=None, _parameters=None, _vertex=None, _tracing_service=None, **kwargs):\n        # Initialize the parent class and compile regex patterns for extraction\n        super().__init__(_code=_code, _user_id=_user_id, _parameters=_parameters, _vertex=_vertex, _tracing_service=_tracing_service, **kwargs)\n        self.patterns = self._initialize_patterns()\n        self.compiled_patterns = {key: re.compile(pattern) for key, pattern in self.patterns.items()}\n\n    def _initialize_patterns(self) -> Dict[str, str]:\n        \"\"\"Initializes regex patterns for extracting tractor information.\"\"\"\n        return {\n            'tractor_model_code': r'\\b(CP|CT|RP|RS|RT)[A-Z0-9]{2}\\b',\n            'suspect_parameter_number': r'\\b(?:[0-9A-F]{1,6}|[0-9A-F]{1,6}\\.[0-9]+)\\b',\n            'failure_mode_identifier': r'\\b(' + '|'.join(str(i) for i in range(32) if i not in [24, 26, 27]) + r')\\b',\n            'technical_bulletin_code': r'\\bSB_\\d{4}_\\d{2}\\b',\n            'service_campaign_code': r'\\bRP_\\d{4}_\\d{2}\\b',\n            'year': r'\\b(201[0-9]|202[0-5])\\b'\n        }\n\n    def extract_pattern(self, text: str, pattern_key: str) -> str:\n        \"\"\"Extracts the first matching pattern from the text.\"\"\"\n        if pattern_key not in self.compiled_patterns:\n            return \"Pattern not found\"\n        match = self.compiled_patterns[pattern_key].search(text)\n        return match.group() if match else \"Not found\"\n\n    def get_tractor_model_code(self) -> str:\n        \"\"\"Extracts the tractor model code from the question text.\"\"\"\n        return self._extract_info('tractor_model_code')\n\n    def get_suspect_parameter_number(self) -> str:\n        \"\"\"Extracts the suspect parameter number from the question text.\"\"\"\n        return self._extract_info('suspect_parameter_number')\n\n    def get_failure_mode_identifier(self) -> str:\n        \"\"\"Extracts the failure mode identifier from the question text.\"\"\"\n        return self._extract_info('failure_mode_identifier')\n    \n    def get_technical_bulletin_code(self) -> str:\n        \"\"\"Extracts the technical bulletin code from the question text.\"\"\"\n        return self._extract_info('technical_bulletin_code')\n\n    def get_service_campaign_code(self) -> str:\n        \"\"\"Extracts the service campaign code from the question text.\"\"\"\n        return self._extract_info('service_campaign_code')\n\n    def get_year(self) -> str:\n        \"\"\"Extracts the year from the question text.\"\"\"\n        return self._extract_info('year')\n\n    def _extract_info(self, pattern_key: str) -> str:\n        \"\"\"Helper method to extract information based on the provided pattern key.\"\"\"\n        if not hasattr(self, 'user_question') or not self.user_question.text:\n            return \"Question text is not available\"\n        return self.extract_pattern(self.user_question.text, pattern_key)",
                "fileTypes": [],
                "file_path": "",
                "password": false,
                "name": "code",
                "advanced": true,
                "dynamic": true,
                "info": "",
                "load_from_db": false,
                "title_case": false
              },
              "user_question": {
                "trace_as_input": true,
                "trace_as_metadata": true,
                "load_from_db": false,
                "list": false,
                "required": false,
                "placeholder": "",
                "show": true,
                "name": "user_question",
                "value": "",
                "display_name": "User Question",
                "advanced": false,
                "input_types": [
                  "Message"
                ],
                "dynamic": false,
                "info": "Enter a question containing tractor information",
                "title_case": false,
                "type": "str",
                "_input_type": "MessageInput"
              }
            },
            "description": "Extracts tractor information from the question and creates separate outputs.",
            "icon": "🚜",
            "base_classes": [
              "Text"
            ],
            "display_name": "Tractor Info Parser",
            "documentation": "",
            "custom_fields": {},
            "output_types": [],
            "pinned": false,
            "conditional_paths": [],
            "frozen": false,
            "outputs": [
              {
                "types": [
                  "Text"
                ],
                "selected": "Text",
                "name": "tractor_model_code",
                "display_name": "Tractor Model Code",
                "method": "get_tractor_model_code",
                "value": "__UNDEFINED__",
                "cache": true
              },
              {
                "types": [
                  "Text"
                ],
                "selected": "Text",
                "name": "suspect_parameter_number",
                "display_name": "Suspect Parameter Number",
                "method": "get_suspect_parameter_number",
                "value": "__UNDEFINED__",
                "cache": true
              },
              {
                "types": [
                  "Text"
                ],
                "selected": "Text",
                "name": "failure_mode_identifier",
                "display_name": "Failure Mode Identifier",
                "method": "get_failure_mode_identifier",
                "value": "__UNDEFINED__",
                "cache": true
              },
              {
                "types": [
                  "Text"
                ],
                "selected": "Text",
                "name": "technical_bulletin_code",
                "display_name": "Technical Bulletin Code",
                "method": "get_technical_bulletin_code",
                "value": "__UNDEFINED__",
                "cache": true
              },
              {
                "types": [
                  "Text"
                ],
                "selected": "Text",
                "name": "service_campaign_code",
                "display_name": "Service Campaign Code",
                "method": "get_service_campaign_code",
                "value": "__UNDEFINED__",
                "cache": true
              },
              {
                "types": [
                  "Text"
                ],
                "selected": "Text",
                "name": "year",
                "display_name": "Year",
                "method": "get_year",
                "value": "__UNDEFINED__",
                "cache": true
              }
            ],
            "field_order": [
              "user_question"
            ],
            "beta": false,
            "edited": true,
            "metadata": {},
            "lf_version": "1.0.19"
          },
          "id": "CustomComponent-ShIul"
        },
        "selected": false,
        "width": 384,
        "height": 501,
        "dragging": false,
        "positionAbsolute": {
          "x": -3440.7651390470974,
          "y": -840.5645718300633
        }
      },
      {
        "id": "Prompt-NXY0w",
        "type": "genericNode",
        "position": {
          "x": -1040.3937084913155,
          "y": -840.4182814329793
        },
        "data": {
          "type": "Prompt",
          "node": {
            "template": {
              "_type": "Component",
              "code": {
                "type": "code",
                "required": true,
                "placeholder": "",
                "list": false,
                "show": true,
                "multiline": true,
                "value": "from axiestudio.base.prompts.api_utils import process_prompt_template\nfrom axiestudio.custom import Component\nfrom axiestudio.inputs.inputs import DefaultPromptField\nfrom axiestudio.io import Output, PromptInput\nfrom axiestudio.schema.message import Message\nfrom axiestudio.template.utils import update_template_values\n\n\nclass PromptComponent(Component):\n    display_name: str = \"Prompt\"\n    description: str = \"Create a prompt template with dynamic variables.\"\n    icon = \"prompts\"\n    trace_type = \"prompt\"\n    name = \"Prompt\"\n\n    inputs = [\n        PromptInput(name=\"template\", display_name=\"Template\"),\n    ]\n\n    outputs = [\n        Output(display_name=\"Prompt Message\", name=\"prompt\", method=\"build_prompt\"),\n    ]\n\n    async def build_prompt(\n        self,\n    ) -> Message:\n        prompt = await Message.from_template_and_variables(**self._attributes)\n        self.status = prompt.text\n        return prompt\n\n    def _update_template(self, frontend_node: dict):\n        prompt_template = frontend_node[\"template\"][\"template\"][\"value\"]\n        custom_fields = frontend_node[\"custom_fields\"]\n        frontend_node_template = frontend_node[\"template\"]\n        _ = process_prompt_template(\n            template=prompt_template,\n            name=\"template\",\n            custom_fields=custom_fields,\n            frontend_node_template=frontend_node_template,\n        )\n        return frontend_node\n\n    def post_code_processing(self, new_frontend_node: dict, current_frontend_node: dict):\n        \"\"\"\n        This function is called after the code validation is done.\n        \"\"\"\n        frontend_node = super().post_code_processing(new_frontend_node, current_frontend_node)\n        template = frontend_node[\"template\"][\"template\"][\"value\"]\n        # Kept it duplicated for backwards compatibility\n        _ = process_prompt_template(\n            template=template,\n            name=\"template\",\n            custom_fields=frontend_node[\"custom_fields\"],\n            frontend_node_template=frontend_node[\"template\"],\n        )\n        # Now that template is updated, we need to grab any values that were set in the current_frontend_node\n        # and update the frontend_node with those values\n        update_template_values(new_template=frontend_node, previous_template=current_frontend_node[\"template\"])\n        return frontend_node\n\n    def _get_fallback_input(self, **kwargs):\n        return DefaultPromptField(**kwargs)\n",
                "fileTypes": [],
                "file_path": "",
                "password": false,
                "name": "code",
                "advanced": true,
                "dynamic": true,
                "info": "",
                "load_from_db": false,
                "title_case": false
              },
              "template": {
                "trace_as_input": true,
                "list": false,
                "required": false,
                "placeholder": "",
                "show": true,
                "name": "template",
                "value": "You are an AI assistant specializing in agricultural machinery, particularly in technical support for tractors. Your task is to answer user questions using the provided information sources and following specific guidelines.\n\nYou will be given the following inputs:\n\n<user_question>\n{user_question}\n</user_question>\n\n<glossary>\n{glossary}\n</glossary>\n\n<operator_manual>\n{OIB}\n</operator_manual>\n\n<workshop_manual>\n{WSM}\n</workshop_manual>\n\n<diagnostic_trouble_codes>\n{DTC}\n</diagnostic_trouble_codes>\n\n<technical_bulletins>\n{TBU}\n</technical_bulletins>\n\n<service_campaigns>\n{SCM}\n</service_campaigns>\n\nFollow these response guidelines:\n\n1. Answer in the Italian language.\n2. Use markdown formatting for structure.\n3. Tailor your response structure to the specific query, integrating relevant information from all sources as needed.\n4. Include only directly relevant information.\n5. Use clear, concise language suitable for both technical and non-technical users.\n6. Prioritize practical, actionable advice.\n7. If critical information is missing, briefly state this and its potential impact.\n\nFor error code queries:\n- Include ALL results from the diagnostic trouble codes.\n- Use this format for each code:\n  **Error Code:** [Code]\n  **Description:** [Brief description]\n  [Additional relevant details if space allows]\n\nFor technical bulletin queries:\n- Include ALL bulletins from the technical bulletins.\n- Use this format for each bulletin:\n  X. **Technical Bulletin - SB_XXXX_XX_XX**\n  **Description:** [Brief description]\n  [Additional details (Publication Date, Classification, Tractor Models, Campaign Code) if space allows]\n\nFor all other queries:\n- Create a logical structure that best addresses the specific question.\n- Integrate relevant information from available sources without explicitly mentioning them.\n\nYour goal is to provide a comprehensive, focused response that directly addresses the query, enabling efficient troubleshooting and resolution.\n\nRemember to think carefully about the query and use all relevant information from the provided sources to construct your answer.",
                "display_name": "Template",
                "advanced": false,
                "dynamic": false,
                "info": "",
                "title_case": false,
                "type": "prompt",
                "_input_type": "PromptInput"
              },
              "glossary": {
                "field_type": "str",
                "required": false,
                "placeholder": "",
                "list": false,
                "show": true,
                "multiline": true,
                "value": "",
                "fileTypes": [],
                "file_path": "",
                "name": "glossary",
                "display_name": "glossary",
                "advanced": false,
                "input_types": [
                  "Message",
                  "Text"
                ],
                "dynamic": false,
                "info": "",
                "load_from_db": false,
                "title_case": false,
                "type": "str"
              },
              "user_question": {
                "field_type": "str",
                "required": false,
                "placeholder": "",
                "list": false,
                "show": true,
                "multiline": true,
                "value": "",
                "fileTypes": [],
                "file_path": "",
                "name": "user_question",
                "display_name": "user_question",
                "advanced": false,
                "input_types": [
                  "Message",
                  "Text"
                ],
                "dynamic": false,
                "info": "",
                "load_from_db": false,
                "title_case": false,
                "type": "str"
              },
              "OIB": {
                "field_type": "str",
                "required": false,
                "placeholder": "",
                "list": false,
                "show": true,
                "multiline": true,
                "value": "",
                "fileTypes": [],
                "file_path": "",
                "name": "OIB",
                "display_name": "OIB",
                "advanced": false,
                "input_types": [
                  "Message",
                  "Text"
                ],
                "dynamic": false,
                "info": "",
                "load_from_db": false,
                "title_case": false,
                "type": "str"
              },
              "WSM": {
                "field_type": "str",
                "required": false,
                "placeholder": "",
                "list": false,
                "show": true,
                "multiline": true,
                "value": "",
                "fileTypes": [],
                "file_path": "",
                "name": "WSM",
                "display_name": "WSM",
                "advanced": false,
                "input_types": [
                  "Message",
                  "Text"
                ],
                "dynamic": false,
                "info": "",
                "load_from_db": false,
                "title_case": false,
                "type": "str"
              },
              "DTC": {
                "field_type": "str",
                "required": false,
                "placeholder": "",
                "list": false,
                "show": true,
                "multiline": true,
                "value": "",
                "fileTypes": [],
                "file_path": "",
                "name": "DTC",
                "display_name": "DTC",
                "advanced": false,
                "input_types": [
                  "Message",
                  "Text"
                ],
                "dynamic": false,
                "info": "",
                "load_from_db": false,
                "title_case": false,
                "type": "str"
              },
              "TBU": {
                "field_type": "str",
                "required": false,
                "placeholder": "",
                "list": false,
                "show": true,
                "multiline": true,
                "value": "",
                "fileTypes": [],
                "file_path": "",
                "name": "TBU",
                "display_name": "TBU",
                "advanced": false,
                "input_types": [
                  "Message",
                  "Text"
                ],
                "dynamic": false,
                "info": "",
                "load_from_db": false,
                "title_case": false,
                "type": "str"
              },
              "SCM": {
                "field_type": "str",
                "required": false,
                "placeholder": "",
                "list": false,
                "show": true,
                "multiline": true,
                "value": "",
                "fileTypes": [],
                "file_path": "",
                "name": "SCM",
                "display_name": "SCM",
                "advanced": false,
                "input_types": [
                  "Message",
                  "Text"
                ],
                "dynamic": false,
                "info": "",
                "load_from_db": false,
                "title_case": false,
                "type": "str"
              }
            },
            "description": "Create a prompt template with dynamic variables.",
            "icon": "prompts",
            "is_input": null,
            "is_output": null,
            "is_composition": null,
            "base_classes": [
              "Message"
            ],
            "name": "",
            "display_name": "Prompt",
            "documentation": "",
            "custom_fields": {
              "template": [
                "user_question",
                "glossary",
                "OIB",
                "WSM",
                "DTC",
                "TBU",
                "SCM"
              ]
            },
            "output_types": [],
            "full_path": null,
            "pinned": false,
            "conditional_paths": [],
            "frozen": false,
            "outputs": [
              {
                "types": [
                  "Message"
                ],
                "selected": "Message",
                "name": "prompt",
                "hidden": null,
                "display_name": "Prompt Message",
                "method": "build_prompt",
                "value": "__UNDEFINED__",
                "cache": true,
                "required_inputs": null
              }
            ],
            "field_order": [
              "template"
            ],
            "beta": false,
            "error": null,
            "edited": false,
            "metadata": {},
            "lf_version": "1.0.19"
          },
          "id": "Prompt-NXY0w"
        },
        "selected": false,
        "width": 384,
        "height": 907,
        "positionAbsolute": {
          "x": -1040.3937084913155,
          "y": -840.4182814329793
        },
        "dragging": false
      },
      {
        "id": "ChatOutput-NFvya",
        "type": "genericNode",
        "position": {
          "x": -240.61463691085208,
          "y": -840.746261977535
        },
        "data": {
          "type": "ChatOutput",
          "node": {
            "template": {
              "_type": "Component",
              "code": {
                "type": "code",
                "required": true,
                "placeholder": "",
                "list": false,
                "show": true,
                "multiline": true,
                "value": "from axiestudio.base.io.chat import ChatComponent\nfrom axiestudio.inputs import BoolInput\nfrom axiestudio.io import DropdownInput, MessageTextInput, Output\nfrom axiestudio.memory import store_message\nfrom axiestudio.schema.message import Message\nfrom axiestudio.utils.constants import MESSAGE_SENDER_AI, MESSAGE_SENDER_NAME_AI, MESSAGE_SENDER_USER\n\n\nclass ChatOutput(ChatComponent):\n    display_name = \"Chat Output\"\n    description = \"Display a chat message in the Playground.\"\n    icon = \"ChatOutput\"\n    name = \"ChatOutput\"\n\n    inputs = [\n        MessageTextInput(\n            name=\"input_value\",\n            display_name=\"Text\",\n            info=\"Message to be passed as output.\",\n        ),\n        BoolInput(\n            name=\"should_store_message\",\n            display_name=\"Store Messages\",\n            info=\"Store the message in the history.\",\n            value=True,\n            advanced=True,\n        ),\n        DropdownInput(\n            name=\"sender\",\n            display_name=\"Sender Type\",\n            options=[MESSAGE_SENDER_AI, MESSAGE_SENDER_USER],\n            value=MESSAGE_SENDER_AI,\n            advanced=True,\n            info=\"Type of sender.\",\n        ),\n        MessageTextInput(\n            name=\"sender_name\",\n            display_name=\"Sender Name\",\n            info=\"Name of the sender.\",\n            value=MESSAGE_SENDER_NAME_AI,\n            advanced=True,\n        ),\n        MessageTextInput(\n            name=\"session_id\",\n            display_name=\"Session ID\",\n            info=\"The session ID of the chat. If empty, the current session ID parameter will be used.\",\n            advanced=True,\n        ),\n        MessageTextInput(\n            name=\"data_template\",\n            display_name=\"Data Template\",\n            value=\"{text}\",\n            advanced=True,\n            info=\"Template to convert Data to Text. If left empty, it will be dynamically set to the Data's text key.\",\n        ),\n    ]\n    outputs = [\n        Output(display_name=\"Message\", name=\"message\", method=\"message_response\"),\n    ]\n\n    def message_response(self) -> Message:\n        message = Message(\n            text=self.input_value,\n            sender=self.sender,\n            sender_name=self.sender_name,\n            session_id=self.session_id,\n        )\n        if (\n            self.session_id\n            and isinstance(message, Message)\n            and isinstance(message.text, str)\n            and self.should_store_message\n        ):\n            store_message(\n                message,\n                flow_id=self.graph.flow_id,\n            )\n            self.message.value = message\n\n        self.status = message\n        return message\n",
                "fileTypes": [],
                "file_path": "",
                "password": false,
                "name": "code",
                "advanced": true,
                "dynamic": true,
                "info": "",
                "load_from_db": false,
                "title_case": false
              },
              "data_template": {
                "trace_as_input": true,
                "trace_as_metadata": true,
                "load_from_db": false,
                "list": false,
                "required": false,
                "placeholder": "",
                "show": true,
                "name": "data_template",
                "value": "{text}",
                "display_name": "Data Template",
                "advanced": true,
                "input_types": [
                  "Message"
                ],
                "dynamic": false,
                "info": "Template to convert Data to Text. If left empty, it will be dynamically set to the Data's text key.",
                "title_case": false,
                "type": "str",
                "_input_type": "MessageTextInput"
              },
              "input_value": {
                "trace_as_input": true,
                "trace_as_metadata": true,
                "load_from_db": false,
                "list": false,
                "required": false,
                "placeholder": "",
                "show": true,
                "name": "input_value",
                "value": "",
                "display_name": "Text",
                "advanced": false,
                "input_types": [
                  "Message"
                ],
                "dynamic": false,
                "info": "Message to be passed as output.",
                "title_case": false,
                "type": "str",
                "_input_type": "MessageTextInput"
              },
              "sender": {
                "trace_as_metadata": true,
                "options": [
                  "Machine",
                  "User"
                ],
                "combobox": false,
                "required": false,
                "placeholder": "",
                "show": true,
                "name": "sender",
                "value": "Machine",
                "display_name": "Sender Type",
                "advanced": true,
                "dynamic": false,
                "info": "Type of sender.",
                "title_case": false,
                "type": "str",
                "_input_type": "DropdownInput"
              },
              "sender_name": {
                "trace_as_input": true,
                "trace_as_metadata": true,
                "load_from_db": false,
                "list": false,
                "required": false,
                "placeholder": "",
                "show": true,
                "name": "sender_name",
                "value": "AI",
                "display_name": "Sender Name",
                "advanced": true,
                "input_types": [
                  "Message"
                ],
                "dynamic": false,
                "info": "Name of the sender.",
                "title_case": false,
                "type": "str",
                "_input_type": "MessageTextInput"
              },
              "session_id": {
                "trace_as_input": true,
                "trace_as_metadata": true,
                "load_from_db": false,
                "list": false,
                "required": false,
                "placeholder": "",
                "show": true,
                "name": "session_id",
                "value": "",
                "display_name": "Session ID",
                "advanced": true,
                "input_types": [
                  "Message"
                ],
                "dynamic": false,
                "info": "The session ID of the chat. If empty, the current session ID parameter will be used.",
                "title_case": false,
                "type": "str",
                "_input_type": "MessageTextInput"
              },
              "should_store_message": {
                "trace_as_metadata": true,
                "list": false,
                "required": false,
                "placeholder": "",
                "show": true,
                "name": "should_store_message",
                "value": true,
                "display_name": "Store Messages",
                "advanced": true,
                "dynamic": false,
                "info": "Store the message in the history.",
                "title_case": false,
                "type": "bool",
                "_input_type": "BoolInput"
              }
            },
            "description": "Display a chat message in the Playground.",
            "icon": "ChatOutput",
            "base_classes": [
              "Message"
            ],
            "display_name": "Chat Output",
            "documentation": "",
            "custom_fields": {},
            "output_types": [],
            "pinned": false,
            "conditional_paths": [],
            "frozen": false,
            "outputs": [
              {
                "types": [
                  "Message"
                ],
                "selected": "Message",
                "name": "message",
                "display_name": "Message",
                "method": "message_response",
                "value": "__UNDEFINED__",
                "cache": true
              }
            ],
            "field_order": [
              "input_value",
              "should_store_message",
              "sender",
              "sender_name",
              "session_id",
              "data_template"
            ],
            "beta": false,
            "edited": false,
            "lf_version": "1.0.19"
          },
          "id": "ChatOutput-NFvya"
        },
        "selected": false,
        "width": 384,
        "height": 289,
        "positionAbsolute": {
          "x": -240.61463691085208,
          "y": -840.746261977535
        },
        "dragging": false
      },
      {
        "id": "OpenAIModel-zShEY",
        "type": "genericNode",
        "position": {
          "x": -640.4506506366041,
          "y": -840.430593505585
        },
        "data": {
          "type": "OpenAIModel",
          "node": {
            "template": {
              "_type": "Component",
              "output_parser": {
                "trace_as_metadata": true,
                "list": false,
                "required": false,
                "placeholder": "",
                "show": true,
                "name": "output_parser",
                "value": "",
                "display_name": "Output Parser",
                "advanced": true,
                "input_types": [
                  "OutputParser"
                ],
                "dynamic": false,
                "info": "The parser to use to parse the output of the model",
                "title_case": false,
                "type": "other",
                "_input_type": "HandleInput"
              },
              "api_key": {
                "load_from_db": true,
                "required": false,
                "placeholder": "",
                "show": true,
                "name": "api_key",
                "value": "",
                "display_name": "OpenAI API Key",
                "advanced": false,
                "input_types": [
                  "Message"
                ],
                "dynamic": false,
                "info": "The OpenAI API Key to use for the OpenAI model.",
                "title_case": false,
                "password": true,
                "type": "str",
                "_input_type": "SecretStrInput"
              },
              "code": {
                "type": "code",
                "required": true,
                "placeholder": "",
                "list": false,
                "show": true,
                "multiline": true,
                "value": "import operator\nfrom functools import reduce\n\nfrom langchain_openai import ChatOpenAI\nfrom pydantic.v1 import SecretStr\n\nfrom axiestudio.base.models.model import LCModelComponent\nfrom axiestudio.base.models.openai_constants import OPENAI_MODEL_NAMES\nfrom axiestudio.field_typing import LanguageModel\nfrom axiestudio.field_typing.range_spec import RangeSpec\nfrom axiestudio.inputs import (\n    BoolInput,\n    DictInput,\n    DropdownInput,\n    FloatInput,\n    IntInput,\n    SecretStrInput,\n    StrInput,\n)\nfrom axiestudio.inputs.inputs import HandleInput\n\n\nclass OpenAIModelComponent(LCModelComponent):\n    display_name = \"OpenAI\"\n    description = \"Generates text using OpenAI LLMs.\"\n    icon = \"OpenAI\"\n    name = \"OpenAIModel\"\n\n    inputs = [\n        *LCModelComponent._base_inputs,\n        IntInput(\n            name=\"max_tokens\",\n            display_name=\"Max Tokens\",\n            advanced=True,\n            info=\"The maximum number of tokens to generate. Set to 0 for unlimited tokens.\",\n            range_spec=RangeSpec(min=0, max=128000),\n        ),\n        DictInput(name=\"model_kwargs\", display_name=\"Model Kwargs\", advanced=True),\n        BoolInput(\n            name=\"json_mode\",\n            display_name=\"JSON Mode\",\n            advanced=True,\n            info=\"If True, it will output JSON regardless of passing a schema.\",\n        ),\n        DictInput(\n            name=\"output_schema\",\n            is_list=True,\n            display_name=\"Schema\",\n            advanced=True,\n            info=\"The schema for the Output of the model. \"\n            \"You must pass the word JSON in the prompt. \"\n            \"If left blank, JSON mode will be disabled.\",\n        ),\n        DropdownInput(\n            name=\"model_name\",\n            display_name=\"Model Name\",\n            advanced=False,\n            options=OPENAI_MODEL_NAMES,\n            value=OPENAI_MODEL_NAMES[0],\n        ),\n        StrInput(\n            name=\"openai_api_base\",\n            display_name=\"OpenAI API Base\",\n            advanced=True,\n            info=\"The base URL of the OpenAI API. \"\n            \"Defaults to https://api.openai.com/v1. \"\n            \"You can change this to use other APIs like JinaChat, LocalAI and Prem.\",\n        ),\n        SecretStrInput(\n            name=\"api_key\",\n            display_name=\"OpenAI API Key\",\n            info=\"The OpenAI API Key to use for the OpenAI model.\",\n            advanced=False,\n            value=\"OPENAI_API_KEY\",\n        ),\n        FloatInput(name=\"temperature\", display_name=\"Temperature\", value=0.1),\n        IntInput(\n            name=\"seed\",\n            display_name=\"Seed\",\n            info=\"The seed controls the reproducibility of the job.\",\n            advanced=True,\n            value=1,\n        ),\n        HandleInput(\n            name=\"output_parser\",\n            display_name=\"Output Parser\",\n            info=\"The parser to use to parse the output of the model\",\n            advanced=True,\n            input_types=[\"OutputParser\"],\n        ),\n    ]\n\n    def build_model(self) -> LanguageModel:  # type: ignore[type-var]\n        # self.output_schema is a list of dictionaries\n        # let's convert it to a dictionary\n        output_schema_dict: dict[str, str] = reduce(operator.ior, self.output_schema or {}, {})\n        openai_api_key = self.api_key\n        temperature = self.temperature\n        model_name: str = self.model_name\n        max_tokens = self.max_tokens\n        model_kwargs = self.model_kwargs or {}\n        openai_api_base = self.openai_api_base or \"https://api.openai.com/v1\"\n        json_mode = bool(output_schema_dict) or self.json_mode\n        seed = self.seed\n\n        api_key = SecretStr(openai_api_key) if openai_api_key else None\n        output = ChatOpenAI(\n            max_tokens=max_tokens or None,\n            model_kwargs=model_kwargs,\n            model=model_name,\n            base_url=openai_api_base,\n            api_key=api_key,\n            temperature=temperature if temperature is not None else 0.1,\n            seed=seed,\n        )\n        if json_mode:\n            if output_schema_dict:\n                output = output.with_structured_output(schema=output_schema_dict, method=\"json_mode\")\n            else:\n                output = output.bind(response_format={\"type\": \"json_object\"})\n\n        return output\n\n    def _get_exception_message(self, e: Exception):\n        \"\"\"\n        Get a message from an OpenAI exception.\n\n        Args:\n            exception (Exception): The exception to get the message from.\n\n        Returns:\n            str: The message from the exception.\n        \"\"\"\n\n        try:\n            from openai import BadRequestError\n        except ImportError:\n            return None\n        if isinstance(e, BadRequestError):\n            message = e.body.get(\"message\")\n            if message:\n                return message\n        return None\n",
                "fileTypes": [],
                "file_path": "",
                "password": false,
                "name": "code",
                "advanced": true,
                "dynamic": true,
                "info": "",
                "load_from_db": false,
                "title_case": false
              },
              "input_value": {
                "trace_as_input": true,
                "trace_as_metadata": true,
                "load_from_db": false,
                "list": false,
                "required": false,
                "placeholder": "",
                "show": true,
                "name": "input_value",
                "value": "",
                "display_name": "Input",
                "advanced": false,
                "input_types": [
                  "Message"
                ],
                "dynamic": false,
                "info": "",
                "title_case": false,
                "type": "str",
                "_input_type": "MessageInput"
              },
              "json_mode": {
                "trace_as_metadata": true,
                "list": false,
                "required": false,
                "placeholder": "",
                "show": true,
                "name": "json_mode",
                "value": false,
                "display_name": "JSON Mode",
                "advanced": true,
                "dynamic": false,
                "info": "If True, it will output JSON regardless of passing a schema.",
                "title_case": false,
                "type": "bool",
                "_input_type": "BoolInput"
              },
              "max_tokens": {
                "trace_as_metadata": true,
                "range_spec": {
                  "step_type": "float",
                  "min": 0,
                  "max": 128000,
                  "step": 0.1
                },
                "list": false,
                "required": false,
                "placeholder": "",
                "show": true,
                "name": "max_tokens",
                "value": "",
                "display_name": "Max Tokens",
                "advanced": true,
                "dynamic": false,
                "info": "The maximum number of tokens to generate. Set to 0 for unlimited tokens.",
                "title_case": false,
                "type": "int",
                "_input_type": "IntInput"
              },
              "model_kwargs": {
                "trace_as_input": true,
                "list": false,
                "required": false,
                "placeholder": "",
                "show": true,
                "name": "model_kwargs",
                "value": {},
                "display_name": "Model Kwargs",
                "advanced": true,
                "dynamic": false,
                "info": "",
                "title_case": false,
                "type": "dict",
                "_input_type": "DictInput"
              },
              "model_name": {
                "trace_as_metadata": true,
                "options": [
                  "gpt-4o-mini",
                  "gpt-4o",
                  "gpt-4-turbo",
                  "gpt-4-turbo-preview",
                  "gpt-4",
                  "gpt-3.5-turbo",
                  "gpt-3.5-turbo-0125"
                ],
                "combobox": false,
                "required": false,
                "placeholder": "",
                "show": true,
                "name": "model_name",
                "value": "gpt-4o-mini",
                "display_name": "Model Name",
                "advanced": false,
                "dynamic": false,
                "info": "",
                "title_case": false,
                "type": "str",
                "_input_type": "DropdownInput"
              },
              "openai_api_base": {
                "trace_as_metadata": true,
                "load_from_db": false,
                "list": false,
                "required": false,
                "placeholder": "",
                "show": true,
                "name": "openai_api_base",
                "value": "",
                "display_name": "OpenAI API Base",
                "advanced": true,
                "dynamic": false,
                "info": "The base URL of the OpenAI API. Defaults to https://api.openai.com/v1. You can change this to use other APIs like JinaChat, LocalAI and Prem.",
                "title_case": false,
                "type": "str",
                "_input_type": "StrInput"
              },
              "output_schema": {
                "trace_as_input": true,
                "list": true,
                "required": false,
                "placeholder": "",
                "show": true,
                "name": "output_schema",
                "value": {},
                "display_name": "Schema",
                "advanced": true,
                "dynamic": false,
                "info": "The schema for the Output of the model. You must pass the word JSON in the prompt. If left blank, JSON mode will be disabled.",
                "title_case": false,
                "type": "dict",
                "_input_type": "DictInput"
              },
              "seed": {
                "trace_as_metadata": true,
                "list": false,
                "required": false,
                "placeholder": "",
                "show": true,
                "name": "seed",
                "value": 1,
                "display_name": "Seed",
                "advanced": true,
                "dynamic": false,
                "info": "The seed controls the reproducibility of the job.",
                "title_case": false,
                "type": "int",
                "_input_type": "IntInput"
              },
              "stream": {
                "trace_as_metadata": true,
                "list": false,
                "required": false,
                "placeholder": "",
                "show": true,
                "name": "stream",
                "value": false,
                "display_name": "Stream",
                "advanced": true,
                "dynamic": false,
                "info": "Stream the response from the model. Streaming works only in Chat.",
                "title_case": false,
                "type": "bool",
                "_input_type": "BoolInput"
              },
              "system_message": {
                "trace_as_input": true,
                "trace_as_metadata": true,
                "load_from_db": false,
                "list": false,
                "required": false,
                "placeholder": "",
                "show": true,
                "name": "system_message",
                "value": "",
                "display_name": "System Message",
                "advanced": true,
                "input_types": [
                  "Message"
                ],
                "dynamic": false,
                "info": "System message to pass to the model.",
                "title_case": false,
                "type": "str",
                "_input_type": "MessageTextInput"
              },
              "temperature": {
                "trace_as_metadata": true,
                "list": false,
                "required": false,
                "placeholder": "",
                "show": true,
                "name": "temperature",
                "value": 0.1,
                "display_name": "Temperature",
                "advanced": false,
                "dynamic": false,
                "info": "",
                "title_case": false,
                "type": "float",
                "_input_type": "FloatInput"
              }
            },
            "description": "Generates text using OpenAI LLMs.",
            "icon": "OpenAI",
            "base_classes": [
              "LanguageModel",
              "Message"
            ],
            "display_name": "OpenAI",
            "documentation": "",
            "custom_fields": {},
            "output_types": [],
            "pinned": false,
            "conditional_paths": [],
            "frozen": false,
            "outputs": [
              {
                "types": [
                  "Message"
                ],
                "selected": "Message",
                "name": "text_output",
                "display_name": "Text",
                "method": "text_response",
                "value": "__UNDEFINED__",
                "cache": true,
                "required_inputs": [
                  "input_value",
                  "stream",
                  "system_message"
                ]
              },
              {
                "types": [
                  "LanguageModel"
                ],
                "selected": "LanguageModel",
                "name": "model_output",
                "display_name": "Language Model",
                "method": "build_model",
                "value": "__UNDEFINED__",
                "cache": true,
                "required_inputs": [
                  "api_key",
                  "json_mode",
                  "max_tokens",
                  "model_kwargs",
                  "model_name",
                  "openai_api_base",
                  "output_schema",
                  "seed",
                  "temperature"
                ]
              }
            ],
            "field_order": [
              "input_value",
              "system_message",
              "stream",
              "max_tokens",
              "model_kwargs",
              "json_mode",
              "output_schema",
              "model_name",
              "openai_api_base",
              "api_key",
              "temperature",
              "seed",
              "output_parser"
            ],
            "beta": false,
            "edited": false,
            "metadata": {},
            "lf_version": "1.0.19"
          },
          "id": "OpenAIModel-zShEY"
        },
        "selected": false,
        "width": 384,
        "height": 587,
        "positionAbsolute": {
          "x": -640.4506506366041,
          "y": -840.430593505585
        },
        "dragging": false
      },
      {
        "data": {
          "id": "groupComponent-ob9nl",
          "type": "GroupNode",
          "node": {
            "display_name": "OIB Data Retriever",
            "documentation": "",
            "description": "",
            "template": {
              "ingest_data_Chroma-94Qh7": {
                "trace_as_metadata": true,
                "list": true,
                "trace_as_input": true,
                "required": false,
                "placeholder": "",
                "show": true,
                "name": "ingest_data",
                "value": "",
                "display_name": "Ingest Data",
                "advanced": true,
                "input_types": [
                  "Data"
                ],
                "dynamic": false,
                "info": "",
                "title_case": false,
                "type": "other",
                "_input_type": "DataInput",
                "proxy": {
                  "id": "Chroma-94Qh7",
                  "field": "ingest_data"
                }
              },
              "allow_duplicates_Chroma-94Qh7": {
                "trace_as_metadata": true,
                "list": false,
                "required": false,
                "placeholder": "",
                "show": true,
                "name": "allow_duplicates",
                "value": false,
                "display_name": "Allow Duplicates",
                "advanced": true,
                "dynamic": false,
                "info": "If false, will not add documents that are already in the Vector Store.",
                "title_case": false,
                "type": "bool",
                "_input_type": "BoolInput",
                "proxy": {
                  "id": "Chroma-94Qh7",
                  "field": "allow_duplicates"
                }
              },
              "chroma_server_cors_allow_origins_Chroma-94Qh7": {
                "trace_as_metadata": true,
                "load_from_db": false,
                "list": false,
                "required": false,
                "placeholder": "",
                "show": true,
                "name": "chroma_server_cors_allow_origins",
                "value": "",
                "display_name": "Server CORS Allow Origins",
                "advanced": true,
                "dynamic": false,
                "info": "",
                "title_case": false,
                "type": "str",
                "_input_type": "StrInput",
                "proxy": {
                  "id": "Chroma-94Qh7",
                  "field": "chroma_server_cors_allow_origins"
                }
              },
              "chroma_server_grpc_port_Chroma-94Qh7": {
                "trace_as_metadata": true,
                "list": false,
                "required": false,
                "placeholder": "",
                "show": true,
                "name": "chroma_server_grpc_port",
                "value": "",
                "display_name": "Server gRPC Port",
                "advanced": true,
                "dynamic": false,
                "info": "",
                "title_case": false,
                "type": "int",
                "_input_type": "IntInput",
                "proxy": {
                  "id": "Chroma-94Qh7",
                  "field": "chroma_server_grpc_port"
                }
              },
              "chroma_server_host_Chroma-94Qh7": {
                "trace_as_metadata": true,
                "load_from_db": false,
                "list": false,
                "required": false,
                "placeholder": "",
                "show": true,
                "name": "chroma_server_host",
                "value": "",
                "display_name": "Server Host",
                "advanced": true,
                "dynamic": false,
                "info": "",
                "title_case": false,
                "type": "str",
                "_input_type": "StrInput",
                "proxy": {
                  "id": "Chroma-94Qh7",
                  "field": "chroma_server_host"
                }
              },
              "chroma_server_http_port_Chroma-94Qh7": {
                "trace_as_metadata": true,
                "list": false,
                "required": false,
                "placeholder": "",
                "show": true,
                "name": "chroma_server_http_port",
                "value": "",
                "display_name": "Server HTTP Port",
                "advanced": true,
                "dynamic": false,
                "info": "",
                "title_case": false,
                "type": "int",
                "_input_type": "IntInput",
                "proxy": {
                  "id": "Chroma-94Qh7",
                  "field": "chroma_server_http_port"
                }
              },
              "chroma_server_ssl_enabled_Chroma-94Qh7": {
                "trace_as_metadata": true,
                "list": false,
                "required": false,
                "placeholder": "",
                "show": true,
                "name": "chroma_server_ssl_enabled",
                "value": false,
                "display_name": "Server SSL Enabled",
                "advanced": true,
                "dynamic": false,
                "info": "",
                "title_case": false,
                "type": "bool",
                "_input_type": "BoolInput",
                "proxy": {
                  "id": "Chroma-94Qh7",
                  "field": "chroma_server_ssl_enabled"
                }
              },
              "code_Chroma-94Qh7": {
                "type": "code",
                "required": true,
                "placeholder": "",
                "list": false,
                "show": true,
                "multiline": true,
                "value": "from copy import deepcopy\nfrom typing import TYPE_CHECKING\n\nfrom chromadb.config import Settings\nfrom langchain_chroma.vectorstores import Chroma\nfrom loguru import logger\n\nfrom axiestudio.base.vectorstores.model import LCVectorStoreComponent, check_cached_vector_store\nfrom axiestudio.base.vectorstores.utils import chroma_collection_to_data\nfrom axiestudio.io import BoolInput, DataInput, DropdownInput, HandleInput, IntInput, StrInput, MultilineInput\nfrom axiestudio.schema import Data\n\nif TYPE_CHECKING:\n    from langchain_chroma import Chroma\n\n\nclass ChromaVectorStoreComponent(LCVectorStoreComponent):\n    \"\"\"\n    Chroma Vector Store with search capabilities\n    \"\"\"\n\n    display_name: str = \"Chroma DB\"\n    description: str = \"Chroma Vector Store with search capabilities\"\n    documentation = \"https://python.langchain.com/docs/integrations/vectorstores/chroma\"\n    name = \"Chroma\"\n    icon = \"Chroma\"\n\n    inputs = [\n        MessageTextInput(\n            name=\"collection_name\",\n            display_name=\"Collection Name\",\n        ),\n        StrInput(\n            name=\"persist_directory\",\n            display_name=\"Persist Directory\",\n        ),\n        MultilineInput(\n            name=\"search_query\",\n            display_name=\"Search Query\",\n        ),\n        DataInput(\n            name=\"ingest_data\",\n            display_name=\"Ingest Data\",\n            is_list=True,\n        ),\n        HandleInput(name=\"embedding\", display_name=\"Embedding\", input_types=[\"Embeddings\"]),\n        StrInput(\n            name=\"chroma_server_cors_allow_origins\",\n            display_name=\"Server CORS Allow Origins\",\n            advanced=True,\n        ),\n        StrInput(\n            name=\"chroma_server_host\",\n            display_name=\"Server Host\",\n            advanced=True,\n        ),\n        IntInput(\n            name=\"chroma_server_http_port\",\n            display_name=\"Server HTTP Port\",\n            advanced=True,\n        ),\n        IntInput(\n            name=\"chroma_server_grpc_port\",\n            display_name=\"Server gRPC Port\",\n            advanced=True,\n        ),\n        BoolInput(\n            name=\"chroma_server_ssl_enabled\",\n            display_name=\"Server SSL Enabled\",\n            advanced=True,\n        ),\n        BoolInput(\n            name=\"allow_duplicates\",\n            display_name=\"Allow Duplicates\",\n            advanced=True,\n            info=\"If false, will not add documents that are already in the Vector Store.\",\n        ),\n        DropdownInput(\n            name=\"search_type\",\n            display_name=\"Search Type\",\n            options=[\"Similarity\", \"MMR\"],\n            value=\"Similarity\",\n            advanced=True,\n        ),\n        IntInput(\n            name=\"number_of_results\",\n            display_name=\"Number of Results\",\n            info=\"Number of results to return.\",\n            advanced=True,\n            value=5,\n        ),\n        IntInput(\n            name=\"limit\",\n            display_name=\"Limit\",\n            advanced=True,\n            info=\"Limit the number of records to compare when Allow Duplicates is False.\",\n        ),\n    ]\n\n    @check_cached_vector_store\n    def build_vector_store(self) -> Chroma:\n        \"\"\"\n        Builds the Chroma object.\n        \"\"\"\n        try:\n            from chromadb import Client\n            from langchain_chroma import Chroma\n        except ImportError:\n            raise ImportError(\n                \"Could not import Chroma integration package. \" \"Please install it with `pip install langchain-chroma`.\"\n            )\n        # Chroma settings\n        chroma_settings = None\n        client = None\n        if self.chroma_server_host:\n            chroma_settings = Settings(\n                chroma_server_cors_allow_origins=self.chroma_server_cors_allow_origins or [],\n                chroma_server_host=self.chroma_server_host,\n                chroma_server_http_port=self.chroma_server_http_port or None,\n                chroma_server_grpc_port=self.chroma_server_grpc_port or None,\n                chroma_server_ssl_enabled=self.chroma_server_ssl_enabled,\n            )\n            client = Client(settings=chroma_settings)\n\n        # Check persist_directory and expand it if it is a relative path\n        if self.persist_directory is not None:\n            persist_directory = self.resolve_path(self.persist_directory)\n        else:\n            persist_directory = None\n\n        chroma = Chroma(\n            persist_directory=persist_directory,\n            client=client,\n            embedding_function=self.embedding,\n            collection_name=self.collection_name,\n        )\n\n        self._add_documents_to_vector_store(chroma)\n        self.status = chroma_collection_to_data(chroma.get(limit=self.limit))\n        return chroma\n\n    def _add_documents_to_vector_store(self, vector_store: \"Chroma\") -> None:\n        \"\"\"\n        Adds documents to the Vector Store.\n        \"\"\"\n        if not self.ingest_data:\n            self.status = \"\"\n            return\n\n        _stored_documents_without_id = []\n        if self.allow_duplicates:\n            stored_data = []\n        else:\n            stored_data = chroma_collection_to_data(vector_store.get(limit=self.limit))\n            for value in deepcopy(stored_data):\n                del value.id\n                _stored_documents_without_id.append(value)\n\n        documents = []\n        for _input in self.ingest_data or []:\n            if isinstance(_input, Data):\n                if _input not in _stored_documents_without_id:\n                    documents.append(_input.to_lc_document())\n            else:\n                raise ValueError(\"Vector Store Inputs must be Data objects.\")\n\n        if documents and self.embedding is not None:\n            logger.debug(f\"Adding {len(documents)} documents to the Vector Store.\")\n            vector_store.add_documents(documents)\n        else:\n            logger.debug(\"No documents to add to the Vector Store.\")",
                "fileTypes": [],
                "file_path": "",
                "password": false,
                "name": "code",
                "advanced": true,
                "dynamic": true,
                "info": "",
                "load_from_db": false,
                "title_case": false,
                "display_name": "code",
                "proxy": {
                  "id": "Chroma-94Qh7",
                  "field": "code"
                }
              },
              "limit_Chroma-94Qh7": {
                "trace_as_metadata": true,
                "list": false,
                "required": false,
                "placeholder": "",
                "show": true,
                "name": "limit",
                "value": "",
                "display_name": "Limit",
                "advanced": true,
                "dynamic": false,
                "info": "Limit the number of records to compare when Allow Duplicates is False.",
                "title_case": false,
                "type": "int",
                "_input_type": "IntInput",
                "proxy": {
                  "id": "Chroma-94Qh7",
                  "field": "limit"
                }
              },
              "number_of_results_Chroma-94Qh7": {
                "trace_as_metadata": true,
                "list": false,
                "required": false,
                "placeholder": "",
                "show": true,
                "name": "number_of_results",
                "value": 5,
                "display_name": "Number of Results",
                "advanced": true,
                "dynamic": false,
                "info": "Number of results to return.",
                "title_case": false,
                "type": "int",
                "_input_type": "IntInput",
                "proxy": {
                  "id": "Chroma-94Qh7",
                  "field": "number_of_results"
                }
              },
              "persist_directory_Chroma-94Qh7": {
                "trace_as_metadata": true,
                "load_from_db": false,
                "list": false,
                "required": false,
                "placeholder": "",
                "show": true,
                "name": "persist_directory",
                "value": "Documents/GitHub/argobot/OIB",
                "display_name": "Persist Directory",
                "advanced": true,
                "dynamic": false,
                "info": "",
                "title_case": false,
                "type": "str",
                "_input_type": "StrInput",
                "proxy": {
                  "id": "Chroma-94Qh7",
                  "field": "persist_directory"
                }
              },
              "search_query_Chroma-94Qh7": {
                "trace_as_input": true,
                "multiline": true,
                "trace_as_metadata": true,
                "load_from_db": false,
                "list": false,
                "required": false,
                "placeholder": "",
                "show": true,
                "name": "search_query",
                "value": "",
                "display_name": "Search Query",
                "advanced": false,
                "input_types": [
                  "Message"
                ],
                "dynamic": false,
                "info": "",
                "title_case": false,
                "type": "str",
                "_input_type": "MultilineInput",
                "proxy": {
                  "id": "Chroma-94Qh7",
                  "field": "search_query"
                }
              },
              "search_type_Chroma-94Qh7": {
                "trace_as_metadata": true,
                "options": [
                  "Similarity",
                  "MMR"
                ],
                "combobox": false,
                "required": false,
                "placeholder": "",
                "show": true,
                "name": "search_type",
                "value": "Similarity",
                "display_name": "Search Type",
                "advanced": true,
                "dynamic": false,
                "info": "",
                "title_case": false,
                "type": "str",
                "_input_type": "DropdownInput",
                "proxy": {
                  "id": "Chroma-94Qh7",
                  "field": "search_type"
                }
              },
              "chunk_size_OpenAIEmbeddings-i3hOt": {
                "trace_as_metadata": true,
                "list": false,
                "required": false,
                "placeholder": "",
                "show": true,
                "name": "chunk_size",
                "value": 1000,
                "display_name": "Chunk Size",
                "advanced": true,
                "dynamic": false,
                "info": "",
                "title_case": false,
                "type": "int",
                "_input_type": "IntInput",
                "proxy": {
                  "id": "OpenAIEmbeddings-i3hOt",
                  "field": "chunk_size"
                }
              },
              "client_OpenAIEmbeddings-i3hOt": {
                "trace_as_input": true,
                "trace_as_metadata": true,
                "load_from_db": false,
                "list": false,
                "required": false,
                "placeholder": "",
                "show": true,
                "name": "client",
                "value": "",
                "display_name": "Client",
                "advanced": true,
                "input_types": [
                  "Message"
                ],
                "dynamic": false,
                "info": "",
                "title_case": false,
                "type": "str",
                "_input_type": "MessageTextInput",
                "proxy": {
                  "id": "OpenAIEmbeddings-i3hOt",
                  "field": "client"
                }
              },
              "code_OpenAIEmbeddings-i3hOt": {
                "type": "code",
                "required": true,
                "placeholder": "",
                "list": false,
                "show": true,
                "multiline": true,
                "value": "from langchain_openai.embeddings.base import OpenAIEmbeddings\n\nfrom axiestudio.base.embeddings.model import LCEmbeddingsModel\nfrom axiestudio.base.models.openai_constants import OPENAI_EMBEDDING_MODEL_NAMES\nfrom axiestudio.field_typing import Embeddings\nfrom axiestudio.io import BoolInput, DictInput, DropdownInput, FloatInput, IntInput, MessageTextInput, SecretStrInput\n\n\nclass OpenAIEmbeddingsComponent(LCEmbeddingsModel):\n    display_name = \"OpenAI Embeddings\"\n    description = \"Generate embeddings using OpenAI models.\"\n    icon = \"OpenAI\"\n    name = \"OpenAIEmbeddings\"\n\n    inputs = [\n        DictInput(\n            name=\"default_headers\",\n            display_name=\"Default Headers\",\n            advanced=True,\n            info=\"Default headers to use for the API request.\",\n        ),\n        DictInput(\n            name=\"default_query\",\n            display_name=\"Default Query\",\n            advanced=True,\n            info=\"Default query parameters to use for the API request.\",\n        ),\n        IntInput(name=\"chunk_size\", display_name=\"Chunk Size\", advanced=True, value=1000),\n        MessageTextInput(name=\"client\", display_name=\"Client\", advanced=True),\n        MessageTextInput(name=\"deployment\", display_name=\"Deployment\", advanced=True),\n        IntInput(name=\"embedding_ctx_length\", display_name=\"Embedding Context Length\", advanced=True, value=1536),\n        IntInput(name=\"max_retries\", display_name=\"Max Retries\", value=3, advanced=True),\n        DropdownInput(\n            name=\"model\",\n            display_name=\"Model\",\n            advanced=False,\n            options=OPENAI_EMBEDDING_MODEL_NAMES,\n            value=\"text-embedding-3-small\",\n        ),\n        DictInput(name=\"model_kwargs\", display_name=\"Model Kwargs\", advanced=True),\n        SecretStrInput(name=\"openai_api_base\", display_name=\"OpenAI API Base\", advanced=True),\n        SecretStrInput(name=\"openai_api_key\", display_name=\"OpenAI API Key\", value=\"OPENAI_API_KEY\"),\n        SecretStrInput(name=\"openai_api_type\", display_name=\"OpenAI API Type\", advanced=True),\n        MessageTextInput(name=\"openai_api_version\", display_name=\"OpenAI API Version\", advanced=True),\n        MessageTextInput(\n            name=\"openai_organization\",\n            display_name=\"OpenAI Organization\",\n            advanced=True,\n        ),\n        MessageTextInput(name=\"openai_proxy\", display_name=\"OpenAI Proxy\", advanced=True),\n        FloatInput(name=\"request_timeout\", display_name=\"Request Timeout\", advanced=True),\n        BoolInput(name=\"show_progress_bar\", display_name=\"Show Progress Bar\", advanced=True),\n        BoolInput(name=\"skip_empty\", display_name=\"Skip Empty\", advanced=True),\n        MessageTextInput(\n            name=\"tiktoken_model_name\",\n            display_name=\"TikToken Model Name\",\n            advanced=True,\n        ),\n        BoolInput(\n            name=\"tiktoken_enable\",\n            display_name=\"TikToken Enable\",\n            advanced=True,\n            value=True,\n            info=\"If False, you must have transformers installed.\",\n        ),\n        IntInput(\n            name=\"dimensions\",\n            display_name=\"Dimensions\",\n            info=\"The number of dimensions the resulting output embeddings should have. \"\n            \"Only supported by certain models.\",\n            advanced=True,\n        ),\n    ]\n\n    def build_embeddings(self) -> Embeddings:\n        return OpenAIEmbeddings(\n            tiktoken_enabled=self.tiktoken_enable,\n            default_headers=self.default_headers,\n            default_query=self.default_query,\n            allowed_special=\"all\",\n            disallowed_special=\"all\",\n            chunk_size=self.chunk_size,\n            deployment=self.deployment,\n            embedding_ctx_length=self.embedding_ctx_length,\n            max_retries=self.max_retries,\n            model=self.model,\n            model_kwargs=self.model_kwargs,\n            base_url=self.openai_api_base,\n            api_key=self.openai_api_key,\n            openai_api_type=self.openai_api_type,\n            api_version=self.openai_api_version,\n            organization=self.openai_organization,\n            openai_proxy=self.openai_proxy,\n            timeout=self.request_timeout or None,\n            show_progress_bar=self.show_progress_bar,\n            skip_empty=self.skip_empty,\n            tiktoken_model_name=self.tiktoken_model_name,\n            dimensions=self.dimensions or None,\n        )\n",
                "fileTypes": [],
                "file_path": "",
                "password": false,
                "name": "code",
                "advanced": true,
                "dynamic": true,
                "info": "",
                "load_from_db": false,
                "title_case": false,
                "display_name": "code",
                "proxy": {
                  "id": "OpenAIEmbeddings-i3hOt",
                  "field": "code"
                }
              },
              "default_headers_OpenAIEmbeddings-i3hOt": {
                "trace_as_input": true,
                "list": false,
                "required": false,
                "placeholder": "",
                "show": true,
                "name": "default_headers",
                "value": {},
                "display_name": "Default Headers",
                "advanced": true,
                "dynamic": false,
                "info": "Default headers to use for the API request.",
                "title_case": false,
                "type": "dict",
                "_input_type": "DictInput",
                "proxy": {
                  "id": "OpenAIEmbeddings-i3hOt",
                  "field": "default_headers"
                }
              },
              "default_query_OpenAIEmbeddings-i3hOt": {
                "trace_as_input": true,
                "list": false,
                "required": false,
                "placeholder": "",
                "show": true,
                "name": "default_query",
                "value": {},
                "display_name": "Default Query",
                "advanced": true,
                "dynamic": false,
                "info": "Default query parameters to use for the API request.",
                "title_case": false,
                "type": "dict",
                "_input_type": "DictInput",
                "proxy": {
                  "id": "OpenAIEmbeddings-i3hOt",
                  "field": "default_query"
                }
              },
              "deployment_OpenAIEmbeddings-i3hOt": {
                "trace_as_input": true,
                "trace_as_metadata": true,
                "load_from_db": false,
                "list": false,
                "required": false,
                "placeholder": "",
                "show": true,
                "name": "deployment",
                "value": "",
                "display_name": "Deployment",
                "advanced": true,
                "input_types": [
                  "Message"
                ],
                "dynamic": false,
                "info": "",
                "title_case": false,
                "type": "str",
                "_input_type": "MessageTextInput",
                "proxy": {
                  "id": "OpenAIEmbeddings-i3hOt",
                  "field": "deployment"
                }
              },
              "dimensions_OpenAIEmbeddings-i3hOt": {
                "trace_as_metadata": true,
                "list": false,
                "required": false,
                "placeholder": "",
                "show": true,
                "name": "dimensions",
                "value": "",
                "display_name": "Dimensions",
                "advanced": true,
                "dynamic": false,
                "info": "The number of dimensions the resulting output embeddings should have. Only supported by certain models.",
                "title_case": false,
                "type": "int",
                "_input_type": "IntInput",
                "proxy": {
                  "id": "OpenAIEmbeddings-i3hOt",
                  "field": "dimensions"
                }
              },
              "embedding_ctx_length_OpenAIEmbeddings-i3hOt": {
                "trace_as_metadata": true,
                "list": false,
                "required": false,
                "placeholder": "",
                "show": true,
                "name": "embedding_ctx_length",
                "value": 1536,
                "display_name": "Embedding Context Length",
                "advanced": true,
                "dynamic": false,
                "info": "",
                "title_case": false,
                "type": "int",
                "_input_type": "IntInput",
                "proxy": {
                  "id": "OpenAIEmbeddings-i3hOt",
                  "field": "embedding_ctx_length"
                }
              },
              "max_retries_OpenAIEmbeddings-i3hOt": {
                "trace_as_metadata": true,
                "list": false,
                "required": false,
                "placeholder": "",
                "show": true,
                "name": "max_retries",
                "value": 3,
                "display_name": "Max Retries",
                "advanced": true,
                "dynamic": false,
                "info": "",
                "title_case": false,
                "type": "int",
                "_input_type": "IntInput",
                "proxy": {
                  "id": "OpenAIEmbeddings-i3hOt",
                  "field": "max_retries"
                }
              },
              "model_OpenAIEmbeddings-i3hOt": {
                "trace_as_metadata": true,
                "options": [
                  "text-embedding-3-small",
                  "text-embedding-3-large",
                  "text-embedding-ada-002"
                ],
                "combobox": false,
                "required": false,
                "placeholder": "",
                "show": true,
                "name": "model",
                "value": "text-embedding-3-small",
                "display_name": "Model",
                "advanced": true,
                "dynamic": false,
                "info": "",
                "title_case": false,
                "type": "str",
                "_input_type": "DropdownInput",
                "proxy": {
                  "id": "OpenAIEmbeddings-i3hOt",
                  "field": "model"
                }
              },
              "model_kwargs_OpenAIEmbeddings-i3hOt": {
                "trace_as_input": true,
                "list": false,
                "required": false,
                "placeholder": "",
                "show": true,
                "name": "model_kwargs",
                "value": {},
                "display_name": "Model Kwargs",
                "advanced": true,
                "dynamic": false,
                "info": "",
                "title_case": false,
                "type": "dict",
                "_input_type": "DictInput",
                "proxy": {
                  "id": "OpenAIEmbeddings-i3hOt",
                  "field": "model_kwargs"
                }
              },
              "openai_api_base_OpenAIEmbeddings-i3hOt": {
                "load_from_db": false,
                "required": false,
                "placeholder": "",
                "show": true,
                "name": "openai_api_base",
                "value": "",
                "display_name": "OpenAI API Base",
                "advanced": true,
                "input_types": [
                  "Message"
                ],
                "dynamic": false,
                "info": "",
                "title_case": false,
                "password": true,
                "type": "str",
                "_input_type": "SecretStrInput",
                "proxy": {
                  "id": "OpenAIEmbeddings-i3hOt",
                  "field": "openai_api_base"
                }
              },
              "openai_api_key_OpenAIEmbeddings-i3hOt": {
                "load_from_db": true,
                "required": false,
                "placeholder": "",
                "show": true,
                "name": "openai_api_key",
                "value": "",
                "display_name": "OpenAI API Key",
                "advanced": true,
                "input_types": [
                  "Message"
                ],
                "dynamic": false,
                "info": "",
                "title_case": false,
                "password": true,
                "type": "str",
                "_input_type": "SecretStrInput",
                "proxy": {
                  "id": "OpenAIEmbeddings-i3hOt",
                  "field": "openai_api_key"
                }
              },
              "openai_api_type_OpenAIEmbeddings-i3hOt": {
                "load_from_db": false,
                "required": false,
                "placeholder": "",
                "show": true,
                "name": "openai_api_type",
                "value": "",
                "display_name": "OpenAI API Type",
                "advanced": true,
                "input_types": [
                  "Message"
                ],
                "dynamic": false,
                "info": "",
                "title_case": false,
                "password": true,
                "type": "str",
                "_input_type": "SecretStrInput",
                "proxy": {
                  "id": "OpenAIEmbeddings-i3hOt",
                  "field": "openai_api_type"
                }
              },
              "openai_api_version_OpenAIEmbeddings-i3hOt": {
                "trace_as_input": true,
                "trace_as_metadata": true,
                "load_from_db": false,
                "list": false,
                "required": false,
                "placeholder": "",
                "show": true,
                "name": "openai_api_version",
                "value": "",
                "display_name": "OpenAI API Version",
                "advanced": true,
                "input_types": [
                  "Message"
                ],
                "dynamic": false,
                "info": "",
                "title_case": false,
                "type": "str",
                "_input_type": "MessageTextInput",
                "proxy": {
                  "id": "OpenAIEmbeddings-i3hOt",
                  "field": "openai_api_version"
                }
              },
              "openai_organization_OpenAIEmbeddings-i3hOt": {
                "trace_as_input": true,
                "trace_as_metadata": true,
                "load_from_db": false,
                "list": false,
                "required": false,
                "placeholder": "",
                "show": true,
                "name": "openai_organization",
                "value": "",
                "display_name": "OpenAI Organization",
                "advanced": true,
                "input_types": [
                  "Message"
                ],
                "dynamic": false,
                "info": "",
                "title_case": false,
                "type": "str",
                "_input_type": "MessageTextInput",
                "proxy": {
                  "id": "OpenAIEmbeddings-i3hOt",
                  "field": "openai_organization"
                }
              },
              "openai_proxy_OpenAIEmbeddings-i3hOt": {
                "trace_as_input": true,
                "trace_as_metadata": true,
                "load_from_db": false,
                "list": false,
                "required": false,
                "placeholder": "",
                "show": true,
                "name": "openai_proxy",
                "value": "",
                "display_name": "OpenAI Proxy",
                "advanced": true,
                "input_types": [
                  "Message"
                ],
                "dynamic": false,
                "info": "",
                "title_case": false,
                "type": "str",
                "_input_type": "MessageTextInput",
                "proxy": {
                  "id": "OpenAIEmbeddings-i3hOt",
                  "field": "openai_proxy"
                }
              },
              "request_timeout_OpenAIEmbeddings-i3hOt": {
                "trace_as_metadata": true,
                "list": false,
                "required": false,
                "placeholder": "",
                "show": true,
                "name": "request_timeout",
                "value": "",
                "display_name": "Request Timeout",
                "advanced": true,
                "dynamic": false,
                "info": "",
                "title_case": false,
                "type": "float",
                "_input_type": "FloatInput",
                "proxy": {
                  "id": "OpenAIEmbeddings-i3hOt",
                  "field": "request_timeout"
                }
              },
              "show_progress_bar_OpenAIEmbeddings-i3hOt": {
                "trace_as_metadata": true,
                "list": false,
                "required": false,
                "placeholder": "",
                "show": true,
                "name": "show_progress_bar",
                "value": false,
                "display_name": "Show Progress Bar",
                "advanced": true,
                "dynamic": false,
                "info": "",
                "title_case": false,
                "type": "bool",
                "_input_type": "BoolInput",
                "proxy": {
                  "id": "OpenAIEmbeddings-i3hOt",
                  "field": "show_progress_bar"
                }
              },
              "skip_empty_OpenAIEmbeddings-i3hOt": {
                "trace_as_metadata": true,
                "list": false,
                "required": false,
                "placeholder": "",
                "show": true,
                "name": "skip_empty",
                "value": false,
                "display_name": "Skip Empty",
                "advanced": true,
                "dynamic": false,
                "info": "",
                "title_case": false,
                "type": "bool",
                "_input_type": "BoolInput",
                "proxy": {
                  "id": "OpenAIEmbeddings-i3hOt",
                  "field": "skip_empty"
                }
              },
              "tiktoken_enable_OpenAIEmbeddings-i3hOt": {
                "trace_as_metadata": true,
                "list": false,
                "required": false,
                "placeholder": "",
                "show": true,
                "name": "tiktoken_enable",
                "value": true,
                "display_name": "TikToken Enable",
                "advanced": true,
                "dynamic": false,
                "info": "If False, you must have transformers installed.",
                "title_case": false,
                "type": "bool",
                "_input_type": "BoolInput",
                "proxy": {
                  "id": "OpenAIEmbeddings-i3hOt",
                  "field": "tiktoken_enable"
                }
              },
              "tiktoken_model_name_OpenAIEmbeddings-i3hOt": {
                "trace_as_input": true,
                "trace_as_metadata": true,
                "load_from_db": false,
                "list": false,
                "required": false,
                "placeholder": "",
                "show": true,
                "name": "tiktoken_model_name",
                "value": "",
                "display_name": "TikToken Model Name",
                "advanced": true,
                "input_types": [
                  "Message"
                ],
                "dynamic": false,
                "info": "",
                "title_case": false,
                "type": "str",
                "_input_type": "MessageTextInput",
                "proxy": {
                  "id": "OpenAIEmbeddings-i3hOt",
                  "field": "tiktoken_model_name"
                }
              },
              "code_ParseData-wVyYa": {
                "type": "code",
                "required": true,
                "placeholder": "",
                "list": false,
                "show": true,
                "multiline": true,
                "value": "from axiestudio.custom import Component\nfrom axiestudio.helpers.data import data_to_text\nfrom axiestudio.io import DataInput, MultilineInput, Output, StrInput\nfrom axiestudio.schema.message import Message\n\n\nclass ParseDataComponent(Component):\n    display_name = \"Parse Data\"\n    description = \"Convert Data into plain text following a specified template.\"\n    icon = \"braces\"\n    name = \"ParseData\"\n\n    inputs = [\n        DataInput(name=\"data\", display_name=\"Data\", info=\"The data to convert to text.\"),\n        MultilineInput(\n            name=\"template\",\n            display_name=\"Template\",\n            info=\"The template to use for formatting the data. \"\n            \"It can contain the keys {text}, {data} or any other key in the Data.\",\n            value=\"{text}\",\n        ),\n        StrInput(name=\"sep\", display_name=\"Separator\", advanced=True, value=\"\\n\"),\n    ]\n\n    outputs = [\n        Output(display_name=\"Text\", name=\"text\", method=\"parse_data\"),\n    ]\n\n    def parse_data(self) -> Message:\n        data = self.data if isinstance(self.data, list) else [self.data]\n        template = self.template\n\n        result_string = data_to_text(template, data, sep=self.sep)\n        self.status = result_string\n        return Message(text=result_string)\n",
                "fileTypes": [],
                "file_path": "",
                "password": false,
                "name": "code",
                "advanced": true,
                "dynamic": true,
                "info": "",
                "load_from_db": false,
                "title_case": false,
                "display_name": "code",
                "proxy": {
                  "id": "ParseData-wVyYa",
                  "field": "code"
                }
              },
              "sep_ParseData-wVyYa": {
                "trace_as_metadata": true,
                "load_from_db": false,
                "list": false,
                "required": false,
                "placeholder": "",
                "show": true,
                "name": "sep",
                "value": "\n",
                "display_name": "Separator",
                "advanced": true,
                "dynamic": false,
                "info": "",
                "title_case": false,
                "type": "str",
                "_input_type": "StrInput",
                "proxy": {
                  "id": "ParseData-wVyYa",
                  "field": "sep"
                }
              },
              "template_ParseData-wVyYa": {
                "trace_as_input": true,
                "multiline": true,
                "trace_as_metadata": true,
                "load_from_db": false,
                "list": false,
                "required": false,
                "placeholder": "",
                "show": true,
                "name": "template",
                "value": "<operator_manual_chunk>\n{text}\n</operator_manual_chunk>",
                "display_name": "Template",
                "advanced": true,
                "input_types": [
                  "Message"
                ],
                "dynamic": false,
                "info": "The template to use for formatting the data. It can contain the keys {text}, {data} or any other key in the Data.",
                "title_case": false,
                "type": "str",
                "_input_type": "MultilineInput",
                "proxy": {
                  "id": "ParseData-wVyYa",
                  "field": "template"
                }
              },
              "code_Prompt-UWd7v": {
                "type": "code",
                "required": true,
                "placeholder": "",
                "list": false,
                "show": true,
                "multiline": true,
                "value": "from axiestudio.base.prompts.api_utils import process_prompt_template\nfrom axiestudio.custom import Component\nfrom axiestudio.inputs.inputs import DefaultPromptField\nfrom axiestudio.io import Output, PromptInput\nfrom axiestudio.schema.message import Message\nfrom axiestudio.template.utils import update_template_values\n\n\nclass PromptComponent(Component):\n    display_name: str = \"Prompt\"\n    description: str = \"Create a prompt template with dynamic variables.\"\n    icon = \"prompts\"\n    trace_type = \"prompt\"\n    name = \"Prompt\"\n\n    inputs = [\n        PromptInput(name=\"template\", display_name=\"Template\"),\n    ]\n\n    outputs = [\n        Output(display_name=\"Prompt Message\", name=\"prompt\", method=\"build_prompt\"),\n    ]\n\n    async def build_prompt(\n        self,\n    ) -> Message:\n        prompt = await Message.from_template_and_variables(**self._attributes)\n        self.status = prompt.text\n        return prompt\n\n    def _update_template(self, frontend_node: dict):\n        prompt_template = frontend_node[\"template\"][\"template\"][\"value\"]\n        custom_fields = frontend_node[\"custom_fields\"]\n        frontend_node_template = frontend_node[\"template\"]\n        _ = process_prompt_template(\n            template=prompt_template,\n            name=\"template\",\n            custom_fields=custom_fields,\n            frontend_node_template=frontend_node_template,\n        )\n        return frontend_node\n\n    def post_code_processing(self, new_frontend_node: dict, current_frontend_node: dict):\n        \"\"\"\n        This function is called after the code validation is done.\n        \"\"\"\n        frontend_node = super().post_code_processing(new_frontend_node, current_frontend_node)\n        template = frontend_node[\"template\"][\"template\"][\"value\"]\n        # Kept it duplicated for backwards compatibility\n        _ = process_prompt_template(\n            template=template,\n            name=\"template\",\n            custom_fields=frontend_node[\"custom_fields\"],\n            frontend_node_template=frontend_node[\"template\"],\n        )\n        # Now that template is updated, we need to grab any values that were set in the current_frontend_node\n        # and update the frontend_node with those values\n        update_template_values(new_template=frontend_node, previous_template=current_frontend_node[\"template\"])\n        return frontend_node\n\n    def _get_fallback_input(self, **kwargs):\n        return DefaultPromptField(**kwargs)\n",
                "fileTypes": [],
                "file_path": "",
                "password": false,
                "name": "code",
                "advanced": true,
                "dynamic": true,
                "info": "",
                "load_from_db": false,
                "title_case": false,
                "display_name": "code",
                "proxy": {
                  "id": "Prompt-UWd7v",
                  "field": "code"
                }
              },
              "template_Prompt-UWd7v": {
                "trace_as_input": true,
                "list": false,
                "required": false,
                "placeholder": "",
                "show": true,
                "name": "template",
                "value": "{TMC}",
                "display_name": "Template",
                "advanced": true,
                "dynamic": false,
                "info": "",
                "title_case": false,
                "type": "prompt",
                "_input_type": "PromptInput",
                "proxy": {
                  "id": "Prompt-UWd7v",
                  "field": "template"
                }
              },
              "TMC_Prompt-UWd7v": {
                "field_type": "str",
                "required": false,
                "placeholder": "",
                "list": false,
                "show": true,
                "multiline": true,
                "value": "6670772A5",
                "fileTypes": [],
                "file_path": "",
                "name": "TMC",
                "display_name": "TMC",
                "advanced": false,
                "input_types": [
                  "Message",
                  "Text"
                ],
                "dynamic": false,
                "info": "",
                "load_from_db": false,
                "title_case": false,
                "type": "str",
                "proxy": {
                  "id": "Prompt-UWd7v",
                  "field": "TMC"
                }
              }
            },
            "flow": {
              "data": {
                "nodes": [
                  {
                    "id": "Chroma-94Qh7",
                    "type": "genericNode",
                    "position": {
                      "x": -2540.5184708933016,
                      "y": -940.6724481950387
                    },
                    "data": {
                      "type": "Chroma",
                      "node": {
                        "template": {
                          "_type": "Component",
                          "embedding": {
                            "trace_as_metadata": true,
                            "list": false,
                            "required": false,
                            "placeholder": "",
                            "show": true,
                            "name": "embedding",
                            "value": "",
                            "display_name": "Embedding",
                            "advanced": false,
                            "input_types": [
                              "Embeddings"
                            ],
                            "dynamic": false,
                            "info": "",
                            "title_case": false,
                            "type": "other",
                            "_input_type": "HandleInput"
                          },
                          "ingest_data": {
                            "trace_as_metadata": true,
                            "list": true,
                            "trace_as_input": true,
                            "required": false,
                            "placeholder": "",
                            "show": true,
                            "name": "ingest_data",
                            "value": "",
                            "display_name": "Ingest Data",
                            "advanced": false,
                            "input_types": [
                              "Data"
                            ],
                            "dynamic": false,
                            "info": "",
                            "title_case": false,
                            "type": "other",
                            "_input_type": "DataInput"
                          },
                          "allow_duplicates": {
                            "trace_as_metadata": true,
                            "list": false,
                            "required": false,
                            "placeholder": "",
                            "show": true,
                            "name": "allow_duplicates",
                            "value": false,
                            "display_name": "Allow Duplicates",
                            "advanced": true,
                            "dynamic": false,
                            "info": "If false, will not add documents that are already in the Vector Store.",
                            "title_case": false,
                            "type": "bool",
                            "_input_type": "BoolInput"
                          },
                          "chroma_server_cors_allow_origins": {
                            "trace_as_metadata": true,
                            "load_from_db": false,
                            "list": false,
                            "required": false,
                            "placeholder": "",
                            "show": true,
                            "name": "chroma_server_cors_allow_origins",
                            "value": "",
                            "display_name": "Server CORS Allow Origins",
                            "advanced": true,
                            "dynamic": false,
                            "info": "",
                            "title_case": false,
                            "type": "str",
                            "_input_type": "StrInput"
                          },
                          "chroma_server_grpc_port": {
                            "trace_as_metadata": true,
                            "list": false,
                            "required": false,
                            "placeholder": "",
                            "show": true,
                            "name": "chroma_server_grpc_port",
                            "value": "",
                            "display_name": "Server gRPC Port",
                            "advanced": true,
                            "dynamic": false,
                            "info": "",
                            "title_case": false,
                            "type": "int",
                            "_input_type": "IntInput"
                          },
                          "chroma_server_host": {
                            "trace_as_metadata": true,
                            "load_from_db": false,
                            "list": false,
                            "required": false,
                            "placeholder": "",
                            "show": true,
                            "name": "chroma_server_host",
                            "value": "",
                            "display_name": "Server Host",
                            "advanced": true,
                            "dynamic": false,
                            "info": "",
                            "title_case": false,
                            "type": "str",
                            "_input_type": "StrInput"
                          },
                          "chroma_server_http_port": {
                            "trace_as_metadata": true,
                            "list": false,
                            "required": false,
                            "placeholder": "",
                            "show": true,
                            "name": "chroma_server_http_port",
                            "value": "",
                            "display_name": "Server HTTP Port",
                            "advanced": true,
                            "dynamic": false,
                            "info": "",
                            "title_case": false,
                            "type": "int",
                            "_input_type": "IntInput"
                          },
                          "chroma_server_ssl_enabled": {
                            "trace_as_metadata": true,
                            "list": false,
                            "required": false,
                            "placeholder": "",
                            "show": true,
                            "name": "chroma_server_ssl_enabled",
                            "value": false,
                            "display_name": "Server SSL Enabled",
                            "advanced": true,
                            "dynamic": false,
                            "info": "",
                            "title_case": false,
                            "type": "bool",
                            "_input_type": "BoolInput"
                          },
                          "code": {
                            "type": "code",
                            "required": true,
                            "placeholder": "",
                            "list": false,
                            "show": true,
                            "multiline": true,
                            "value": "from copy import deepcopy\nfrom typing import TYPE_CHECKING\n\nfrom chromadb.config import Settings\nfrom langchain_chroma.vectorstores import Chroma\nfrom loguru import logger\n\nfrom axiestudio.base.vectorstores.model import LCVectorStoreComponent, check_cached_vector_store\nfrom axiestudio.base.vectorstores.utils import chroma_collection_to_data\nfrom axiestudio.io import BoolInput, DataInput, DropdownInput, HandleInput, IntInput, StrInput, MultilineInput\nfrom axiestudio.schema import Data\n\nif TYPE_CHECKING:\n    from langchain_chroma import Chroma\n\n\nclass ChromaVectorStoreComponent(LCVectorStoreComponent):\n    \"\"\"\n    Chroma Vector Store with search capabilities\n    \"\"\"\n\n    display_name: str = \"Chroma DB\"\n    description: str = \"Chroma Vector Store with search capabilities\"\n    documentation = \"https://python.langchain.com/docs/integrations/vectorstores/chroma\"\n    name = \"Chroma\"\n    icon = \"Chroma\"\n\n    inputs = [\n        MessageTextInput(\n            name=\"collection_name\",\n            display_name=\"Collection Name\",\n        ),\n        StrInput(\n            name=\"persist_directory\",\n            display_name=\"Persist Directory\",\n        ),\n        MultilineInput(\n            name=\"search_query\",\n            display_name=\"Search Query\",\n        ),\n        DataInput(\n            name=\"ingest_data\",\n            display_name=\"Ingest Data\",\n            is_list=True,\n        ),\n        HandleInput(name=\"embedding\", display_name=\"Embedding\", input_types=[\"Embeddings\"]),\n        StrInput(\n            name=\"chroma_server_cors_allow_origins\",\n            display_name=\"Server CORS Allow Origins\",\n            advanced=True,\n        ),\n        StrInput(\n            name=\"chroma_server_host\",\n            display_name=\"Server Host\",\n            advanced=True,\n        ),\n        IntInput(\n            name=\"chroma_server_http_port\",\n            display_name=\"Server HTTP Port\",\n            advanced=True,\n        ),\n        IntInput(\n            name=\"chroma_server_grpc_port\",\n            display_name=\"Server gRPC Port\",\n            advanced=True,\n        ),\n        BoolInput(\n            name=\"chroma_server_ssl_enabled\",\n            display_name=\"Server SSL Enabled\",\n            advanced=True,\n        ),\n        BoolInput(\n            name=\"allow_duplicates\",\n            display_name=\"Allow Duplicates\",\n            advanced=True,\n            info=\"If false, will not add documents that are already in the Vector Store.\",\n        ),\n        DropdownInput(\n            name=\"search_type\",\n            display_name=\"Search Type\",\n            options=[\"Similarity\", \"MMR\"],\n            value=\"Similarity\",\n            advanced=True,\n        ),\n        IntInput(\n            name=\"number_of_results\",\n            display_name=\"Number of Results\",\n            info=\"Number of results to return.\",\n            advanced=True,\n            value=5,\n        ),\n        IntInput(\n            name=\"limit\",\n            display_name=\"Limit\",\n            advanced=True,\n            info=\"Limit the number of records to compare when Allow Duplicates is False.\",\n        ),\n    ]\n\n    @check_cached_vector_store\n    def build_vector_store(self) -> Chroma:\n        \"\"\"\n        Builds the Chroma object.\n        \"\"\"\n        try:\n            from chromadb import Client\n            from langchain_chroma import Chroma\n        except ImportError:\n            raise ImportError(\n                \"Could not import Chroma integration package. \" \"Please install it with `pip install langchain-chroma`.\"\n            )\n        # Chroma settings\n        chroma_settings = None\n        client = None\n        if self.chroma_server_host:\n            chroma_settings = Settings(\n                chroma_server_cors_allow_origins=self.chroma_server_cors_allow_origins or [],\n                chroma_server_host=self.chroma_server_host,\n                chroma_server_http_port=self.chroma_server_http_port or None,\n                chroma_server_grpc_port=self.chroma_server_grpc_port or None,\n                chroma_server_ssl_enabled=self.chroma_server_ssl_enabled,\n            )\n            client = Client(settings=chroma_settings)\n\n        # Check persist_directory and expand it if it is a relative path\n        if self.persist_directory is not None:\n            persist_directory = self.resolve_path(self.persist_directory)\n        else:\n            persist_directory = None\n\n        chroma = Chroma(\n            persist_directory=persist_directory,\n            client=client,\n            embedding_function=self.embedding,\n            collection_name=self.collection_name,\n        )\n\n        self._add_documents_to_vector_store(chroma)\n        self.status = chroma_collection_to_data(chroma.get(limit=self.limit))\n        return chroma\n\n    def _add_documents_to_vector_store(self, vector_store: \"Chroma\") -> None:\n        \"\"\"\n        Adds documents to the Vector Store.\n        \"\"\"\n        if not self.ingest_data:\n            self.status = \"\"\n            return\n\n        _stored_documents_without_id = []\n        if self.allow_duplicates:\n            stored_data = []\n        else:\n            stored_data = chroma_collection_to_data(vector_store.get(limit=self.limit))\n            for value in deepcopy(stored_data):\n                del value.id\n                _stored_documents_without_id.append(value)\n\n        documents = []\n        for _input in self.ingest_data or []:\n            if isinstance(_input, Data):\n                if _input not in _stored_documents_without_id:\n                    documents.append(_input.to_lc_document())\n            else:\n                raise ValueError(\"Vector Store Inputs must be Data objects.\")\n\n        if documents and self.embedding is not None:\n            logger.debug(f\"Adding {len(documents)} documents to the Vector Store.\")\n            vector_store.add_documents(documents)\n        else:\n            logger.debug(\"No documents to add to the Vector Store.\")",
                            "fileTypes": [],
                            "file_path": "",
                            "password": false,
                            "name": "code",
                            "advanced": true,
                            "dynamic": true,
                            "info": "",
                            "load_from_db": false,
                            "title_case": false,
                            "display_name": "code"
                          },
                          "collection_name": {
                            "trace_as_input": true,
                            "trace_as_metadata": true,
                            "load_from_db": false,
                            "list": false,
                            "required": false,
                            "placeholder": "",
                            "show": true,
                            "name": "collection_name",
                            "value": "",
                            "display_name": "Collection Name",
                            "advanced": false,
                            "input_types": [
                              "Message"
                            ],
                            "dynamic": false,
                            "info": "",
                            "title_case": false,
                            "type": "str",
                            "_input_type": "MessageTextInput"
                          },
                          "limit": {
                            "trace_as_metadata": true,
                            "list": false,
                            "required": false,
                            "placeholder": "",
                            "show": true,
                            "name": "limit",
                            "value": "",
                            "display_name": "Limit",
                            "advanced": true,
                            "dynamic": false,
                            "info": "Limit the number of records to compare when Allow Duplicates is False.",
                            "title_case": false,
                            "type": "int",
                            "_input_type": "IntInput"
                          },
                          "number_of_results": {
                            "trace_as_metadata": true,
                            "list": false,
                            "required": false,
                            "placeholder": "",
                            "show": true,
                            "name": "number_of_results",
                            "value": 5,
                            "display_name": "Number of Results",
                            "advanced": true,
                            "dynamic": false,
                            "info": "Number of results to return.",
                            "title_case": false,
                            "type": "int",
                            "_input_type": "IntInput"
                          },
                          "persist_directory": {
                            "trace_as_metadata": true,
                            "load_from_db": false,
                            "list": false,
                            "required": false,
                            "placeholder": "",
                            "show": true,
                            "name": "persist_directory",
                            "value": "Documents/GitHub/argobot/OIB",
                            "display_name": "Persist Directory",
                            "advanced": false,
                            "dynamic": false,
                            "info": "",
                            "title_case": false,
                            "type": "str",
                            "_input_type": "StrInput"
                          },
                          "search_query": {
                            "trace_as_input": true,
                            "multiline": true,
                            "trace_as_metadata": true,
                            "load_from_db": false,
                            "list": false,
                            "required": false,
                            "placeholder": "",
                            "show": true,
                            "name": "search_query",
                            "value": "",
                            "display_name": "Search Query",
                            "advanced": false,
                            "input_types": [
                              "Message"
                            ],
                            "dynamic": false,
                            "info": "",
                            "title_case": false,
                            "type": "str",
                            "_input_type": "MultilineInput"
                          },
                          "search_type": {
                            "trace_as_metadata": true,
                            "options": [
                              "Similarity",
                              "MMR"
                            ],
                            "combobox": false,
                            "required": false,
                            "placeholder": "",
                            "show": true,
                            "name": "search_type",
                            "value": "Similarity",
                            "display_name": "Search Type",
                            "advanced": true,
                            "dynamic": false,
                            "info": "",
                            "title_case": false,
                            "type": "str",
                            "_input_type": "DropdownInput"
                          }
                        },
                        "description": "Chroma Vector Store with search capabilities",
                        "icon": "Chroma",
                        "base_classes": [
                          "Data",
                          "Retriever",
                          "VectorStore"
                        ],
                        "display_name": "Chroma DB",
                        "documentation": "https://python.langchain.com/docs/integrations/vectorstores/chroma",
                        "custom_fields": {},
                        "output_types": [],
                        "pinned": false,
                        "conditional_paths": [],
                        "frozen": false,
                        "outputs": [
                          {
                            "types": [
                              "Retriever"
                            ],
                            "selected": "Retriever",
                            "name": "base_retriever",
                            "display_name": "Retriever",
                            "method": "build_base_retriever",
                            "value": "__UNDEFINED__",
                            "cache": true,
                            "required_inputs": []
                          },
                          {
                            "types": [
                              "Data"
                            ],
                            "selected": "Data",
                            "name": "search_results",
                            "display_name": "Search Results",
                            "method": "search_documents",
                            "value": "__UNDEFINED__",
                            "cache": true,
                            "required_inputs": [
                              "number_of_results",
                              "search_query",
                              "search_type"
                            ]
                          },
                          {
                            "types": [
                              "VectorStore"
                            ],
                            "selected": "VectorStore",
                            "name": "vector_store",
                            "display_name": "Vector Store",
                            "method": "cast_vector_store",
                            "value": "__UNDEFINED__",
                            "cache": true,
                            "required_inputs": []
                          }
                        ],
                        "field_order": [
                          "collection_name",
                          "persist_directory",
                          "search_query",
                          "ingest_data",
                          "embedding",
                          "chroma_server_cors_allow_origins",
                          "chroma_server_host",
                          "chroma_server_http_port",
                          "chroma_server_grpc_port",
                          "chroma_server_ssl_enabled",
                          "allow_duplicates",
                          "search_type",
                          "number_of_results",
                          "limit"
                        ],
                        "beta": false,
                        "edited": true,
                        "metadata": {}
                      },
                      "id": "Chroma-94Qh7"
                    },
                    "selected": true,
                    "width": 384,
                    "height": 637,
                    "positionAbsolute": {
                      "x": -2540.5184708933016,
                      "y": -940.6724481950387
                    },
                    "dragging": false
                  },
                  {
                    "id": "OpenAIEmbeddings-i3hOt",
                    "type": "genericNode",
                    "position": {
                      "x": -2941.046432933903,
                      "y": -540.6386021914577
                    },
                    "data": {
                      "type": "OpenAIEmbeddings",
                      "node": {
                        "template": {
                          "_type": "Component",
                          "chunk_size": {
                            "trace_as_metadata": true,
                            "list": false,
                            "required": false,
                            "placeholder": "",
                            "show": true,
                            "name": "chunk_size",
                            "value": 1000,
                            "display_name": "Chunk Size",
                            "advanced": true,
                            "dynamic": false,
                            "info": "",
                            "title_case": false,
                            "type": "int",
                            "_input_type": "IntInput"
                          },
                          "client": {
                            "trace_as_input": true,
                            "trace_as_metadata": true,
                            "load_from_db": false,
                            "list": false,
                            "required": false,
                            "placeholder": "",
                            "show": true,
                            "name": "client",
                            "value": "",
                            "display_name": "Client",
                            "advanced": true,
                            "input_types": [
                              "Message"
                            ],
                            "dynamic": false,
                            "info": "",
                            "title_case": false,
                            "type": "str",
                            "_input_type": "MessageTextInput"
                          },
                          "code": {
                            "type": "code",
                            "required": true,
                            "placeholder": "",
                            "list": false,
                            "show": true,
                            "multiline": true,
                            "value": "from langchain_openai.embeddings.base import OpenAIEmbeddings\n\nfrom axiestudio.base.embeddings.model import LCEmbeddingsModel\nfrom axiestudio.base.models.openai_constants import OPENAI_EMBEDDING_MODEL_NAMES\nfrom axiestudio.field_typing import Embeddings\nfrom axiestudio.io import BoolInput, DictInput, DropdownInput, FloatInput, IntInput, MessageTextInput, SecretStrInput\n\n\nclass OpenAIEmbeddingsComponent(LCEmbeddingsModel):\n    display_name = \"OpenAI Embeddings\"\n    description = \"Generate embeddings using OpenAI models.\"\n    icon = \"OpenAI\"\n    name = \"OpenAIEmbeddings\"\n\n    inputs = [\n        DictInput(\n            name=\"default_headers\",\n            display_name=\"Default Headers\",\n            advanced=True,\n            info=\"Default headers to use for the API request.\",\n        ),\n        DictInput(\n            name=\"default_query\",\n            display_name=\"Default Query\",\n            advanced=True,\n            info=\"Default query parameters to use for the API request.\",\n        ),\n        IntInput(name=\"chunk_size\", display_name=\"Chunk Size\", advanced=True, value=1000),\n        MessageTextInput(name=\"client\", display_name=\"Client\", advanced=True),\n        MessageTextInput(name=\"deployment\", display_name=\"Deployment\", advanced=True),\n        IntInput(name=\"embedding_ctx_length\", display_name=\"Embedding Context Length\", advanced=True, value=1536),\n        IntInput(name=\"max_retries\", display_name=\"Max Retries\", value=3, advanced=True),\n        DropdownInput(\n            name=\"model\",\n            display_name=\"Model\",\n            advanced=False,\n            options=OPENAI_EMBEDDING_MODEL_NAMES,\n            value=\"text-embedding-3-small\",\n        ),\n        DictInput(name=\"model_kwargs\", display_name=\"Model Kwargs\", advanced=True),\n        SecretStrInput(name=\"openai_api_base\", display_name=\"OpenAI API Base\", advanced=True),\n        SecretStrInput(name=\"openai_api_key\", display_name=\"OpenAI API Key\", value=\"OPENAI_API_KEY\"),\n        SecretStrInput(name=\"openai_api_type\", display_name=\"OpenAI API Type\", advanced=True),\n        MessageTextInput(name=\"openai_api_version\", display_name=\"OpenAI API Version\", advanced=True),\n        MessageTextInput(\n            name=\"openai_organization\",\n            display_name=\"OpenAI Organization\",\n            advanced=True,\n        ),\n        MessageTextInput(name=\"openai_proxy\", display_name=\"OpenAI Proxy\", advanced=True),\n        FloatInput(name=\"request_timeout\", display_name=\"Request Timeout\", advanced=True),\n        BoolInput(name=\"show_progress_bar\", display_name=\"Show Progress Bar\", advanced=True),\n        BoolInput(name=\"skip_empty\", display_name=\"Skip Empty\", advanced=True),\n        MessageTextInput(\n            name=\"tiktoken_model_name\",\n            display_name=\"TikToken Model Name\",\n            advanced=True,\n        ),\n        BoolInput(\n            name=\"tiktoken_enable\",\n            display_name=\"TikToken Enable\",\n            advanced=True,\n            value=True,\n            info=\"If False, you must have transformers installed.\",\n        ),\n        IntInput(\n            name=\"dimensions\",\n            display_name=\"Dimensions\",\n            info=\"The number of dimensions the resulting output embeddings should have. \"\n            \"Only supported by certain models.\",\n            advanced=True,\n        ),\n    ]\n\n    def build_embeddings(self) -> Embeddings:\n        return OpenAIEmbeddings(\n            tiktoken_enabled=self.tiktoken_enable,\n            default_headers=self.default_headers,\n            default_query=self.default_query,\n            allowed_special=\"all\",\n            disallowed_special=\"all\",\n            chunk_size=self.chunk_size,\n            deployment=self.deployment,\n            embedding_ctx_length=self.embedding_ctx_length,\n            max_retries=self.max_retries,\n            model=self.model,\n            model_kwargs=self.model_kwargs,\n            base_url=self.openai_api_base,\n            api_key=self.openai_api_key,\n            openai_api_type=self.openai_api_type,\n            api_version=self.openai_api_version,\n            organization=self.openai_organization,\n            openai_proxy=self.openai_proxy,\n            timeout=self.request_timeout or None,\n            show_progress_bar=self.show_progress_bar,\n            skip_empty=self.skip_empty,\n            tiktoken_model_name=self.tiktoken_model_name,\n            dimensions=self.dimensions or None,\n        )\n",
                            "fileTypes": [],
                            "file_path": "",
                            "password": false,
                            "name": "code",
                            "advanced": true,
                            "dynamic": true,
                            "info": "",
                            "load_from_db": false,
                            "title_case": false,
                            "display_name": "code"
                          },
                          "default_headers": {
                            "trace_as_input": true,
                            "list": false,
                            "required": false,
                            "placeholder": "",
                            "show": true,
                            "name": "default_headers",
                            "value": {},
                            "display_name": "Default Headers",
                            "advanced": true,
                            "dynamic": false,
                            "info": "Default headers to use for the API request.",
                            "title_case": false,
                            "type": "dict",
                            "_input_type": "DictInput"
                          },
                          "default_query": {
                            "trace_as_input": true,
                            "list": false,
                            "required": false,
                            "placeholder": "",
                            "show": true,
                            "name": "default_query",
                            "value": {},
                            "display_name": "Default Query",
                            "advanced": true,
                            "dynamic": false,
                            "info": "Default query parameters to use for the API request.",
                            "title_case": false,
                            "type": "dict",
                            "_input_type": "DictInput"
                          },
                          "deployment": {
                            "trace_as_input": true,
                            "trace_as_metadata": true,
                            "load_from_db": false,
                            "list": false,
                            "required": false,
                            "placeholder": "",
                            "show": true,
                            "name": "deployment",
                            "value": "",
                            "display_name": "Deployment",
                            "advanced": true,
                            "input_types": [
                              "Message"
                            ],
                            "dynamic": false,
                            "info": "",
                            "title_case": false,
                            "type": "str",
                            "_input_type": "MessageTextInput"
                          },
                          "dimensions": {
                            "trace_as_metadata": true,
                            "list": false,
                            "required": false,
                            "placeholder": "",
                            "show": true,
                            "name": "dimensions",
                            "value": "",
                            "display_name": "Dimensions",
                            "advanced": true,
                            "dynamic": false,
                            "info": "The number of dimensions the resulting output embeddings should have. Only supported by certain models.",
                            "title_case": false,
                            "type": "int",
                            "_input_type": "IntInput"
                          },
                          "embedding_ctx_length": {
                            "trace_as_metadata": true,
                            "list": false,
                            "required": false,
                            "placeholder": "",
                            "show": true,
                            "name": "embedding_ctx_length",
                            "value": 1536,
                            "display_name": "Embedding Context Length",
                            "advanced": true,
                            "dynamic": false,
                            "info": "",
                            "title_case": false,
                            "type": "int",
                            "_input_type": "IntInput"
                          },
                          "max_retries": {
                            "trace_as_metadata": true,
                            "list": false,
                            "required": false,
                            "placeholder": "",
                            "show": true,
                            "name": "max_retries",
                            "value": 3,
                            "display_name": "Max Retries",
                            "advanced": true,
                            "dynamic": false,
                            "info": "",
                            "title_case": false,
                            "type": "int",
                            "_input_type": "IntInput"
                          },
                          "model": {
                            "trace_as_metadata": true,
                            "options": [
                              "text-embedding-3-small",
                              "text-embedding-3-large",
                              "text-embedding-ada-002"
                            ],
                            "combobox": false,
                            "required": false,
                            "placeholder": "",
                            "show": true,
                            "name": "model",
                            "value": "text-embedding-3-small",
                            "display_name": "Model",
                            "advanced": false,
                            "dynamic": false,
                            "info": "",
                            "title_case": false,
                            "type": "str",
                            "_input_type": "DropdownInput"
                          },
                          "model_kwargs": {
                            "trace_as_input": true,
                            "list": false,
                            "required": false,
                            "placeholder": "",
                            "show": true,
                            "name": "model_kwargs",
                            "value": {},
                            "display_name": "Model Kwargs",
                            "advanced": true,
                            "dynamic": false,
                            "info": "",
                            "title_case": false,
                            "type": "dict",
                            "_input_type": "DictInput"
                          },
                          "openai_api_base": {
                            "load_from_db": false,
                            "required": false,
                            "placeholder": "",
                            "show": true,
                            "name": "openai_api_base",
                            "value": "",
                            "display_name": "OpenAI API Base",
                            "advanced": true,
                            "input_types": [
                              "Message"
                            ],
                            "dynamic": false,
                            "info": "",
                            "title_case": false,
                            "password": true,
                            "type": "str",
                            "_input_type": "SecretStrInput"
                          },
                          "openai_api_key": {
                            "load_from_db": true,
                            "required": false,
                            "placeholder": "",
                            "show": true,
                            "name": "openai_api_key",
                            "value": "OPENAI_API_KEY",
                            "display_name": "OpenAI API Key",
                            "advanced": false,
                            "input_types": [
                              "Message"
                            ],
                            "dynamic": false,
                            "info": "",
                            "title_case": false,
                            "password": true,
                            "type": "str",
                            "_input_type": "SecretStrInput"
                          },
                          "openai_api_type": {
                            "load_from_db": false,
                            "required": false,
                            "placeholder": "",
                            "show": true,
                            "name": "openai_api_type",
                            "value": "",
                            "display_name": "OpenAI API Type",
                            "advanced": true,
                            "input_types": [
                              "Message"
                            ],
                            "dynamic": false,
                            "info": "",
                            "title_case": false,
                            "password": true,
                            "type": "str",
                            "_input_type": "SecretStrInput"
                          },
                          "openai_api_version": {
                            "trace_as_input": true,
                            "trace_as_metadata": true,
                            "load_from_db": false,
                            "list": false,
                            "required": false,
                            "placeholder": "",
                            "show": true,
                            "name": "openai_api_version",
                            "value": "",
                            "display_name": "OpenAI API Version",
                            "advanced": true,
                            "input_types": [
                              "Message"
                            ],
                            "dynamic": false,
                            "info": "",
                            "title_case": false,
                            "type": "str",
                            "_input_type": "MessageTextInput"
                          },
                          "openai_organization": {
                            "trace_as_input": true,
                            "trace_as_metadata": true,
                            "load_from_db": false,
                            "list": false,
                            "required": false,
                            "placeholder": "",
                            "show": true,
                            "name": "openai_organization",
                            "value": "",
                            "display_name": "OpenAI Organization",
                            "advanced": true,
                            "input_types": [
                              "Message"
                            ],
                            "dynamic": false,
                            "info": "",
                            "title_case": false,
                            "type": "str",
                            "_input_type": "MessageTextInput"
                          },
                          "openai_proxy": {
                            "trace_as_input": true,
                            "trace_as_metadata": true,
                            "load_from_db": false,
                            "list": false,
                            "required": false,
                            "placeholder": "",
                            "show": true,
                            "name": "openai_proxy",
                            "value": "",
                            "display_name": "OpenAI Proxy",
                            "advanced": true,
                            "input_types": [
                              "Message"
                            ],
                            "dynamic": false,
                            "info": "",
                            "title_case": false,
                            "type": "str",
                            "_input_type": "MessageTextInput"
                          },
                          "request_timeout": {
                            "trace_as_metadata": true,
                            "list": false,
                            "required": false,
                            "placeholder": "",
                            "show": true,
                            "name": "request_timeout",
                            "value": "",
                            "display_name": "Request Timeout",
                            "advanced": true,
                            "dynamic": false,
                            "info": "",
                            "title_case": false,
                            "type": "float",
                            "_input_type": "FloatInput"
                          },
                          "show_progress_bar": {
                            "trace_as_metadata": true,
                            "list": false,
                            "required": false,
                            "placeholder": "",
                            "show": true,
                            "name": "show_progress_bar",
                            "value": false,
                            "display_name": "Show Progress Bar",
                            "advanced": true,
                            "dynamic": false,
                            "info": "",
                            "title_case": false,
                            "type": "bool",
                            "_input_type": "BoolInput"
                          },
                          "skip_empty": {
                            "trace_as_metadata": true,
                            "list": false,
                            "required": false,
                            "placeholder": "",
                            "show": true,
                            "name": "skip_empty",
                            "value": false,
                            "display_name": "Skip Empty",
                            "advanced": true,
                            "dynamic": false,
                            "info": "",
                            "title_case": false,
                            "type": "bool",
                            "_input_type": "BoolInput"
                          },
                          "tiktoken_enable": {
                            "trace_as_metadata": true,
                            "list": false,
                            "required": false,
                            "placeholder": "",
                            "show": true,
                            "name": "tiktoken_enable",
                            "value": true,
                            "display_name": "TikToken Enable",
                            "advanced": true,
                            "dynamic": false,
                            "info": "If False, you must have transformers installed.",
                            "title_case": false,
                            "type": "bool",
                            "_input_type": "BoolInput"
                          },
                          "tiktoken_model_name": {
                            "trace_as_input": true,
                            "trace_as_metadata": true,
                            "load_from_db": false,
                            "list": false,
                            "required": false,
                            "placeholder": "",
                            "show": true,
                            "name": "tiktoken_model_name",
                            "value": "",
                            "display_name": "TikToken Model Name",
                            "advanced": true,
                            "input_types": [
                              "Message"
                            ],
                            "dynamic": false,
                            "info": "",
                            "title_case": false,
                            "type": "str",
                            "_input_type": "MessageTextInput"
                          }
                        },
                        "description": "Generate embeddings using OpenAI models.",
                        "icon": "OpenAI",
                        "base_classes": [
                          "Embeddings"
                        ],
                        "display_name": "OpenAI Embeddings",
                        "documentation": "",
                        "custom_fields": {},
                        "output_types": [],
                        "pinned": false,
                        "conditional_paths": [],
                        "frozen": false,
                        "outputs": [
                          {
                            "types": [
                              "Embeddings"
                            ],
                            "selected": "Embeddings",
                            "name": "embeddings",
                            "display_name": "Embeddings",
                            "method": "build_embeddings",
                            "value": "__UNDEFINED__",
                            "cache": true,
                            "required_inputs": [
                              "chunk_size",
                              "default_headers",
                              "default_query",
                              "deployment",
                              "dimensions",
                              "embedding_ctx_length",
                              "max_retries",
                              "model",
                              "model_kwargs",
                              "openai_api_base",
                              "openai_api_key",
                              "openai_api_type",
                              "openai_api_version",
                              "openai_organization",
                              "openai_proxy",
                              "request_timeout",
                              "show_progress_bar",
                              "skip_empty",
                              "tiktoken_enable",
                              "tiktoken_model_name"
                            ]
                          }
                        ],
                        "field_order": [
                          "default_headers",
                          "default_query",
                          "chunk_size",
                          "client",
                          "deployment",
                          "embedding_ctx_length",
                          "max_retries",
                          "model",
                          "model_kwargs",
                          "openai_api_base",
                          "openai_api_key",
                          "openai_api_type",
                          "openai_api_version",
                          "openai_organization",
                          "openai_proxy",
                          "request_timeout",
                          "show_progress_bar",
                          "skip_empty",
                          "tiktoken_model_name",
                          "tiktoken_enable",
                          "dimensions"
                        ],
                        "beta": false,
                        "edited": false,
                        "metadata": {}
                      },
                      "id": "OpenAIEmbeddings-i3hOt",
                      "description": "Generate embeddings using OpenAI models.",
                      "display_name": "OpenAI Embeddings"
                    },
                    "selected": true,
                    "width": 384,
                    "height": 375,
                    "positionAbsolute": {
                      "x": -2941.046432933903,
                      "y": -540.6386021914577
                    },
                    "dragging": false
                  },
                  {
                    "id": "ParseData-wVyYa",
                    "type": "genericNode",
                    "position": {
                      "x": -2140.6865868295176,
                      "y": -940.836027355424
                    },
                    "data": {
                      "type": "ParseData",
                      "node": {
                        "template": {
                          "_type": "Component",
                          "data": {
                            "trace_as_metadata": true,
                            "list": false,
                            "trace_as_input": true,
                            "required": false,
                            "placeholder": "",
                            "show": true,
                            "name": "data",
                            "value": "",
                            "display_name": "Data",
                            "advanced": false,
                            "input_types": [
                              "Data"
                            ],
                            "dynamic": false,
                            "info": "The data to convert to text.",
                            "title_case": false,
                            "type": "other",
                            "_input_type": "DataInput"
                          },
                          "code": {
                            "type": "code",
                            "required": true,
                            "placeholder": "",
                            "list": false,
                            "show": true,
                            "multiline": true,
                            "value": "from axiestudio.custom import Component\nfrom axiestudio.helpers.data import data_to_text\nfrom axiestudio.io import DataInput, MultilineInput, Output, StrInput\nfrom axiestudio.schema.message import Message\n\n\nclass ParseDataComponent(Component):\n    display_name = \"Parse Data\"\n    description = \"Convert Data into plain text following a specified template.\"\n    icon = \"braces\"\n    name = \"ParseData\"\n\n    inputs = [\n        DataInput(name=\"data\", display_name=\"Data\", info=\"The data to convert to text.\"),\n        MultilineInput(\n            name=\"template\",\n            display_name=\"Template\",\n            info=\"The template to use for formatting the data. \"\n            \"It can contain the keys {text}, {data} or any other key in the Data.\",\n            value=\"{text}\",\n        ),\n        StrInput(name=\"sep\", display_name=\"Separator\", advanced=True, value=\"\\n\"),\n    ]\n\n    outputs = [\n        Output(display_name=\"Text\", name=\"text\", method=\"parse_data\"),\n    ]\n\n    def parse_data(self) -> Message:\n        data = self.data if isinstance(self.data, list) else [self.data]\n        template = self.template\n\n        result_string = data_to_text(template, data, sep=self.sep)\n        self.status = result_string\n        return Message(text=result_string)\n",
                            "fileTypes": [],
                            "file_path": "",
                            "password": false,
                            "name": "code",
                            "advanced": true,
                            "dynamic": true,
                            "info": "",
                            "load_from_db": false,
                            "title_case": false,
                            "display_name": "code"
                          },
                          "sep": {
                            "trace_as_metadata": true,
                            "load_from_db": false,
                            "list": false,
                            "required": false,
                            "placeholder": "",
                            "show": true,
                            "name": "sep",
                            "value": "\n",
                            "display_name": "Separator",
                            "advanced": true,
                            "dynamic": false,
                            "info": "",
                            "title_case": false,
                            "type": "str",
                            "_input_type": "StrInput"
                          },
                          "template": {
                            "trace_as_input": true,
                            "multiline": true,
                            "trace_as_metadata": true,
                            "load_from_db": false,
                            "list": false,
                            "required": false,
                            "placeholder": "",
                            "show": true,
                            "name": "template",
                            "value": "{text}",
                            "display_name": "Template",
                            "advanced": false,
                            "input_types": [
                              "Message"
                            ],
                            "dynamic": false,
                            "info": "The template to use for formatting the data. It can contain the keys {text}, {data} or any other key in the Data.",
                            "title_case": false,
                            "type": "str",
                            "_input_type": "MultilineInput"
                          }
                        },
                        "description": "Convert Data into plain text following a specified template.",
                        "icon": "braces",
                        "base_classes": [
                          "Message"
                        ],
                        "display_name": "Parse Data",
                        "documentation": "",
                        "custom_fields": {},
                        "output_types": [],
                        "pinned": false,
                        "conditional_paths": [],
                        "frozen": false,
                        "outputs": [
                          {
                            "types": [
                              "Message"
                            ],
                            "selected": "Message",
                            "name": "text",
                            "display_name": "Text",
                            "method": "parse_data",
                            "value": "__UNDEFINED__",
                            "cache": true
                          }
                        ],
                        "field_order": [
                          "data",
                          "template",
                          "sep"
                        ],
                        "beta": false,
                        "edited": false,
                        "metadata": {}
                      },
                      "id": "ParseData-wVyYa",
                      "description": "Convert Data into plain text following a specified template.",
                      "display_name": "Parse Data"
                    },
                    "selected": true,
                    "width": 384,
                    "height": 353,
                    "dragging": false,
                    "positionAbsolute": {
                      "x": -2140.6865868295176,
                      "y": -940.836027355424
                    }
                  },
                  {
                    "id": "Prompt-UWd7v",
                    "type": "genericNode",
                    "position": {
                      "x": -2940.377147131932,
                      "y": -941.3554907792541
                    },
                    "data": {
                      "type": "Prompt",
                      "node": {
                        "template": {
                          "_type": "Component",
                          "code": {
                            "type": "code",
                            "required": true,
                            "placeholder": "",
                            "list": false,
                            "show": true,
                            "multiline": true,
                            "value": "from axiestudio.base.prompts.api_utils import process_prompt_template\nfrom axiestudio.custom import Component\nfrom axiestudio.inputs.inputs import DefaultPromptField\nfrom axiestudio.io import Output, PromptInput\nfrom axiestudio.schema.message import Message\nfrom axiestudio.template.utils import update_template_values\n\n\nclass PromptComponent(Component):\n    display_name: str = \"Prompt\"\n    description: str = \"Create a prompt template with dynamic variables.\"\n    icon = \"prompts\"\n    trace_type = \"prompt\"\n    name = \"Prompt\"\n\n    inputs = [\n        PromptInput(name=\"template\", display_name=\"Template\"),\n    ]\n\n    outputs = [\n        Output(display_name=\"Prompt Message\", name=\"prompt\", method=\"build_prompt\"),\n    ]\n\n    async def build_prompt(\n        self,\n    ) -> Message:\n        prompt = await Message.from_template_and_variables(**self._attributes)\n        self.status = prompt.text\n        return prompt\n\n    def _update_template(self, frontend_node: dict):\n        prompt_template = frontend_node[\"template\"][\"template\"][\"value\"]\n        custom_fields = frontend_node[\"custom_fields\"]\n        frontend_node_template = frontend_node[\"template\"]\n        _ = process_prompt_template(\n            template=prompt_template,\n            name=\"template\",\n            custom_fields=custom_fields,\n            frontend_node_template=frontend_node_template,\n        )\n        return frontend_node\n\n    def post_code_processing(self, new_frontend_node: dict, current_frontend_node: dict):\n        \"\"\"\n        This function is called after the code validation is done.\n        \"\"\"\n        frontend_node = super().post_code_processing(new_frontend_node, current_frontend_node)\n        template = frontend_node[\"template\"][\"template\"][\"value\"]\n        # Kept it duplicated for backwards compatibility\n        _ = process_prompt_template(\n            template=template,\n            name=\"template\",\n            custom_fields=frontend_node[\"custom_fields\"],\n            frontend_node_template=frontend_node[\"template\"],\n        )\n        # Now that template is updated, we need to grab any values that were set in the current_frontend_node\n        # and update the frontend_node with those values\n        update_template_values(new_template=frontend_node, previous_template=current_frontend_node[\"template\"])\n        return frontend_node\n\n    def _get_fallback_input(self, **kwargs):\n        return DefaultPromptField(**kwargs)\n",
                            "fileTypes": [],
                            "file_path": "",
                            "password": false,
                            "name": "code",
                            "advanced": true,
                            "dynamic": true,
                            "info": "",
                            "load_from_db": false,
                            "title_case": false,
                            "display_name": "code"
                          },
                          "template": {
                            "trace_as_input": true,
                            "list": false,
                            "required": false,
                            "placeholder": "",
                            "show": true,
                            "name": "template",
                            "value": "{TMC}",
                            "display_name": "Template",
                            "advanced": false,
                            "dynamic": false,
                            "info": "",
                            "title_case": false,
                            "type": "prompt",
                            "_input_type": "PromptInput"
                          },
                          "TMC": {
                            "field_type": "str",
                            "required": false,
                            "placeholder": "",
                            "list": false,
                            "show": true,
                            "multiline": true,
                            "value": "6670772A5",
                            "fileTypes": [],
                            "file_path": "",
                            "name": "TMC",
                            "display_name": "TMC",
                            "advanced": false,
                            "input_types": [
                              "Message",
                              "Text"
                            ],
                            "dynamic": false,
                            "info": "",
                            "load_from_db": false,
                            "title_case": false,
                            "type": "str"
                          }
                        },
                        "description": "Create a prompt template with dynamic variables.",
                        "icon": "prompts",
                        "is_input": null,
                        "is_output": null,
                        "is_composition": null,
                        "base_classes": [
                          "Message"
                        ],
                        "name": "",
                        "display_name": "Prompt",
                        "documentation": "",
                        "custom_fields": {
                          "template": [
                            "TMC"
                          ]
                        },
                        "output_types": [],
                        "full_path": null,
                        "pinned": false,
                        "conditional_paths": [],
                        "frozen": false,
                        "outputs": [
                          {
                            "types": [
                              "Message"
                            ],
                            "selected": "Message",
                            "name": "prompt",
                            "hidden": null,
                            "display_name": "Prompt Message",
                            "method": "build_prompt",
                            "value": "__UNDEFINED__",
                            "cache": true,
                            "required_inputs": null
                          }
                        ],
                        "field_order": [
                          "template"
                        ],
                        "beta": false,
                        "error": null,
                        "edited": false,
                        "metadata": {}
                      },
                      "id": "Prompt-UWd7v"
                    },
                    "selected": true,
                    "width": 384,
                    "height": 391,
                    "positionAbsolute": {
                      "x": -2940.377147131932,
                      "y": -941.3554907792541
                    },
                    "dragging": false
                  }
                ],
                "edges": [
                  {
                    "source": "OpenAIEmbeddings-i3hOt",
                    "sourceHandle": "{œdataTypeœ:œOpenAIEmbeddingsœ,œidœ:œOpenAIEmbeddings-i3hOtœ,œnameœ:œembeddingsœ,œoutput_typesœ:[œEmbeddingsœ]}",
                    "target": "Chroma-94Qh7",
                    "targetHandle": "{œfieldNameœ:œembeddingœ,œidœ:œChroma-94Qh7œ,œinputTypesœ:[œEmbeddingsœ],œtypeœ:œotherœ}",
                    "data": {
                      "targetHandle": {
                        "fieldName": "embedding",
                        "id": "Chroma-94Qh7",
                        "inputTypes": [
                          "Embeddings"
                        ],
                        "type": "other"
                      },
                      "sourceHandle": {
                        "dataType": "OpenAIEmbeddings",
                        "id": "OpenAIEmbeddings-i3hOt",
                        "name": "embeddings",
                        "output_types": [
                          "Embeddings"
                        ]
                      }
                    },
                    "id": "reactflow__edge-OpenAIEmbeddings-i3hOt{œdataTypeœ:œOpenAIEmbeddingsœ,œidœ:œOpenAIEmbeddings-i3hOtœ,œnameœ:œembeddingsœ,œoutput_typesœ:[œEmbeddingsœ]}-Chroma-94Qh7{œfieldNameœ:œembeddingœ,œidœ:œChroma-94Qh7œ,œinputTypesœ:[œEmbeddingsœ],œtypeœ:œotherœ}",
                    "selected": false
                  },
                  {
                    "source": "Chroma-94Qh7",
                    "sourceHandle": "{œdataTypeœ:œChromaœ,œidœ:œChroma-94Qh7œ,œnameœ:œsearch_resultsœ,œoutput_typesœ:[œDataœ]}",
                    "target": "ParseData-wVyYa",
                    "targetHandle": "{œfieldNameœ:œdataœ,œidœ:œParseData-wVyYaœ,œinputTypesœ:[œDataœ],œtypeœ:œotherœ}",
                    "data": {
                      "targetHandle": {
                        "fieldName": "data",
                        "id": "ParseData-wVyYa",
                        "inputTypes": [
                          "Data"
                        ],
                        "type": "other"
                      },
                      "sourceHandle": {
                        "dataType": "Chroma",
                        "id": "Chroma-94Qh7",
                        "name": "search_results",
                        "output_types": [
                          "Data"
                        ]
                      }
                    },
                    "id": "reactflow__edge-Chroma-94Qh7{œdataTypeœ:œChromaœ,œidœ:œChroma-94Qh7œ,œnameœ:œsearch_resultsœ,œoutput_typesœ:[œDataœ]}-ParseData-wVyYa{œfieldNameœ:œdataœ,œidœ:œParseData-wVyYaœ,œinputTypesœ:[œDataœ],œtypeœ:œotherœ}",
                    "selected": false
                  },
                  {
                    "source": "Prompt-UWd7v",
                    "sourceHandle": "{œdataTypeœ:œPromptœ,œidœ:œPrompt-UWd7vœ,œnameœ:œpromptœ,œoutput_typesœ:[œMessageœ]}",
                    "target": "Chroma-94Qh7",
                    "targetHandle": "{œfieldNameœ:œcollection_nameœ,œidœ:œChroma-94Qh7œ,œinputTypesœ:[œMessageœ],œtypeœ:œstrœ}",
                    "data": {
                      "targetHandle": {
                        "fieldName": "collection_name",
                        "id": "Chroma-94Qh7",
                        "inputTypes": [
                          "Message"
                        ],
                        "type": "str"
                      },
                      "sourceHandle": {
                        "dataType": "Prompt",
                        "id": "Prompt-UWd7v",
                        "name": "prompt",
                        "output_types": [
                          "Message"
                        ]
                      }
                    },
                    "id": "reactflow__edge-Prompt-UWd7v{œdataTypeœ:œPromptœ,œidœ:œPrompt-UWd7vœ,œnameœ:œpromptœ,œoutput_typesœ:[œMessageœ]}-Chroma-94Qh7{œfieldNameœ:œcollection_nameœ,œidœ:œChroma-94Qh7œ,œinputTypesœ:[œMessageœ],œtypeœ:œstrœ}",
                    "selected": false
                  }
                ],
                "viewport": {
                  "zoom": 1,
                  "x": 0,
                  "y": 0
                }
              },
              "is_component": false,
              "name": "Friendly Volhard",
              "description": "",
              "id": "uaTXP"
            },
            "outputs": [
              {
                "types": [
                  "Retriever"
                ],
                "selected": "Retriever",
                "name": "Chroma-94Qh7_base_retriever",
                "display_name": "Retriever",
                "method": "build_base_retriever",
                "value": "__UNDEFINED__",
                "cache": true,
                "required_inputs": [],
                "proxy": {
                  "id": "Chroma-94Qh7",
                  "name": "base_retriever",
                  "nodeDisplayName": "Chroma DB"
                }
              },
              {
                "types": [
                  "VectorStore"
                ],
                "selected": "VectorStore",
                "name": "Chroma-94Qh7_vector_store",
                "display_name": "Vector Store",
                "method": "cast_vector_store",
                "value": "__UNDEFINED__",
                "cache": true,
                "required_inputs": [],
                "proxy": {
                  "id": "Chroma-94Qh7",
                  "name": "vector_store",
                  "nodeDisplayName": "Chroma DB"
                }
              },
              {
                "types": [
                  "Message"
                ],
                "selected": "Message",
                "name": "ParseData-wVyYa_text",
                "display_name": "Text",
                "method": "parse_data",
                "value": "__UNDEFINED__",
                "cache": true,
                "proxy": {
                  "id": "ParseData-wVyYa",
                  "name": "text",
                  "nodeDisplayName": "Parse Data"
                }
              }
            ],
            "lf_version": "1.0.19"
          }
        },
        "id": "groupComponent-ob9nl",
        "position": {
          "x": -2640.6571594471634,
          "y": -840.8756421302936
        },
        "type": "genericNode",
        "width": 384,
        "height": 455,
        "selected": false,
        "dragging": false
      },
      {
        "data": {
          "id": "groupComponent-fCN9N",
          "type": "GroupNode",
          "node": {
            "display_name": "WSM Data Retriever",
            "documentation": "",
            "description": "",
            "template": {
              "ingest_data_Chroma-3LJPk": {
                "trace_as_metadata": true,
                "list": true,
                "trace_as_input": true,
                "required": false,
                "placeholder": "",
                "show": true,
                "name": "ingest_data",
                "value": "",
                "display_name": "Ingest Data",
                "advanced": true,
                "input_types": [
                  "Data"
                ],
                "dynamic": false,
                "info": "",
                "title_case": false,
                "type": "other",
                "_input_type": "DataInput",
                "proxy": {
                  "id": "Chroma-3LJPk",
                  "field": "ingest_data"
                }
              },
              "allow_duplicates_Chroma-3LJPk": {
                "trace_as_metadata": true,
                "list": false,
                "required": false,
                "placeholder": "",
                "show": true,
                "name": "allow_duplicates",
                "value": false,
                "display_name": "Allow Duplicates",
                "advanced": true,
                "dynamic": false,
                "info": "If false, will not add documents that are already in the Vector Store.",
                "title_case": false,
                "type": "bool",
                "_input_type": "BoolInput",
                "proxy": {
                  "id": "Chroma-3LJPk",
                  "field": "allow_duplicates"
                }
              },
              "chroma_server_cors_allow_origins_Chroma-3LJPk": {
                "trace_as_metadata": true,
                "load_from_db": false,
                "list": false,
                "required": false,
                "placeholder": "",
                "show": true,
                "name": "chroma_server_cors_allow_origins",
                "value": "",
                "display_name": "Server CORS Allow Origins",
                "advanced": true,
                "dynamic": false,
                "info": "",
                "title_case": false,
                "type": "str",
                "_input_type": "StrInput",
                "proxy": {
                  "id": "Chroma-3LJPk",
                  "field": "chroma_server_cors_allow_origins"
                }
              },
              "chroma_server_grpc_port_Chroma-3LJPk": {
                "trace_as_metadata": true,
                "list": false,
                "required": false,
                "placeholder": "",
                "show": true,
                "name": "chroma_server_grpc_port",
                "value": "",
                "display_name": "Server gRPC Port",
                "advanced": true,
                "dynamic": false,
                "info": "",
                "title_case": false,
                "type": "int",
                "_input_type": "IntInput",
                "proxy": {
                  "id": "Chroma-3LJPk",
                  "field": "chroma_server_grpc_port"
                }
              },
              "chroma_server_host_Chroma-3LJPk": {
                "trace_as_metadata": true,
                "load_from_db": false,
                "list": false,
                "required": false,
                "placeholder": "",
                "show": true,
                "name": "chroma_server_host",
                "value": "",
                "display_name": "Server Host",
                "advanced": true,
                "dynamic": false,
                "info": "",
                "title_case": false,
                "type": "str",
                "_input_type": "StrInput",
                "proxy": {
                  "id": "Chroma-3LJPk",
                  "field": "chroma_server_host"
                }
              },
              "chroma_server_http_port_Chroma-3LJPk": {
                "trace_as_metadata": true,
                "list": false,
                "required": false,
                "placeholder": "",
                "show": true,
                "name": "chroma_server_http_port",
                "value": "",
                "display_name": "Server HTTP Port",
                "advanced": true,
                "dynamic": false,
                "info": "",
                "title_case": false,
                "type": "int",
                "_input_type": "IntInput",
                "proxy": {
                  "id": "Chroma-3LJPk",
                  "field": "chroma_server_http_port"
                }
              },
              "chroma_server_ssl_enabled_Chroma-3LJPk": {
                "trace_as_metadata": true,
                "list": false,
                "required": false,
                "placeholder": "",
                "show": true,
                "name": "chroma_server_ssl_enabled",
                "value": false,
                "display_name": "Server SSL Enabled",
                "advanced": true,
                "dynamic": false,
                "info": "",
                "title_case": false,
                "type": "bool",
                "_input_type": "BoolInput",
                "proxy": {
                  "id": "Chroma-3LJPk",
                  "field": "chroma_server_ssl_enabled"
                }
              },
              "code_Chroma-3LJPk": {
                "type": "code",
                "required": true,
                "placeholder": "",
                "list": false,
                "show": true,
                "multiline": true,
                "value": "from copy import deepcopy\nfrom typing import TYPE_CHECKING\n\nfrom chromadb.config import Settings\nfrom langchain_chroma.vectorstores import Chroma\nfrom loguru import logger\n\nfrom axiestudio.base.vectorstores.model import LCVectorStoreComponent, check_cached_vector_store\nfrom axiestudio.base.vectorstores.utils import chroma_collection_to_data\nfrom axiestudio.io import BoolInput, DataInput, DropdownInput, HandleInput, IntInput, StrInput, MultilineInput\nfrom axiestudio.schema import Data\n\nif TYPE_CHECKING:\n    from langchain_chroma import Chroma\n\n\nclass ChromaVectorStoreComponent(LCVectorStoreComponent):\n    \"\"\"\n    Chroma Vector Store with search capabilities\n    \"\"\"\n\n    display_name: str = \"Chroma DB\"\n    description: str = \"Chroma Vector Store with search capabilities\"\n    documentation = \"https://python.langchain.com/docs/integrations/vectorstores/chroma\"\n    name = \"Chroma\"\n    icon = \"Chroma\"\n\n    inputs = [\n        MessageTextInput(\n            name=\"collection_name\",\n            display_name=\"Collection Name\",\n        ),\n        StrInput(\n            name=\"persist_directory\",\n            display_name=\"Persist Directory\",\n        ),\n        MultilineInput(\n            name=\"search_query\",\n            display_name=\"Search Query\",\n        ),\n        DataInput(\n            name=\"ingest_data\",\n            display_name=\"Ingest Data\",\n            is_list=True,\n        ),\n        HandleInput(name=\"embedding\", display_name=\"Embedding\", input_types=[\"Embeddings\"]),\n        StrInput(\n            name=\"chroma_server_cors_allow_origins\",\n            display_name=\"Server CORS Allow Origins\",\n            advanced=True,\n        ),\n        StrInput(\n            name=\"chroma_server_host\",\n            display_name=\"Server Host\",\n            advanced=True,\n        ),\n        IntInput(\n            name=\"chroma_server_http_port\",\n            display_name=\"Server HTTP Port\",\n            advanced=True,\n        ),\n        IntInput(\n            name=\"chroma_server_grpc_port\",\n            display_name=\"Server gRPC Port\",\n            advanced=True,\n        ),\n        BoolInput(\n            name=\"chroma_server_ssl_enabled\",\n            display_name=\"Server SSL Enabled\",\n            advanced=True,\n        ),\n        BoolInput(\n            name=\"allow_duplicates\",\n            display_name=\"Allow Duplicates\",\n            advanced=True,\n            info=\"If false, will not add documents that are already in the Vector Store.\",\n        ),\n        DropdownInput(\n            name=\"search_type\",\n            display_name=\"Search Type\",\n            options=[\"Similarity\", \"MMR\"],\n            value=\"Similarity\",\n            advanced=True,\n        ),\n        IntInput(\n            name=\"number_of_results\",\n            display_name=\"Number of Results\",\n            info=\"Number of results to return.\",\n            advanced=True,\n            value=5,\n        ),\n        IntInput(\n            name=\"limit\",\n            display_name=\"Limit\",\n            advanced=True,\n            info=\"Limit the number of records to compare when Allow Duplicates is False.\",\n        ),\n    ]\n\n    @check_cached_vector_store\n    def build_vector_store(self) -> Chroma:\n        \"\"\"\n        Builds the Chroma object.\n        \"\"\"\n        try:\n            from chromadb import Client\n            from langchain_chroma import Chroma\n        except ImportError:\n            raise ImportError(\n                \"Could not import Chroma integration package. \" \"Please install it with `pip install langchain-chroma`.\"\n            )\n        # Chroma settings\n        chroma_settings = None\n        client = None\n        if self.chroma_server_host:\n            chroma_settings = Settings(\n                chroma_server_cors_allow_origins=self.chroma_server_cors_allow_origins or [],\n                chroma_server_host=self.chroma_server_host,\n                chroma_server_http_port=self.chroma_server_http_port or None,\n                chroma_server_grpc_port=self.chroma_server_grpc_port or None,\n                chroma_server_ssl_enabled=self.chroma_server_ssl_enabled,\n            )\n            client = Client(settings=chroma_settings)\n\n        # Check persist_directory and expand it if it is a relative path\n        if self.persist_directory is not None:\n            persist_directory = self.resolve_path(self.persist_directory)\n        else:\n            persist_directory = None\n\n        chroma = Chroma(\n            persist_directory=persist_directory,\n            client=client,\n            embedding_function=self.embedding,\n            collection_name=self.collection_name,\n        )\n\n        self._add_documents_to_vector_store(chroma)\n        self.status = chroma_collection_to_data(chroma.get(limit=self.limit))\n        return chroma\n\n    def _add_documents_to_vector_store(self, vector_store: \"Chroma\") -> None:\n        \"\"\"\n        Adds documents to the Vector Store.\n        \"\"\"\n        if not self.ingest_data:\n            self.status = \"\"\n            return\n\n        _stored_documents_without_id = []\n        if self.allow_duplicates:\n            stored_data = []\n        else:\n            stored_data = chroma_collection_to_data(vector_store.get(limit=self.limit))\n            for value in deepcopy(stored_data):\n                del value.id\n                _stored_documents_without_id.append(value)\n\n        documents = []\n        for _input in self.ingest_data or []:\n            if isinstance(_input, Data):\n                if _input not in _stored_documents_without_id:\n                    documents.append(_input.to_lc_document())\n            else:\n                raise ValueError(\"Vector Store Inputs must be Data objects.\")\n\n        if documents and self.embedding is not None:\n            logger.debug(f\"Adding {len(documents)} documents to the Vector Store.\")\n            vector_store.add_documents(documents)\n        else:\n            logger.debug(\"No documents to add to the Vector Store.\")",
                "fileTypes": [],
                "file_path": "",
                "password": false,
                "name": "code",
                "advanced": true,
                "dynamic": true,
                "info": "",
                "load_from_db": false,
                "title_case": false,
                "display_name": "code",
                "proxy": {
                  "id": "Chroma-3LJPk",
                  "field": "code"
                }
              },
              "limit_Chroma-3LJPk": {
                "trace_as_metadata": true,
                "list": false,
                "required": false,
                "placeholder": "",
                "show": true,
                "name": "limit",
                "value": "",
                "display_name": "Limit",
                "advanced": true,
                "dynamic": false,
                "info": "Limit the number of records to compare when Allow Duplicates is False.",
                "title_case": false,
                "type": "int",
                "_input_type": "IntInput",
                "proxy": {
                  "id": "Chroma-3LJPk",
                  "field": "limit"
                }
              },
              "number_of_results_Chroma-3LJPk": {
                "trace_as_metadata": true,
                "list": false,
                "required": false,
                "placeholder": "",
                "show": true,
                "name": "number_of_results",
                "value": 5,
                "display_name": "Number of Results",
                "advanced": true,
                "dynamic": false,
                "info": "Number of results to return.",
                "title_case": false,
                "type": "int",
                "_input_type": "IntInput",
                "proxy": {
                  "id": "Chroma-3LJPk",
                  "field": "number_of_results"
                }
              },
              "persist_directory_Chroma-3LJPk": {
                "trace_as_metadata": true,
                "load_from_db": false,
                "list": false,
                "required": false,
                "placeholder": "",
                "show": true,
                "name": "persist_directory",
                "value": "",
                "display_name": "Persist Directory",
                "advanced": true,
                "dynamic": false,
                "info": "",
                "title_case": false,
                "type": "str",
                "_input_type": "StrInput",
                "proxy": {
                  "id": "Chroma-3LJPk",
                  "field": "persist_directory"
                }
              },
              "search_query_Chroma-3LJPk": {
                "trace_as_input": true,
                "multiline": true,
                "trace_as_metadata": true,
                "load_from_db": false,
                "list": false,
                "required": false,
                "placeholder": "",
                "show": true,
                "name": "search_query",
                "value": "",
                "display_name": "Search Query",
                "advanced": false,
                "input_types": [
                  "Message"
                ],
                "dynamic": false,
                "info": "",
                "title_case": false,
                "type": "str",
                "_input_type": "MultilineInput",
                "proxy": {
                  "id": "Chroma-3LJPk",
                  "field": "search_query"
                }
              },
              "search_type_Chroma-3LJPk": {
                "trace_as_metadata": true,
                "options": [
                  "Similarity",
                  "MMR"
                ],
                "combobox": false,
                "required": false,
                "placeholder": "",
                "show": true,
                "name": "search_type",
                "value": "Similarity",
                "display_name": "Search Type",
                "advanced": true,
                "dynamic": false,
                "info": "",
                "title_case": false,
                "type": "str",
                "_input_type": "DropdownInput",
                "proxy": {
                  "id": "Chroma-3LJPk",
                  "field": "search_type"
                }
              },
              "chunk_size_OpenAIEmbeddings-UfXHC": {
                "trace_as_metadata": true,
                "list": false,
                "required": false,
                "placeholder": "",
                "show": true,
                "name": "chunk_size",
                "value": 1000,
                "display_name": "Chunk Size",
                "advanced": true,
                "dynamic": false,
                "info": "",
                "title_case": false,
                "type": "int",
                "_input_type": "IntInput",
                "proxy": {
                  "id": "OpenAIEmbeddings-UfXHC",
                  "field": "chunk_size"
                }
              },
              "client_OpenAIEmbeddings-UfXHC": {
                "trace_as_input": true,
                "trace_as_metadata": true,
                "load_from_db": false,
                "list": false,
                "required": false,
                "placeholder": "",
                "show": true,
                "name": "client",
                "value": "",
                "display_name": "Client",
                "advanced": true,
                "input_types": [
                  "Message"
                ],
                "dynamic": false,
                "info": "",
                "title_case": false,
                "type": "str",
                "_input_type": "MessageTextInput",
                "proxy": {
                  "id": "OpenAIEmbeddings-UfXHC",
                  "field": "client"
                }
              },
              "code_OpenAIEmbeddings-UfXHC": {
                "type": "code",
                "required": true,
                "placeholder": "",
                "list": false,
                "show": true,
                "multiline": true,
                "value": "from langchain_openai.embeddings.base import OpenAIEmbeddings\n\nfrom axiestudio.base.embeddings.model import LCEmbeddingsModel\nfrom axiestudio.base.models.openai_constants import OPENAI_EMBEDDING_MODEL_NAMES\nfrom axiestudio.field_typing import Embeddings\nfrom axiestudio.io import BoolInput, DictInput, DropdownInput, FloatInput, IntInput, MessageTextInput, SecretStrInput\n\n\nclass OpenAIEmbeddingsComponent(LCEmbeddingsModel):\n    display_name = \"OpenAI Embeddings\"\n    description = \"Generate embeddings using OpenAI models.\"\n    icon = \"OpenAI\"\n    name = \"OpenAIEmbeddings\"\n\n    inputs = [\n        DictInput(\n            name=\"default_headers\",\n            display_name=\"Default Headers\",\n            advanced=True,\n            info=\"Default headers to use for the API request.\",\n        ),\n        DictInput(\n            name=\"default_query\",\n            display_name=\"Default Query\",\n            advanced=True,\n            info=\"Default query parameters to use for the API request.\",\n        ),\n        IntInput(name=\"chunk_size\", display_name=\"Chunk Size\", advanced=True, value=1000),\n        MessageTextInput(name=\"client\", display_name=\"Client\", advanced=True),\n        MessageTextInput(name=\"deployment\", display_name=\"Deployment\", advanced=True),\n        IntInput(name=\"embedding_ctx_length\", display_name=\"Embedding Context Length\", advanced=True, value=1536),\n        IntInput(name=\"max_retries\", display_name=\"Max Retries\", value=3, advanced=True),\n        DropdownInput(\n            name=\"model\",\n            display_name=\"Model\",\n            advanced=False,\n            options=OPENAI_EMBEDDING_MODEL_NAMES,\n            value=\"text-embedding-3-small\",\n        ),\n        DictInput(name=\"model_kwargs\", display_name=\"Model Kwargs\", advanced=True),\n        SecretStrInput(name=\"openai_api_base\", display_name=\"OpenAI API Base\", advanced=True),\n        SecretStrInput(name=\"openai_api_key\", display_name=\"OpenAI API Key\", value=\"OPENAI_API_KEY\"),\n        SecretStrInput(name=\"openai_api_type\", display_name=\"OpenAI API Type\", advanced=True),\n        MessageTextInput(name=\"openai_api_version\", display_name=\"OpenAI API Version\", advanced=True),\n        MessageTextInput(\n            name=\"openai_organization\",\n            display_name=\"OpenAI Organization\",\n            advanced=True,\n        ),\n        MessageTextInput(name=\"openai_proxy\", display_name=\"OpenAI Proxy\", advanced=True),\n        FloatInput(name=\"request_timeout\", display_name=\"Request Timeout\", advanced=True),\n        BoolInput(name=\"show_progress_bar\", display_name=\"Show Progress Bar\", advanced=True),\n        BoolInput(name=\"skip_empty\", display_name=\"Skip Empty\", advanced=True),\n        MessageTextInput(\n            name=\"tiktoken_model_name\",\n            display_name=\"TikToken Model Name\",\n            advanced=True,\n        ),\n        BoolInput(\n            name=\"tiktoken_enable\",\n            display_name=\"TikToken Enable\",\n            advanced=True,\n            value=True,\n            info=\"If False, you must have transformers installed.\",\n        ),\n        IntInput(\n            name=\"dimensions\",\n            display_name=\"Dimensions\",\n            info=\"The number of dimensions the resulting output embeddings should have. \"\n            \"Only supported by certain models.\",\n            advanced=True,\n        ),\n    ]\n\n    def build_embeddings(self) -> Embeddings:\n        return OpenAIEmbeddings(\n            tiktoken_enabled=self.tiktoken_enable,\n            default_headers=self.default_headers,\n            default_query=self.default_query,\n            allowed_special=\"all\",\n            disallowed_special=\"all\",\n            chunk_size=self.chunk_size,\n            deployment=self.deployment,\n            embedding_ctx_length=self.embedding_ctx_length,\n            max_retries=self.max_retries,\n            model=self.model,\n            model_kwargs=self.model_kwargs,\n            base_url=self.openai_api_base,\n            api_key=self.openai_api_key,\n            openai_api_type=self.openai_api_type,\n            api_version=self.openai_api_version,\n            organization=self.openai_organization,\n            openai_proxy=self.openai_proxy,\n            timeout=self.request_timeout or None,\n            show_progress_bar=self.show_progress_bar,\n            skip_empty=self.skip_empty,\n            tiktoken_model_name=self.tiktoken_model_name,\n            dimensions=self.dimensions or None,\n        )\n",
                "fileTypes": [],
                "file_path": "",
                "password": false,
                "name": "code",
                "advanced": true,
                "dynamic": true,
                "info": "",
                "load_from_db": false,
                "title_case": false,
                "display_name": "code",
                "proxy": {
                  "id": "OpenAIEmbeddings-UfXHC",
                  "field": "code"
                }
              },
              "default_headers_OpenAIEmbeddings-UfXHC": {
                "trace_as_input": true,
                "list": false,
                "required": false,
                "placeholder": "",
                "show": true,
                "name": "default_headers",
                "value": {},
                "display_name": "Default Headers",
                "advanced": true,
                "dynamic": false,
                "info": "Default headers to use for the API request.",
                "title_case": false,
                "type": "dict",
                "_input_type": "DictInput",
                "proxy": {
                  "id": "OpenAIEmbeddings-UfXHC",
                  "field": "default_headers"
                }
              },
              "default_query_OpenAIEmbeddings-UfXHC": {
                "trace_as_input": true,
                "list": false,
                "required": false,
                "placeholder": "",
                "show": true,
                "name": "default_query",
                "value": {},
                "display_name": "Default Query",
                "advanced": true,
                "dynamic": false,
                "info": "Default query parameters to use for the API request.",
                "title_case": false,
                "type": "dict",
                "_input_type": "DictInput",
                "proxy": {
                  "id": "OpenAIEmbeddings-UfXHC",
                  "field": "default_query"
                }
              },
              "deployment_OpenAIEmbeddings-UfXHC": {
                "trace_as_input": true,
                "trace_as_metadata": true,
                "load_from_db": false,
                "list": false,
                "required": false,
                "placeholder": "",
                "show": true,
                "name": "deployment",
                "value": "",
                "display_name": "Deployment",
                "advanced": true,
                "input_types": [
                  "Message"
                ],
                "dynamic": false,
                "info": "",
                "title_case": false,
                "type": "str",
                "_input_type": "MessageTextInput",
                "proxy": {
                  "id": "OpenAIEmbeddings-UfXHC",
                  "field": "deployment"
                }
              },
              "dimensions_OpenAIEmbeddings-UfXHC": {
                "trace_as_metadata": true,
                "list": false,
                "required": false,
                "placeholder": "",
                "show": true,
                "name": "dimensions",
                "value": "",
                "display_name": "Dimensions",
                "advanced": true,
                "dynamic": false,
                "info": "The number of dimensions the resulting output embeddings should have. Only supported by certain models.",
                "title_case": false,
                "type": "int",
                "_input_type": "IntInput",
                "proxy": {
                  "id": "OpenAIEmbeddings-UfXHC",
                  "field": "dimensions"
                }
              },
              "embedding_ctx_length_OpenAIEmbeddings-UfXHC": {
                "trace_as_metadata": true,
                "list": false,
                "required": false,
                "placeholder": "",
                "show": true,
                "name": "embedding_ctx_length",
                "value": 1536,
                "display_name": "Embedding Context Length",
                "advanced": true,
                "dynamic": false,
                "info": "",
                "title_case": false,
                "type": "int",
                "_input_type": "IntInput",
                "proxy": {
                  "id": "OpenAIEmbeddings-UfXHC",
                  "field": "embedding_ctx_length"
                }
              },
              "max_retries_OpenAIEmbeddings-UfXHC": {
                "trace_as_metadata": true,
                "list": false,
                "required": false,
                "placeholder": "",
                "show": true,
                "name": "max_retries",
                "value": 3,
                "display_name": "Max Retries",
                "advanced": true,
                "dynamic": false,
                "info": "",
                "title_case": false,
                "type": "int",
                "_input_type": "IntInput",
                "proxy": {
                  "id": "OpenAIEmbeddings-UfXHC",
                  "field": "max_retries"
                }
              },
              "model_OpenAIEmbeddings-UfXHC": {
                "trace_as_metadata": true,
                "options": [
                  "text-embedding-3-small",
                  "text-embedding-3-large",
                  "text-embedding-ada-002"
                ],
                "combobox": false,
                "required": false,
                "placeholder": "",
                "show": true,
                "name": "model",
                "value": "text-embedding-3-small",
                "display_name": "Model",
                "advanced": true,
                "dynamic": false,
                "info": "",
                "title_case": false,
                "type": "str",
                "_input_type": "DropdownInput",
                "proxy": {
                  "id": "OpenAIEmbeddings-UfXHC",
                  "field": "model"
                }
              },
              "model_kwargs_OpenAIEmbeddings-UfXHC": {
                "trace_as_input": true,
                "list": false,
                "required": false,
                "placeholder": "",
                "show": true,
                "name": "model_kwargs",
                "value": {},
                "display_name": "Model Kwargs",
                "advanced": true,
                "dynamic": false,
                "info": "",
                "title_case": false,
                "type": "dict",
                "_input_type": "DictInput",
                "proxy": {
                  "id": "OpenAIEmbeddings-UfXHC",
                  "field": "model_kwargs"
                }
              },
              "openai_api_base_OpenAIEmbeddings-UfXHC": {
                "load_from_db": false,
                "required": false,
                "placeholder": "",
                "show": true,
                "name": "openai_api_base",
                "value": "",
                "display_name": "OpenAI API Base",
                "advanced": true,
                "input_types": [
                  "Message"
                ],
                "dynamic": false,
                "info": "",
                "title_case": false,
                "password": true,
                "type": "str",
                "_input_type": "SecretStrInput",
                "proxy": {
                  "id": "OpenAIEmbeddings-UfXHC",
                  "field": "openai_api_base"
                }
              },
              "openai_api_key_OpenAIEmbeddings-UfXHC": {
                "load_from_db": true,
                "required": false,
                "placeholder": "",
                "show": true,
                "name": "openai_api_key",
                "value": "",
                "display_name": "OpenAI API Key",
                "advanced": true,
                "input_types": [
                  "Message"
                ],
                "dynamic": false,
                "info": "",
                "title_case": false,
                "password": true,
                "type": "str",
                "_input_type": "SecretStrInput",
                "proxy": {
                  "id": "OpenAIEmbeddings-UfXHC",
                  "field": "openai_api_key"
                }
              },
              "openai_api_type_OpenAIEmbeddings-UfXHC": {
                "load_from_db": false,
                "required": false,
                "placeholder": "",
                "show": true,
                "name": "openai_api_type",
                "value": "",
                "display_name": "OpenAI API Type",
                "advanced": true,
                "input_types": [
                  "Message"
                ],
                "dynamic": false,
                "info": "",
                "title_case": false,
                "password": true,
                "type": "str",
                "_input_type": "SecretStrInput",
                "proxy": {
                  "id": "OpenAIEmbeddings-UfXHC",
                  "field": "openai_api_type"
                }
              },
              "openai_api_version_OpenAIEmbeddings-UfXHC": {
                "trace_as_input": true,
                "trace_as_metadata": true,
                "load_from_db": false,
                "list": false,
                "required": false,
                "placeholder": "",
                "show": true,
                "name": "openai_api_version",
                "value": "",
                "display_name": "OpenAI API Version",
                "advanced": true,
                "input_types": [
                  "Message"
                ],
                "dynamic": false,
                "info": "",
                "title_case": false,
                "type": "str",
                "_input_type": "MessageTextInput",
                "proxy": {
                  "id": "OpenAIEmbeddings-UfXHC",
                  "field": "openai_api_version"
                }
              },
              "openai_organization_OpenAIEmbeddings-UfXHC": {
                "trace_as_input": true,
                "trace_as_metadata": true,
                "load_from_db": false,
                "list": false,
                "required": false,
                "placeholder": "",
                "show": true,
                "name": "openai_organization",
                "value": "",
                "display_name": "OpenAI Organization",
                "advanced": true,
                "input_types": [
                  "Message"
                ],
                "dynamic": false,
                "info": "",
                "title_case": false,
                "type": "str",
                "_input_type": "MessageTextInput",
                "proxy": {
                  "id": "OpenAIEmbeddings-UfXHC",
                  "field": "openai_organization"
                }
              },
              "openai_proxy_OpenAIEmbeddings-UfXHC": {
                "trace_as_input": true,
                "trace_as_metadata": true,
                "load_from_db": false,
                "list": false,
                "required": false,
                "placeholder": "",
                "show": true,
                "name": "openai_proxy",
                "value": "",
                "display_name": "OpenAI Proxy",
                "advanced": true,
                "input_types": [
                  "Message"
                ],
                "dynamic": false,
                "info": "",
                "title_case": false,
                "type": "str",
                "_input_type": "MessageTextInput",
                "proxy": {
                  "id": "OpenAIEmbeddings-UfXHC",
                  "field": "openai_proxy"
                }
              },
              "request_timeout_OpenAIEmbeddings-UfXHC": {
                "trace_as_metadata": true,
                "list": false,
                "required": false,
                "placeholder": "",
                "show": true,
                "name": "request_timeout",
                "value": "",
                "display_name": "Request Timeout",
                "advanced": true,
                "dynamic": false,
                "info": "",
                "title_case": false,
                "type": "float",
                "_input_type": "FloatInput",
                "proxy": {
                  "id": "OpenAIEmbeddings-UfXHC",
                  "field": "request_timeout"
                }
              },
              "show_progress_bar_OpenAIEmbeddings-UfXHC": {
                "trace_as_metadata": true,
                "list": false,
                "required": false,
                "placeholder": "",
                "show": true,
                "name": "show_progress_bar",
                "value": false,
                "display_name": "Show Progress Bar",
                "advanced": true,
                "dynamic": false,
                "info": "",
                "title_case": false,
                "type": "bool",
                "_input_type": "BoolInput",
                "proxy": {
                  "id": "OpenAIEmbeddings-UfXHC",
                  "field": "show_progress_bar"
                }
              },
              "skip_empty_OpenAIEmbeddings-UfXHC": {
                "trace_as_metadata": true,
                "list": false,
                "required": false,
                "placeholder": "",
                "show": true,
                "name": "skip_empty",
                "value": false,
                "display_name": "Skip Empty",
                "advanced": true,
                "dynamic": false,
                "info": "",
                "title_case": false,
                "type": "bool",
                "_input_type": "BoolInput",
                "proxy": {
                  "id": "OpenAIEmbeddings-UfXHC",
                  "field": "skip_empty"
                }
              },
              "tiktoken_enable_OpenAIEmbeddings-UfXHC": {
                "trace_as_metadata": true,
                "list": false,
                "required": false,
                "placeholder": "",
                "show": true,
                "name": "tiktoken_enable",
                "value": true,
                "display_name": "TikToken Enable",
                "advanced": true,
                "dynamic": false,
                "info": "If False, you must have transformers installed.",
                "title_case": false,
                "type": "bool",
                "_input_type": "BoolInput",
                "proxy": {
                  "id": "OpenAIEmbeddings-UfXHC",
                  "field": "tiktoken_enable"
                }
              },
              "tiktoken_model_name_OpenAIEmbeddings-UfXHC": {
                "trace_as_input": true,
                "trace_as_metadata": true,
                "load_from_db": false,
                "list": false,
                "required": false,
                "placeholder": "",
                "show": true,
                "name": "tiktoken_model_name",
                "value": "",
                "display_name": "TikToken Model Name",
                "advanced": true,
                "input_types": [
                  "Message"
                ],
                "dynamic": false,
                "info": "",
                "title_case": false,
                "type": "str",
                "_input_type": "MessageTextInput",
                "proxy": {
                  "id": "OpenAIEmbeddings-UfXHC",
                  "field": "tiktoken_model_name"
                }
              },
              "code_ParseData-kl9yv": {
                "type": "code",
                "required": true,
                "placeholder": "",
                "list": false,
                "show": true,
                "multiline": true,
                "value": "from axiestudio.custom import Component\nfrom axiestudio.helpers.data import data_to_text\nfrom axiestudio.io import DataInput, MultilineInput, Output, StrInput\nfrom axiestudio.schema.message import Message\n\n\nclass ParseDataComponent(Component):\n    display_name = \"Parse Data\"\n    description = \"Convert Data into plain text following a specified template.\"\n    icon = \"braces\"\n    name = \"ParseData\"\n\n    inputs = [\n        DataInput(name=\"data\", display_name=\"Data\", info=\"The data to convert to text.\"),\n        MultilineInput(\n            name=\"template\",\n            display_name=\"Template\",\n            info=\"The template to use for formatting the data. \"\n            \"It can contain the keys {text}, {data} or any other key in the Data.\",\n            value=\"{text}\",\n        ),\n        StrInput(name=\"sep\", display_name=\"Separator\", advanced=True, value=\"\\n\"),\n    ]\n\n    outputs = [\n        Output(display_name=\"Text\", name=\"text\", method=\"parse_data\"),\n    ]\n\n    def parse_data(self) -> Message:\n        data = self.data if isinstance(self.data, list) else [self.data]\n        template = self.template\n\n        result_string = data_to_text(template, data, sep=self.sep)\n        self.status = result_string\n        return Message(text=result_string)\n",
                "fileTypes": [],
                "file_path": "",
                "password": false,
                "name": "code",
                "advanced": true,
                "dynamic": true,
                "info": "",
                "load_from_db": false,
                "title_case": false,
                "display_name": "code",
                "proxy": {
                  "id": "ParseData-kl9yv",
                  "field": "code"
                }
              },
              "sep_ParseData-kl9yv": {
                "trace_as_metadata": true,
                "load_from_db": false,
                "list": false,
                "required": false,
                "placeholder": "",
                "show": true,
                "name": "sep",
                "value": "\n",
                "display_name": "Separator",
                "advanced": true,
                "dynamic": false,
                "info": "",
                "title_case": false,
                "type": "str",
                "_input_type": "StrInput",
                "proxy": {
                  "id": "ParseData-kl9yv",
                  "field": "sep"
                }
              },
              "template_ParseData-kl9yv": {
                "trace_as_input": true,
                "multiline": true,
                "trace_as_metadata": true,
                "load_from_db": false,
                "list": false,
                "required": false,
                "placeholder": "",
                "show": true,
                "name": "template",
                "value": "<workshop_manual_chunk>\n{text}\n</workshop_manual_chunk>",
                "display_name": "Template",
                "advanced": true,
                "input_types": [
                  "Message"
                ],
                "dynamic": false,
                "info": "The template to use for formatting the data. It can contain the keys {text}, {data} or any other key in the Data.",
                "title_case": false,
                "type": "str",
                "_input_type": "MultilineInput",
                "proxy": {
                  "id": "ParseData-kl9yv",
                  "field": "template"
                }
              },
              "code_Prompt-uvWe5": {
                "type": "code",
                "required": true,
                "placeholder": "",
                "list": false,
                "show": true,
                "multiline": true,
                "value": "from axiestudio.base.prompts.api_utils import process_prompt_template\nfrom axiestudio.custom import Component\nfrom axiestudio.inputs.inputs import DefaultPromptField\nfrom axiestudio.io import Output, PromptInput\nfrom axiestudio.schema.message import Message\nfrom axiestudio.template.utils import update_template_values\n\n\nclass PromptComponent(Component):\n    display_name: str = \"Prompt\"\n    description: str = \"Create a prompt template with dynamic variables.\"\n    icon = \"prompts\"\n    trace_type = \"prompt\"\n    name = \"Prompt\"\n\n    inputs = [\n        PromptInput(name=\"template\", display_name=\"Template\"),\n    ]\n\n    outputs = [\n        Output(display_name=\"Prompt Message\", name=\"prompt\", method=\"build_prompt\"),\n    ]\n\n    async def build_prompt(\n        self,\n    ) -> Message:\n        prompt = await Message.from_template_and_variables(**self._attributes)\n        self.status = prompt.text\n        return prompt\n\n    def _update_template(self, frontend_node: dict):\n        prompt_template = frontend_node[\"template\"][\"template\"][\"value\"]\n        custom_fields = frontend_node[\"custom_fields\"]\n        frontend_node_template = frontend_node[\"template\"]\n        _ = process_prompt_template(\n            template=prompt_template,\n            name=\"template\",\n            custom_fields=custom_fields,\n            frontend_node_template=frontend_node_template,\n        )\n        return frontend_node\n\n    def post_code_processing(self, new_frontend_node: dict, current_frontend_node: dict):\n        \"\"\"\n        This function is called after the code validation is done.\n        \"\"\"\n        frontend_node = super().post_code_processing(new_frontend_node, current_frontend_node)\n        template = frontend_node[\"template\"][\"template\"][\"value\"]\n        # Kept it duplicated for backwards compatibility\n        _ = process_prompt_template(\n            template=template,\n            name=\"template\",\n            custom_fields=frontend_node[\"custom_fields\"],\n            frontend_node_template=frontend_node[\"template\"],\n        )\n        # Now that template is updated, we need to grab any values that were set in the current_frontend_node\n        # and update the frontend_node with those values\n        update_template_values(new_template=frontend_node, previous_template=current_frontend_node[\"template\"])\n        return frontend_node\n\n    def _get_fallback_input(self, **kwargs):\n        return DefaultPromptField(**kwargs)\n",
                "fileTypes": [],
                "file_path": "",
                "password": false,
                "name": "code",
                "advanced": true,
                "dynamic": true,
                "info": "",
                "load_from_db": false,
                "title_case": false,
                "display_name": "code",
                "proxy": {
                  "id": "Prompt-uvWe5",
                  "field": "code"
                }
              },
              "template_Prompt-uvWe5": {
                "trace_as_input": true,
                "list": false,
                "required": false,
                "placeholder": "",
                "show": true,
                "name": "template",
                "value": "{TMC}",
                "display_name": "Template",
                "advanced": true,
                "dynamic": false,
                "info": "",
                "title_case": false,
                "type": "prompt",
                "_input_type": "PromptInput",
                "proxy": {
                  "id": "Prompt-uvWe5",
                  "field": "template"
                }
              },
              "TMC_Prompt-uvWe5": {
                "field_type": "str",
                "required": false,
                "placeholder": "",
                "list": false,
                "show": true,
                "multiline": true,
                "value": "",
                "fileTypes": [],
                "file_path": "",
                "name": "TMC",
                "display_name": "TMC",
                "advanced": false,
                "input_types": [
                  "Message",
                  "Text"
                ],
                "dynamic": false,
                "info": "",
                "load_from_db": false,
                "title_case": false,
                "type": "str",
                "proxy": {
                  "id": "Prompt-uvWe5",
                  "field": "TMC"
                }
              }
            },
            "flow": {
              "data": {
                "nodes": [
                  {
                    "id": "Chroma-3LJPk",
                    "type": "genericNode",
                    "position": {
                      "x": -2141.44988672774,
                      "y": -940.3844078990951
                    },
                    "data": {
                      "type": "Chroma",
                      "node": {
                        "template": {
                          "_type": "Component",
                          "embedding": {
                            "trace_as_metadata": true,
                            "list": false,
                            "required": false,
                            "placeholder": "",
                            "show": true,
                            "name": "embedding",
                            "value": "",
                            "display_name": "Embedding",
                            "advanced": false,
                            "input_types": [
                              "Embeddings"
                            ],
                            "dynamic": false,
                            "info": "",
                            "title_case": false,
                            "type": "other",
                            "_input_type": "HandleInput"
                          },
                          "ingest_data": {
                            "trace_as_metadata": true,
                            "list": true,
                            "trace_as_input": true,
                            "required": false,
                            "placeholder": "",
                            "show": true,
                            "name": "ingest_data",
                            "value": "",
                            "display_name": "Ingest Data",
                            "advanced": false,
                            "input_types": [
                              "Data"
                            ],
                            "dynamic": false,
                            "info": "",
                            "title_case": false,
                            "type": "other",
                            "_input_type": "DataInput"
                          },
                          "allow_duplicates": {
                            "trace_as_metadata": true,
                            "list": false,
                            "required": false,
                            "placeholder": "",
                            "show": true,
                            "name": "allow_duplicates",
                            "value": false,
                            "display_name": "Allow Duplicates",
                            "advanced": true,
                            "dynamic": false,
                            "info": "If false, will not add documents that are already in the Vector Store.",
                            "title_case": false,
                            "type": "bool",
                            "_input_type": "BoolInput"
                          },
                          "chroma_server_cors_allow_origins": {
                            "trace_as_metadata": true,
                            "load_from_db": false,
                            "list": false,
                            "required": false,
                            "placeholder": "",
                            "show": true,
                            "name": "chroma_server_cors_allow_origins",
                            "value": "",
                            "display_name": "Server CORS Allow Origins",
                            "advanced": true,
                            "dynamic": false,
                            "info": "",
                            "title_case": false,
                            "type": "str",
                            "_input_type": "StrInput"
                          },
                          "chroma_server_grpc_port": {
                            "trace_as_metadata": true,
                            "list": false,
                            "required": false,
                            "placeholder": "",
                            "show": true,
                            "name": "chroma_server_grpc_port",
                            "value": "",
                            "display_name": "Server gRPC Port",
                            "advanced": true,
                            "dynamic": false,
                            "info": "",
                            "title_case": false,
                            "type": "int",
                            "_input_type": "IntInput"
                          },
                          "chroma_server_host": {
                            "trace_as_metadata": true,
                            "load_from_db": false,
                            "list": false,
                            "required": false,
                            "placeholder": "",
                            "show": true,
                            "name": "chroma_server_host",
                            "value": "",
                            "display_name": "Server Host",
                            "advanced": true,
                            "dynamic": false,
                            "info": "",
                            "title_case": false,
                            "type": "str",
                            "_input_type": "StrInput"
                          },
                          "chroma_server_http_port": {
                            "trace_as_metadata": true,
                            "list": false,
                            "required": false,
                            "placeholder": "",
                            "show": true,
                            "name": "chroma_server_http_port",
                            "value": "",
                            "display_name": "Server HTTP Port",
                            "advanced": true,
                            "dynamic": false,
                            "info": "",
                            "title_case": false,
                            "type": "int",
                            "_input_type": "IntInput"
                          },
                          "chroma_server_ssl_enabled": {
                            "trace_as_metadata": true,
                            "list": false,
                            "required": false,
                            "placeholder": "",
                            "show": true,
                            "name": "chroma_server_ssl_enabled",
                            "value": false,
                            "display_name": "Server SSL Enabled",
                            "advanced": true,
                            "dynamic": false,
                            "info": "",
                            "title_case": false,
                            "type": "bool",
                            "_input_type": "BoolInput"
                          },
                          "code": {
                            "type": "code",
                            "required": true,
                            "placeholder": "",
                            "list": false,
                            "show": true,
                            "multiline": true,
                            "value": "from copy import deepcopy\nfrom typing import TYPE_CHECKING\n\nfrom chromadb.config import Settings\nfrom langchain_chroma.vectorstores import Chroma\nfrom loguru import logger\n\nfrom axiestudio.base.vectorstores.model import LCVectorStoreComponent, check_cached_vector_store\nfrom axiestudio.base.vectorstores.utils import chroma_collection_to_data\nfrom axiestudio.io import BoolInput, DataInput, DropdownInput, HandleInput, IntInput, StrInput, MultilineInput\nfrom axiestudio.schema import Data\n\nif TYPE_CHECKING:\n    from langchain_chroma import Chroma\n\n\nclass ChromaVectorStoreComponent(LCVectorStoreComponent):\n    \"\"\"\n    Chroma Vector Store with search capabilities\n    \"\"\"\n\n    display_name: str = \"Chroma DB\"\n    description: str = \"Chroma Vector Store with search capabilities\"\n    documentation = \"https://python.langchain.com/docs/integrations/vectorstores/chroma\"\n    name = \"Chroma\"\n    icon = \"Chroma\"\n\n    inputs = [\n        MessageTextInput(\n            name=\"collection_name\",\n            display_name=\"Collection Name\",\n        ),\n        StrInput(\n            name=\"persist_directory\",\n            display_name=\"Persist Directory\",\n        ),\n        MultilineInput(\n            name=\"search_query\",\n            display_name=\"Search Query\",\n        ),\n        DataInput(\n            name=\"ingest_data\",\n            display_name=\"Ingest Data\",\n            is_list=True,\n        ),\n        HandleInput(name=\"embedding\", display_name=\"Embedding\", input_types=[\"Embeddings\"]),\n        StrInput(\n            name=\"chroma_server_cors_allow_origins\",\n            display_name=\"Server CORS Allow Origins\",\n            advanced=True,\n        ),\n        StrInput(\n            name=\"chroma_server_host\",\n            display_name=\"Server Host\",\n            advanced=True,\n        ),\n        IntInput(\n            name=\"chroma_server_http_port\",\n            display_name=\"Server HTTP Port\",\n            advanced=True,\n        ),\n        IntInput(\n            name=\"chroma_server_grpc_port\",\n            display_name=\"Server gRPC Port\",\n            advanced=True,\n        ),\n        BoolInput(\n            name=\"chroma_server_ssl_enabled\",\n            display_name=\"Server SSL Enabled\",\n            advanced=True,\n        ),\n        BoolInput(\n            name=\"allow_duplicates\",\n            display_name=\"Allow Duplicates\",\n            advanced=True,\n            info=\"If false, will not add documents that are already in the Vector Store.\",\n        ),\n        DropdownInput(\n            name=\"search_type\",\n            display_name=\"Search Type\",\n            options=[\"Similarity\", \"MMR\"],\n            value=\"Similarity\",\n            advanced=True,\n        ),\n        IntInput(\n            name=\"number_of_results\",\n            display_name=\"Number of Results\",\n            info=\"Number of results to return.\",\n            advanced=True,\n            value=5,\n        ),\n        IntInput(\n            name=\"limit\",\n            display_name=\"Limit\",\n            advanced=True,\n            info=\"Limit the number of records to compare when Allow Duplicates is False.\",\n        ),\n    ]\n\n    @check_cached_vector_store\n    def build_vector_store(self) -> Chroma:\n        \"\"\"\n        Builds the Chroma object.\n        \"\"\"\n        try:\n            from chromadb import Client\n            from langchain_chroma import Chroma\n        except ImportError:\n            raise ImportError(\n                \"Could not import Chroma integration package. \" \"Please install it with `pip install langchain-chroma`.\"\n            )\n        # Chroma settings\n        chroma_settings = None\n        client = None\n        if self.chroma_server_host:\n            chroma_settings = Settings(\n                chroma_server_cors_allow_origins=self.chroma_server_cors_allow_origins or [],\n                chroma_server_host=self.chroma_server_host,\n                chroma_server_http_port=self.chroma_server_http_port or None,\n                chroma_server_grpc_port=self.chroma_server_grpc_port or None,\n                chroma_server_ssl_enabled=self.chroma_server_ssl_enabled,\n            )\n            client = Client(settings=chroma_settings)\n\n        # Check persist_directory and expand it if it is a relative path\n        if self.persist_directory is not None:\n            persist_directory = self.resolve_path(self.persist_directory)\n        else:\n            persist_directory = None\n\n        chroma = Chroma(\n            persist_directory=persist_directory,\n            client=client,\n            embedding_function=self.embedding,\n            collection_name=self.collection_name,\n        )\n\n        self._add_documents_to_vector_store(chroma)\n        self.status = chroma_collection_to_data(chroma.get(limit=self.limit))\n        return chroma\n\n    def _add_documents_to_vector_store(self, vector_store: \"Chroma\") -> None:\n        \"\"\"\n        Adds documents to the Vector Store.\n        \"\"\"\n        if not self.ingest_data:\n            self.status = \"\"\n            return\n\n        _stored_documents_without_id = []\n        if self.allow_duplicates:\n            stored_data = []\n        else:\n            stored_data = chroma_collection_to_data(vector_store.get(limit=self.limit))\n            for value in deepcopy(stored_data):\n                del value.id\n                _stored_documents_without_id.append(value)\n\n        documents = []\n        for _input in self.ingest_data or []:\n            if isinstance(_input, Data):\n                if _input not in _stored_documents_without_id:\n                    documents.append(_input.to_lc_document())\n            else:\n                raise ValueError(\"Vector Store Inputs must be Data objects.\")\n\n        if documents and self.embedding is not None:\n            logger.debug(f\"Adding {len(documents)} documents to the Vector Store.\")\n            vector_store.add_documents(documents)\n        else:\n            logger.debug(\"No documents to add to the Vector Store.\")",
                            "fileTypes": [],
                            "file_path": "",
                            "password": false,
                            "name": "code",
                            "advanced": true,
                            "dynamic": true,
                            "info": "",
                            "load_from_db": false,
                            "title_case": false,
                            "display_name": "code"
                          },
                          "collection_name": {
                            "trace_as_input": true,
                            "trace_as_metadata": true,
                            "load_from_db": false,
                            "list": false,
                            "required": false,
                            "placeholder": "",
                            "show": true,
                            "name": "collection_name",
                            "value": "",
                            "display_name": "Collection Name",
                            "advanced": false,
                            "input_types": [
                              "Message"
                            ],
                            "dynamic": false,
                            "info": "",
                            "title_case": false,
                            "type": "str",
                            "_input_type": "MessageTextInput"
                          },
                          "limit": {
                            "trace_as_metadata": true,
                            "list": false,
                            "required": false,
                            "placeholder": "",
                            "show": true,
                            "name": "limit",
                            "value": "",
                            "display_name": "Limit",
                            "advanced": true,
                            "dynamic": false,
                            "info": "Limit the number of records to compare when Allow Duplicates is False.",
                            "title_case": false,
                            "type": "int",
                            "_input_type": "IntInput"
                          },
                          "number_of_results": {
                            "trace_as_metadata": true,
                            "list": false,
                            "required": false,
                            "placeholder": "",
                            "show": true,
                            "name": "number_of_results",
                            "value": 5,
                            "display_name": "Number of Results",
                            "advanced": true,
                            "dynamic": false,
                            "info": "Number of results to return.",
                            "title_case": false,
                            "type": "int",
                            "_input_type": "IntInput"
                          },
                          "persist_directory": {
                            "trace_as_metadata": true,
                            "load_from_db": false,
                            "list": false,
                            "required": false,
                            "placeholder": "",
                            "show": true,
                            "name": "persist_directory",
                            "value": "",
                            "display_name": "Persist Directory",
                            "advanced": false,
                            "dynamic": false,
                            "info": "",
                            "title_case": false,
                            "type": "str",
                            "_input_type": "StrInput"
                          },
                          "search_query": {
                            "trace_as_input": true,
                            "multiline": true,
                            "trace_as_metadata": true,
                            "load_from_db": false,
                            "list": false,
                            "required": false,
                            "placeholder": "",
                            "show": true,
                            "name": "search_query",
                            "value": "",
                            "display_name": "Search Query",
                            "advanced": false,
                            "input_types": [
                              "Message"
                            ],
                            "dynamic": false,
                            "info": "",
                            "title_case": false,
                            "type": "str",
                            "_input_type": "MultilineInput"
                          },
                          "search_type": {
                            "trace_as_metadata": true,
                            "options": [
                              "Similarity",
                              "MMR"
                            ],
                            "combobox": false,
                            "required": false,
                            "placeholder": "",
                            "show": true,
                            "name": "search_type",
                            "value": "Similarity",
                            "display_name": "Search Type",
                            "advanced": true,
                            "dynamic": false,
                            "info": "",
                            "title_case": false,
                            "type": "str",
                            "_input_type": "DropdownInput"
                          }
                        },
                        "description": "Chroma Vector Store with search capabilities",
                        "icon": "Chroma",
                        "base_classes": [
                          "Data",
                          "Retriever",
                          "VectorStore"
                        ],
                        "display_name": "Chroma DB",
                        "documentation": "https://python.langchain.com/docs/integrations/vectorstores/chroma",
                        "custom_fields": {},
                        "output_types": [],
                        "pinned": false,
                        "conditional_paths": [],
                        "frozen": false,
                        "outputs": [
                          {
                            "types": [
                              "Retriever"
                            ],
                            "selected": "Retriever",
                            "name": "base_retriever",
                            "display_name": "Retriever",
                            "method": "build_base_retriever",
                            "value": "__UNDEFINED__",
                            "cache": true,
                            "required_inputs": []
                          },
                          {
                            "types": [
                              "Data"
                            ],
                            "selected": "Data",
                            "name": "search_results",
                            "display_name": "Search Results",
                            "method": "search_documents",
                            "value": "__UNDEFINED__",
                            "cache": true,
                            "required_inputs": [
                              "number_of_results",
                              "search_query",
                              "search_type"
                            ]
                          },
                          {
                            "types": [
                              "VectorStore"
                            ],
                            "selected": "VectorStore",
                            "name": "vector_store",
                            "display_name": "Vector Store",
                            "method": "cast_vector_store",
                            "value": "__UNDEFINED__",
                            "cache": true,
                            "required_inputs": []
                          }
                        ],
                        "field_order": [
                          "collection_name",
                          "persist_directory",
                          "search_query",
                          "ingest_data",
                          "embedding",
                          "chroma_server_cors_allow_origins",
                          "chroma_server_host",
                          "chroma_server_http_port",
                          "chroma_server_grpc_port",
                          "chroma_server_ssl_enabled",
                          "allow_duplicates",
                          "search_type",
                          "number_of_results",
                          "limit"
                        ],
                        "beta": false,
                        "edited": true,
                        "metadata": {}
                      },
                      "id": "Chroma-3LJPk"
                    },
                    "selected": true,
                    "width": 384,
                    "height": 637,
                    "positionAbsolute": {
                      "x": -2141.44988672774,
                      "y": -940.3844078990951
                    },
                    "dragging": false
                  },
                  {
                    "id": "OpenAIEmbeddings-UfXHC",
                    "type": "genericNode",
                    "position": {
                      "x": -2541.977848768341,
                      "y": -540.3505618955141
                    },
                    "data": {
                      "type": "OpenAIEmbeddings",
                      "node": {
                        "template": {
                          "_type": "Component",
                          "chunk_size": {
                            "trace_as_metadata": true,
                            "list": false,
                            "required": false,
                            "placeholder": "",
                            "show": true,
                            "name": "chunk_size",
                            "value": 1000,
                            "display_name": "Chunk Size",
                            "advanced": true,
                            "dynamic": false,
                            "info": "",
                            "title_case": false,
                            "type": "int",
                            "_input_type": "IntInput"
                          },
                          "client": {
                            "trace_as_input": true,
                            "trace_as_metadata": true,
                            "load_from_db": false,
                            "list": false,
                            "required": false,
                            "placeholder": "",
                            "show": true,
                            "name": "client",
                            "value": "",
                            "display_name": "Client",
                            "advanced": true,
                            "input_types": [
                              "Message"
                            ],
                            "dynamic": false,
                            "info": "",
                            "title_case": false,
                            "type": "str",
                            "_input_type": "MessageTextInput"
                          },
                          "code": {
                            "type": "code",
                            "required": true,
                            "placeholder": "",
                            "list": false,
                            "show": true,
                            "multiline": true,
                            "value": "from langchain_openai.embeddings.base import OpenAIEmbeddings\n\nfrom axiestudio.base.embeddings.model import LCEmbeddingsModel\nfrom axiestudio.base.models.openai_constants import OPENAI_EMBEDDING_MODEL_NAMES\nfrom axiestudio.field_typing import Embeddings\nfrom axiestudio.io import BoolInput, DictInput, DropdownInput, FloatInput, IntInput, MessageTextInput, SecretStrInput\n\n\nclass OpenAIEmbeddingsComponent(LCEmbeddingsModel):\n    display_name = \"OpenAI Embeddings\"\n    description = \"Generate embeddings using OpenAI models.\"\n    icon = \"OpenAI\"\n    name = \"OpenAIEmbeddings\"\n\n    inputs = [\n        DictInput(\n            name=\"default_headers\",\n            display_name=\"Default Headers\",\n            advanced=True,\n            info=\"Default headers to use for the API request.\",\n        ),\n        DictInput(\n            name=\"default_query\",\n            display_name=\"Default Query\",\n            advanced=True,\n            info=\"Default query parameters to use for the API request.\",\n        ),\n        IntInput(name=\"chunk_size\", display_name=\"Chunk Size\", advanced=True, value=1000),\n        MessageTextInput(name=\"client\", display_name=\"Client\", advanced=True),\n        MessageTextInput(name=\"deployment\", display_name=\"Deployment\", advanced=True),\n        IntInput(name=\"embedding_ctx_length\", display_name=\"Embedding Context Length\", advanced=True, value=1536),\n        IntInput(name=\"max_retries\", display_name=\"Max Retries\", value=3, advanced=True),\n        DropdownInput(\n            name=\"model\",\n            display_name=\"Model\",\n            advanced=False,\n            options=OPENAI_EMBEDDING_MODEL_NAMES,\n            value=\"text-embedding-3-small\",\n        ),\n        DictInput(name=\"model_kwargs\", display_name=\"Model Kwargs\", advanced=True),\n        SecretStrInput(name=\"openai_api_base\", display_name=\"OpenAI API Base\", advanced=True),\n        SecretStrInput(name=\"openai_api_key\", display_name=\"OpenAI API Key\", value=\"OPENAI_API_KEY\"),\n        SecretStrInput(name=\"openai_api_type\", display_name=\"OpenAI API Type\", advanced=True),\n        MessageTextInput(name=\"openai_api_version\", display_name=\"OpenAI API Version\", advanced=True),\n        MessageTextInput(\n            name=\"openai_organization\",\n            display_name=\"OpenAI Organization\",\n            advanced=True,\n        ),\n        MessageTextInput(name=\"openai_proxy\", display_name=\"OpenAI Proxy\", advanced=True),\n        FloatInput(name=\"request_timeout\", display_name=\"Request Timeout\", advanced=True),\n        BoolInput(name=\"show_progress_bar\", display_name=\"Show Progress Bar\", advanced=True),\n        BoolInput(name=\"skip_empty\", display_name=\"Skip Empty\", advanced=True),\n        MessageTextInput(\n            name=\"tiktoken_model_name\",\n            display_name=\"TikToken Model Name\",\n            advanced=True,\n        ),\n        BoolInput(\n            name=\"tiktoken_enable\",\n            display_name=\"TikToken Enable\",\n            advanced=True,\n            value=True,\n            info=\"If False, you must have transformers installed.\",\n        ),\n        IntInput(\n            name=\"dimensions\",\n            display_name=\"Dimensions\",\n            info=\"The number of dimensions the resulting output embeddings should have. \"\n            \"Only supported by certain models.\",\n            advanced=True,\n        ),\n    ]\n\n    def build_embeddings(self) -> Embeddings:\n        return OpenAIEmbeddings(\n            tiktoken_enabled=self.tiktoken_enable,\n            default_headers=self.default_headers,\n            default_query=self.default_query,\n            allowed_special=\"all\",\n            disallowed_special=\"all\",\n            chunk_size=self.chunk_size,\n            deployment=self.deployment,\n            embedding_ctx_length=self.embedding_ctx_length,\n            max_retries=self.max_retries,\n            model=self.model,\n            model_kwargs=self.model_kwargs,\n            base_url=self.openai_api_base,\n            api_key=self.openai_api_key,\n            openai_api_type=self.openai_api_type,\n            api_version=self.openai_api_version,\n            organization=self.openai_organization,\n            openai_proxy=self.openai_proxy,\n            timeout=self.request_timeout or None,\n            show_progress_bar=self.show_progress_bar,\n            skip_empty=self.skip_empty,\n            tiktoken_model_name=self.tiktoken_model_name,\n            dimensions=self.dimensions or None,\n        )\n",
                            "fileTypes": [],
                            "file_path": "",
                            "password": false,
                            "name": "code",
                            "advanced": true,
                            "dynamic": true,
                            "info": "",
                            "load_from_db": false,
                            "title_case": false,
                            "display_name": "code"
                          },
                          "default_headers": {
                            "trace_as_input": true,
                            "list": false,
                            "required": false,
                            "placeholder": "",
                            "show": true,
                            "name": "default_headers",
                            "value": {},
                            "display_name": "Default Headers",
                            "advanced": true,
                            "dynamic": false,
                            "info": "Default headers to use for the API request.",
                            "title_case": false,
                            "type": "dict",
                            "_input_type": "DictInput"
                          },
                          "default_query": {
                            "trace_as_input": true,
                            "list": false,
                            "required": false,
                            "placeholder": "",
                            "show": true,
                            "name": "default_query",
                            "value": {},
                            "display_name": "Default Query",
                            "advanced": true,
                            "dynamic": false,
                            "info": "Default query parameters to use for the API request.",
                            "title_case": false,
                            "type": "dict",
                            "_input_type": "DictInput"
                          },
                          "deployment": {
                            "trace_as_input": true,
                            "trace_as_metadata": true,
                            "load_from_db": false,
                            "list": false,
                            "required": false,
                            "placeholder": "",
                            "show": true,
                            "name": "deployment",
                            "value": "",
                            "display_name": "Deployment",
                            "advanced": true,
                            "input_types": [
                              "Message"
                            ],
                            "dynamic": false,
                            "info": "",
                            "title_case": false,
                            "type": "str",
                            "_input_type": "MessageTextInput"
                          },
                          "dimensions": {
                            "trace_as_metadata": true,
                            "list": false,
                            "required": false,
                            "placeholder": "",
                            "show": true,
                            "name": "dimensions",
                            "value": "",
                            "display_name": "Dimensions",
                            "advanced": true,
                            "dynamic": false,
                            "info": "The number of dimensions the resulting output embeddings should have. Only supported by certain models.",
                            "title_case": false,
                            "type": "int",
                            "_input_type": "IntInput"
                          },
                          "embedding_ctx_length": {
                            "trace_as_metadata": true,
                            "list": false,
                            "required": false,
                            "placeholder": "",
                            "show": true,
                            "name": "embedding_ctx_length",
                            "value": 1536,
                            "display_name": "Embedding Context Length",
                            "advanced": true,
                            "dynamic": false,
                            "info": "",
                            "title_case": false,
                            "type": "int",
                            "_input_type": "IntInput"
                          },
                          "max_retries": {
                            "trace_as_metadata": true,
                            "list": false,
                            "required": false,
                            "placeholder": "",
                            "show": true,
                            "name": "max_retries",
                            "value": 3,
                            "display_name": "Max Retries",
                            "advanced": true,
                            "dynamic": false,
                            "info": "",
                            "title_case": false,
                            "type": "int",
                            "_input_type": "IntInput"
                          },
                          "model": {
                            "trace_as_metadata": true,
                            "options": [
                              "text-embedding-3-small",
                              "text-embedding-3-large",
                              "text-embedding-ada-002"
                            ],
                            "combobox": false,
                            "required": false,
                            "placeholder": "",
                            "show": true,
                            "name": "model",
                            "value": "text-embedding-3-small",
                            "display_name": "Model",
                            "advanced": false,
                            "dynamic": false,
                            "info": "",
                            "title_case": false,
                            "type": "str",
                            "_input_type": "DropdownInput"
                          },
                          "model_kwargs": {
                            "trace_as_input": true,
                            "list": false,
                            "required": false,
                            "placeholder": "",
                            "show": true,
                            "name": "model_kwargs",
                            "value": {},
                            "display_name": "Model Kwargs",
                            "advanced": true,
                            "dynamic": false,
                            "info": "",
                            "title_case": false,
                            "type": "dict",
                            "_input_type": "DictInput"
                          },
                          "openai_api_base": {
                            "load_from_db": false,
                            "required": false,
                            "placeholder": "",
                            "show": true,
                            "name": "openai_api_base",
                            "value": "",
                            "display_name": "OpenAI API Base",
                            "advanced": true,
                            "input_types": [
                              "Message"
                            ],
                            "dynamic": false,
                            "info": "",
                            "title_case": false,
                            "password": true,
                            "type": "str",
                            "_input_type": "SecretStrInput"
                          },
                          "openai_api_key": {
                            "load_from_db": true,
                            "required": false,
                            "placeholder": "",
                            "show": true,
                            "name": "openai_api_key",
                            "value": "OPENAI_API_KEY",
                            "display_name": "OpenAI API Key",
                            "advanced": false,
                            "input_types": [
                              "Message"
                            ],
                            "dynamic": false,
                            "info": "",
                            "title_case": false,
                            "password": true,
                            "type": "str",
                            "_input_type": "SecretStrInput"
                          },
                          "openai_api_type": {
                            "load_from_db": false,
                            "required": false,
                            "placeholder": "",
                            "show": true,
                            "name": "openai_api_type",
                            "value": "",
                            "display_name": "OpenAI API Type",
                            "advanced": true,
                            "input_types": [
                              "Message"
                            ],
                            "dynamic": false,
                            "info": "",
                            "title_case": false,
                            "password": true,
                            "type": "str",
                            "_input_type": "SecretStrInput"
                          },
                          "openai_api_version": {
                            "trace_as_input": true,
                            "trace_as_metadata": true,
                            "load_from_db": false,
                            "list": false,
                            "required": false,
                            "placeholder": "",
                            "show": true,
                            "name": "openai_api_version",
                            "value": "",
                            "display_name": "OpenAI API Version",
                            "advanced": true,
                            "input_types": [
                              "Message"
                            ],
                            "dynamic": false,
                            "info": "",
                            "title_case": false,
                            "type": "str",
                            "_input_type": "MessageTextInput"
                          },
                          "openai_organization": {
                            "trace_as_input": true,
                            "trace_as_metadata": true,
                            "load_from_db": false,
                            "list": false,
                            "required": false,
                            "placeholder": "",
                            "show": true,
                            "name": "openai_organization",
                            "value": "",
                            "display_name": "OpenAI Organization",
                            "advanced": true,
                            "input_types": [
                              "Message"
                            ],
                            "dynamic": false,
                            "info": "",
                            "title_case": false,
                            "type": "str",
                            "_input_type": "MessageTextInput"
                          },
                          "openai_proxy": {
                            "trace_as_input": true,
                            "trace_as_metadata": true,
                            "load_from_db": false,
                            "list": false,
                            "required": false,
                            "placeholder": "",
                            "show": true,
                            "name": "openai_proxy",
                            "value": "",
                            "display_name": "OpenAI Proxy",
                            "advanced": true,
                            "input_types": [
                              "Message"
                            ],
                            "dynamic": false,
                            "info": "",
                            "title_case": false,
                            "type": "str",
                            "_input_type": "MessageTextInput"
                          },
                          "request_timeout": {
                            "trace_as_metadata": true,
                            "list": false,
                            "required": false,
                            "placeholder": "",
                            "show": true,
                            "name": "request_timeout",
                            "value": "",
                            "display_name": "Request Timeout",
                            "advanced": true,
                            "dynamic": false,
                            "info": "",
                            "title_case": false,
                            "type": "float",
                            "_input_type": "FloatInput"
                          },
                          "show_progress_bar": {
                            "trace_as_metadata": true,
                            "list": false,
                            "required": false,
                            "placeholder": "",
                            "show": true,
                            "name": "show_progress_bar",
                            "value": false,
                            "display_name": "Show Progress Bar",
                            "advanced": true,
                            "dynamic": false,
                            "info": "",
                            "title_case": false,
                            "type": "bool",
                            "_input_type": "BoolInput"
                          },
                          "skip_empty": {
                            "trace_as_metadata": true,
                            "list": false,
                            "required": false,
                            "placeholder": "",
                            "show": true,
                            "name": "skip_empty",
                            "value": false,
                            "display_name": "Skip Empty",
                            "advanced": true,
                            "dynamic": false,
                            "info": "",
                            "title_case": false,
                            "type": "bool",
                            "_input_type": "BoolInput"
                          },
                          "tiktoken_enable": {
                            "trace_as_metadata": true,
                            "list": false,
                            "required": false,
                            "placeholder": "",
                            "show": true,
                            "name": "tiktoken_enable",
                            "value": true,
                            "display_name": "TikToken Enable",
                            "advanced": true,
                            "dynamic": false,
                            "info": "If False, you must have transformers installed.",
                            "title_case": false,
                            "type": "bool",
                            "_input_type": "BoolInput"
                          },
                          "tiktoken_model_name": {
                            "trace_as_input": true,
                            "trace_as_metadata": true,
                            "load_from_db": false,
                            "list": false,
                            "required": false,
                            "placeholder": "",
                            "show": true,
                            "name": "tiktoken_model_name",
                            "value": "",
                            "display_name": "TikToken Model Name",
                            "advanced": true,
                            "input_types": [
                              "Message"
                            ],
                            "dynamic": false,
                            "info": "",
                            "title_case": false,
                            "type": "str",
                            "_input_type": "MessageTextInput"
                          }
                        },
                        "description": "Generate embeddings using OpenAI models.",
                        "icon": "OpenAI",
                        "base_classes": [
                          "Embeddings"
                        ],
                        "display_name": "OpenAI Embeddings",
                        "documentation": "",
                        "custom_fields": {},
                        "output_types": [],
                        "pinned": false,
                        "conditional_paths": [],
                        "frozen": false,
                        "outputs": [
                          {
                            "types": [
                              "Embeddings"
                            ],
                            "selected": "Embeddings",
                            "name": "embeddings",
                            "display_name": "Embeddings",
                            "method": "build_embeddings",
                            "value": "__UNDEFINED__",
                            "cache": true,
                            "required_inputs": [
                              "chunk_size",
                              "default_headers",
                              "default_query",
                              "deployment",
                              "dimensions",
                              "embedding_ctx_length",
                              "max_retries",
                              "model",
                              "model_kwargs",
                              "openai_api_base",
                              "openai_api_key",
                              "openai_api_type",
                              "openai_api_version",
                              "openai_organization",
                              "openai_proxy",
                              "request_timeout",
                              "show_progress_bar",
                              "skip_empty",
                              "tiktoken_enable",
                              "tiktoken_model_name"
                            ]
                          }
                        ],
                        "field_order": [
                          "default_headers",
                          "default_query",
                          "chunk_size",
                          "client",
                          "deployment",
                          "embedding_ctx_length",
                          "max_retries",
                          "model",
                          "model_kwargs",
                          "openai_api_base",
                          "openai_api_key",
                          "openai_api_type",
                          "openai_api_version",
                          "openai_organization",
                          "openai_proxy",
                          "request_timeout",
                          "show_progress_bar",
                          "skip_empty",
                          "tiktoken_model_name",
                          "tiktoken_enable",
                          "dimensions"
                        ],
                        "beta": false,
                        "edited": false,
                        "metadata": {}
                      },
                      "id": "OpenAIEmbeddings-UfXHC",
                      "description": "Generate embeddings using OpenAI models.",
                      "display_name": "OpenAI Embeddings"
                    },
                    "selected": true,
                    "width": 384,
                    "height": 375,
                    "positionAbsolute": {
                      "x": -2541.977848768341,
                      "y": -540.3505618955141
                    },
                    "dragging": false
                  },
                  {
                    "id": "ParseData-kl9yv",
                    "type": "genericNode",
                    "position": {
                      "x": -1741.6180026639558,
                      "y": -940.5479870594804
                    },
                    "data": {
                      "type": "ParseData",
                      "node": {
                        "template": {
                          "_type": "Component",
                          "data": {
                            "trace_as_metadata": true,
                            "list": false,
                            "trace_as_input": true,
                            "required": false,
                            "placeholder": "",
                            "show": true,
                            "name": "data",
                            "value": "",
                            "display_name": "Data",
                            "advanced": false,
                            "input_types": [
                              "Data"
                            ],
                            "dynamic": false,
                            "info": "The data to convert to text.",
                            "title_case": false,
                            "type": "other",
                            "_input_type": "DataInput"
                          },
                          "code": {
                            "type": "code",
                            "required": true,
                            "placeholder": "",
                            "list": false,
                            "show": true,
                            "multiline": true,
                            "value": "from axiestudio.custom import Component\nfrom axiestudio.helpers.data import data_to_text\nfrom axiestudio.io import DataInput, MultilineInput, Output, StrInput\nfrom axiestudio.schema.message import Message\n\n\nclass ParseDataComponent(Component):\n    display_name = \"Parse Data\"\n    description = \"Convert Data into plain text following a specified template.\"\n    icon = \"braces\"\n    name = \"ParseData\"\n\n    inputs = [\n        DataInput(name=\"data\", display_name=\"Data\", info=\"The data to convert to text.\"),\n        MultilineInput(\n            name=\"template\",\n            display_name=\"Template\",\n            info=\"The template to use for formatting the data. \"\n            \"It can contain the keys {text}, {data} or any other key in the Data.\",\n            value=\"{text}\",\n        ),\n        StrInput(name=\"sep\", display_name=\"Separator\", advanced=True, value=\"\\n\"),\n    ]\n\n    outputs = [\n        Output(display_name=\"Text\", name=\"text\", method=\"parse_data\"),\n    ]\n\n    def parse_data(self) -> Message:\n        data = self.data if isinstance(self.data, list) else [self.data]\n        template = self.template\n\n        result_string = data_to_text(template, data, sep=self.sep)\n        self.status = result_string\n        return Message(text=result_string)\n",
                            "fileTypes": [],
                            "file_path": "",
                            "password": false,
                            "name": "code",
                            "advanced": true,
                            "dynamic": true,
                            "info": "",
                            "load_from_db": false,
                            "title_case": false,
                            "display_name": "code"
                          },
                          "sep": {
                            "trace_as_metadata": true,
                            "load_from_db": false,
                            "list": false,
                            "required": false,
                            "placeholder": "",
                            "show": true,
                            "name": "sep",
                            "value": "\n",
                            "display_name": "Separator",
                            "advanced": true,
                            "dynamic": false,
                            "info": "",
                            "title_case": false,
                            "type": "str",
                            "_input_type": "StrInput"
                          },
                          "template": {
                            "trace_as_input": true,
                            "multiline": true,
                            "trace_as_metadata": true,
                            "load_from_db": false,
                            "list": false,
                            "required": false,
                            "placeholder": "",
                            "show": true,
                            "name": "template",
                            "value": "<{text}>",
                            "display_name": "Template",
                            "advanced": false,
                            "input_types": [
                              "Message"
                            ],
                            "dynamic": false,
                            "info": "The template to use for formatting the data. It can contain the keys {text}, {data} or any other key in the Data.",
                            "title_case": false,
                            "type": "str",
                            "_input_type": "MultilineInput"
                          }
                        },
                        "description": "Convert Data into plain text following a specified template.",
                        "icon": "braces",
                        "base_classes": [
                          "Message"
                        ],
                        "display_name": "Parse Data",
                        "documentation": "",
                        "custom_fields": {},
                        "output_types": [],
                        "pinned": false,
                        "conditional_paths": [],
                        "frozen": false,
                        "outputs": [
                          {
                            "types": [
                              "Message"
                            ],
                            "selected": "Message",
                            "name": "text",
                            "display_name": "Text",
                            "method": "parse_data",
                            "value": "__UNDEFINED__",
                            "cache": true
                          }
                        ],
                        "field_order": [
                          "data",
                          "template",
                          "sep"
                        ],
                        "beta": false,
                        "edited": false,
                        "metadata": {}
                      },
                      "id": "ParseData-kl9yv",
                      "description": "Convert Data into plain text following a specified template.",
                      "display_name": "Parse Data"
                    },
                    "selected": true,
                    "width": 384,
                    "height": 353,
                    "dragging": false,
                    "positionAbsolute": {
                      "x": -1741.6180026639558,
                      "y": -940.5479870594804
                    }
                  },
                  {
                    "id": "Prompt-uvWe5",
                    "type": "genericNode",
                    "position": {
                      "x": -2541.30856296637,
                      "y": -941.0674504833105
                    },
                    "data": {
                      "type": "Prompt",
                      "node": {
                        "template": {
                          "_type": "Component",
                          "code": {
                            "type": "code",
                            "required": true,
                            "placeholder": "",
                            "list": false,
                            "show": true,
                            "multiline": true,
                            "value": "from axiestudio.base.prompts.api_utils import process_prompt_template\nfrom axiestudio.custom import Component\nfrom axiestudio.inputs.inputs import DefaultPromptField\nfrom axiestudio.io import Output, PromptInput\nfrom axiestudio.schema.message import Message\nfrom axiestudio.template.utils import update_template_values\n\n\nclass PromptComponent(Component):\n    display_name: str = \"Prompt\"\n    description: str = \"Create a prompt template with dynamic variables.\"\n    icon = \"prompts\"\n    trace_type = \"prompt\"\n    name = \"Prompt\"\n\n    inputs = [\n        PromptInput(name=\"template\", display_name=\"Template\"),\n    ]\n\n    outputs = [\n        Output(display_name=\"Prompt Message\", name=\"prompt\", method=\"build_prompt\"),\n    ]\n\n    async def build_prompt(\n        self,\n    ) -> Message:\n        prompt = await Message.from_template_and_variables(**self._attributes)\n        self.status = prompt.text\n        return prompt\n\n    def _update_template(self, frontend_node: dict):\n        prompt_template = frontend_node[\"template\"][\"template\"][\"value\"]\n        custom_fields = frontend_node[\"custom_fields\"]\n        frontend_node_template = frontend_node[\"template\"]\n        _ = process_prompt_template(\n            template=prompt_template,\n            name=\"template\",\n            custom_fields=custom_fields,\n            frontend_node_template=frontend_node_template,\n        )\n        return frontend_node\n\n    def post_code_processing(self, new_frontend_node: dict, current_frontend_node: dict):\n        \"\"\"\n        This function is called after the code validation is done.\n        \"\"\"\n        frontend_node = super().post_code_processing(new_frontend_node, current_frontend_node)\n        template = frontend_node[\"template\"][\"template\"][\"value\"]\n        # Kept it duplicated for backwards compatibility\n        _ = process_prompt_template(\n            template=template,\n            name=\"template\",\n            custom_fields=frontend_node[\"custom_fields\"],\n            frontend_node_template=frontend_node[\"template\"],\n        )\n        # Now that template is updated, we need to grab any values that were set in the current_frontend_node\n        # and update the frontend_node with those values\n        update_template_values(new_template=frontend_node, previous_template=current_frontend_node[\"template\"])\n        return frontend_node\n\n    def _get_fallback_input(self, **kwargs):\n        return DefaultPromptField(**kwargs)\n",
                            "fileTypes": [],
                            "file_path": "",
                            "password": false,
                            "name": "code",
                            "advanced": true,
                            "dynamic": true,
                            "info": "",
                            "load_from_db": false,
                            "title_case": false,
                            "display_name": "code"
                          },
                          "template": {
                            "trace_as_input": true,
                            "list": false,
                            "required": false,
                            "placeholder": "",
                            "show": true,
                            "name": "template",
                            "value": "{TMC}",
                            "display_name": "Template",
                            "advanced": false,
                            "dynamic": false,
                            "info": "",
                            "title_case": false,
                            "type": "prompt",
                            "_input_type": "PromptInput"
                          },
                          "TMC": {
                            "field_type": "str",
                            "required": false,
                            "placeholder": "",
                            "list": false,
                            "show": true,
                            "multiline": true,
                            "value": "",
                            "fileTypes": [],
                            "file_path": "",
                            "name": "TMC",
                            "display_name": "TMC",
                            "advanced": false,
                            "input_types": [
                              "Message",
                              "Text"
                            ],
                            "dynamic": false,
                            "info": "",
                            "load_from_db": false,
                            "title_case": false,
                            "type": "str"
                          }
                        },
                        "description": "Create a prompt template with dynamic variables.",
                        "icon": "prompts",
                        "is_input": null,
                        "is_output": null,
                        "is_composition": null,
                        "base_classes": [
                          "Message"
                        ],
                        "name": "",
                        "display_name": "Prompt",
                        "documentation": "",
                        "custom_fields": {
                          "template": [
                            "TMC"
                          ]
                        },
                        "output_types": [],
                        "full_path": null,
                        "pinned": false,
                        "conditional_paths": [],
                        "frozen": false,
                        "outputs": [
                          {
                            "types": [
                              "Message"
                            ],
                            "selected": "Message",
                            "name": "prompt",
                            "hidden": null,
                            "display_name": "Prompt Message",
                            "method": "build_prompt",
                            "value": "__UNDEFINED__",
                            "cache": true,
                            "required_inputs": null
                          }
                        ],
                        "field_order": [
                          "template"
                        ],
                        "beta": false,
                        "error": null,
                        "edited": false,
                        "metadata": {}
                      },
                      "id": "Prompt-uvWe5"
                    },
                    "selected": true,
                    "width": 384,
                    "height": 391,
                    "positionAbsolute": {
                      "x": -2541.30856296637,
                      "y": -941.0674504833105
                    },
                    "dragging": false
                  }
                ],
                "edges": [
                  {
                    "source": "OpenAIEmbeddings-UfXHC",
                    "sourceHandle": "{œdataTypeœ:œOpenAIEmbeddingsœ,œidœ:œOpenAIEmbeddings-UfXHCœ,œnameœ:œembeddingsœ,œoutput_typesœ:[œEmbeddingsœ]}",
                    "target": "Chroma-3LJPk",
                    "targetHandle": "{œfieldNameœ:œembeddingœ,œidœ:œChroma-3LJPkœ,œinputTypesœ:[œEmbeddingsœ],œtypeœ:œotherœ}",
                    "data": {
                      "targetHandle": {
                        "fieldName": "embedding",
                        "id": "Chroma-3LJPk",
                        "inputTypes": [
                          "Embeddings"
                        ],
                        "type": "other"
                      },
                      "sourceHandle": {
                        "dataType": "OpenAIEmbeddings",
                        "id": "OpenAIEmbeddings-UfXHC",
                        "name": "embeddings",
                        "output_types": [
                          "Embeddings"
                        ]
                      }
                    },
                    "id": "reactflow__edge-OpenAIEmbeddings-UfXHC{œdataTypeœ:œOpenAIEmbeddingsœ,œidœ:œOpenAIEmbeddings-UfXHCœ,œnameœ:œembeddingsœ,œoutput_typesœ:[œEmbeddingsœ]}-Chroma-3LJPk{œfieldNameœ:œembeddingœ,œidœ:œChroma-3LJPkœ,œinputTypesœ:[œEmbeddingsœ],œtypeœ:œotherœ}",
                    "selected": false
                  },
                  {
                    "source": "Chroma-3LJPk",
                    "sourceHandle": "{œdataTypeœ:œChromaœ,œidœ:œChroma-3LJPkœ,œnameœ:œsearch_resultsœ,œoutput_typesœ:[œDataœ]}",
                    "target": "ParseData-kl9yv",
                    "targetHandle": "{œfieldNameœ:œdataœ,œidœ:œParseData-kl9yvœ,œinputTypesœ:[œDataœ],œtypeœ:œotherœ}",
                    "data": {
                      "targetHandle": {
                        "fieldName": "data",
                        "id": "ParseData-kl9yv",
                        "inputTypes": [
                          "Data"
                        ],
                        "type": "other"
                      },
                      "sourceHandle": {
                        "dataType": "Chroma",
                        "id": "Chroma-3LJPk",
                        "name": "search_results",
                        "output_types": [
                          "Data"
                        ]
                      }
                    },
                    "id": "reactflow__edge-Chroma-3LJPk{œdataTypeœ:œChromaœ,œidœ:œChroma-3LJPkœ,œnameœ:œsearch_resultsœ,œoutput_typesœ:[œDataœ]}-ParseData-kl9yv{œfieldNameœ:œdataœ,œidœ:œParseData-kl9yvœ,œinputTypesœ:[œDataœ],œtypeœ:œotherœ}",
                    "selected": false
                  },
                  {
                    "source": "Prompt-uvWe5",
                    "sourceHandle": "{œdataTypeœ:œPromptœ,œidœ:œPrompt-uvWe5œ,œnameœ:œpromptœ,œoutput_typesœ:[œMessageœ]}",
                    "target": "Chroma-3LJPk",
                    "targetHandle": "{œfieldNameœ:œcollection_nameœ,œidœ:œChroma-3LJPkœ,œinputTypesœ:[œMessageœ],œtypeœ:œstrœ}",
                    "data": {
                      "targetHandle": {
                        "fieldName": "collection_name",
                        "id": "Chroma-3LJPk",
                        "inputTypes": [
                          "Message"
                        ],
                        "type": "str"
                      },
                      "sourceHandle": {
                        "dataType": "Prompt",
                        "id": "Prompt-uvWe5",
                        "name": "prompt",
                        "output_types": [
                          "Message"
                        ]
                      }
                    },
                    "id": "reactflow__edge-Prompt-uvWe5{œdataTypeœ:œPromptœ,œidœ:œPrompt-uvWe5œ,œnameœ:œpromptœ,œoutput_typesœ:[œMessageœ]}-Chroma-3LJPk{œfieldNameœ:œcollection_nameœ,œidœ:œChroma-3LJPkœ,œinputTypesœ:[œMessageœ],œtypeœ:œstrœ}",
                    "selected": false
                  }
                ],
                "viewport": {
                  "zoom": 1,
                  "x": 0,
                  "y": 0
                }
              },
              "is_component": false,
              "name": "Hilarious Pike",
              "description": "",
              "id": "hQztU"
            },
            "outputs": [
              {
                "types": [
                  "Retriever"
                ],
                "selected": "Retriever",
                "name": "Chroma-3LJPk_base_retriever",
                "display_name": "Retriever",
                "method": "build_base_retriever",
                "value": "__UNDEFINED__",
                "cache": true,
                "required_inputs": [],
                "proxy": {
                  "id": "Chroma-3LJPk",
                  "name": "base_retriever",
                  "nodeDisplayName": "Chroma DB"
                }
              },
              {
                "types": [
                  "VectorStore"
                ],
                "selected": "VectorStore",
                "name": "Chroma-3LJPk_vector_store",
                "display_name": "Vector Store",
                "method": "cast_vector_store",
                "value": "__UNDEFINED__",
                "cache": true,
                "required_inputs": [],
                "proxy": {
                  "id": "Chroma-3LJPk",
                  "name": "vector_store",
                  "nodeDisplayName": "Chroma DB"
                }
              },
              {
                "types": [
                  "Message"
                ],
                "selected": "Message",
                "name": "ParseData-kl9yv_text",
                "display_name": "Text",
                "method": "parse_data",
                "value": "__UNDEFINED__",
                "cache": true,
                "proxy": {
                  "id": "ParseData-kl9yv",
                  "name": "text",
                  "nodeDisplayName": "Parse Data"
                }
              }
            ],
            "lf_version": "1.0.19"
          }
        },
        "id": "groupComponent-fCN9N",
        "position": {
          "x": -2241.588575281602,
          "y": -840.58760183435
        },
        "type": "genericNode",
        "width": 384,
        "height": 455,
        "selected": false,
        "dragging": false
      },
      {
        "data": {
          "id": "groupComponent-Jcwnj",
          "type": "GroupNode",
          "node": {
            "display_name": "DTC Data Retriever",
            "documentation": "",
            "description": "",
            "template": {
              "code_SQLiteQueryTool-MNWYz": {
                "type": "code",
                "required": true,
                "placeholder": "",
                "list": false,
                "show": true,
                "multiline": true,
                "value": "from axiestudio.base.langchain_utilities.model import LCToolComponent\nfrom axiestudio.field_typing import Tool\nfrom axiestudio.inputs import MessageTextInput, MultilineInput\nfrom axiestudio.schema import Data\nfrom sqlalchemy import create_engine, text\nfrom sqlalchemy.exc import SQLAlchemyError\nfrom typing import Union, List, Tuple\n\nclass SQLiteQueryTool(LCToolComponent):\n    display_name = \"SQLite Query Executor\"\n    description = \"Executes a given SQL query on a specified SQLite database using a URI.\"\n    icon = \"🔎\"\n    name = \"SQLiteQueryTool\"\n    inputs = [\n        MessageTextInput(\n            name=\"database_uri\",\n            display_name=\"Database URI\",\n            info=\"URI of the SQLite database (e.g., sqlite:///path/to/database.db).\",\n            required=True\n        ),\n        MultilineInput(\n            name=\"query\",\n            display_name=\"SQL Query\",\n            info=\"SQL query to be executed on the database.\",\n            required=True\n        )\n    ]\n\n    def run_model(self) -> Union[Data, List[Data]]:\n        \"\"\"Executes the SQL query and returns the results.\"\"\"\n        database_uri = self.database_uri\n        query = self.query\n\n        # Connect to the SQLite database using SQLAlchemy with the provided URI\n        engine = create_engine(database_uri)\n        try:\n            result_data = self._execute_query(engine, query)\n            return self._format_results(result_data)\n        except SQLAlchemyError as error:\n            return self._handle_error(error)\n\n    def _execute_query(self, engine, query: str) -> Tuple[List[tuple], List[str]]:\n        \"\"\"Executes the SQL query and returns the raw results and column keys.\"\"\"\n        with engine.connect() as connection:\n            result = connection.execute(text(query))\n            rows = result.fetchall()\n            keys = result.keys()\n            return rows, keys\n\n    def _format_results(self, result_data: Tuple[List[tuple], List[str]]) -> List[Data]:\n        \"\"\"Formats the raw results into a list of Data objects.\"\"\"\n        rows, keys = result_data\n        if not rows:\n            return []\n\n        # Create a list of dictionaries mapping keys to row values\n        formatted_results = [dict(zip(keys, row)) for row in rows]\n        return [Data(data=row, text=str(row)) for row in formatted_results]\n\n    def _handle_error(self, error: SQLAlchemyError) -> List[Data]:\n        \"\"\"Handles errors during query execution.\"\"\"\n        error_message = f\"Error executing query: {str(error)}\"\n        self.status = error_message\n        return [Data(data={\"error\": error_message})]\n\n    def build_tool(self) -> Tool:\n        \"\"\"Builds the tool with the execution function.\"\"\"\n        return Tool(\n            name=\"sqlite_query_tool\",\n            description=self.description,\n            func=self.run_model,\n        )",
                "fileTypes": [],
                "file_path": "",
                "password": false,
                "name": "code",
                "advanced": true,
                "dynamic": true,
                "info": "",
                "load_from_db": false,
                "title_case": false,
                "display_name": "code",
                "proxy": {
                  "id": "SQLiteQueryTool-MNWYz",
                  "field": "code"
                }
              },
              "database_uri_SQLiteQueryTool-MNWYz": {
                "trace_as_input": true,
                "trace_as_metadata": true,
                "load_from_db": false,
                "list": false,
                "required": true,
                "placeholder": "",
                "show": true,
                "name": "database_uri",
                "value": "sqlite://///Users/michelepastorello/Desktop/ArgoBot/codici_errore.sqlite3",
                "display_name": "Database URI",
                "advanced": false,
                "input_types": [
                  "Message"
                ],
                "dynamic": false,
                "info": "URI of the SQLite database (e.g., sqlite:///path/to/database.db).",
                "title_case": false,
                "type": "str",
                "_input_type": "MessageTextInput",
                "proxy": {
                  "id": "SQLiteQueryTool-MNWYz",
                  "field": "database_uri"
                }
              },
              "code_ParseData-4I2Zh": {
                "type": "code",
                "required": true,
                "placeholder": "",
                "list": false,
                "show": true,
                "multiline": true,
                "value": "from axiestudio.custom import Component\nfrom axiestudio.helpers.data import data_to_text\nfrom axiestudio.io import DataInput, MultilineInput, Output, StrInput\nfrom axiestudio.schema.message import Message\n\n\nclass ParseDataComponent(Component):\n    display_name = \"Parse Data\"\n    description = \"Convert Data into plain text following a specified template.\"\n    icon = \"braces\"\n    name = \"ParseData\"\n\n    inputs = [\n        DataInput(name=\"data\", display_name=\"Data\", info=\"The data to convert to text.\"),\n        MultilineInput(\n            name=\"template\",\n            display_name=\"Template\",\n            info=\"The template to use for formatting the data. It can contain the keys {text}, {data} or any other key in the Data.\",\n            value=\"{text}\",\n        ),\n        StrInput(name=\"sep\", display_name=\"Separator\", advanced=True, value=\"\\n\"),\n    ]\n\n    outputs = [\n        Output(display_name=\"Text\", name=\"text\", method=\"parse_data\"),\n    ]\n\n    def parse_data(self) -> Message:\n        data = self.data if isinstance(self.data, list) else [self.data]\n        template = self.template\n\n        # Ensure 'text' key exists in each data item\n        for item in data:\n            if not hasattr(item, 'text'):\n                item.text = ''  # or set a default value using a method\n\n        result_string = data_to_text(template, data, sep=self.sep)\n        self.status = result_string\n        return Message(text=result_string)",
                "fileTypes": [],
                "file_path": "",
                "password": false,
                "name": "code",
                "advanced": true,
                "dynamic": true,
                "info": "",
                "load_from_db": false,
                "title_case": false,
                "display_name": "code",
                "proxy": {
                  "id": "ParseData-4I2Zh",
                  "field": "code"
                }
              },
              "sep_ParseData-4I2Zh": {
                "trace_as_metadata": true,
                "load_from_db": false,
                "list": false,
                "required": false,
                "placeholder": "",
                "show": true,
                "name": "sep",
                "value": "\n",
                "display_name": "Separator",
                "advanced": true,
                "dynamic": false,
                "info": "",
                "title_case": false,
                "type": "str",
                "_input_type": "StrInput",
                "proxy": {
                  "id": "ParseData-4I2Zh",
                  "field": "sep"
                }
              },
              "template_ParseData-4I2Zh": {
                "trace_as_input": true,
                "multiline": true,
                "trace_as_metadata": true,
                "load_from_db": false,
                "list": false,
                "required": false,
                "placeholder": "",
                "show": true,
                "name": "template",
                "value": "<diagnostic_throuble_code>\n{text}\n</diagnostic_throuble_code>",
                "display_name": "Template",
                "advanced": true,
                "input_types": [
                  "Message"
                ],
                "dynamic": false,
                "info": "The template to use for formatting the data. It can contain the keys {text}, {data} or any other key in the Data.",
                "title_case": false,
                "type": "str",
                "_input_type": "MultilineInput",
                "proxy": {
                  "id": "ParseData-4I2Zh",
                  "field": "template"
                }
              },
              "code_Prompt-ekcNX": {
                "type": "code",
                "required": true,
                "placeholder": "",
                "list": false,
                "show": true,
                "multiline": true,
                "value": "from axiestudio.base.prompts.api_utils import process_prompt_template\nfrom axiestudio.custom import Component\nfrom axiestudio.inputs.inputs import DefaultPromptField\nfrom axiestudio.io import Output, PromptInput\nfrom axiestudio.schema.message import Message\nfrom axiestudio.template.utils import update_template_values\n\n\nclass PromptComponent(Component):\n    display_name: str = \"Prompt\"\n    description: str = \"Create a prompt template with dynamic variables.\"\n    icon = \"prompts\"\n    trace_type = \"prompt\"\n    name = \"Prompt\"\n\n    inputs = [\n        PromptInput(name=\"template\", display_name=\"Template\"),\n    ]\n\n    outputs = [\n        Output(display_name=\"Prompt Message\", name=\"prompt\", method=\"build_prompt\"),\n    ]\n\n    async def build_prompt(\n        self,\n    ) -> Message:\n        prompt = await Message.from_template_and_variables(**self._attributes)\n        self.status = prompt.text\n        return prompt\n\n    def _update_template(self, frontend_node: dict):\n        prompt_template = frontend_node[\"template\"][\"template\"][\"value\"]\n        custom_fields = frontend_node[\"custom_fields\"]\n        frontend_node_template = frontend_node[\"template\"]\n        _ = process_prompt_template(\n            template=prompt_template,\n            name=\"template\",\n            custom_fields=custom_fields,\n            frontend_node_template=frontend_node_template,\n        )\n        return frontend_node\n\n    def post_code_processing(self, new_frontend_node: dict, current_frontend_node: dict):\n        \"\"\"\n        This function is called after the code validation is done.\n        \"\"\"\n        frontend_node = super().post_code_processing(new_frontend_node, current_frontend_node)\n        template = frontend_node[\"template\"][\"template\"][\"value\"]\n        # Kept it duplicated for backwards compatibility\n        _ = process_prompt_template(\n            template=template,\n            name=\"template\",\n            custom_fields=frontend_node[\"custom_fields\"],\n            frontend_node_template=frontend_node[\"template\"],\n        )\n        # Now that template is updated, we need to grab any values that were set in the current_frontend_node\n        # and update the frontend_node with those values\n        update_template_values(new_template=frontend_node, previous_template=current_frontend_node[\"template\"])\n        return frontend_node\n\n    def _get_fallback_input(self, **kwargs):\n        return DefaultPromptField(**kwargs)\n",
                "fileTypes": [],
                "file_path": "",
                "password": false,
                "name": "code",
                "advanced": true,
                "dynamic": true,
                "info": "",
                "load_from_db": false,
                "title_case": false,
                "display_name": "code",
                "proxy": {
                  "id": "Prompt-ekcNX",
                  "field": "code"
                }
              },
              "template_Prompt-ekcNX": {
                "trace_as_input": true,
                "list": false,
                "required": false,
                "placeholder": "",
                "show": true,
                "name": "template",
                "value": "SELECT * FROM {table} WHERE \"Tractor Model Code\" like '%{TMC}%' AND \"Suspect Parameter Number\" = '{SPN}' AND \"Failure Mode Identifier\" = '{FMI}';",
                "display_name": "Template",
                "advanced": true,
                "dynamic": false,
                "info": "",
                "title_case": false,
                "type": "prompt",
                "_input_type": "PromptInput",
                "proxy": {
                  "id": "Prompt-ekcNX",
                  "field": "template"
                }
              },
              "table_Prompt-ekcNX": {
                "field_type": "str",
                "required": false,
                "placeholder": "",
                "list": false,
                "show": true,
                "multiline": true,
                "value": "codici_errore",
                "fileTypes": [],
                "file_path": "",
                "name": "table",
                "display_name": "table",
                "advanced": false,
                "input_types": [
                  "Message",
                  "Text"
                ],
                "dynamic": false,
                "info": "",
                "load_from_db": false,
                "title_case": false,
                "type": "str",
                "proxy": {
                  "id": "Prompt-ekcNX",
                  "field": "table"
                }
              },
              "SPN_Prompt-ekcNX": {
                "field_type": "str",
                "required": false,
                "placeholder": "",
                "list": false,
                "show": true,
                "multiline": true,
                "value": "",
                "fileTypes": [],
                "file_path": "",
                "name": "SPN",
                "display_name": "SPN",
                "advanced": false,
                "input_types": [
                  "Message",
                  "Text"
                ],
                "dynamic": false,
                "info": "",
                "load_from_db": false,
                "title_case": false,
                "type": "str",
                "proxy": {
                  "id": "Prompt-ekcNX",
                  "field": "SPN"
                }
              },
              "FMI_Prompt-ekcNX": {
                "field_type": "str",
                "required": false,
                "placeholder": "",
                "list": false,
                "show": true,
                "multiline": true,
                "value": "",
                "fileTypes": [],
                "file_path": "",
                "name": "FMI",
                "display_name": "FMI",
                "advanced": false,
                "input_types": [
                  "Message",
                  "Text"
                ],
                "dynamic": false,
                "info": "",
                "load_from_db": false,
                "title_case": false,
                "type": "str",
                "proxy": {
                  "id": "Prompt-ekcNX",
                  "field": "FMI"
                }
              },
              "TMC_Prompt-ekcNX": {
                "field_type": "str",
                "required": false,
                "placeholder": "",
                "list": false,
                "show": true,
                "multiline": true,
                "value": "",
                "fileTypes": [],
                "file_path": "",
                "name": "TMC",
                "display_name": "TMC",
                "advanced": false,
                "input_types": [
                  "Message",
                  "Text"
                ],
                "dynamic": false,
                "info": "",
                "load_from_db": false,
                "title_case": false,
                "type": "str",
                "proxy": {
                  "id": "Prompt-ekcNX",
                  "field": "TMC"
                }
              },
              "code_SQLCleaner-d38L0": {
                "type": "code",
                "required": true,
                "placeholder": "",
                "list": false,
                "show": true,
                "multiline": true,
                "value": "from axiestudio.custom import Component\nfrom axiestudio.io import MessageTextInput, Output\nfrom axiestudio.schema.message import Message\n\nclass SQLCleanerComponent(Component):\n    display_name = \"SQL Cleaner\"\n    description = \"Cleans SQL queries by removing conditions with 'Not found' values.\"\n    icon = \"🧹\"\n    name = \"SQLCleaner\"\n    inputs = [\n        MessageTextInput(\n            name=\"sql_query\",\n            display_name=\"SQL Query\",\n            info=\"The SQL query to clean.\",\n            required=True\n        ),\n    ]\n    outputs = [\n        Output(display_name=\"Cleaned SQL\", name=\"cleaned_sql\", method=\"clean_sql\"),\n    ]\n    def clean_sql(self) -> Message:\n        sql_query = self.sql_query\n        # Replace 'Not found' with '@' if the query is invalid\n        if self._is_query_invalid(sql_query):\n            sql_query = sql_query.replace('Not found', '@')\n        \n        # Normalize 'LIKE' conditions to '=' for consistency\n        sql_query = self._normalize_like_conditions(sql_query)\n\n        # Clean the SQL query by removing unwanted conditions\n        cleaned_sql = self._remove_unwanted_conditions(sql_query)\n\n        self.status = cleaned_sql\n        return Message(text=cleaned_sql)\n\n    def _is_query_invalid(self, sql_query: str) -> bool:\n        \"\"\"Check if the SQL query contains conditions that should result in no output.\"\"\"\n        return '\"Suspect Parameter Number\" = \\'Not found\\'' in sql_query\n\n    def _normalize_like_conditions(self, sql_query: str) -> str:\n        \"\"\"Convert 'LIKE %Not found%' conditions to '=' for consistency.\"\"\"\n        return sql_query.replace('\"Tractor Model Code\" like \\'%Not found%\\'', '\"Tractor Model Code\" = \\'Not found\\'')\n\n    def _remove_unwanted_conditions(self, sql_query: str) -> str:\n        \"\"\"Remove conditions with 'Not found' from the SQL query.\"\"\"\n        if \"WHERE\" in sql_query.upper():\n            select_part, where_part = sql_query.split(\"WHERE\", 1)\n            conditions = where_part.split(\"AND\")\n            cleaned_conditions = [cond for cond in conditions if \"'Not found'\" not in cond]\n\n            # Reconstruct the cleaned SQL query\n            return f\"{select_part.strip()} WHERE {' AND '.join(cleaned_conditions).strip()}\" if cleaned_conditions else select_part.strip()\n        \n        return sql_query",
                "fileTypes": [],
                "file_path": "",
                "password": false,
                "name": "code",
                "advanced": true,
                "dynamic": true,
                "info": "",
                "load_from_db": false,
                "title_case": false,
                "display_name": "code",
                "proxy": {
                  "id": "SQLCleaner-d38L0",
                  "field": "code"
                }
              }
            },
            "flow": {
              "data": {
                "nodes": [
                  {
                    "id": "SQLiteQueryTool-MNWYz",
                    "type": "genericNode",
                    "position": {
                      "x": -1640.3491933693738,
                      "y": -840.3635073922449
                    },
                    "data": {
                      "type": "SQLiteQueryTool",
                      "node": {
                        "template": {
                          "_type": "Component",
                          "code": {
                            "type": "code",
                            "required": true,
                            "placeholder": "",
                            "list": false,
                            "show": true,
                            "multiline": true,
                            "value": "from axiestudio.base.langchain_utilities.model import LCToolComponent\nfrom axiestudio.field_typing import Tool\nfrom axiestudio.inputs import MessageTextInput, MultilineInput\nfrom axiestudio.schema import Data\nfrom sqlalchemy import create_engine, text\nfrom sqlalchemy.exc import SQLAlchemyError\nfrom typing import Union, List, Tuple\n\nclass SQLiteQueryTool(LCToolComponent):\n    display_name = \"SQLite Query Executor\"\n    description = \"Executes a given SQL query on a specified SQLite database using a URI.\"\n    icon = \"🔎\"\n    name = \"SQLiteQueryTool\"\n    inputs = [\n        MessageTextInput(\n            name=\"database_uri\",\n            display_name=\"Database URI\",\n            info=\"URI of the SQLite database (e.g., sqlite:///path/to/database.db).\",\n            required=True\n        ),\n        MultilineInput(\n            name=\"query\",\n            display_name=\"SQL Query\",\n            info=\"SQL query to be executed on the database.\",\n            required=True\n        )\n    ]\n\n    def run_model(self) -> Union[Data, List[Data]]:\n        \"\"\"Executes the SQL query and returns the results.\"\"\"\n        database_uri = self.database_uri\n        query = self.query\n\n        # Connect to the SQLite database using SQLAlchemy with the provided URI\n        engine = create_engine(database_uri)\n        try:\n            result_data = self._execute_query(engine, query)\n            return self._format_results(result_data)\n        except SQLAlchemyError as error:\n            return self._handle_error(error)\n\n    def _execute_query(self, engine, query: str) -> Tuple[List[tuple], List[str]]:\n        \"\"\"Executes the SQL query and returns the raw results and column keys.\"\"\"\n        with engine.connect() as connection:\n            result = connection.execute(text(query))\n            rows = result.fetchall()\n            keys = result.keys()\n            return rows, keys\n\n    def _format_results(self, result_data: Tuple[List[tuple], List[str]]) -> List[Data]:\n        \"\"\"Formats the raw results into a list of Data objects.\"\"\"\n        rows, keys = result_data\n        if not rows:\n            return []\n\n        # Create a list of dictionaries mapping keys to row values\n        formatted_results = [dict(zip(keys, row)) for row in rows]\n        return [Data(data=row, text=str(row)) for row in formatted_results]\n\n    def _handle_error(self, error: SQLAlchemyError) -> List[Data]:\n        \"\"\"Handles errors during query execution.\"\"\"\n        error_message = f\"Error executing query: {str(error)}\"\n        self.status = error_message\n        return [Data(data={\"error\": error_message})]\n\n    def build_tool(self) -> Tool:\n        \"\"\"Builds the tool with the execution function.\"\"\"\n        return Tool(\n            name=\"sqlite_query_tool\",\n            description=self.description,\n            func=self.run_model,\n        )",
                            "fileTypes": [],
                            "file_path": "",
                            "password": false,
                            "name": "code",
                            "advanced": true,
                            "dynamic": true,
                            "info": "",
                            "load_from_db": false,
                            "title_case": false,
                            "display_name": "code"
                          },
                          "database_uri": {
                            "trace_as_input": true,
                            "trace_as_metadata": true,
                            "load_from_db": false,
                            "list": false,
                            "required": true,
                            "placeholder": "",
                            "show": true,
                            "name": "database_uri",
                            "value": "sqlite://///Users/michelepastorello/Desktop/ArgoBot/codici_errore.sqlite3",
                            "display_name": "Database URI",
                            "advanced": false,
                            "input_types": [
                              "Message"
                            ],
                            "dynamic": false,
                            "info": "URI of the SQLite database (e.g., sqlite:///path/to/database.db).",
                            "title_case": false,
                            "type": "str",
                            "_input_type": "MessageTextInput"
                          },
                          "query": {
                            "trace_as_input": true,
                            "multiline": true,
                            "trace_as_metadata": true,
                            "load_from_db": false,
                            "list": false,
                            "required": true,
                            "placeholder": "",
                            "show": true,
                            "name": "query",
                            "value": "",
                            "display_name": "SQL Query",
                            "advanced": false,
                            "input_types": [
                              "Message"
                            ],
                            "dynamic": false,
                            "info": "SQL query to be executed on the database.",
                            "title_case": false,
                            "type": "str",
                            "_input_type": "MultilineInput"
                          }
                        },
                        "description": "Executes a given SQL query on a specified SQLite database using a URI.",
                        "icon": "🔎",
                        "base_classes": [
                          "Data",
                          "Tool"
                        ],
                        "display_name": "DTC Data Retriever",
                        "documentation": "",
                        "custom_fields": {},
                        "output_types": [],
                        "pinned": false,
                        "conditional_paths": [],
                        "frozen": false,
                        "outputs": [
                          {
                            "types": [
                              "Data"
                            ],
                            "selected": "Data",
                            "name": "api_run_model",
                            "display_name": "Data",
                            "method": "run_model",
                            "value": "__UNDEFINED__",
                            "cache": true,
                            "required_inputs": [
                              "database_uri",
                              "query"
                            ]
                          },
                          {
                            "types": [
                              "Tool"
                            ],
                            "selected": "Tool",
                            "name": "api_build_tool",
                            "display_name": "Tool",
                            "method": "build_tool",
                            "value": "__UNDEFINED__",
                            "cache": true,
                            "required_inputs": [
                              "database_uri",
                              "query"
                            ]
                          }
                        ],
                        "field_order": [
                          "database_uri",
                          "query"
                        ],
                        "beta": false,
                        "edited": true,
                        "metadata": {},
                        "lf_version": "1.0.19"
                      },
                      "id": "SQLiteQueryTool-MNWYz"
                    },
                    "selected": true,
                    "width": 384,
                    "height": 427,
                    "positionAbsolute": {
                      "x": -1640.3491933693738,
                      "y": -840.3635073922449
                    },
                    "dragging": false
                  },
                  {
                    "id": "ParseData-4I2Zh",
                    "type": "genericNode",
                    "position": {
                      "x": -1240.8520817352141,
                      "y": -840.6603505316414
                    },
                    "data": {
                      "type": "ParseData",
                      "node": {
                        "template": {
                          "_type": "Component",
                          "data": {
                            "trace_as_metadata": true,
                            "list": false,
                            "trace_as_input": true,
                            "required": false,
                            "placeholder": "",
                            "show": true,
                            "name": "data",
                            "value": "",
                            "display_name": "Data",
                            "advanced": false,
                            "input_types": [
                              "Data"
                            ],
                            "dynamic": false,
                            "info": "The data to convert to text.",
                            "title_case": false,
                            "type": "other",
                            "_input_type": "DataInput"
                          },
                          "code": {
                            "type": "code",
                            "required": true,
                            "placeholder": "",
                            "list": false,
                            "show": true,
                            "multiline": true,
                            "value": "from axiestudio.custom import Component\nfrom axiestudio.helpers.data import data_to_text\nfrom axiestudio.io import DataInput, MultilineInput, Output, StrInput\nfrom axiestudio.schema.message import Message\n\n\nclass ParseDataComponent(Component):\n    display_name = \"Parse Data\"\n    description = \"Convert Data into plain text following a specified template.\"\n    icon = \"braces\"\n    name = \"ParseData\"\n\n    inputs = [\n        DataInput(name=\"data\", display_name=\"Data\", info=\"The data to convert to text.\"),\n        MultilineInput(\n            name=\"template\",\n            display_name=\"Template\",\n            info=\"The template to use for formatting the data. It can contain the keys {text}, {data} or any other key in the Data.\",\n            value=\"{text}\",\n        ),\n        StrInput(name=\"sep\", display_name=\"Separator\", advanced=True, value=\"\\n\"),\n    ]\n\n    outputs = [\n        Output(display_name=\"Text\", name=\"text\", method=\"parse_data\"),\n    ]\n\n    def parse_data(self) -> Message:\n        data = self.data if isinstance(self.data, list) else [self.data]\n        template = self.template\n\n        # Ensure 'text' key exists in each data item\n        for item in data:\n            if not hasattr(item, 'text'):\n                item.text = ''  # or set a default value using a method\n\n        result_string = data_to_text(template, data, sep=self.sep)\n        self.status = result_string\n        return Message(text=result_string)",
                            "fileTypes": [],
                            "file_path": "",
                            "password": false,
                            "name": "code",
                            "advanced": true,
                            "dynamic": true,
                            "info": "",
                            "load_from_db": false,
                            "title_case": false,
                            "display_name": "code"
                          },
                          "sep": {
                            "trace_as_metadata": true,
                            "load_from_db": false,
                            "list": false,
                            "required": false,
                            "placeholder": "",
                            "show": true,
                            "name": "sep",
                            "value": "\n",
                            "display_name": "Separator",
                            "advanced": true,
                            "dynamic": false,
                            "info": "",
                            "title_case": false,
                            "type": "str",
                            "_input_type": "StrInput"
                          },
                          "template": {
                            "trace_as_input": true,
                            "multiline": true,
                            "trace_as_metadata": true,
                            "load_from_db": false,
                            "list": false,
                            "required": false,
                            "placeholder": "",
                            "show": true,
                            "name": "template",
                            "value": "<{text}>",
                            "display_name": "Template",
                            "advanced": false,
                            "input_types": [
                              "Message"
                            ],
                            "dynamic": false,
                            "info": "The template to use for formatting the data. It can contain the keys {text}, {data} or any other key in the Data.",
                            "title_case": false,
                            "type": "str",
                            "_input_type": "MultilineInput"
                          }
                        },
                        "description": "Convert Data into plain text following a specified template.",
                        "icon": "braces",
                        "base_classes": [
                          "Message"
                        ],
                        "display_name": "DTC Data Parser",
                        "documentation": "",
                        "custom_fields": {},
                        "output_types": [],
                        "pinned": false,
                        "conditional_paths": [],
                        "frozen": false,
                        "outputs": [
                          {
                            "types": [
                              "Message"
                            ],
                            "selected": "Message",
                            "name": "text",
                            "display_name": "Text",
                            "method": "parse_data",
                            "value": "__UNDEFINED__",
                            "cache": true
                          }
                        ],
                        "field_order": [
                          "data",
                          "template",
                          "sep"
                        ],
                        "beta": false,
                        "edited": true,
                        "lf_version": "1.0.19"
                      },
                      "id": "ParseData-4I2Zh"
                    },
                    "selected": true,
                    "width": 384,
                    "height": 353,
                    "dragging": false,
                    "positionAbsolute": {
                      "x": -1240.8520817352141,
                      "y": -840.6603505316414
                    }
                  },
                  {
                    "id": "Prompt-ekcNX",
                    "type": "genericNode",
                    "position": {
                      "x": -2440.8619359726167,
                      "y": -841.2099164952785
                    },
                    "data": {
                      "type": "Prompt",
                      "node": {
                        "template": {
                          "_type": "Component",
                          "code": {
                            "type": "code",
                            "required": true,
                            "placeholder": "",
                            "list": false,
                            "show": true,
                            "multiline": true,
                            "value": "from axiestudio.base.prompts.api_utils import process_prompt_template\nfrom axiestudio.custom import Component\nfrom axiestudio.inputs.inputs import DefaultPromptField\nfrom axiestudio.io import Output, PromptInput\nfrom axiestudio.schema.message import Message\nfrom axiestudio.template.utils import update_template_values\n\n\nclass PromptComponent(Component):\n    display_name: str = \"Prompt\"\n    description: str = \"Create a prompt template with dynamic variables.\"\n    icon = \"prompts\"\n    trace_type = \"prompt\"\n    name = \"Prompt\"\n\n    inputs = [\n        PromptInput(name=\"template\", display_name=\"Template\"),\n    ]\n\n    outputs = [\n        Output(display_name=\"Prompt Message\", name=\"prompt\", method=\"build_prompt\"),\n    ]\n\n    async def build_prompt(\n        self,\n    ) -> Message:\n        prompt = await Message.from_template_and_variables(**self._attributes)\n        self.status = prompt.text\n        return prompt\n\n    def _update_template(self, frontend_node: dict):\n        prompt_template = frontend_node[\"template\"][\"template\"][\"value\"]\n        custom_fields = frontend_node[\"custom_fields\"]\n        frontend_node_template = frontend_node[\"template\"]\n        _ = process_prompt_template(\n            template=prompt_template,\n            name=\"template\",\n            custom_fields=custom_fields,\n            frontend_node_template=frontend_node_template,\n        )\n        return frontend_node\n\n    def post_code_processing(self, new_frontend_node: dict, current_frontend_node: dict):\n        \"\"\"\n        This function is called after the code validation is done.\n        \"\"\"\n        frontend_node = super().post_code_processing(new_frontend_node, current_frontend_node)\n        template = frontend_node[\"template\"][\"template\"][\"value\"]\n        # Kept it duplicated for backwards compatibility\n        _ = process_prompt_template(\n            template=template,\n            name=\"template\",\n            custom_fields=frontend_node[\"custom_fields\"],\n            frontend_node_template=frontend_node[\"template\"],\n        )\n        # Now that template is updated, we need to grab any values that were set in the current_frontend_node\n        # and update the frontend_node with those values\n        update_template_values(new_template=frontend_node, previous_template=current_frontend_node[\"template\"])\n        return frontend_node\n\n    def _get_fallback_input(self, **kwargs):\n        return DefaultPromptField(**kwargs)\n",
                            "fileTypes": [],
                            "file_path": "",
                            "password": false,
                            "name": "code",
                            "advanced": true,
                            "dynamic": true,
                            "info": "",
                            "load_from_db": false,
                            "title_case": false,
                            "display_name": "code"
                          },
                          "template": {
                            "trace_as_input": true,
                            "list": false,
                            "required": false,
                            "placeholder": "",
                            "show": true,
                            "name": "template",
                            "value": "SELECT * FROM {table} WHERE \"Tractor Model Code\" like '%{TMC}%' AND \"Suspect Parameter Number\" = '{SPN}' AND \"Failure Mode Identifier\" = '{FMI}';",
                            "display_name": "Template",
                            "advanced": false,
                            "dynamic": false,
                            "info": "",
                            "title_case": false,
                            "type": "prompt",
                            "_input_type": "PromptInput"
                          },
                          "table": {
                            "field_type": "str",
                            "required": false,
                            "placeholder": "",
                            "list": false,
                            "show": true,
                            "multiline": true,
                            "value": "codici_errore",
                            "fileTypes": [],
                            "file_path": "",
                            "name": "table",
                            "display_name": "table",
                            "advanced": false,
                            "input_types": [
                              "Message",
                              "Text"
                            ],
                            "dynamic": false,
                            "info": "",
                            "load_from_db": false,
                            "title_case": false,
                            "type": "str"
                          },
                          "SPN": {
                            "field_type": "str",
                            "required": false,
                            "placeholder": "",
                            "list": false,
                            "show": true,
                            "multiline": true,
                            "value": "",
                            "fileTypes": [],
                            "file_path": "",
                            "name": "SPN",
                            "display_name": "SPN",
                            "advanced": false,
                            "input_types": [
                              "Message",
                              "Text"
                            ],
                            "dynamic": false,
                            "info": "",
                            "load_from_db": false,
                            "title_case": false,
                            "type": "str"
                          },
                          "FMI": {
                            "field_type": "str",
                            "required": false,
                            "placeholder": "",
                            "list": false,
                            "show": true,
                            "multiline": true,
                            "value": "",
                            "fileTypes": [],
                            "file_path": "",
                            "name": "FMI",
                            "display_name": "FMI",
                            "advanced": false,
                            "input_types": [
                              "Message",
                              "Text"
                            ],
                            "dynamic": false,
                            "info": "",
                            "load_from_db": false,
                            "title_case": false,
                            "type": "str"
                          },
                          "TMC": {
                            "field_type": "str",
                            "required": false,
                            "placeholder": "",
                            "list": false,
                            "show": true,
                            "multiline": true,
                            "value": "",
                            "fileTypes": [],
                            "file_path": "",
                            "name": "TMC",
                            "display_name": "TMC",
                            "advanced": false,
                            "input_types": [
                              "Message",
                              "Text"
                            ],
                            "dynamic": false,
                            "info": "",
                            "load_from_db": false,
                            "title_case": false,
                            "type": "str"
                          }
                        },
                        "description": "Create a prompt template with dynamic variables.",
                        "icon": "prompts",
                        "is_input": null,
                        "is_output": null,
                        "is_composition": null,
                        "base_classes": [
                          "Message"
                        ],
                        "name": "",
                        "display_name": "DTC Query Builder",
                        "documentation": "",
                        "custom_fields": {
                          "template": [
                            "table",
                            "TMC",
                            "SPN",
                            "FMI"
                          ]
                        },
                        "output_types": [],
                        "full_path": null,
                        "pinned": false,
                        "conditional_paths": [],
                        "frozen": false,
                        "outputs": [
                          {
                            "types": [
                              "Message"
                            ],
                            "selected": "Message",
                            "name": "prompt",
                            "hidden": null,
                            "display_name": "Prompt Message",
                            "method": "build_prompt",
                            "value": "__UNDEFINED__",
                            "cache": true,
                            "required_inputs": null
                          }
                        ],
                        "field_order": [
                          "template"
                        ],
                        "beta": false,
                        "error": null,
                        "edited": false,
                        "metadata": {},
                        "lf_version": "1.0.19"
                      },
                      "id": "Prompt-ekcNX"
                    },
                    "selected": true,
                    "width": 384,
                    "height": 649,
                    "dragging": false,
                    "positionAbsolute": {
                      "x": -2440.8619359726167,
                      "y": -841.2099164952785
                    }
                  },
                  {
                    "id": "SQLCleaner-d38L0",
                    "type": "genericNode",
                    "position": {
                      "x": -2041.1339656996165,
                      "y": -840.2959332945509
                    },
                    "data": {
                      "type": "SQLCleaner",
                      "node": {
                        "template": {
                          "_type": "Component",
                          "code": {
                            "type": "code",
                            "required": true,
                            "placeholder": "",
                            "list": false,
                            "show": true,
                            "multiline": true,
                            "value": "from axiestudio.custom import Component\nfrom axiestudio.io import MessageTextInput, Output\nfrom axiestudio.schema.message import Message\n\nclass SQLCleanerComponent(Component):\n    display_name = \"SQL Cleaner\"\n    description = \"Cleans SQL queries by removing conditions with 'Not found' values.\"\n    icon = \"🧹\"\n    name = \"SQLCleaner\"\n    inputs = [\n        MessageTextInput(\n            name=\"sql_query\",\n            display_name=\"SQL Query\",\n            info=\"The SQL query to clean.\",\n            required=True\n        ),\n    ]\n    outputs = [\n        Output(display_name=\"Cleaned SQL\", name=\"cleaned_sql\", method=\"clean_sql\"),\n    ]\n    def clean_sql(self) -> Message:\n        sql_query = self.sql_query\n        # Replace 'Not found' with '@' if the query is invalid\n        if self._is_query_invalid(sql_query):\n            sql_query = sql_query.replace('Not found', '@')\n        \n        # Normalize 'LIKE' conditions to '=' for consistency\n        sql_query = self._normalize_like_conditions(sql_query)\n\n        # Clean the SQL query by removing unwanted conditions\n        cleaned_sql = self._remove_unwanted_conditions(sql_query)\n\n        self.status = cleaned_sql\n        return Message(text=cleaned_sql)\n\n    def _is_query_invalid(self, sql_query: str) -> bool:\n        \"\"\"Check if the SQL query contains conditions that should result in no output.\"\"\"\n        return '\"Suspect Parameter Number\" = \\'Not found\\'' in sql_query\n\n    def _normalize_like_conditions(self, sql_query: str) -> str:\n        \"\"\"Convert 'LIKE %Not found%' conditions to '=' for consistency.\"\"\"\n        return sql_query.replace('\"Tractor Model Code\" like \\'%Not found%\\'', '\"Tractor Model Code\" = \\'Not found\\'')\n\n    def _remove_unwanted_conditions(self, sql_query: str) -> str:\n        \"\"\"Remove conditions with 'Not found' from the SQL query.\"\"\"\n        if \"WHERE\" in sql_query.upper():\n            select_part, where_part = sql_query.split(\"WHERE\", 1)\n            conditions = where_part.split(\"AND\")\n            cleaned_conditions = [cond for cond in conditions if \"'Not found'\" not in cond]\n\n            # Reconstruct the cleaned SQL query\n            return f\"{select_part.strip()} WHERE {' AND '.join(cleaned_conditions).strip()}\" if cleaned_conditions else select_part.strip()\n        \n        return sql_query",
                            "fileTypes": [],
                            "file_path": "",
                            "password": false,
                            "name": "code",
                            "advanced": true,
                            "dynamic": true,
                            "info": "",
                            "load_from_db": false,
                            "title_case": false,
                            "display_name": "code"
                          },
                          "sql_query": {
                            "trace_as_input": true,
                            "trace_as_metadata": true,
                            "load_from_db": false,
                            "list": false,
                            "required": true,
                            "placeholder": "",
                            "show": true,
                            "name": "sql_query",
                            "value": "",
                            "display_name": "SQL Query",
                            "advanced": false,
                            "input_types": [
                              "Message"
                            ],
                            "dynamic": false,
                            "info": "The SQL query to clean.",
                            "title_case": false,
                            "type": "str",
                            "_input_type": "MessageTextInput"
                          }
                        },
                        "description": "Cleans SQL queries by removing conditions with 'Not found' values.",
                        "icon": "🧹",
                        "base_classes": [
                          "Message"
                        ],
                        "display_name": "DTC Query Cleaner",
                        "documentation": "",
                        "custom_fields": {},
                        "output_types": [],
                        "pinned": false,
                        "conditional_paths": [],
                        "frozen": false,
                        "outputs": [
                          {
                            "types": [
                              "Message"
                            ],
                            "selected": "Message",
                            "name": "cleaned_sql",
                            "display_name": "Cleaned SQL",
                            "method": "clean_sql",
                            "value": "__UNDEFINED__",
                            "cache": true
                          }
                        ],
                        "field_order": [
                          "sql_query"
                        ],
                        "beta": false,
                        "edited": true,
                        "metadata": {},
                        "lf_version": "1.0.19"
                      },
                      "id": "SQLCleaner-d38L0"
                    },
                    "selected": true,
                    "width": 384,
                    "height": 301,
                    "dragging": false,
                    "positionAbsolute": {
                      "x": -2041.1339656996165,
                      "y": -840.2959332945509
                    }
                  }
                ],
                "edges": [
                  {
                    "source": "SQLiteQueryTool-MNWYz",
                    "sourceHandle": "{œdataTypeœ:œSQLiteQueryToolœ,œidœ:œSQLiteQueryTool-MNWYzœ,œnameœ:œapi_run_modelœ,œoutput_typesœ:[œDataœ]}",
                    "target": "ParseData-4I2Zh",
                    "targetHandle": "{œfieldNameœ:œdataœ,œidœ:œParseData-4I2Zhœ,œinputTypesœ:[œDataœ],œtypeœ:œotherœ}",
                    "data": {
                      "targetHandle": {
                        "fieldName": "data",
                        "id": "ParseData-4I2Zh",
                        "inputTypes": [
                          "Data"
                        ],
                        "type": "other"
                      },
                      "sourceHandle": {
                        "dataType": "SQLiteQueryTool",
                        "id": "SQLiteQueryTool-MNWYz",
                        "name": "api_run_model",
                        "output_types": [
                          "Data"
                        ]
                      }
                    },
                    "id": "reactflow__edge-SQLiteQueryTool-MNWYz{œdataTypeœ:œSQLiteQueryToolœ,œidœ:œSQLiteQueryTool-MNWYzœ,œnameœ:œapi_run_modelœ,œoutput_typesœ:[œDataœ]}-ParseData-4I2Zh{œfieldNameœ:œdataœ,œidœ:œParseData-4I2Zhœ,œinputTypesœ:[œDataœ],œtypeœ:œotherœ}",
                    "className": "",
                    "selected": false,
                    "animated": false
                  },
                  {
                    "source": "Prompt-ekcNX",
                    "sourceHandle": "{œdataTypeœ:œPromptœ,œidœ:œPrompt-ekcNXœ,œnameœ:œpromptœ,œoutput_typesœ:[œMessageœ]}",
                    "target": "SQLCleaner-d38L0",
                    "targetHandle": "{œfieldNameœ:œsql_queryœ,œidœ:œSQLCleaner-d38L0œ,œinputTypesœ:[œMessageœ],œtypeœ:œstrœ}",
                    "data": {
                      "targetHandle": {
                        "fieldName": "sql_query",
                        "id": "SQLCleaner-d38L0",
                        "inputTypes": [
                          "Message"
                        ],
                        "type": "str"
                      },
                      "sourceHandle": {
                        "dataType": "Prompt",
                        "id": "Prompt-ekcNX",
                        "name": "prompt",
                        "output_types": [
                          "Message"
                        ]
                      }
                    },
                    "id": "reactflow__edge-Prompt-ekcNX{œdataTypeœ:œPromptœ,œidœ:œPrompt-ekcNXœ,œnameœ:œpromptœ,œoutput_typesœ:[œMessageœ]}-SQLCleaner-d38L0{œfieldNameœ:œsql_queryœ,œidœ:œSQLCleaner-d38L0œ,œinputTypesœ:[œMessageœ],œtypeœ:œstrœ}",
                    "selected": false,
                    "className": "",
                    "animated": false
                  },
                  {
                    "source": "SQLCleaner-d38L0",
                    "sourceHandle": "{œdataTypeœ:œSQLCleanerœ,œidœ:œSQLCleaner-d38L0œ,œnameœ:œcleaned_sqlœ,œoutput_typesœ:[œMessageœ]}",
                    "target": "SQLiteQueryTool-MNWYz",
                    "targetHandle": "{œfieldNameœ:œqueryœ,œidœ:œSQLiteQueryTool-MNWYzœ,œinputTypesœ:[œMessageœ],œtypeœ:œstrœ}",
                    "data": {
                      "targetHandle": {
                        "fieldName": "query",
                        "id": "SQLiteQueryTool-MNWYz",
                        "inputTypes": [
                          "Message"
                        ],
                        "type": "str"
                      },
                      "sourceHandle": {
                        "dataType": "SQLCleaner",
                        "id": "SQLCleaner-d38L0",
                        "name": "cleaned_sql",
                        "output_types": [
                          "Message"
                        ]
                      }
                    },
                    "id": "reactflow__edge-SQLCleaner-d38L0{œdataTypeœ:œSQLCleanerœ,œidœ:œSQLCleaner-d38L0œ,œnameœ:œcleaned_sqlœ,œoutput_typesœ:[œMessageœ]}-SQLiteQueryTool-MNWYz{œfieldNameœ:œqueryœ,œidœ:œSQLiteQueryTool-MNWYzœ,œinputTypesœ:[œMessageœ],œtypeœ:œstrœ}",
                    "className": "",
                    "selected": false,
                    "animated": false
                  }
                ],
                "viewport": {
                  "zoom": 1,
                  "x": 0,
                  "y": 0
                }
              },
              "is_component": false,
              "name": "Gigantic Bassi",
              "description": "",
              "id": "477Rx"
            },
            "outputs": [
              {
                "types": [
                  "Tool"
                ],
                "selected": "Tool",
                "name": "SQLiteQueryTool-MNWYz_api_build_tool",
                "display_name": "Tool",
                "method": "build_tool",
                "value": "__UNDEFINED__",
                "cache": true,
                "required_inputs": [
                  "database_uri",
                  "query"
                ],
                "proxy": {
                  "id": "SQLiteQueryTool-MNWYz",
                  "name": "api_build_tool",
                  "nodeDisplayName": "DTC Data Retriever"
                }
              },
              {
                "types": [
                  "Message"
                ],
                "selected": "Message",
                "name": "ParseData-4I2Zh_text",
                "display_name": "Text",
                "method": "parse_data",
                "value": "__UNDEFINED__",
                "cache": true,
                "proxy": {
                  "id": "ParseData-4I2Zh",
                  "name": "text",
                  "nodeDisplayName": "DTC Data Parser"
                }
              }
            ],
            "lf_version": "1.0.19"
          }
        },
        "id": "groupComponent-Jcwnj",
        "position": {
          "x": -1840.7992941942052,
          "y": -840.6324269284289
        },
        "type": "genericNode",
        "width": 384,
        "height": 673,
        "selected": false,
        "dragging": false
      },
      {
        "data": {
          "id": "groupComponent-Ar7df",
          "type": "GroupNode",
          "node": {
            "display_name": "TBU Data Retriever",
            "documentation": "",
            "description": "",
            "template": {
              "code_SQLiteQueryTool-tALad": {
                "type": "code",
                "required": true,
                "placeholder": "",
                "list": false,
                "show": true,
                "multiline": true,
                "value": "from axiestudio.base.langchain_utilities.model import LCToolComponent\nfrom axiestudio.field_typing import Tool\nfrom axiestudio.inputs import MessageTextInput, MultilineInput\nfrom axiestudio.schema import Data\nfrom sqlalchemy import create_engine, text\nfrom sqlalchemy.exc import SQLAlchemyError\nfrom typing import Union, List, Tuple\n\nclass SQLiteQueryTool(LCToolComponent):\n    display_name = \"SQLite Query Executor\"\n    description = \"Executes a given SQL query on a specified SQLite database using a URI.\"\n    icon = \"🔎\"\n    name = \"SQLiteQueryTool\"\n    inputs = [\n        MessageTextInput(\n            name=\"database_uri\",\n            display_name=\"Database URI\",\n            info=\"URI of the SQLite database (e.g., sqlite:///path/to/database.db).\",\n            required=True\n        ),\n        MultilineInput(\n            name=\"query\",\n            display_name=\"SQL Query\",\n            info=\"SQL query to be executed on the database.\",\n            required=True\n        )\n    ]\n\n    def run_model(self) -> Union[Data, List[Data]]:\n        \"\"\"Executes the SQL query and returns the results.\"\"\"\n        database_uri = self.database_uri\n        query = self.query\n\n        # Connect to the SQLite database using SQLAlchemy with the provided URI\n        engine = create_engine(database_uri)\n        try:\n            result_data = self._execute_query(engine, query)\n            return self._format_results(result_data)\n        except SQLAlchemyError as error:\n            return self._handle_error(error)\n\n    def _execute_query(self, engine, query: str) -> Tuple[List[tuple], List[str]]:\n        \"\"\"Executes the SQL query and returns the raw results and column keys.\"\"\"\n        with engine.connect() as connection:\n            result = connection.execute(text(query))\n            rows = result.fetchall()\n            keys = result.keys()\n            return rows, keys\n\n    def _format_results(self, result_data: Tuple[List[tuple], List[str]]) -> List[Data]:\n        \"\"\"Formats the raw results into a list of Data objects.\"\"\"\n        rows, keys = result_data\n        if not rows:\n            return []\n\n        # Create a list of dictionaries mapping keys to row values\n        formatted_results = [dict(zip(keys, row)) for row in rows]\n        return [Data(data=row, text=str(row)) for row in formatted_results]\n\n    def _handle_error(self, error: SQLAlchemyError) -> List[Data]:\n        \"\"\"Handles errors during query execution.\"\"\"\n        error_message = f\"Error executing query: {str(error)}\"\n        self.status = error_message\n        return [Data(data={\"error\": error_message})]\n\n    def build_tool(self) -> Tool:\n        \"\"\"Builds the tool with the execution function.\"\"\"\n        return Tool(\n            name=\"sqlite_query_tool\",\n            description=self.description,\n            func=self.run_model,\n        )",
                "fileTypes": [],
                "file_path": "",
                "password": false,
                "name": "code",
                "advanced": true,
                "dynamic": true,
                "info": "",
                "load_from_db": false,
                "title_case": false,
                "display_name": "code",
                "proxy": {
                  "id": "SQLiteQueryTool-tALad",
                  "field": "code"
                }
              },
              "database_uri_SQLiteQueryTool-tALad": {
                "trace_as_input": true,
                "trace_as_metadata": true,
                "load_from_db": false,
                "list": false,
                "required": true,
                "placeholder": "",
                "show": true,
                "name": "database_uri",
                "value": "sqlite://///Users/michelepastorello/Desktop/ArgoBot/TBU.sqlite3",
                "display_name": "Database URI",
                "advanced": false,
                "input_types": [
                  "Message"
                ],
                "dynamic": false,
                "info": "URI of the SQLite database (e.g., sqlite:///path/to/database.db).",
                "title_case": false,
                "type": "str",
                "_input_type": "MessageTextInput",
                "proxy": {
                  "id": "SQLiteQueryTool-tALad",
                  "field": "database_uri"
                }
              },
              "code_ParseData-Y56oH": {
                "type": "code",
                "required": true,
                "placeholder": "",
                "list": false,
                "show": true,
                "multiline": true,
                "value": "from axiestudio.custom import Component\nfrom axiestudio.helpers.data import data_to_text\nfrom axiestudio.io import DataInput, MultilineInput, Output, StrInput\nfrom axiestudio.schema.message import Message\n\n\nclass ParseDataComponent(Component):\n    display_name = \"Parse Data\"\n    description = \"Convert Data into plain text following a specified template.\"\n    icon = \"braces\"\n    name = \"ParseData\"\n\n    inputs = [\n        DataInput(name=\"data\", display_name=\"Data\", info=\"The data to convert to text.\"),\n        MultilineInput(\n            name=\"template\",\n            display_name=\"Template\",\n            info=\"The template to use for formatting the data. It can contain the keys {text}, {data} or any other key in the Data.\",\n            value=\"{text}\",\n        ),\n        StrInput(name=\"sep\", display_name=\"Separator\", advanced=True, value=\"\\n\"),\n    ]\n\n    outputs = [\n        Output(display_name=\"Text\", name=\"text\", method=\"parse_data\"),\n    ]\n\n    def parse_data(self) -> Message:\n        data = self.data if isinstance(self.data, list) else [self.data]\n        template = self.template\n\n        # Ensure 'text' key exists in each data item\n        for item in data:\n            if not hasattr(item, 'text'):\n                item.text = ''  # or set a default value using a method\n\n        result_string = data_to_text(template, data, sep=self.sep)\n        self.status = result_string\n        return Message(text=result_string)",
                "fileTypes": [],
                "file_path": "",
                "password": false,
                "name": "code",
                "advanced": true,
                "dynamic": true,
                "info": "",
                "load_from_db": false,
                "title_case": false,
                "display_name": "code",
                "proxy": {
                  "id": "ParseData-Y56oH",
                  "field": "code"
                }
              },
              "sep_ParseData-Y56oH": {
                "trace_as_metadata": true,
                "load_from_db": false,
                "list": false,
                "required": false,
                "placeholder": "",
                "show": true,
                "name": "sep",
                "value": "\n",
                "display_name": "Separator",
                "advanced": true,
                "dynamic": false,
                "info": "",
                "title_case": false,
                "type": "str",
                "_input_type": "StrInput",
                "proxy": {
                  "id": "ParseData-Y56oH",
                  "field": "sep"
                }
              },
              "template_ParseData-Y56oH": {
                "trace_as_input": true,
                "multiline": true,
                "trace_as_metadata": true,
                "load_from_db": false,
                "list": false,
                "required": false,
                "placeholder": "",
                "show": true,
                "name": "template",
                "value": "<technical_bulletin>\n[{bulletin_code}]\n[{publication_year}]\n[{tractor_models}]\n[{text}]\n</technical_bulletin>",
                "display_name": "Template",
                "advanced": true,
                "input_types": [
                  "Message"
                ],
                "dynamic": false,
                "info": "The template to use for formatting the data. It can contain the keys {text}, {data} or any other key in the Data.",
                "title_case": false,
                "type": "str",
                "_input_type": "MultilineInput",
                "proxy": {
                  "id": "ParseData-Y56oH",
                  "field": "template"
                }
              },
              "code_Prompt-vkXht": {
                "type": "code",
                "required": true,
                "placeholder": "",
                "list": false,
                "show": true,
                "multiline": true,
                "value": "from axiestudio.base.prompts.api_utils import process_prompt_template\nfrom axiestudio.custom import Component\nfrom axiestudio.inputs.inputs import DefaultPromptField\nfrom axiestudio.io import Output, PromptInput\nfrom axiestudio.schema.message import Message\nfrom axiestudio.template.utils import update_template_values\n\n\nclass PromptComponent(Component):\n    display_name: str = \"Prompt\"\n    description: str = \"Create a prompt template with dynamic variables.\"\n    icon = \"prompts\"\n    trace_type = \"prompt\"\n    name = \"Prompt\"\n\n    inputs = [\n        PromptInput(name=\"template\", display_name=\"Template\"),\n    ]\n\n    outputs = [\n        Output(display_name=\"Prompt Message\", name=\"prompt\", method=\"build_prompt\"),\n    ]\n\n    async def build_prompt(\n        self,\n    ) -> Message:\n        prompt = await Message.from_template_and_variables(**self._attributes)\n        self.status = prompt.text\n        return prompt\n\n    def _update_template(self, frontend_node: dict):\n        prompt_template = frontend_node[\"template\"][\"template\"][\"value\"]\n        custom_fields = frontend_node[\"custom_fields\"]\n        frontend_node_template = frontend_node[\"template\"]\n        _ = process_prompt_template(\n            template=prompt_template,\n            name=\"template\",\n            custom_fields=custom_fields,\n            frontend_node_template=frontend_node_template,\n        )\n        return frontend_node\n\n    def post_code_processing(self, new_frontend_node: dict, current_frontend_node: dict):\n        \"\"\"\n        This function is called after the code validation is done.\n        \"\"\"\n        frontend_node = super().post_code_processing(new_frontend_node, current_frontend_node)\n        template = frontend_node[\"template\"][\"template\"][\"value\"]\n        # Kept it duplicated for backwards compatibility\n        _ = process_prompt_template(\n            template=template,\n            name=\"template\",\n            custom_fields=frontend_node[\"custom_fields\"],\n            frontend_node_template=frontend_node[\"template\"],\n        )\n        # Now that template is updated, we need to grab any values that were set in the current_frontend_node\n        # and update the frontend_node with those values\n        update_template_values(new_template=frontend_node, previous_template=current_frontend_node[\"template\"])\n        return frontend_node\n\n    def _get_fallback_input(self, **kwargs):\n        return DefaultPromptField(**kwargs)\n",
                "fileTypes": [],
                "file_path": "",
                "password": false,
                "name": "code",
                "advanced": true,
                "dynamic": true,
                "info": "",
                "load_from_db": false,
                "title_case": false,
                "display_name": "code",
                "proxy": {
                  "id": "Prompt-vkXht",
                  "field": "code"
                }
              },
              "template_Prompt-vkXht": {
                "trace_as_input": true,
                "list": false,
                "required": false,
                "placeholder": "",
                "show": true,
                "name": "template",
                "value": "SELECT * FROM {table} WHERE \"bulletin_code\" = '{TBC}' AND \"publication_year\" = '{year}' AND \"tractor_models\" like '%{TMC}%';",
                "display_name": "Template",
                "advanced": true,
                "dynamic": false,
                "info": "",
                "title_case": false,
                "type": "prompt",
                "_input_type": "PromptInput",
                "proxy": {
                  "id": "Prompt-vkXht",
                  "field": "template"
                }
              },
              "table_Prompt-vkXht": {
                "field_type": "str",
                "required": false,
                "placeholder": "",
                "list": false,
                "show": true,
                "multiline": true,
                "value": "TBU",
                "fileTypes": [],
                "file_path": "",
                "name": "table",
                "display_name": "table",
                "advanced": false,
                "input_types": [
                  "Message",
                  "Text"
                ],
                "dynamic": false,
                "info": "",
                "load_from_db": false,
                "title_case": false,
                "type": "str",
                "proxy": {
                  "id": "Prompt-vkXht",
                  "field": "table"
                }
              },
              "TMC_Prompt-vkXht": {
                "field_type": "str",
                "required": false,
                "placeholder": "",
                "list": false,
                "show": true,
                "multiline": true,
                "value": "",
                "fileTypes": [],
                "file_path": "",
                "name": "TMC",
                "display_name": "TMC",
                "advanced": false,
                "input_types": [
                  "Message",
                  "Text"
                ],
                "dynamic": false,
                "info": "",
                "load_from_db": false,
                "title_case": false,
                "type": "str",
                "proxy": {
                  "id": "Prompt-vkXht",
                  "field": "TMC"
                }
              },
              "year_Prompt-vkXht": {
                "field_type": "str",
                "required": false,
                "placeholder": "",
                "list": false,
                "show": true,
                "multiline": true,
                "value": "",
                "fileTypes": [],
                "file_path": "",
                "name": "year",
                "display_name": "year",
                "advanced": false,
                "input_types": [
                  "Message",
                  "Text"
                ],
                "dynamic": false,
                "info": "",
                "load_from_db": false,
                "title_case": false,
                "type": "str",
                "proxy": {
                  "id": "Prompt-vkXht",
                  "field": "year"
                }
              },
              "TBC_Prompt-vkXht": {
                "field_type": "str",
                "required": false,
                "placeholder": "",
                "list": false,
                "show": true,
                "multiline": true,
                "value": "",
                "fileTypes": [],
                "file_path": "",
                "name": "TBC",
                "display_name": "TBC",
                "advanced": false,
                "input_types": [
                  "Message",
                  "Text"
                ],
                "dynamic": false,
                "info": "",
                "load_from_db": false,
                "title_case": false,
                "type": "str",
                "proxy": {
                  "id": "Prompt-vkXht",
                  "field": "TBC"
                }
              },
              "code_SQLCleaner-y0UyV": {
                "type": "code",
                "required": true,
                "placeholder": "",
                "list": false,
                "show": true,
                "multiline": true,
                "value": "from axiestudio.custom import Component\nfrom axiestudio.io import MessageTextInput, Output\nfrom axiestudio.schema.message import Message\n\nclass SQLCleanerComponent(Component):\n    display_name = \"SQL Cleaner\"\n    description = \"Cleans SQL queries by removing conditions with 'Not found' values.\"\n    icon = \"🧹\"\n    name = \"SQLCleaner\"\n    inputs = [\n        MessageTextInput(\n            name=\"sql_query\",\n            display_name=\"SQL Query\",\n            info=\"The SQL query to clean.\",\n            required=True\n        ),\n    ]\n    outputs = [\n        Output(display_name=\"Cleaned SQL\", name=\"cleaned_sql\", method=\"clean_sql\"),\n    ]\n    def clean_sql(self) -> Message:\n        sql_query = self.sql_query\n        # Replace 'Not found' with '@' if the query is invalid\n        if self._is_query_invalid(sql_query):\n            sql_query = sql_query.replace('Not found', '@')\n        \n        # Normalize 'LIKE' conditions to '=' for consistency\n        sql_query = self._normalize_like_conditions(sql_query)\n\n        # Clean the SQL query by removing unwanted conditions\n        cleaned_sql = self._remove_unwanted_conditions(sql_query)\n\n        self.status = cleaned_sql\n        return Message(text=cleaned_sql)\n\n    def _is_query_invalid(self, sql_query: str) -> bool:\n        \"\"\"Check if the SQL query contains conditions that should result in no output.\"\"\"\n        return (\n            \"SELECT * FROM TBU\" in sql_query and\n            \"WHERE\" in sql_query.upper() and\n            '\"bulletin_code\" = \\'Not found\\'' in sql_query and\n            '\"publication_year\" = \\'Not found\\'' in sql_query and\n            '\"tractor_models\" like \\'%Not found%\\'' in sql_query\n        )\n\n    def _normalize_like_conditions(self, sql_query: str) -> str:\n        \"\"\"Convert 'LIKE %Not found%' conditions to '=' for consistency.\"\"\"\n        return sql_query.replace('\"tractor_models\" like \\'%Not found%\\'', '\"tractor_models\" = \\'Not found\\'')\n\n    def _remove_unwanted_conditions(self, sql_query: str) -> str:\n        \"\"\"Remove conditions with 'Not found' from the SQL query.\"\"\"\n        if \"WHERE\" in sql_query.upper():\n            select_part, where_part = sql_query.split(\"WHERE\", 1)\n            conditions = where_part.split(\"AND\")\n            cleaned_conditions = [cond for cond in conditions if \"'Not found'\" not in cond]\n\n            # Reconstruct the cleaned SQL query\n            return f\"{select_part.strip()} WHERE {' AND '.join(cleaned_conditions).strip()}\" if cleaned_conditions else select_part.strip()\n        \n        return sql_query",
                "fileTypes": [],
                "file_path": "",
                "password": false,
                "name": "code",
                "advanced": true,
                "dynamic": true,
                "info": "",
                "load_from_db": false,
                "title_case": false,
                "display_name": "code",
                "proxy": {
                  "id": "SQLCleaner-y0UyV",
                  "field": "code"
                }
              }
            },
            "flow": {
              "data": {
                "nodes": [
                  {
                    "id": "SQLiteQueryTool-tALad",
                    "type": "genericNode",
                    "position": {
                      "x": -1240.2021346988672,
                      "y": -840.3202810435371
                    },
                    "data": {
                      "type": "SQLiteQueryTool",
                      "node": {
                        "template": {
                          "_type": "Component",
                          "code": {
                            "type": "code",
                            "required": true,
                            "placeholder": "",
                            "list": false,
                            "show": true,
                            "multiline": true,
                            "value": "from axiestudio.base.langchain_utilities.model import LCToolComponent\nfrom axiestudio.field_typing import Tool\nfrom axiestudio.inputs import MessageTextInput, MultilineInput\nfrom axiestudio.schema import Data\nfrom sqlalchemy import create_engine, text\nfrom sqlalchemy.exc import SQLAlchemyError\nfrom typing import Union, List, Tuple\n\nclass SQLiteQueryTool(LCToolComponent):\n    display_name = \"SQLite Query Executor\"\n    description = \"Executes a given SQL query on a specified SQLite database using a URI.\"\n    icon = \"🔎\"\n    name = \"SQLiteQueryTool\"\n    inputs = [\n        MessageTextInput(\n            name=\"database_uri\",\n            display_name=\"Database URI\",\n            info=\"URI of the SQLite database (e.g., sqlite:///path/to/database.db).\",\n            required=True\n        ),\n        MultilineInput(\n            name=\"query\",\n            display_name=\"SQL Query\",\n            info=\"SQL query to be executed on the database.\",\n            required=True\n        )\n    ]\n\n    def run_model(self) -> Union[Data, List[Data]]:\n        \"\"\"Executes the SQL query and returns the results.\"\"\"\n        database_uri = self.database_uri\n        query = self.query\n\n        # Connect to the SQLite database using SQLAlchemy with the provided URI\n        engine = create_engine(database_uri)\n        try:\n            result_data = self._execute_query(engine, query)\n            return self._format_results(result_data)\n        except SQLAlchemyError as error:\n            return self._handle_error(error)\n\n    def _execute_query(self, engine, query: str) -> Tuple[List[tuple], List[str]]:\n        \"\"\"Executes the SQL query and returns the raw results and column keys.\"\"\"\n        with engine.connect() as connection:\n            result = connection.execute(text(query))\n            rows = result.fetchall()\n            keys = result.keys()\n            return rows, keys\n\n    def _format_results(self, result_data: Tuple[List[tuple], List[str]]) -> List[Data]:\n        \"\"\"Formats the raw results into a list of Data objects.\"\"\"\n        rows, keys = result_data\n        if not rows:\n            return []\n\n        # Create a list of dictionaries mapping keys to row values\n        formatted_results = [dict(zip(keys, row)) for row in rows]\n        return [Data(data=row, text=str(row)) for row in formatted_results]\n\n    def _handle_error(self, error: SQLAlchemyError) -> List[Data]:\n        \"\"\"Handles errors during query execution.\"\"\"\n        error_message = f\"Error executing query: {str(error)}\"\n        self.status = error_message\n        return [Data(data={\"error\": error_message})]\n\n    def build_tool(self) -> Tool:\n        \"\"\"Builds the tool with the execution function.\"\"\"\n        return Tool(\n            name=\"sqlite_query_tool\",\n            description=self.description,\n            func=self.run_model,\n        )",
                            "fileTypes": [],
                            "file_path": "",
                            "password": false,
                            "name": "code",
                            "advanced": true,
                            "dynamic": true,
                            "info": "",
                            "load_from_db": false,
                            "title_case": false,
                            "display_name": "code"
                          },
                          "database_uri": {
                            "trace_as_input": true,
                            "trace_as_metadata": true,
                            "load_from_db": false,
                            "list": false,
                            "required": true,
                            "placeholder": "",
                            "show": true,
                            "name": "database_uri",
                            "value": "sqlite://///Users/michelepastorello/Desktop/ArgoBot/TBU.sqlite3",
                            "display_name": "Database URI",
                            "advanced": false,
                            "input_types": [
                              "Message"
                            ],
                            "dynamic": false,
                            "info": "URI of the SQLite database (e.g., sqlite:///path/to/database.db).",
                            "title_case": false,
                            "type": "str",
                            "_input_type": "MessageTextInput"
                          },
                          "query": {
                            "trace_as_input": true,
                            "multiline": true,
                            "trace_as_metadata": true,
                            "load_from_db": false,
                            "list": false,
                            "required": true,
                            "placeholder": "",
                            "show": true,
                            "name": "query",
                            "value": "",
                            "display_name": "SQL Query",
                            "advanced": false,
                            "input_types": [
                              "Message"
                            ],
                            "dynamic": false,
                            "info": "SQL query to be executed on the database.",
                            "title_case": false,
                            "type": "str",
                            "_input_type": "MultilineInput"
                          }
                        },
                        "description": "Executes a given SQL query on a specified SQLite database using a URI.",
                        "icon": "🔎",
                        "base_classes": [
                          "Data",
                          "Tool"
                        ],
                        "display_name": "TBU Data Retriever",
                        "documentation": "",
                        "custom_fields": {},
                        "output_types": [],
                        "pinned": false,
                        "conditional_paths": [],
                        "frozen": false,
                        "outputs": [
                          {
                            "types": [
                              "Data"
                            ],
                            "selected": "Data",
                            "name": "api_run_model",
                            "display_name": "Data",
                            "method": "run_model",
                            "value": "__UNDEFINED__",
                            "cache": true,
                            "required_inputs": [
                              "database_uri",
                              "query"
                            ]
                          },
                          {
                            "types": [
                              "Tool"
                            ],
                            "selected": "Tool",
                            "name": "api_build_tool",
                            "display_name": "Tool",
                            "method": "build_tool",
                            "value": "__UNDEFINED__",
                            "cache": true,
                            "required_inputs": [
                              "database_uri",
                              "query"
                            ]
                          }
                        ],
                        "field_order": [
                          "database_uri",
                          "query"
                        ],
                        "beta": false,
                        "edited": true,
                        "metadata": {}
                      },
                      "id": "SQLiteQueryTool-tALad"
                    },
                    "selected": true,
                    "width": 384,
                    "height": 427,
                    "positionAbsolute": {
                      "x": -1240.2021346988672,
                      "y": -840.3202810435371
                    },
                    "dragging": false
                  },
                  {
                    "id": "ParseData-Y56oH",
                    "type": "genericNode",
                    "position": {
                      "x": -840.7050230647075,
                      "y": -840.6171241829331
                    },
                    "data": {
                      "type": "ParseData",
                      "node": {
                        "template": {
                          "_type": "Component",
                          "data": {
                            "trace_as_metadata": true,
                            "list": false,
                            "trace_as_input": true,
                            "required": false,
                            "placeholder": "",
                            "show": true,
                            "name": "data",
                            "value": "",
                            "display_name": "Data",
                            "advanced": false,
                            "input_types": [
                              "Data"
                            ],
                            "dynamic": false,
                            "info": "The data to convert to text.",
                            "title_case": false,
                            "type": "other",
                            "_input_type": "DataInput"
                          },
                          "code": {
                            "type": "code",
                            "required": true,
                            "placeholder": "",
                            "list": false,
                            "show": true,
                            "multiline": true,
                            "value": "from axiestudio.custom import Component\nfrom axiestudio.helpers.data import data_to_text\nfrom axiestudio.io import DataInput, MultilineInput, Output, StrInput\nfrom axiestudio.schema.message import Message\n\n\nclass ParseDataComponent(Component):\n    display_name = \"Parse Data\"\n    description = \"Convert Data into plain text following a specified template.\"\n    icon = \"braces\"\n    name = \"ParseData\"\n\n    inputs = [\n        DataInput(name=\"data\", display_name=\"Data\", info=\"The data to convert to text.\"),\n        MultilineInput(\n            name=\"template\",\n            display_name=\"Template\",\n            info=\"The template to use for formatting the data. It can contain the keys {text}, {data} or any other key in the Data.\",\n            value=\"{text}\",\n        ),\n        StrInput(name=\"sep\", display_name=\"Separator\", advanced=True, value=\"\\n\"),\n    ]\n\n    outputs = [\n        Output(display_name=\"Text\", name=\"text\", method=\"parse_data\"),\n    ]\n\n    def parse_data(self) -> Message:\n        data = self.data if isinstance(self.data, list) else [self.data]\n        template = self.template\n\n        # Ensure 'text' key exists in each data item\n        for item in data:\n            if not hasattr(item, 'text'):\n                item.text = ''  # or set a default value using a method\n\n        result_string = data_to_text(template, data, sep=self.sep)\n        self.status = result_string\n        return Message(text=result_string)",
                            "fileTypes": [],
                            "file_path": "",
                            "password": false,
                            "name": "code",
                            "advanced": true,
                            "dynamic": true,
                            "info": "",
                            "load_from_db": false,
                            "title_case": false,
                            "display_name": "code"
                          },
                          "sep": {
                            "trace_as_metadata": true,
                            "load_from_db": false,
                            "list": false,
                            "required": false,
                            "placeholder": "",
                            "show": true,
                            "name": "sep",
                            "value": "\n",
                            "display_name": "Separator",
                            "advanced": true,
                            "dynamic": false,
                            "info": "",
                            "title_case": false,
                            "type": "str",
                            "_input_type": "StrInput"
                          },
                          "template": {
                            "trace_as_input": true,
                            "multiline": true,
                            "trace_as_metadata": true,
                            "load_from_db": false,
                            "list": false,
                            "required": false,
                            "placeholder": "",
                            "show": true,
                            "name": "template",
                            "value": "<technical_bulletin>\n[{bulletin_code}]\n[{publication_year}]\n[{tractor_models}]\n[{text}]\n</technical_bulletin>",
                            "display_name": "Template",
                            "advanced": false,
                            "input_types": [
                              "Message"
                            ],
                            "dynamic": false,
                            "info": "The template to use for formatting the data. It can contain the keys {text}, {data} or any other key in the Data.",
                            "title_case": false,
                            "type": "str",
                            "_input_type": "MultilineInput"
                          }
                        },
                        "description": "Convert Data into plain text following a specified template.",
                        "icon": "braces",
                        "base_classes": [
                          "Message"
                        ],
                        "display_name": "TBU Data Parser",
                        "documentation": "",
                        "custom_fields": {},
                        "output_types": [],
                        "pinned": false,
                        "conditional_paths": [],
                        "frozen": false,
                        "outputs": [
                          {
                            "types": [
                              "Message"
                            ],
                            "selected": "Message",
                            "name": "text",
                            "display_name": "Text",
                            "method": "parse_data",
                            "value": "__UNDEFINED__",
                            "cache": true
                          }
                        ],
                        "field_order": [
                          "data",
                          "template",
                          "sep"
                        ],
                        "beta": false,
                        "edited": true,
                        "lf_version": "1.0.19"
                      },
                      "id": "ParseData-Y56oH"
                    },
                    "selected": true,
                    "width": 384,
                    "height": 353,
                    "dragging": false,
                    "positionAbsolute": {
                      "x": -840.7050230647075,
                      "y": -840.6171241829331
                    }
                  },
                  {
                    "id": "Prompt-vkXht",
                    "type": "genericNode",
                    "position": {
                      "x": -2040.71487730211,
                      "y": -841.1666901465708
                    },
                    "data": {
                      "type": "Prompt",
                      "node": {
                        "template": {
                          "_type": "Component",
                          "code": {
                            "type": "code",
                            "required": true,
                            "placeholder": "",
                            "list": false,
                            "show": true,
                            "multiline": true,
                            "value": "from axiestudio.base.prompts.api_utils import process_prompt_template\nfrom axiestudio.custom import Component\nfrom axiestudio.inputs.inputs import DefaultPromptField\nfrom axiestudio.io import Output, PromptInput\nfrom axiestudio.schema.message import Message\nfrom axiestudio.template.utils import update_template_values\n\n\nclass PromptComponent(Component):\n    display_name: str = \"Prompt\"\n    description: str = \"Create a prompt template with dynamic variables.\"\n    icon = \"prompts\"\n    trace_type = \"prompt\"\n    name = \"Prompt\"\n\n    inputs = [\n        PromptInput(name=\"template\", display_name=\"Template\"),\n    ]\n\n    outputs = [\n        Output(display_name=\"Prompt Message\", name=\"prompt\", method=\"build_prompt\"),\n    ]\n\n    async def build_prompt(\n        self,\n    ) -> Message:\n        prompt = await Message.from_template_and_variables(**self._attributes)\n        self.status = prompt.text\n        return prompt\n\n    def _update_template(self, frontend_node: dict):\n        prompt_template = frontend_node[\"template\"][\"template\"][\"value\"]\n        custom_fields = frontend_node[\"custom_fields\"]\n        frontend_node_template = frontend_node[\"template\"]\n        _ = process_prompt_template(\n            template=prompt_template,\n            name=\"template\",\n            custom_fields=custom_fields,\n            frontend_node_template=frontend_node_template,\n        )\n        return frontend_node\n\n    def post_code_processing(self, new_frontend_node: dict, current_frontend_node: dict):\n        \"\"\"\n        This function is called after the code validation is done.\n        \"\"\"\n        frontend_node = super().post_code_processing(new_frontend_node, current_frontend_node)\n        template = frontend_node[\"template\"][\"template\"][\"value\"]\n        # Kept it duplicated for backwards compatibility\n        _ = process_prompt_template(\n            template=template,\n            name=\"template\",\n            custom_fields=frontend_node[\"custom_fields\"],\n            frontend_node_template=frontend_node[\"template\"],\n        )\n        # Now that template is updated, we need to grab any values that were set in the current_frontend_node\n        # and update the frontend_node with those values\n        update_template_values(new_template=frontend_node, previous_template=current_frontend_node[\"template\"])\n        return frontend_node\n\n    def _get_fallback_input(self, **kwargs):\n        return DefaultPromptField(**kwargs)\n",
                            "fileTypes": [],
                            "file_path": "",
                            "password": false,
                            "name": "code",
                            "advanced": true,
                            "dynamic": true,
                            "info": "",
                            "load_from_db": false,
                            "title_case": false,
                            "display_name": "code"
                          },
                          "template": {
                            "trace_as_input": true,
                            "list": false,
                            "required": false,
                            "placeholder": "",
                            "show": true,
                            "name": "template",
                            "value": "SELECT * FROM {table} WHERE \"bulletin_code\" = '{TBC}' AND \"publication_year\" = '{year}' AND \"tractor_models\" like '%{TMC}%';",
                            "display_name": "Template",
                            "advanced": false,
                            "dynamic": false,
                            "info": "",
                            "title_case": false,
                            "type": "prompt",
                            "_input_type": "PromptInput"
                          },
                          "table": {
                            "field_type": "str",
                            "required": false,
                            "placeholder": "",
                            "list": false,
                            "show": true,
                            "multiline": true,
                            "value": "TBU",
                            "fileTypes": [],
                            "file_path": "",
                            "name": "table",
                            "display_name": "table",
                            "advanced": false,
                            "input_types": [
                              "Message",
                              "Text"
                            ],
                            "dynamic": false,
                            "info": "",
                            "load_from_db": false,
                            "title_case": false,
                            "type": "str"
                          },
                          "TMC": {
                            "field_type": "str",
                            "required": false,
                            "placeholder": "",
                            "list": false,
                            "show": true,
                            "multiline": true,
                            "value": "",
                            "fileTypes": [],
                            "file_path": "",
                            "name": "TMC",
                            "display_name": "TMC",
                            "advanced": false,
                            "input_types": [
                              "Message",
                              "Text"
                            ],
                            "dynamic": false,
                            "info": "",
                            "load_from_db": false,
                            "title_case": false,
                            "type": "str"
                          },
                          "year": {
                            "field_type": "str",
                            "required": false,
                            "placeholder": "",
                            "list": false,
                            "show": true,
                            "multiline": true,
                            "value": "",
                            "fileTypes": [],
                            "file_path": "",
                            "name": "year",
                            "display_name": "year",
                            "advanced": false,
                            "input_types": [
                              "Message",
                              "Text"
                            ],
                            "dynamic": false,
                            "info": "",
                            "load_from_db": false,
                            "title_case": false,
                            "type": "str"
                          },
                          "TBC": {
                            "field_type": "str",
                            "required": false,
                            "placeholder": "",
                            "list": false,
                            "show": true,
                            "multiline": true,
                            "value": "",
                            "fileTypes": [],
                            "file_path": "",
                            "name": "TBC",
                            "display_name": "TBC",
                            "advanced": false,
                            "input_types": [
                              "Message",
                              "Text"
                            ],
                            "dynamic": false,
                            "info": "",
                            "load_from_db": false,
                            "title_case": false,
                            "type": "str"
                          }
                        },
                        "description": "Create a prompt template with dynamic variables.",
                        "icon": "prompts",
                        "is_input": null,
                        "is_output": null,
                        "is_composition": null,
                        "base_classes": [
                          "Message"
                        ],
                        "name": "",
                        "display_name": "TBU Query Builder",
                        "documentation": "",
                        "custom_fields": {
                          "template": [
                            "table",
                            "TBC",
                            "year",
                            "TMC"
                          ]
                        },
                        "output_types": [],
                        "full_path": null,
                        "pinned": false,
                        "conditional_paths": [],
                        "frozen": false,
                        "outputs": [
                          {
                            "types": [
                              "Message"
                            ],
                            "selected": "Message",
                            "name": "prompt",
                            "hidden": null,
                            "display_name": "Prompt Message",
                            "method": "build_prompt",
                            "value": "__UNDEFINED__",
                            "cache": true,
                            "required_inputs": null
                          }
                        ],
                        "field_order": [
                          "template"
                        ],
                        "beta": false,
                        "error": null,
                        "edited": false,
                        "metadata": {}
                      },
                      "id": "Prompt-vkXht"
                    },
                    "selected": true,
                    "width": 384,
                    "height": 649,
                    "dragging": false,
                    "positionAbsolute": {
                      "x": -2040.71487730211,
                      "y": -841.1666901465708
                    }
                  },
                  {
                    "id": "SQLCleaner-y0UyV",
                    "type": "genericNode",
                    "position": {
                      "x": -1640.9869070291097,
                      "y": -840.2527069458431
                    },
                    "data": {
                      "type": "SQLCleaner",
                      "node": {
                        "template": {
                          "_type": "Component",
                          "code": {
                            "type": "code",
                            "required": true,
                            "placeholder": "",
                            "list": false,
                            "show": true,
                            "multiline": true,
                            "value": "from axiestudio.custom import Component\nfrom axiestudio.io import MessageTextInput, Output\nfrom axiestudio.schema.message import Message\n\nclass SQLCleanerComponent(Component):\n    display_name = \"SQL Cleaner\"\n    description = \"Cleans SQL queries by removing conditions with 'Not found' values.\"\n    icon = \"🧹\"\n    name = \"SQLCleaner\"\n    inputs = [\n        MessageTextInput(\n            name=\"sql_query\",\n            display_name=\"SQL Query\",\n            info=\"The SQL query to clean.\",\n            required=True\n        ),\n    ]\n    outputs = [\n        Output(display_name=\"Cleaned SQL\", name=\"cleaned_sql\", method=\"clean_sql\"),\n    ]\n    def clean_sql(self) -> Message:\n        sql_query = self.sql_query\n        # Replace 'Not found' with '@' if the query is invalid\n        if self._is_query_invalid(sql_query):\n            sql_query = sql_query.replace('Not found', '@')\n        \n        # Normalize 'LIKE' conditions to '=' for consistency\n        sql_query = self._normalize_like_conditions(sql_query)\n\n        # Clean the SQL query by removing unwanted conditions\n        cleaned_sql = self._remove_unwanted_conditions(sql_query)\n\n        self.status = cleaned_sql\n        return Message(text=cleaned_sql)\n\n    def _is_query_invalid(self, sql_query: str) -> bool:\n        \"\"\"Check if the SQL query contains conditions that should result in no output.\"\"\"\n        return (\n            \"SELECT * FROM TBU\" in sql_query and\n            \"WHERE\" in sql_query.upper() and\n            '\"bulletin_code\" = \\'Not found\\'' in sql_query and\n            '\"publication_year\" = \\'Not found\\'' in sql_query and\n            '\"tractor_models\" like \\'%Not found%\\'' in sql_query\n        )\n\n    def _normalize_like_conditions(self, sql_query: str) -> str:\n        \"\"\"Convert 'LIKE %Not found%' conditions to '=' for consistency.\"\"\"\n        return sql_query.replace('\"tractor_models\" like \\'%Not found%\\'', '\"tractor_models\" = \\'Not found\\'')\n\n    def _remove_unwanted_conditions(self, sql_query: str) -> str:\n        \"\"\"Remove conditions with 'Not found' from the SQL query.\"\"\"\n        if \"WHERE\" in sql_query.upper():\n            select_part, where_part = sql_query.split(\"WHERE\", 1)\n            conditions = where_part.split(\"AND\")\n            cleaned_conditions = [cond for cond in conditions if \"'Not found'\" not in cond]\n\n            # Reconstruct the cleaned SQL query\n            return f\"{select_part.strip()} WHERE {' AND '.join(cleaned_conditions).strip()}\" if cleaned_conditions else select_part.strip()\n        \n        return sql_query",
                            "fileTypes": [],
                            "file_path": "",
                            "password": false,
                            "name": "code",
                            "advanced": true,
                            "dynamic": true,
                            "info": "",
                            "load_from_db": false,
                            "title_case": false,
                            "display_name": "code"
                          },
                          "sql_query": {
                            "trace_as_input": true,
                            "trace_as_metadata": true,
                            "load_from_db": false,
                            "list": false,
                            "required": true,
                            "placeholder": "",
                            "show": true,
                            "name": "sql_query",
                            "value": "",
                            "display_name": "SQL Query",
                            "advanced": false,
                            "input_types": [
                              "Message"
                            ],
                            "dynamic": false,
                            "info": "The SQL query to clean.",
                            "title_case": false,
                            "type": "str",
                            "_input_type": "MessageTextInput"
                          }
                        },
                        "description": "Cleans SQL queries by removing conditions with 'Not found' values.",
                        "icon": "🧹",
                        "base_classes": [
                          "Message"
                        ],
                        "display_name": "TBU Query Cleaner",
                        "documentation": "",
                        "custom_fields": {},
                        "output_types": [],
                        "pinned": false,
                        "conditional_paths": [],
                        "frozen": false,
                        "outputs": [
                          {
                            "types": [
                              "Message"
                            ],
                            "selected": "Message",
                            "name": "cleaned_sql",
                            "display_name": "Cleaned SQL",
                            "method": "clean_sql",
                            "value": "__UNDEFINED__",
                            "cache": true
                          }
                        ],
                        "field_order": [
                          "sql_query"
                        ],
                        "beta": false,
                        "edited": true,
                        "metadata": {}
                      },
                      "id": "SQLCleaner-y0UyV"
                    },
                    "selected": true,
                    "width": 384,
                    "height": 301,
                    "dragging": false,
                    "positionAbsolute": {
                      "x": -1640.9869070291097,
                      "y": -840.2527069458431
                    }
                  }
                ],
                "edges": [
                  {
                    "source": "SQLiteQueryTool-tALad",
                    "sourceHandle": "{œdataTypeœ:œSQLiteQueryToolœ,œidœ:œSQLiteQueryTool-tALadœ,œnameœ:œapi_run_modelœ,œoutput_typesœ:[œDataœ]}",
                    "target": "ParseData-Y56oH",
                    "targetHandle": "{œfieldNameœ:œdataœ,œidœ:œParseData-Y56oHœ,œinputTypesœ:[œDataœ],œtypeœ:œotherœ}",
                    "data": {
                      "targetHandle": {
                        "fieldName": "data",
                        "id": "ParseData-Y56oH",
                        "inputTypes": [
                          "Data"
                        ],
                        "type": "other"
                      },
                      "sourceHandle": {
                        "dataType": "SQLiteQueryTool",
                        "id": "SQLiteQueryTool-tALad",
                        "name": "api_run_model",
                        "output_types": [
                          "Data"
                        ]
                      }
                    },
                    "id": "reactflow__edge-SQLiteQueryTool-tALad{œdataTypeœ:œSQLiteQueryToolœ,œidœ:œSQLiteQueryTool-tALadœ,œnameœ:œapi_run_modelœ,œoutput_typesœ:[œDataœ]}-ParseData-Y56oH{œfieldNameœ:œdataœ,œidœ:œParseData-Y56oHœ,œinputTypesœ:[œDataœ],œtypeœ:œotherœ}",
                    "className": "",
                    "selected": false,
                    "animated": false
                  },
                  {
                    "source": "Prompt-vkXht",
                    "sourceHandle": "{œdataTypeœ:œPromptœ,œidœ:œPrompt-vkXhtœ,œnameœ:œpromptœ,œoutput_typesœ:[œMessageœ]}",
                    "target": "SQLCleaner-y0UyV",
                    "targetHandle": "{œfieldNameœ:œsql_queryœ,œidœ:œSQLCleaner-y0UyVœ,œinputTypesœ:[œMessageœ],œtypeœ:œstrœ}",
                    "data": {
                      "targetHandle": {
                        "fieldName": "sql_query",
                        "id": "SQLCleaner-y0UyV",
                        "inputTypes": [
                          "Message"
                        ],
                        "type": "str"
                      },
                      "sourceHandle": {
                        "dataType": "Prompt",
                        "id": "Prompt-vkXht",
                        "name": "prompt",
                        "output_types": [
                          "Message"
                        ]
                      }
                    },
                    "id": "reactflow__edge-Prompt-vkXht{œdataTypeœ:œPromptœ,œidœ:œPrompt-vkXhtœ,œnameœ:œpromptœ,œoutput_typesœ:[œMessageœ]}-SQLCleaner-y0UyV{œfieldNameœ:œsql_queryœ,œidœ:œSQLCleaner-y0UyVœ,œinputTypesœ:[œMessageœ],œtypeœ:œstrœ}",
                    "selected": false,
                    "className": "",
                    "animated": false
                  },
                  {
                    "source": "SQLCleaner-y0UyV",
                    "sourceHandle": "{œdataTypeœ:œSQLCleanerœ,œidœ:œSQLCleaner-y0UyVœ,œnameœ:œcleaned_sqlœ,œoutput_typesœ:[œMessageœ]}",
                    "target": "SQLiteQueryTool-tALad",
                    "targetHandle": "{œfieldNameœ:œqueryœ,œidœ:œSQLiteQueryTool-tALadœ,œinputTypesœ:[œMessageœ],œtypeœ:œstrœ}",
                    "data": {
                      "targetHandle": {
                        "fieldName": "query",
                        "id": "SQLiteQueryTool-tALad",
                        "inputTypes": [
                          "Message"
                        ],
                        "type": "str"
                      },
                      "sourceHandle": {
                        "dataType": "SQLCleaner",
                        "id": "SQLCleaner-y0UyV",
                        "name": "cleaned_sql",
                        "output_types": [
                          "Message"
                        ]
                      }
                    },
                    "id": "reactflow__edge-SQLCleaner-y0UyV{œdataTypeœ:œSQLCleanerœ,œidœ:œSQLCleaner-y0UyVœ,œnameœ:œcleaned_sqlœ,œoutput_typesœ:[œMessageœ]}-SQLiteQueryTool-tALad{œfieldNameœ:œqueryœ,œidœ:œSQLiteQueryTool-tALadœ,œinputTypesœ:[œMessageœ],œtypeœ:œstrœ}",
                    "className": "",
                    "selected": false,
                    "animated": false
                  }
                ],
                "viewport": {
                  "zoom": 1,
                  "x": 0,
                  "y": 0
                }
              },
              "is_component": false,
              "name": "Fluffy Sammet",
              "description": "",
              "id": "SsHSv"
            },
            "outputs": [
              {
                "types": [
                  "Tool"
                ],
                "selected": "Tool",
                "name": "SQLiteQueryTool-tALad_api_build_tool",
                "display_name": "Tool",
                "method": "build_tool",
                "value": "__UNDEFINED__",
                "cache": true,
                "required_inputs": [
                  "database_uri",
                  "query"
                ],
                "proxy": {
                  "id": "SQLiteQueryTool-tALad",
                  "name": "api_build_tool",
                  "nodeDisplayName": "TBU Data Retriever"
                }
              },
              {
                "types": [
                  "Message"
                ],
                "selected": "Message",
                "name": "ParseData-Y56oH_text",
                "display_name": "Text",
                "method": "parse_data",
                "value": "__UNDEFINED__",
                "cache": true,
                "proxy": {
                  "id": "ParseData-Y56oH",
                  "name": "text",
                  "nodeDisplayName": "TBU Data Parser"
                }
              }
            ],
            "lf_version": "1.0.19"
          }
        },
        "id": "groupComponent-Ar7df",
        "position": {
          "x": -1440.6522355236984,
          "y": -840.5892005797209
        },
        "type": "genericNode",
        "width": 384,
        "height": 673,
        "selected": false,
        "dragging": false
      },
      {
        "id": "OpenAIEmbeddings-alQyE",
        "type": "genericNode",
        "position": {
          "x": -3440.1952059806063,
          "y": -1240.1088525226264
        },
        "data": {
          "type": "OpenAIEmbeddings",
          "node": {
            "template": {
              "_type": "Component",
              "chunk_size": {
                "trace_as_metadata": true,
                "list": false,
                "required": false,
                "placeholder": "",
                "show": true,
                "name": "chunk_size",
                "value": 1000,
                "display_name": "Chunk Size",
                "advanced": true,
                "dynamic": false,
                "info": "",
                "title_case": false,
                "type": "int",
                "_input_type": "IntInput"
              },
              "client": {
                "trace_as_input": true,
                "trace_as_metadata": true,
                "load_from_db": false,
                "list": false,
                "required": false,
                "placeholder": "",
                "show": true,
                "name": "client",
                "value": "",
                "display_name": "Client",
                "advanced": true,
                "input_types": [
                  "Message"
                ],
                "dynamic": false,
                "info": "",
                "title_case": false,
                "type": "str",
                "_input_type": "MessageTextInput"
              },
              "code": {
                "type": "code",
                "required": true,
                "placeholder": "",
                "list": false,
                "show": true,
                "multiline": true,
                "value": "from langchain_openai.embeddings.base import OpenAIEmbeddings\n\nfrom axiestudio.base.embeddings.model import LCEmbeddingsModel\nfrom axiestudio.base.models.openai_constants import OPENAI_EMBEDDING_MODEL_NAMES\nfrom axiestudio.field_typing import Embeddings\nfrom axiestudio.io import BoolInput, DictInput, DropdownInput, FloatInput, IntInput, MessageTextInput, SecretStrInput\n\n\nclass OpenAIEmbeddingsComponent(LCEmbeddingsModel):\n    display_name = \"OpenAI Embeddings\"\n    description = \"Generate embeddings using OpenAI models.\"\n    icon = \"OpenAI\"\n    name = \"OpenAIEmbeddings\"\n\n    inputs = [\n        DictInput(\n            name=\"default_headers\",\n            display_name=\"Default Headers\",\n            advanced=True,\n            info=\"Default headers to use for the API request.\",\n        ),\n        DictInput(\n            name=\"default_query\",\n            display_name=\"Default Query\",\n            advanced=True,\n            info=\"Default query parameters to use for the API request.\",\n        ),\n        IntInput(name=\"chunk_size\", display_name=\"Chunk Size\", advanced=True, value=1000),\n        MessageTextInput(name=\"client\", display_name=\"Client\", advanced=True),\n        MessageTextInput(name=\"deployment\", display_name=\"Deployment\", advanced=True),\n        IntInput(name=\"embedding_ctx_length\", display_name=\"Embedding Context Length\", advanced=True, value=1536),\n        IntInput(name=\"max_retries\", display_name=\"Max Retries\", value=3, advanced=True),\n        DropdownInput(\n            name=\"model\",\n            display_name=\"Model\",\n            advanced=False,\n            options=OPENAI_EMBEDDING_MODEL_NAMES,\n            value=\"text-embedding-3-small\",\n        ),\n        DictInput(name=\"model_kwargs\", display_name=\"Model Kwargs\", advanced=True),\n        SecretStrInput(name=\"openai_api_base\", display_name=\"OpenAI API Base\", advanced=True),\n        SecretStrInput(name=\"openai_api_key\", display_name=\"OpenAI API Key\", value=\"OPENAI_API_KEY\"),\n        SecretStrInput(name=\"openai_api_type\", display_name=\"OpenAI API Type\", advanced=True),\n        MessageTextInput(name=\"openai_api_version\", display_name=\"OpenAI API Version\", advanced=True),\n        MessageTextInput(\n            name=\"openai_organization\",\n            display_name=\"OpenAI Organization\",\n            advanced=True,\n        ),\n        MessageTextInput(name=\"openai_proxy\", display_name=\"OpenAI Proxy\", advanced=True),\n        FloatInput(name=\"request_timeout\", display_name=\"Request Timeout\", advanced=True),\n        BoolInput(name=\"show_progress_bar\", display_name=\"Show Progress Bar\", advanced=True),\n        BoolInput(name=\"skip_empty\", display_name=\"Skip Empty\", advanced=True),\n        MessageTextInput(\n            name=\"tiktoken_model_name\",\n            display_name=\"TikToken Model Name\",\n            advanced=True,\n        ),\n        BoolInput(\n            name=\"tiktoken_enable\",\n            display_name=\"TikToken Enable\",\n            advanced=True,\n            value=True,\n            info=\"If False, you must have transformers installed.\",\n        ),\n        IntInput(\n            name=\"dimensions\",\n            display_name=\"Dimensions\",\n            info=\"The number of dimensions the resulting output embeddings should have. \"\n            \"Only supported by certain models.\",\n            advanced=True,\n        ),\n    ]\n\n    def build_embeddings(self) -> Embeddings:\n        return OpenAIEmbeddings(\n            tiktoken_enabled=self.tiktoken_enable,\n            default_headers=self.default_headers,\n            default_query=self.default_query,\n            allowed_special=\"all\",\n            disallowed_special=\"all\",\n            chunk_size=self.chunk_size,\n            deployment=self.deployment,\n            embedding_ctx_length=self.embedding_ctx_length,\n            max_retries=self.max_retries,\n            model=self.model,\n            model_kwargs=self.model_kwargs,\n            base_url=self.openai_api_base,\n            api_key=self.openai_api_key,\n            openai_api_type=self.openai_api_type,\n            api_version=self.openai_api_version,\n            organization=self.openai_organization,\n            openai_proxy=self.openai_proxy,\n            timeout=self.request_timeout or None,\n            show_progress_bar=self.show_progress_bar,\n            skip_empty=self.skip_empty,\n            tiktoken_model_name=self.tiktoken_model_name,\n            dimensions=self.dimensions or None,\n        )\n",
                "fileTypes": [],
                "file_path": "",
                "password": false,
                "name": "code",
                "advanced": true,
                "dynamic": true,
                "info": "",
                "load_from_db": false,
                "title_case": false
              },
              "default_headers": {
                "trace_as_input": true,
                "list": false,
                "required": false,
                "placeholder": "",
                "show": true,
                "name": "default_headers",
                "value": {},
                "display_name": "Default Headers",
                "advanced": true,
                "dynamic": false,
                "info": "Default headers to use for the API request.",
                "title_case": false,
                "type": "dict",
                "_input_type": "DictInput"
              },
              "default_query": {
                "trace_as_input": true,
                "list": false,
                "required": false,
                "placeholder": "",
                "show": true,
                "name": "default_query",
                "value": {},
                "display_name": "Default Query",
                "advanced": true,
                "dynamic": false,
                "info": "Default query parameters to use for the API request.",
                "title_case": false,
                "type": "dict",
                "_input_type": "DictInput"
              },
              "deployment": {
                "trace_as_input": true,
                "trace_as_metadata": true,
                "load_from_db": false,
                "list": false,
                "required": false,
                "placeholder": "",
                "show": true,
                "name": "deployment",
                "value": "",
                "display_name": "Deployment",
                "advanced": true,
                "input_types": [
                  "Message"
                ],
                "dynamic": false,
                "info": "",
                "title_case": false,
                "type": "str",
                "_input_type": "MessageTextInput"
              },
              "dimensions": {
                "trace_as_metadata": true,
                "list": false,
                "required": false,
                "placeholder": "",
                "show": true,
                "name": "dimensions",
                "value": "",
                "display_name": "Dimensions",
                "advanced": true,
                "dynamic": false,
                "info": "The number of dimensions the resulting output embeddings should have. Only supported by certain models.",
                "title_case": false,
                "type": "int",
                "_input_type": "IntInput"
              },
              "embedding_ctx_length": {
                "trace_as_metadata": true,
                "list": false,
                "required": false,
                "placeholder": "",
                "show": true,
                "name": "embedding_ctx_length",
                "value": 1536,
                "display_name": "Embedding Context Length",
                "advanced": true,
                "dynamic": false,
                "info": "",
                "title_case": false,
                "type": "int",
                "_input_type": "IntInput"
              },
              "max_retries": {
                "trace_as_metadata": true,
                "list": false,
                "required": false,
                "placeholder": "",
                "show": true,
                "name": "max_retries",
                "value": 3,
                "display_name": "Max Retries",
                "advanced": true,
                "dynamic": false,
                "info": "",
                "title_case": false,
                "type": "int",
                "_input_type": "IntInput"
              },
              "model": {
                "trace_as_metadata": true,
                "options": [
                  "text-embedding-3-small",
                  "text-embedding-3-large",
                  "text-embedding-ada-002"
                ],
                "combobox": false,
                "required": false,
                "placeholder": "",
                "show": true,
                "name": "model",
                "value": "text-embedding-3-small",
                "display_name": "Model",
                "advanced": false,
                "dynamic": false,
                "info": "",
                "title_case": false,
                "type": "str",
                "_input_type": "DropdownInput"
              },
              "model_kwargs": {
                "trace_as_input": true,
                "list": false,
                "required": false,
                "placeholder": "",
                "show": true,
                "name": "model_kwargs",
                "value": {},
                "display_name": "Model Kwargs",
                "advanced": true,
                "dynamic": false,
                "info": "",
                "title_case": false,
                "type": "dict",
                "_input_type": "DictInput"
              },
              "openai_api_base": {
                "load_from_db": false,
                "required": false,
                "placeholder": "",
                "show": true,
                "name": "openai_api_base",
                "value": "",
                "display_name": "OpenAI API Base",
                "advanced": true,
                "input_types": [
                  "Message"
                ],
                "dynamic": false,
                "info": "",
                "title_case": false,
                "password": true,
                "type": "str",
                "_input_type": "SecretStrInput"
              },
              "openai_api_key": {
                "load_from_db": true,
                "required": false,
                "placeholder": "",
                "show": true,
                "name": "openai_api_key",
                "value": "",
                "display_name": "OpenAI API Key",
                "advanced": false,
                "input_types": [
                  "Message"
                ],
                "dynamic": false,
                "info": "",
                "title_case": false,
                "password": true,
                "type": "str",
                "_input_type": "SecretStrInput"
              },
              "openai_api_type": {
                "load_from_db": false,
                "required": false,
                "placeholder": "",
                "show": true,
                "name": "openai_api_type",
                "value": "",
                "display_name": "OpenAI API Type",
                "advanced": true,
                "input_types": [
                  "Message"
                ],
                "dynamic": false,
                "info": "",
                "title_case": false,
                "password": true,
                "type": "str",
                "_input_type": "SecretStrInput"
              },
              "openai_api_version": {
                "trace_as_input": true,
                "trace_as_metadata": true,
                "load_from_db": false,
                "list": false,
                "required": false,
                "placeholder": "",
                "show": true,
                "name": "openai_api_version",
                "value": "",
                "display_name": "OpenAI API Version",
                "advanced": true,
                "input_types": [
                  "Message"
                ],
                "dynamic": false,
                "info": "",
                "title_case": false,
                "type": "str",
                "_input_type": "MessageTextInput"
              },
              "openai_organization": {
                "trace_as_input": true,
                "trace_as_metadata": true,
                "load_from_db": false,
                "list": false,
                "required": false,
                "placeholder": "",
                "show": true,
                "name": "openai_organization",
                "value": "",
                "display_name": "OpenAI Organization",
                "advanced": true,
                "input_types": [
                  "Message"
                ],
                "dynamic": false,
                "info": "",
                "title_case": false,
                "type": "str",
                "_input_type": "MessageTextInput"
              },
              "openai_proxy": {
                "trace_as_input": true,
                "trace_as_metadata": true,
                "load_from_db": false,
                "list": false,
                "required": false,
                "placeholder": "",
                "show": true,
                "name": "openai_proxy",
                "value": "",
                "display_name": "OpenAI Proxy",
                "advanced": true,
                "input_types": [
                  "Message"
                ],
                "dynamic": false,
                "info": "",
                "title_case": false,
                "type": "str",
                "_input_type": "MessageTextInput"
              },
              "request_timeout": {
                "trace_as_metadata": true,
                "list": false,
                "required": false,
                "placeholder": "",
                "show": true,
                "name": "request_timeout",
                "value": "",
                "display_name": "Request Timeout",
                "advanced": true,
                "dynamic": false,
                "info": "",
                "title_case": false,
                "type": "float",
                "_input_type": "FloatInput"
              },
              "show_progress_bar": {
                "trace_as_metadata": true,
                "list": false,
                "required": false,
                "placeholder": "",
                "show": true,
                "name": "show_progress_bar",
                "value": false,
                "display_name": "Show Progress Bar",
                "advanced": true,
                "dynamic": false,
                "info": "",
                "title_case": false,
                "type": "bool",
                "_input_type": "BoolInput"
              },
              "skip_empty": {
                "trace_as_metadata": true,
                "list": false,
                "required": false,
                "placeholder": "",
                "show": true,
                "name": "skip_empty",
                "value": false,
                "display_name": "Skip Empty",
                "advanced": true,
                "dynamic": false,
                "info": "",
                "title_case": false,
                "type": "bool",
                "_input_type": "BoolInput"
              },
              "tiktoken_enable": {
                "trace_as_metadata": true,
                "list": false,
                "required": false,
                "placeholder": "",
                "show": true,
                "name": "tiktoken_enable",
                "value": true,
                "display_name": "TikToken Enable",
                "advanced": true,
                "dynamic": false,
                "info": "If False, you must have transformers installed.",
                "title_case": false,
                "type": "bool",
                "_input_type": "BoolInput"
              },
              "tiktoken_model_name": {
                "trace_as_input": true,
                "trace_as_metadata": true,
                "load_from_db": false,
                "list": false,
                "required": false,
                "placeholder": "",
                "show": true,
                "name": "tiktoken_model_name",
                "value": "",
                "display_name": "TikToken Model Name",
                "advanced": true,
                "input_types": [
                  "Message"
                ],
                "dynamic": false,
                "info": "",
                "title_case": false,
                "type": "str",
                "_input_type": "MessageTextInput"
              }
            },
            "description": "Generate embeddings using OpenAI models.",
            "icon": "OpenAI",
            "base_classes": [
              "Embeddings"
            ],
            "display_name": "OpenAI Embeddings",
            "documentation": "",
            "custom_fields": {},
            "output_types": [],
            "pinned": false,
            "conditional_paths": [],
            "frozen": false,
            "outputs": [
              {
                "types": [
                  "Embeddings"
                ],
                "selected": "Embeddings",
                "name": "embeddings",
                "display_name": "Embeddings",
                "method": "build_embeddings",
                "value": "__UNDEFINED__",
                "cache": true,
                "required_inputs": [
                  "chunk_size",
                  "default_headers",
                  "default_query",
                  "deployment",
                  "dimensions",
                  "embedding_ctx_length",
                  "max_retries",
                  "model",
                  "model_kwargs",
                  "openai_api_base",
                  "openai_api_key",
                  "openai_api_type",
                  "openai_api_version",
                  "openai_organization",
                  "openai_proxy",
                  "request_timeout",
                  "show_progress_bar",
                  "skip_empty",
                  "tiktoken_enable",
                  "tiktoken_model_name"
                ]
              }
            ],
            "field_order": [
              "default_headers",
              "default_query",
              "chunk_size",
              "client",
              "deployment",
              "embedding_ctx_length",
              "max_retries",
              "model",
              "model_kwargs",
              "openai_api_base",
              "openai_api_key",
              "openai_api_type",
              "openai_api_version",
              "openai_organization",
              "openai_proxy",
              "request_timeout",
              "show_progress_bar",
              "skip_empty",
              "tiktoken_model_name",
              "tiktoken_enable",
              "dimensions"
            ],
            "beta": false,
            "edited": false,
            "metadata": {}
          },
          "id": "OpenAIEmbeddings-alQyE"
        },
        "selected": false,
        "width": 384,
        "height": 375,
        "positionAbsolute": {
          "x": -3440.1952059806063,
          "y": -1240.1088525226264
        },
        "dragging": false
      }
    ],
    "edges": [
      {
        "source": "Prompt-NXY0w",
        "sourceHandle": "{œdataTypeœ:œPromptœ,œidœ:œPrompt-NXY0wœ,œnameœ:œpromptœ,œoutput_typesœ:[œMessageœ]}",
        "target": "OpenAIModel-zShEY",
        "targetHandle": "{œfieldNameœ:œinput_valueœ,œidœ:œOpenAIModel-zShEYœ,œinputTypesœ:[œMessageœ],œtypeœ:œstrœ}",
        "data": {
          "targetHandle": {
            "fieldName": "input_value",
            "id": "OpenAIModel-zShEY",
            "inputTypes": [
              "Message"
            ],
            "type": "str"
          },
          "sourceHandle": {
            "dataType": "Prompt",
            "id": "Prompt-NXY0w",
            "name": "prompt",
            "output_types": [
              "Message"
            ]
          }
        },
        "id": "reactflow__edge-Prompt-NXY0w{œdataTypeœ:œPromptœ,œidœ:œPrompt-NXY0wœ,œnameœ:œpromptœ,œoutput_typesœ:[œMessageœ]}-OpenAIModel-zShEY{œfieldNameœ:œinput_valueœ,œidœ:œOpenAIModel-zShEYœ,œinputTypesœ:[œMessageœ],œtypeœ:œstrœ}",
        "animated": false,
        "className": ""
      },
      {
        "source": "OpenAIModel-zShEY",
        "sourceHandle": "{œdataTypeœ:œOpenAIModelœ,œidœ:œOpenAIModel-zShEYœ,œnameœ:œtext_outputœ,œoutput_typesœ:[œMessageœ]}",
        "target": "ChatOutput-NFvya",
        "targetHandle": "{œfieldNameœ:œinput_valueœ,œidœ:œChatOutput-NFvyaœ,œinputTypesœ:[œMessageœ],œtypeœ:œstrœ}",
        "data": {
          "targetHandle": {
            "fieldName": "input_value",
            "id": "ChatOutput-NFvya",
            "inputTypes": [
              "Message"
            ],
            "type": "str"
          },
          "sourceHandle": {
            "dataType": "OpenAIModel",
            "id": "OpenAIModel-zShEY",
            "name": "text_output",
            "output_types": [
              "Message"
            ]
          }
        },
        "id": "reactflow__edge-OpenAIModel-zShEY{œdataTypeœ:œOpenAIModelœ,œidœ:œOpenAIModel-zShEYœ,œnameœ:œtext_outputœ,œoutput_typesœ:[œMessageœ]}-ChatOutput-NFvya{œfieldNameœ:œinput_valueœ,œidœ:œChatOutput-NFvyaœ,œinputTypesœ:[œMessageœ],œtypeœ:œstrœ}",
        "animated": false,
        "className": ""
      },
      {
        "source": "ChatInput-m8BPn",
        "sourceHandle": "{œdataTypeœ:œChatInputœ,œidœ:œChatInput-m8BPnœ,œnameœ:œmessageœ,œoutput_typesœ:[œMessageœ]}",
        "target": "groupComponent-ob9nl",
        "targetHandle": "{œfieldNameœ:œsearch_query_Chroma-94Qh7œ,œidœ:œgroupComponent-ob9nlœ,œinputTypesœ:[œMessageœ],œproxyœ:{œfieldœ:œsearch_queryœ,œidœ:œChroma-94Qh7œ},œtypeœ:œstrœ}",
        "data": {
          "targetHandle": {
            "fieldName": "search_query_Chroma-94Qh7",
            "id": "groupComponent-ob9nl",
            "inputTypes": [
              "Message"
            ],
            "proxy": {
              "field": "search_query",
              "id": "Chroma-94Qh7"
            },
            "type": "str"
          },
          "sourceHandle": {
            "dataType": "ChatInput",
            "id": "ChatInput-m8BPn",
            "name": "message",
            "output_types": [
              "Message"
            ]
          }
        },
        "id": "reactflow__edge-ChatInput-m8BPn{œdataTypeœ:œChatInputœ,œidœ:œChatInput-m8BPnœ,œnameœ:œmessageœ,œoutput_typesœ:[œMessageœ]}-groupComponent-ob9nl{œfieldNameœ:œsearch_query_Chroma-94Qh7œ,œidœ:œgroupComponent-ob9nlœ,œinputTypesœ:[œMessageœ],œproxyœ:{œfieldœ:œsearch_queryœ,œidœ:œChroma-94Qh7œ},œtypeœ:œstrœ}",
        "animated": false,
        "className": ""
      },
      {
        "source": "Prompt-JkmeG",
        "sourceHandle": "{œdataTypeœ:œPromptœ,œidœ:œPrompt-JkmeGœ,œnameœ:œpromptœ,œoutput_typesœ:[œMessageœ]}",
        "target": "Prompt-NXY0w",
        "targetHandle": "{œfieldNameœ:œglossaryœ,œidœ:œPrompt-NXY0wœ,œinputTypesœ:[œMessageœ,œTextœ],œtypeœ:œstrœ}",
        "data": {
          "targetHandle": {
            "fieldName": "glossary",
            "id": "Prompt-NXY0w",
            "inputTypes": [
              "Message",
              "Text"
            ],
            "type": "str"
          },
          "sourceHandle": {
            "dataType": "Prompt",
            "id": "Prompt-JkmeG",
            "name": "prompt",
            "output_types": [
              "Message"
            ]
          }
        },
        "id": "reactflow__edge-Prompt-JkmeG{œdataTypeœ:œPromptœ,œidœ:œPrompt-JkmeGœ,œnameœ:œpromptœ,œoutput_typesœ:[œMessageœ]}-Prompt-NXY0w{œfieldNameœ:œglossaryœ,œidœ:œPrompt-NXY0wœ,œinputTypesœ:[œMessageœ,œTextœ],œtypeœ:œstrœ}",
        "animated": false,
        "className": ""
      },
      {
        "source": "groupComponent-Jcwnj",
        "sourceHandle": "{œdataTypeœ:œGroupNodeœ,œidœ:œgroupComponent-Jcwnjœ,œnameœ:œParseData-4I2Zh_textœ,œoutput_typesœ:[œMessageœ]}",
        "target": "Prompt-NXY0w",
        "targetHandle": "{œfieldNameœ:œDTCœ,œidœ:œPrompt-NXY0wœ,œinputTypesœ:[œMessageœ,œTextœ],œtypeœ:œstrœ}",
        "data": {
          "targetHandle": {
            "fieldName": "DTC",
            "id": "Prompt-NXY0w",
            "inputTypes": [
              "Message",
              "Text"
            ],
            "type": "str"
          },
          "sourceHandle": {
            "dataType": "GroupNode",
            "id": "groupComponent-Jcwnj",
            "name": "ParseData-4I2Zh_text",
            "output_types": [
              "Message"
            ]
          }
        },
        "id": "reactflow__edge-groupComponent-Jcwnj{œdataTypeœ:œGroupNodeœ,œidœ:œgroupComponent-Jcwnjœ,œnameœ:œParseData-4I2Zh_textœ,œoutput_typesœ:[œMessageœ]}-Prompt-NXY0w{œfieldNameœ:œDTCœ,œidœ:œPrompt-NXY0wœ,œinputTypesœ:[œMessageœ,œTextœ],œtypeœ:œstrœ}",
        "animated": false,
        "className": ""
      },
      {
        "source": "groupComponent-ob9nl",
        "sourceHandle": "{œdataTypeœ:œGroupNodeœ,œidœ:œgroupComponent-ob9nlœ,œnameœ:œParseData-wVyYa_textœ,œoutput_typesœ:[œMessageœ]}",
        "target": "Prompt-NXY0w",
        "targetHandle": "{œfieldNameœ:œOIBœ,œidœ:œPrompt-NXY0wœ,œinputTypesœ:[œMessageœ,œTextœ],œtypeœ:œstrœ}",
        "data": {
          "targetHandle": {
            "fieldName": "OIB",
            "id": "Prompt-NXY0w",
            "inputTypes": [
              "Message",
              "Text"
            ],
            "type": "str"
          },
          "sourceHandle": {
            "dataType": "GroupNode",
            "id": "groupComponent-ob9nl",
            "name": "ParseData-wVyYa_text",
            "output_types": [
              "Message"
            ]
          }
        },
        "id": "reactflow__edge-groupComponent-ob9nl{œdataTypeœ:œGroupNodeœ,œidœ:œgroupComponent-ob9nlœ,œnameœ:œParseData-wVyYa_textœ,œoutput_typesœ:[œMessageœ]}-Prompt-NXY0w{œfieldNameœ:œOIBœ,œidœ:œPrompt-NXY0wœ,œinputTypesœ:[œMessageœ,œTextœ],œtypeœ:œstrœ}",
        "animated": false,
        "className": ""
      },
      {
        "source": "ChatInput-m8BPn",
        "sourceHandle": "{œdataTypeœ:œChatInputœ,œidœ:œChatInput-m8BPnœ,œnameœ:œmessageœ,œoutput_typesœ:[œMessageœ]}",
        "target": "Prompt-NXY0w",
        "targetHandle": "{œfieldNameœ:œuser_questionœ,œidœ:œPrompt-NXY0wœ,œinputTypesœ:[œMessageœ,œTextœ],œtypeœ:œstrœ}",
        "data": {
          "targetHandle": {
            "fieldName": "user_question",
            "id": "Prompt-NXY0w",
            "inputTypes": [
              "Message",
              "Text"
            ],
            "type": "str"
          },
          "sourceHandle": {
            "dataType": "ChatInput",
            "id": "ChatInput-m8BPn",
            "name": "message",
            "output_types": [
              "Message"
            ]
          }
        },
        "id": "reactflow__edge-ChatInput-m8BPn{œdataTypeœ:œChatInputœ,œidœ:œChatInput-m8BPnœ,œnameœ:œmessageœ,œoutput_typesœ:[œMessageœ]}-Prompt-NXY0w{œfieldNameœ:œuser_questionœ,œidœ:œPrompt-NXY0wœ,œinputTypesœ:[œMessageœ,œTextœ],œtypeœ:œstrœ}",
        "animated": false,
        "className": ""
      },
      {
        "source": "groupComponent-Ar7df",
        "sourceHandle": "{œdataTypeœ:œGroupNodeœ,œidœ:œgroupComponent-Ar7dfœ,œnameœ:œParseData-Y56oH_textœ,œoutput_typesœ:[œMessageœ]}",
        "target": "Prompt-NXY0w",
        "targetHandle": "{œfieldNameœ:œTBUœ,œidœ:œPrompt-NXY0wœ,œinputTypesœ:[œMessageœ,œTextœ],œtypeœ:œstrœ}",
        "data": {
          "targetHandle": {
            "fieldName": "TBU",
            "id": "Prompt-NXY0w",
            "inputTypes": [
              "Message",
              "Text"
            ],
            "type": "str"
          },
          "sourceHandle": {
            "dataType": "GroupNode",
            "id": "groupComponent-Ar7df",
            "name": "ParseData-Y56oH_text",
            "output_types": [
              "Message"
            ]
          }
        },
        "id": "reactflow__edge-groupComponent-Ar7df{œdataTypeœ:œGroupNodeœ,œidœ:œgroupComponent-Ar7dfœ,œnameœ:œParseData-Y56oH_textœ,œoutput_typesœ:[œMessageœ]}-Prompt-NXY0w{œfieldNameœ:œTBUœ,œidœ:œPrompt-NXY0wœ,œinputTypesœ:[œMessageœ,œTextœ],œtypeœ:œstrœ}",
        "animated": false,
        "className": ""
      },
      {
        "source": "ChatInput-m8BPn",
        "sourceHandle": "{œdataTypeœ:œChatInputœ,œidœ:œChatInput-m8BPnœ,œnameœ:œmessageœ,œoutput_typesœ:[œMessageœ]}",
        "target": "CustomComponent-ShIul",
        "targetHandle": "{œfieldNameœ:œuser_questionœ,œidœ:œCustomComponent-ShIulœ,œinputTypesœ:[œMessageœ],œtypeœ:œstrœ}",
        "data": {
          "targetHandle": {
            "fieldName": "user_question",
            "id": "CustomComponent-ShIul",
            "inputTypes": [
              "Message"
            ],
            "type": "str"
          },
          "sourceHandle": {
            "dataType": "ChatInput",
            "id": "ChatInput-m8BPn",
            "name": "message",
            "output_types": [
              "Message"
            ]
          }
        },
        "id": "reactflow__edge-ChatInput-m8BPn{œdataTypeœ:œChatInputœ,œidœ:œChatInput-m8BPnœ,œnameœ:œmessageœ,œoutput_typesœ:[œMessageœ]}-CustomComponent-ShIul{œfieldNameœ:œuser_questionœ,œidœ:œCustomComponent-ShIulœ,œinputTypesœ:[œMessageœ],œtypeœ:œstrœ}",
        "animated": false,
        "className": ""
      },
      {
        "source": "CustomComponent-ShIul",
        "sourceHandle": "{œdataTypeœ:œTractorInfoParserœ,œidœ:œCustomComponent-ShIulœ,œnameœ:œsuspect_parameter_numberœ,œoutput_typesœ:[œTextœ]}",
        "target": "groupComponent-Jcwnj",
        "targetHandle": "{œfieldNameœ:œSPN_Prompt-ekcNXœ,œidœ:œgroupComponent-Jcwnjœ,œinputTypesœ:[œMessageœ,œTextœ],œproxyœ:{œfieldœ:œSPNœ,œidœ:œPrompt-ekcNXœ},œtypeœ:œstrœ}",
        "data": {
          "targetHandle": {
            "fieldName": "SPN_Prompt-ekcNX",
            "id": "groupComponent-Jcwnj",
            "inputTypes": [
              "Message",
              "Text"
            ],
            "proxy": {
              "field": "SPN",
              "id": "Prompt-ekcNX"
            },
            "type": "str"
          },
          "sourceHandle": {
            "dataType": "TractorInfoParser",
            "id": "CustomComponent-ShIul",
            "name": "suspect_parameter_number",
            "output_types": [
              "Text"
            ]
          }
        },
        "id": "reactflow__edge-CustomComponent-ShIul{œdataTypeœ:œTractorInfoParserœ,œidœ:œCustomComponent-ShIulœ,œnameœ:œsuspect_parameter_numberœ,œoutput_typesœ:[œTextœ]}-groupComponent-Jcwnj{œfieldNameœ:œSPN_Prompt-ekcNXœ,œidœ:œgroupComponent-Jcwnjœ,œinputTypesœ:[œMessageœ,œTextœ],œproxyœ:{œfieldœ:œSPNœ,œidœ:œPrompt-ekcNXœ},œtypeœ:œstrœ}",
        "animated": false,
        "className": ""
      },
      {
        "source": "CustomComponent-ShIul",
        "sourceHandle": "{œdataTypeœ:œTractorInfoParserœ,œidœ:œCustomComponent-ShIulœ,œnameœ:œfailure_mode_identifierœ,œoutput_typesœ:[œTextœ]}",
        "target": "groupComponent-Jcwnj",
        "targetHandle": "{œfieldNameœ:œFMI_Prompt-ekcNXœ,œidœ:œgroupComponent-Jcwnjœ,œinputTypesœ:[œMessageœ,œTextœ],œproxyœ:{œfieldœ:œFMIœ,œidœ:œPrompt-ekcNXœ},œtypeœ:œstrœ}",
        "data": {
          "targetHandle": {
            "fieldName": "FMI_Prompt-ekcNX",
            "id": "groupComponent-Jcwnj",
            "inputTypes": [
              "Message",
              "Text"
            ],
            "proxy": {
              "field": "FMI",
              "id": "Prompt-ekcNX"
            },
            "type": "str"
          },
          "sourceHandle": {
            "dataType": "TractorInfoParser",
            "id": "CustomComponent-ShIul",
            "name": "failure_mode_identifier",
            "output_types": [
              "Text"
            ]
          }
        },
        "id": "reactflow__edge-CustomComponent-ShIul{œdataTypeœ:œTractorInfoParserœ,œidœ:œCustomComponent-ShIulœ,œnameœ:œfailure_mode_identifierœ,œoutput_typesœ:[œTextœ]}-groupComponent-Jcwnj{œfieldNameœ:œFMI_Prompt-ekcNXœ,œidœ:œgroupComponent-Jcwnjœ,œinputTypesœ:[œMessageœ,œTextœ],œproxyœ:{œfieldœ:œFMIœ,œidœ:œPrompt-ekcNXœ},œtypeœ:œstrœ}",
        "animated": false,
        "className": ""
      },
      {
        "source": "CustomComponent-ShIul",
        "sourceHandle": "{œdataTypeœ:œTractorInfoParserœ,œidœ:œCustomComponent-ShIulœ,œnameœ:œtechnical_bulletin_codeœ,œoutput_typesœ:[œTextœ]}",
        "target": "groupComponent-Ar7df",
        "targetHandle": "{œfieldNameœ:œTBC_Prompt-vkXhtœ,œidœ:œgroupComponent-Ar7dfœ,œinputTypesœ:[œMessageœ,œTextœ],œproxyœ:{œfieldœ:œTBCœ,œidœ:œPrompt-vkXhtœ},œtypeœ:œstrœ}",
        "data": {
          "targetHandle": {
            "fieldName": "TBC_Prompt-vkXht",
            "id": "groupComponent-Ar7df",
            "inputTypes": [
              "Message",
              "Text"
            ],
            "proxy": {
              "field": "TBC",
              "id": "Prompt-vkXht"
            },
            "type": "str"
          },
          "sourceHandle": {
            "dataType": "TractorInfoParser",
            "id": "CustomComponent-ShIul",
            "name": "technical_bulletin_code",
            "output_types": [
              "Text"
            ]
          }
        },
        "id": "reactflow__edge-CustomComponent-ShIul{œdataTypeœ:œTractorInfoParserœ,œidœ:œCustomComponent-ShIulœ,œnameœ:œtechnical_bulletin_codeœ,œoutput_typesœ:[œTextœ]}-groupComponent-Ar7df{œfieldNameœ:œTBC_Prompt-vkXhtœ,œidœ:œgroupComponent-Ar7dfœ,œinputTypesœ:[œMessageœ,œTextœ],œproxyœ:{œfieldœ:œTBCœ,œidœ:œPrompt-vkXhtœ},œtypeœ:œstrœ}",
        "animated": false,
        "className": ""
      },
      {
        "source": "CustomComponent-ShIul",
        "sourceHandle": "{œdataTypeœ:œTractorInfoParserœ,œidœ:œCustomComponent-ShIulœ,œnameœ:œyearœ,œoutput_typesœ:[œTextœ]}",
        "target": "groupComponent-Ar7df",
        "targetHandle": "{œfieldNameœ:œyear_Prompt-vkXhtœ,œidœ:œgroupComponent-Ar7dfœ,œinputTypesœ:[œMessageœ,œTextœ],œproxyœ:{œfieldœ:œyearœ,œidœ:œPrompt-vkXhtœ},œtypeœ:œstrœ}",
        "data": {
          "targetHandle": {
            "fieldName": "year_Prompt-vkXht",
            "id": "groupComponent-Ar7df",
            "inputTypes": [
              "Message",
              "Text"
            ],
            "proxy": {
              "field": "year",
              "id": "Prompt-vkXht"
            },
            "type": "str"
          },
          "sourceHandle": {
            "dataType": "TractorInfoParser",
            "id": "CustomComponent-ShIul",
            "name": "year",
            "output_types": [
              "Text"
            ]
          }
        },
        "id": "reactflow__edge-CustomComponent-ShIul{œdataTypeœ:œTractorInfoParserœ,œidœ:œCustomComponent-ShIulœ,œnameœ:œyearœ,œoutput_typesœ:[œTextœ]}-groupComponent-Ar7df{œfieldNameœ:œyear_Prompt-vkXhtœ,œidœ:œgroupComponent-Ar7dfœ,œinputTypesœ:[œMessageœ,œTextœ],œproxyœ:{œfieldœ:œyearœ,œidœ:œPrompt-vkXhtœ},œtypeœ:œstrœ}",
        "animated": false,
        "className": ""
      },
      {
        "source": "CustomComponent-ShIul",
        "sourceHandle": "{œdataTypeœ:œTractorInfoParserœ,œidœ:œCustomComponent-ShIulœ,œnameœ:œtractor_model_codeœ,œoutput_typesœ:[œTextœ]}",
        "target": "groupComponent-fCN9N",
        "targetHandle": "{œfieldNameœ:œTMC_Prompt-uvWe5œ,œidœ:œgroupComponent-fCN9Nœ,œinputTypesœ:[œMessageœ,œTextœ],œproxyœ:{œfieldœ:œTMCœ,œidœ:œPrompt-uvWe5œ},œtypeœ:œstrœ}",
        "data": {
          "targetHandle": {
            "fieldName": "TMC_Prompt-uvWe5",
            "id": "groupComponent-fCN9N",
            "inputTypes": [
              "Message",
              "Text"
            ],
            "proxy": {
              "field": "TMC",
              "id": "Prompt-uvWe5"
            },
            "type": "str"
          },
          "sourceHandle": {
            "dataType": "TractorInfoParser",
            "id": "CustomComponent-ShIul",
            "name": "tractor_model_code",
            "output_types": [
              "Text"
            ]
          }
        },
        "id": "reactflow__edge-CustomComponent-ShIul{œdataTypeœ:œTractorInfoParserœ,œidœ:œCustomComponent-ShIulœ,œnameœ:œtractor_model_codeœ,œoutput_typesœ:[œTextœ]}-groupComponent-fCN9N{œfieldNameœ:œTMC_Prompt-uvWe5œ,œidœ:œgroupComponent-fCN9Nœ,œinputTypesœ:[œMessageœ,œTextœ],œproxyœ:{œfieldœ:œTMCœ,œidœ:œPrompt-uvWe5œ},œtypeœ:œstrœ}",
        "animated": false,
        "className": ""
      },
      {
        "source": "CustomComponent-ShIul",
        "sourceHandle": "{œdataTypeœ:œTractorInfoParserœ,œidœ:œCustomComponent-ShIulœ,œnameœ:œtractor_model_codeœ,œoutput_typesœ:[œTextœ]}",
        "target": "groupComponent-Jcwnj",
        "targetHandle": "{œfieldNameœ:œTMC_Prompt-ekcNXœ,œidœ:œgroupComponent-Jcwnjœ,œinputTypesœ:[œMessageœ,œTextœ],œproxyœ:{œfieldœ:œTMCœ,œidœ:œPrompt-ekcNXœ},œtypeœ:œstrœ}",
        "data": {
          "targetHandle": {
            "fieldName": "TMC_Prompt-ekcNX",
            "id": "groupComponent-Jcwnj",
            "inputTypes": [
              "Message",
              "Text"
            ],
            "proxy": {
              "field": "TMC",
              "id": "Prompt-ekcNX"
            },
            "type": "str"
          },
          "sourceHandle": {
            "dataType": "TractorInfoParser",
            "id": "CustomComponent-ShIul",
            "name": "tractor_model_code",
            "output_types": [
              "Text"
            ]
          }
        },
        "id": "reactflow__edge-CustomComponent-ShIul{œdataTypeœ:œTractorInfoParserœ,œidœ:œCustomComponent-ShIulœ,œnameœ:œtractor_model_codeœ,œoutput_typesœ:[œTextœ]}-groupComponent-Jcwnj{œfieldNameœ:œTMC_Prompt-ekcNXœ,œidœ:œgroupComponent-Jcwnjœ,œinputTypesœ:[œMessageœ,œTextœ],œproxyœ:{œfieldœ:œTMCœ,œidœ:œPrompt-ekcNXœ},œtypeœ:œstrœ}",
        "animated": false,
        "className": ""
      },
      {
        "source": "CustomComponent-ShIul",
        "sourceHandle": "{œdataTypeœ:œTractorInfoParserœ,œidœ:œCustomComponent-ShIulœ,œnameœ:œtractor_model_codeœ,œoutput_typesœ:[œTextœ]}",
        "target": "groupComponent-Ar7df",
        "targetHandle": "{œfieldNameœ:œTMC_Prompt-vkXhtœ,œidœ:œgroupComponent-Ar7dfœ,œinputTypesœ:[œMessageœ,œTextœ],œproxyœ:{œfieldœ:œTMCœ,œidœ:œPrompt-vkXhtœ},œtypeœ:œstrœ}",
        "data": {
          "targetHandle": {
            "fieldName": "TMC_Prompt-vkXht",
            "id": "groupComponent-Ar7df",
            "inputTypes": [
              "Message",
              "Text"
            ],
            "proxy": {
              "field": "TMC",
              "id": "Prompt-vkXht"
            },
            "type": "str"
          },
          "sourceHandle": {
            "dataType": "TractorInfoParser",
            "id": "CustomComponent-ShIul",
            "name": "tractor_model_code",
            "output_types": [
              "Text"
            ]
          }
        },
        "id": "reactflow__edge-CustomComponent-ShIul{œdataTypeœ:œTractorInfoParserœ,œidœ:œCustomComponent-ShIulœ,œnameœ:œtractor_model_codeœ,œoutput_typesœ:[œTextœ]}-groupComponent-Ar7df{œfieldNameœ:œTMC_Prompt-vkXhtœ,œidœ:œgroupComponent-Ar7dfœ,œinputTypesœ:[œMessageœ,œTextœ],œproxyœ:{œfieldœ:œTMCœ,œidœ:œPrompt-vkXhtœ},œtypeœ:œstrœ}",
        "animated": false,
        "className": ""
      },
      {
        "source": "File-fuRv5",
        "sourceHandle": "{œdataTypeœ:œFileœ,œidœ:œFile-fuRv5œ,œnameœ:œdataœ,œoutput_typesœ:[œDataœ]}",
        "target": "SplitText-EeRBo",
        "targetHandle": "{œfieldNameœ:œdata_inputsœ,œidœ:œSplitText-EeRBoœ,œinputTypesœ:[œDataœ],œtypeœ:œotherœ}",
        "data": {
          "targetHandle": {
            "fieldName": "data_inputs",
            "id": "SplitText-EeRBo",
            "inputTypes": [
              "Data"
            ],
            "type": "other"
          },
          "sourceHandle": {
            "dataType": "File",
            "id": "File-fuRv5",
            "name": "data",
            "output_types": [
              "Data"
            ]
          }
        },
        "id": "reactflow__edge-File-fuRv5{œdataTypeœ:œFileœ,œidœ:œFile-fuRv5œ,œnameœ:œdataœ,œoutput_typesœ:[œDataœ]}-SplitText-EeRBo{œfieldNameœ:œdata_inputsœ,œidœ:œSplitText-EeRBoœ,œinputTypesœ:[œDataœ],œtypeœ:œotherœ}",
        "className": ""
      },
      {
        "source": "SplitText-EeRBo",
        "sourceHandle": "{œdataTypeœ:œSplitTextœ,œidœ:œSplitText-EeRBoœ,œnameœ:œchunksœ,œoutput_typesœ:[œDataœ]}",
        "target": "Chroma-tlfnm",
        "targetHandle": "{œfieldNameœ:œingest_dataœ,œidœ:œChroma-tlfnmœ,œinputTypesœ:[œDataœ],œtypeœ:œotherœ}",
        "data": {
          "targetHandle": {
            "fieldName": "ingest_data",
            "id": "Chroma-tlfnm",
            "inputTypes": [
              "Data"
            ],
            "type": "other"
          },
          "sourceHandle": {
            "dataType": "SplitText",
            "id": "SplitText-EeRBo",
            "name": "chunks",
            "output_types": [
              "Data"
            ]
          }
        },
        "id": "reactflow__edge-SplitText-EeRBo{œdataTypeœ:œSplitTextœ,œidœ:œSplitText-EeRBoœ,œnameœ:œchunksœ,œoutput_typesœ:[œDataœ]}-Chroma-tlfnm{œfieldNameœ:œingest_dataœ,œidœ:œChroma-tlfnmœ,œinputTypesœ:[œDataœ],œtypeœ:œotherœ}",
        "className": ""
      },
      {
        "source": "OpenAIEmbeddings-alQyE",
        "sourceHandle": "{œdataTypeœ:œOpenAIEmbeddingsœ,œidœ:œOpenAIEmbeddings-alQyEœ,œnameœ:œembeddingsœ,œoutput_typesœ:[œEmbeddingsœ]}",
        "target": "Chroma-tlfnm",
        "targetHandle": "{œfieldNameœ:œembeddingœ,œidœ:œChroma-tlfnmœ,œinputTypesœ:[œEmbeddingsœ],œtypeœ:œotherœ}",
        "data": {
          "targetHandle": {
            "fieldName": "embedding",
            "id": "Chroma-tlfnm",
            "inputTypes": [
              "Embeddings"
            ],
            "type": "other"
          },
          "sourceHandle": {
            "dataType": "OpenAIEmbeddings",
            "id": "OpenAIEmbeddings-alQyE",
            "name": "embeddings",
            "output_types": [
              "Embeddings"
            ]
          }
        },
        "id": "reactflow__edge-OpenAIEmbeddings-alQyE{œdataTypeœ:œOpenAIEmbeddingsœ,œidœ:œOpenAIEmbeddings-alQyEœ,œnameœ:œembeddingsœ,œoutput_typesœ:[œEmbeddingsœ]}-Chroma-tlfnm{œfieldNameœ:œembeddingœ,œidœ:œChroma-tlfnmœ,œinputTypesœ:[œEmbeddingsœ],œtypeœ:œotherœ}"
      }
    ],
    "viewport": {
      "x": 4007.7428099723857,
      "y": 1641.3767302184704,
      "zoom": 1.0847474013930776
    }
  },
  "metadata": {
    "ChatInput": {
      "count": 1
    },
    "File": {
      "count": 1
    },
    "SplitText": {
      "count": 1
    },
    "Chroma": {
      "count": 1
    },
    "Prompt": {
      "count": 2
    },
    "CustomComponent": {
      "count": 1
    },
    "ChatOutput": {
      "count": 1
    },
    "OpenAIModel": {
      "count": 1
    },
    "groupComponent": {
      "count": 4
    },
    "OpenAIEmbeddings": {
      "count": 1
    },
    "total": 14
  },
  "original": {
    "id": "91aeccfa-2fef-4b58-9b29-ba7a6bbac8a7",
    "name": "argobot_241105",
    "description": "Promptly Ingenious!",
    "is_component": false,
    "liked_by_count": "0",
    "downloads_count": "0",
    "metadata": {
      "ChatInput": {
        "count": 1
      },
      "File": {
        "count": 1
      },
      "SplitText": {
        "count": 1
      },
      "Chroma": {
        "count": 1
      },
      "Prompt": {
        "count": 2
      },
      "CustomComponent": {
        "count": 1
      },
      "ChatOutput": {
        "count": 1
      },
      "OpenAIModel": {
        "count": 1
      },
      "groupComponent": {
        "count": 4
      },
      "OpenAIEmbeddings": {
        "count": 1
      },
      "total": 14
    },
    "last_tested_version": "1.0.19.post2",
    "private": true,
    "data": {
      "nodes": [
        {
          "id": "ChatInput-m8BPn",
          "type": "genericNode",
          "position": {
            "x": -3840.442893127972,
            "y": -840.2534582182356
          },
          "data": {
            "type": "ChatInput",
            "node": {
              "template": {
                "_type": "Component",
                "files": {
                  "trace_as_metadata": true,
                  "file_path": "",
                  "fileTypes": [
                    "txt",
                    "md",
                    "mdx",
                    "csv",
                    "json",
                    "yaml",
                    "yml",
                    "xml",
                    "html",
                    "htm",
                    "pdf",
                    "docx",
                    "py",
                    "sh",
                    "sql",
                    "js",
                    "ts",
                    "tsx",
                    "jpg",
                    "jpeg",
                    "png",
                    "bmp",
                    "image"
                  ],
                  "list": true,
                  "required": false,
                  "placeholder": "",
                  "show": true,
                  "name": "files",
                  "value": "",
                  "display_name": "Files",
                  "advanced": true,
                  "dynamic": false,
                  "info": "Files to be sent with the message.",
                  "title_case": false,
                  "type": "file",
                  "_input_type": "FileInput"
                },
                "code": {
                  "type": "code",
                  "required": true,
                  "placeholder": "",
                  "list": false,
                  "show": true,
                  "multiline": true,
                  "value": "from axiestudio.base.data.utils import IMG_FILE_TYPES, TEXT_FILE_TYPES\nfrom axiestudio.base.io.chat import ChatComponent\nfrom axiestudio.inputs import BoolInput\nfrom axiestudio.io import DropdownInput, FileInput, MessageTextInput, MultilineInput, Output\nfrom axiestudio.memory import store_message\nfrom axiestudio.schema.message import Message\nfrom axiestudio.utils.constants import MESSAGE_SENDER_AI, MESSAGE_SENDER_NAME_USER, MESSAGE_SENDER_USER\n\n\nclass ChatInput(ChatComponent):\n    display_name = \"Chat Input\"\n    description = \"Get chat inputs from the Playground.\"\n    icon = \"ChatInput\"\n    name = \"ChatInput\"\n\n    inputs = [\n        MultilineInput(\n            name=\"input_value\",\n            display_name=\"Text\",\n            value=\"\",\n            info=\"Message to be passed as input.\",\n        ),\n        BoolInput(\n            name=\"should_store_message\",\n            display_name=\"Store Messages\",\n            info=\"Store the message in the history.\",\n            value=True,\n            advanced=True,\n        ),\n        DropdownInput(\n            name=\"sender\",\n            display_name=\"Sender Type\",\n            options=[MESSAGE_SENDER_AI, MESSAGE_SENDER_USER],\n            value=MESSAGE_SENDER_USER,\n            info=\"Type of sender.\",\n            advanced=True,\n        ),\n        MessageTextInput(\n            name=\"sender_name\",\n            display_name=\"Sender Name\",\n            info=\"Name of the sender.\",\n            value=MESSAGE_SENDER_NAME_USER,\n            advanced=True,\n        ),\n        MessageTextInput(\n            name=\"session_id\",\n            display_name=\"Session ID\",\n            info=\"The session ID of the chat. If empty, the current session ID parameter will be used.\",\n            advanced=True,\n        ),\n        FileInput(\n            name=\"files\",\n            display_name=\"Files\",\n            file_types=TEXT_FILE_TYPES + IMG_FILE_TYPES,\n            info=\"Files to be sent with the message.\",\n            advanced=True,\n            is_list=True,\n        ),\n    ]\n    outputs = [\n        Output(display_name=\"Message\", name=\"message\", method=\"message_response\"),\n    ]\n\n    def message_response(self) -> Message:\n        message = Message(\n            text=self.input_value,\n            sender=self.sender,\n            sender_name=self.sender_name,\n            session_id=self.session_id,\n            files=self.files,\n        )\n\n        if (\n            self.session_id\n            and isinstance(message, Message)\n            and isinstance(message.text, str)\n            and self.should_store_message\n        ):\n            store_message(\n                message,\n                flow_id=self.graph.flow_id,\n            )\n            self.message.value = message\n\n        self.status = message\n        return message\n",
                  "fileTypes": [],
                  "file_path": "",
                  "password": false,
                  "name": "code",
                  "advanced": true,
                  "dynamic": true,
                  "info": "",
                  "load_from_db": false,
                  "title_case": false
                },
                "input_value": {
                  "trace_as_input": true,
                  "multiline": true,
                  "trace_as_metadata": true,
                  "load_from_db": false,
                  "list": false,
                  "required": false,
                  "placeholder": "",
                  "show": true,
                  "name": "input_value",
                  "value": "bollettini 2024 RS58",
                  "display_name": "Text",
                  "advanced": false,
                  "input_types": [
                    "Message"
                  ],
                  "dynamic": false,
                  "info": "Message to be passed as input.",
                  "title_case": false,
                  "type": "str",
                  "_input_type": "MultilineInput"
                },
                "sender": {
                  "trace_as_metadata": true,
                  "options": [
                    "Machine",
                    "User"
                  ],
                  "combobox": false,
                  "required": false,
                  "placeholder": "",
                  "show": true,
                  "name": "sender",
                  "value": "User",
                  "display_name": "Sender Type",
                  "advanced": true,
                  "dynamic": false,
                  "info": "Type of sender.",
                  "title_case": false,
                  "type": "str",
                  "_input_type": "DropdownInput"
                },
                "sender_name": {
                  "trace_as_input": true,
                  "trace_as_metadata": true,
                  "load_from_db": false,
                  "list": false,
                  "required": false,
                  "placeholder": "",
                  "show": true,
                  "name": "sender_name",
                  "value": "User",
                  "display_name": "Sender Name",
                  "advanced": true,
                  "input_types": [
                    "Message"
                  ],
                  "dynamic": false,
                  "info": "Name of the sender.",
                  "title_case": false,
                  "type": "str",
                  "_input_type": "MessageTextInput"
                },
                "session_id": {
                  "trace_as_input": true,
                  "trace_as_metadata": true,
                  "load_from_db": false,
                  "list": false,
                  "required": false,
                  "placeholder": "",
                  "show": true,
                  "name": "session_id",
                  "value": "",
                  "display_name": "Session ID",
                  "advanced": true,
                  "input_types": [
                    "Message"
                  ],
                  "dynamic": false,
                  "info": "The session ID of the chat. If empty, the current session ID parameter will be used.",
                  "title_case": false,
                  "type": "str",
                  "_input_type": "MessageTextInput"
                },
                "should_store_message": {
                  "trace_as_metadata": true,
                  "list": false,
                  "required": false,
                  "placeholder": "",
                  "show": true,
                  "name": "should_store_message",
                  "value": true,
                  "display_name": "Store Messages",
                  "advanced": true,
                  "dynamic": false,
                  "info": "Store the message in the history.",
                  "title_case": false,
                  "type": "bool",
                  "_input_type": "BoolInput"
                }
              },
              "description": "Get chat inputs from the Playground.",
              "icon": "ChatInput",
              "base_classes": [
                "Message"
              ],
              "display_name": "Chat Input",
              "documentation": "",
              "custom_fields": {},
              "output_types": [],
              "pinned": false,
              "conditional_paths": [],
              "frozen": false,
              "outputs": [
                {
                  "types": [
                    "Message"
                  ],
                  "selected": "Message",
                  "name": "message",
                  "display_name": "Message",
                  "method": "message_response",
                  "value": "__UNDEFINED__",
                  "cache": true
                }
              ],
              "field_order": [
                "input_value",
                "should_store_message",
                "sender",
                "sender_name",
                "session_id",
                "files"
              ],
              "beta": false,
              "edited": false,
              "metadata": {},
              "lf_version": "1.0.19"
            },
            "id": "ChatInput-m8BPn",
            "description": "Get chat inputs from the Playground.",
            "display_name": "Chat Input"
          },
          "selected": false,
          "width": 384,
          "height": 289,
          "dragging": false,
          "positionAbsolute": {
            "x": -3840.442893127972,
            "y": -840.2534582182356
          }
        },
        {
          "id": "File-fuRv5",
          "type": "genericNode",
          "position": {
            "x": -3840.697134801784,
            "y": -1781.1269065103281
          },
          "data": {
            "type": "File",
            "node": {
              "template": {
                "_type": "Component",
                "path": {
                  "trace_as_metadata": true,
                  "file_path": "",
                  "fileTypes": [
                    "txt",
                    "md",
                    "mdx",
                    "csv",
                    "json",
                    "yaml",
                    "yml",
                    "xml",
                    "html",
                    "htm",
                    "pdf",
                    "docx",
                    "py",
                    "sh",
                    "sql",
                    "js",
                    "ts",
                    "tsx"
                  ],
                  "list": false,
                  "required": false,
                  "placeholder": "",
                  "show": true,
                  "name": "path",
                  "value": "",
                  "display_name": "Path",
                  "advanced": false,
                  "dynamic": false,
                  "info": "Supported file types: txt, md, mdx, csv, json, yaml, yml, xml, html, htm, pdf, docx, py, sh, sql, js, ts, tsx",
                  "title_case": false,
                  "type": "file",
                  "_input_type": "FileInput",
                  "load_from_db": false
                },
                "code": {
                  "type": "code",
                  "required": true,
                  "placeholder": "",
                  "list": false,
                  "show": true,
                  "multiline": true,
                  "value": "from pathlib import Path\n\nfrom axiestudio.base.data.utils import TEXT_FILE_TYPES, parse_text_file_to_data\nfrom axiestudio.custom import Component\nfrom axiestudio.io import BoolInput, FileInput, Output\nfrom axiestudio.schema import Data\n\n\nclass FileComponent(Component):\n    display_name = \"File\"\n    description = \"A generic file loader.\"\n    icon = \"file-text\"\n    name = \"File\"\n\n    inputs = [\n        FileInput(\n            name=\"path\",\n            display_name=\"Path\",\n            file_types=TEXT_FILE_TYPES,\n            info=f\"Supported file types: {', '.join(TEXT_FILE_TYPES)}\",\n        ),\n        BoolInput(\n            name=\"silent_errors\",\n            display_name=\"Silent Errors\",\n            advanced=True,\n            info=\"If true, errors will not raise an exception.\",\n        ),\n    ]\n\n    outputs = [\n        Output(display_name=\"Data\", name=\"data\", method=\"load_file\"),\n    ]\n\n    def load_file(self) -> Data:\n        if not self.path:\n            msg = \"Please, upload a file to use this component.\"\n            raise ValueError(msg)\n        resolved_path = self.resolve_path(self.path)\n        silent_errors = self.silent_errors\n\n        extension = Path(resolved_path).suffix[1:].lower()\n\n        if extension == \"doc\":\n            msg = \"doc files are not supported. Please save as .docx\"\n            raise ValueError(msg)\n        if extension not in TEXT_FILE_TYPES:\n            msg = f\"Unsupported file type: {extension}\"\n            raise ValueError(msg)\n\n        data = parse_text_file_to_data(resolved_path, silent_errors)\n        self.status = data or \"No data\"\n        return data or Data()\n",
                  "fileTypes": [],
                  "file_path": "",
                  "password": false,
                  "name": "code",
                  "advanced": true,
                  "dynamic": true,
                  "info": "",
                  "load_from_db": false,
                  "title_case": false
                },
                "silent_errors": {
                  "trace_as_metadata": true,
                  "list": false,
                  "required": false,
                  "placeholder": "",
                  "show": true,
                  "name": "silent_errors",
                  "value": false,
                  "display_name": "Silent Errors",
                  "advanced": true,
                  "dynamic": false,
                  "info": "If true, errors will not raise an exception.",
                  "title_case": false,
                  "type": "bool",
                  "_input_type": "BoolInput"
                }
              },
              "description": "A generic file loader.",
              "icon": "file-text",
              "base_classes": [
                "Data"
              ],
              "display_name": "File",
              "documentation": "",
              "custom_fields": {},
              "output_types": [],
              "pinned": false,
              "conditional_paths": [],
              "frozen": false,
              "outputs": [
                {
                  "types": [
                    "Data"
                  ],
                  "selected": "Data",
                  "name": "data",
                  "display_name": "Data",
                  "method": "load_file",
                  "value": "__UNDEFINED__",
                  "cache": true
                }
              ],
              "field_order": [
                "path",
                "silent_errors"
              ],
              "beta": false,
              "edited": false,
              "metadata": {}
            },
            "id": "File-fuRv5",
            "description": "A generic file loader.",
            "display_name": "File"
          },
          "selected": false,
          "width": 384,
          "height": 289,
          "positionAbsolute": {
            "x": -3840.697134801784,
            "y": -1781.1269065103281
          },
          "dragging": false
        },
        {
          "id": "SplitText-EeRBo",
          "type": "genericNode",
          "position": {
            "x": -3440.0583005778117,
            "y": -1781.5434660399417
          },
          "data": {
            "type": "SplitText",
            "node": {
              "template": {
                "_type": "Component",
                "data_inputs": {
                  "trace_as_metadata": true,
                  "list": true,
                  "required": false,
                  "placeholder": "",
                  "show": true,
                  "name": "data_inputs",
                  "value": "",
                  "display_name": "Data Inputs",
                  "advanced": false,
                  "input_types": [
                    "Data"
                  ],
                  "dynamic": false,
                  "info": "The data to split.",
                  "title_case": false,
                  "type": "other",
                  "_input_type": "HandleInput"
                },
                "chunk_overlap": {
                  "trace_as_metadata": true,
                  "list": false,
                  "required": false,
                  "placeholder": "",
                  "show": true,
                  "name": "chunk_overlap",
                  "value": 200,
                  "display_name": "Chunk Overlap",
                  "advanced": false,
                  "dynamic": false,
                  "info": "Number of characters to overlap between chunks.",
                  "title_case": false,
                  "type": "int",
                  "_input_type": "IntInput"
                },
                "chunk_size": {
                  "trace_as_metadata": true,
                  "list": false,
                  "required": false,
                  "placeholder": "",
                  "show": true,
                  "name": "chunk_size",
                  "value": 4096,
                  "display_name": "Chunk Size",
                  "advanced": false,
                  "dynamic": false,
                  "info": "The maximum number of characters in each chunk.",
                  "title_case": false,
                  "type": "int",
                  "_input_type": "IntInput",
                  "load_from_db": false
                },
                "code": {
                  "type": "code",
                  "required": true,
                  "placeholder": "",
                  "list": false,
                  "show": true,
                  "multiline": true,
                  "value": "from langchain_text_splitters import CharacterTextSplitter\n\nfrom axiestudio.custom import Component\nfrom axiestudio.io import HandleInput, IntInput, MessageTextInput, Output\nfrom axiestudio.schema import Data\nfrom axiestudio.utils.util import unescape_string\n\n\nclass SplitTextComponent(Component):\n    display_name: str = \"Split Text\"\n    description: str = \"Split text into chunks based on specified criteria.\"\n    icon = \"scissors-line-dashed\"\n    name = \"SplitText\"\n\n    inputs = [\n        HandleInput(\n            name=\"data_inputs\",\n            display_name=\"Data Inputs\",\n            info=\"The data to split.\",\n            input_types=[\"Data\"],\n            is_list=True,\n        ),\n        IntInput(\n            name=\"chunk_overlap\",\n            display_name=\"Chunk Overlap\",\n            info=\"Number of characters to overlap between chunks.\",\n            value=200,\n        ),\n        IntInput(\n            name=\"chunk_size\",\n            display_name=\"Chunk Size\",\n            info=\"The maximum number of characters in each chunk.\",\n            value=1000,\n        ),\n        MessageTextInput(\n            name=\"separator\",\n            display_name=\"Separator\",\n            info=\"The character to split on. Defaults to newline.\",\n            value=\"\\n\",\n        ),\n    ]\n\n    outputs = [\n        Output(display_name=\"Chunks\", name=\"chunks\", method=\"split_text\"),\n    ]\n\n    def _docs_to_data(self, docs):\n        return [Data(text=doc.page_content, data=doc.metadata) for doc in docs]\n\n    def split_text(self) -> list[Data]:\n        separator = unescape_string(self.separator)\n\n        documents = [_input.to_lc_document() for _input in self.data_inputs if isinstance(_input, Data)]\n\n        splitter = CharacterTextSplitter(\n            chunk_overlap=self.chunk_overlap,\n            chunk_size=self.chunk_size,\n            separator=separator,\n        )\n        docs = splitter.split_documents(documents)\n        data = self._docs_to_data(docs)\n        self.status = data\n        return data\n",
                  "fileTypes": [],
                  "file_path": "",
                  "password": false,
                  "name": "code",
                  "advanced": true,
                  "dynamic": true,
                  "info": "",
                  "load_from_db": false,
                  "title_case": false
                },
                "separator": {
                  "trace_as_input": true,
                  "trace_as_metadata": true,
                  "load_from_db": false,
                  "list": false,
                  "required": false,
                  "placeholder": "",
                  "show": true,
                  "name": "separator",
                  "value": "\\n\\n",
                  "display_name": "Separator",
                  "advanced": false,
                  "input_types": [
                    "Message"
                  ],
                  "dynamic": false,
                  "info": "The character to split on. Defaults to newline.",
                  "title_case": false,
                  "type": "str",
                  "_input_type": "MessageTextInput"
                }
              },
              "description": "Split text into chunks based on specified criteria.",
              "icon": "scissors-line-dashed",
              "base_classes": [
                "Data"
              ],
              "display_name": "Split Text",
              "documentation": "",
              "custom_fields": {},
              "output_types": [],
              "pinned": false,
              "conditional_paths": [],
              "frozen": false,
              "outputs": [
                {
                  "types": [
                    "Data"
                  ],
                  "selected": "Data",
                  "name": "chunks",
                  "display_name": "Chunks",
                  "method": "split_text",
                  "value": "__UNDEFINED__",
                  "cache": true
                }
              ],
              "field_order": [
                "data_inputs",
                "chunk_overlap",
                "chunk_size",
                "separator"
              ],
              "beta": false,
              "edited": false,
              "metadata": {}
            },
            "id": "SplitText-EeRBo",
            "description": "Split text into chunks based on specified criteria.",
            "display_name": "Split Text"
          },
          "selected": false,
          "width": 384,
          "height": 525,
          "positionAbsolute": {
            "x": -3440.0583005778117,
            "y": -1781.5434660399417
          },
          "dragging": false
        },
        {
          "id": "Chroma-tlfnm",
          "type": "genericNode",
          "position": {
            "x": -3040.8232840137243,
            "y": -1782.315478764621
          },
          "data": {
            "type": "Chroma",
            "node": {
              "template": {
                "_type": "Component",
                "embedding": {
                  "trace_as_metadata": true,
                  "list": false,
                  "required": false,
                  "placeholder": "",
                  "show": true,
                  "name": "embedding",
                  "value": "",
                  "display_name": "Embedding",
                  "advanced": false,
                  "input_types": [
                    "Embeddings"
                  ],
                  "dynamic": false,
                  "info": "",
                  "title_case": false,
                  "type": "other",
                  "_input_type": "HandleInput"
                },
                "ingest_data": {
                  "trace_as_metadata": true,
                  "list": true,
                  "trace_as_input": true,
                  "required": false,
                  "placeholder": "",
                  "show": true,
                  "name": "ingest_data",
                  "value": "",
                  "display_name": "Ingest Data",
                  "advanced": false,
                  "input_types": [
                    "Data"
                  ],
                  "dynamic": false,
                  "info": "",
                  "title_case": false,
                  "type": "other",
                  "_input_type": "DataInput"
                },
                "allow_duplicates": {
                  "trace_as_metadata": true,
                  "list": false,
                  "required": false,
                  "placeholder": "",
                  "show": true,
                  "name": "allow_duplicates",
                  "value": false,
                  "display_name": "Allow Duplicates",
                  "advanced": true,
                  "dynamic": false,
                  "info": "If false, will not add documents that are already in the Vector Store.",
                  "title_case": false,
                  "type": "bool",
                  "_input_type": "BoolInput"
                },
                "chroma_server_cors_allow_origins": {
                  "trace_as_metadata": true,
                  "load_from_db": false,
                  "list": false,
                  "required": false,
                  "placeholder": "",
                  "show": true,
                  "name": "chroma_server_cors_allow_origins",
                  "value": "",
                  "display_name": "Server CORS Allow Origins",
                  "advanced": true,
                  "dynamic": false,
                  "info": "",
                  "title_case": false,
                  "type": "str",
                  "_input_type": "StrInput"
                },
                "chroma_server_grpc_port": {
                  "trace_as_metadata": true,
                  "list": false,
                  "required": false,
                  "placeholder": "",
                  "show": true,
                  "name": "chroma_server_grpc_port",
                  "value": "",
                  "display_name": "Server gRPC Port",
                  "advanced": true,
                  "dynamic": false,
                  "info": "",
                  "title_case": false,
                  "type": "int",
                  "_input_type": "IntInput"
                },
                "chroma_server_host": {
                  "trace_as_metadata": true,
                  "load_from_db": false,
                  "list": false,
                  "required": false,
                  "placeholder": "",
                  "show": true,
                  "name": "chroma_server_host",
                  "value": "",
                  "display_name": "Server Host",
                  "advanced": true,
                  "dynamic": false,
                  "info": "",
                  "title_case": false,
                  "type": "str",
                  "_input_type": "StrInput"
                },
                "chroma_server_http_port": {
                  "trace_as_metadata": true,
                  "list": false,
                  "required": false,
                  "placeholder": "",
                  "show": true,
                  "name": "chroma_server_http_port",
                  "value": 0,
                  "display_name": "Server HTTP Port",
                  "advanced": true,
                  "dynamic": false,
                  "info": "",
                  "title_case": false,
                  "type": "int",
                  "_input_type": "IntInput",
                  "load_from_db": false
                },
                "chroma_server_ssl_enabled": {
                  "trace_as_metadata": true,
                  "list": false,
                  "required": false,
                  "placeholder": "",
                  "show": true,
                  "name": "chroma_server_ssl_enabled",
                  "value": false,
                  "display_name": "Server SSL Enabled",
                  "advanced": true,
                  "dynamic": false,
                  "info": "",
                  "title_case": false,
                  "type": "bool",
                  "_input_type": "BoolInput"
                },
                "code": {
                  "type": "code",
                  "required": true,
                  "placeholder": "",
                  "list": false,
                  "show": true,
                  "multiline": true,
                  "value": "from copy import deepcopy\n\nfrom chromadb.config import Settings\nfrom langchain_chroma import Chroma\nfrom loguru import logger\n\nfrom axiestudio.base.vectorstores.model import LCVectorStoreComponent, check_cached_vector_store\nfrom axiestudio.base.vectorstores.utils import chroma_collection_to_data\nfrom axiestudio.io import BoolInput, DataInput, DropdownInput, HandleInput, IntInput, MultilineInput, StrInput\nfrom axiestudio.schema import Data\n\n\nclass ChromaVectorStoreComponent(LCVectorStoreComponent):\n    \"\"\"\n    Chroma Vector Store with search capabilities\n    \"\"\"\n\n    display_name: str = \"Chroma DB\"\n    description: str = \"Chroma Vector Store with search capabilities\"\n    documentation = \"https://python.langchain.com/docs/integrations/vectorstores/chroma\"\n    name = \"Chroma\"\n    icon = \"Chroma\"\n\n    inputs = [\n        StrInput(\n            name=\"collection_name\",\n            display_name=\"Collection Name\",\n            value=\"axiestudio\",\n        ),\n        StrInput(\n            name=\"persist_directory\",\n            display_name=\"Persist Directory\",\n        ),\n        MultilineInput(\n            name=\"search_query\",\n            display_name=\"Search Query\",\n        ),\n        DataInput(\n            name=\"ingest_data\",\n            display_name=\"Ingest Data\",\n            is_list=True,\n        ),\n        HandleInput(name=\"embedding\", display_name=\"Embedding\", input_types=[\"Embeddings\"]),\n        StrInput(\n            name=\"chroma_server_cors_allow_origins\",\n            display_name=\"Server CORS Allow Origins\",\n            advanced=True,\n        ),\n        StrInput(\n            name=\"chroma_server_host\",\n            display_name=\"Server Host\",\n            advanced=True,\n        ),\n        IntInput(\n            name=\"chroma_server_http_port\",\n            display_name=\"Server HTTP Port\",\n            advanced=True,\n        ),\n        IntInput(\n            name=\"chroma_server_grpc_port\",\n            display_name=\"Server gRPC Port\",\n            advanced=True,\n        ),\n        BoolInput(\n            name=\"chroma_server_ssl_enabled\",\n            display_name=\"Server SSL Enabled\",\n            advanced=True,\n        ),\n        BoolInput(\n            name=\"allow_duplicates\",\n            display_name=\"Allow Duplicates\",\n            advanced=True,\n            info=\"If false, will not add documents that are already in the Vector Store.\",\n        ),\n        DropdownInput(\n            name=\"search_type\",\n            display_name=\"Search Type\",\n            options=[\"Similarity\", \"MMR\"],\n            value=\"Similarity\",\n            advanced=True,\n        ),\n        IntInput(\n            name=\"number_of_results\",\n            display_name=\"Number of Results\",\n            info=\"Number of results to return.\",\n            advanced=True,\n            value=10,\n        ),\n        IntInput(\n            name=\"limit\",\n            display_name=\"Limit\",\n            advanced=True,\n            info=\"Limit the number of records to compare when Allow Duplicates is False.\",\n        ),\n    ]\n\n    @check_cached_vector_store\n    def build_vector_store(self) -> Chroma:\n        \"\"\"\n        Builds the Chroma object.\n        \"\"\"\n        try:\n            from chromadb import Client\n            from langchain_chroma import Chroma\n        except ImportError as e:\n            msg = \"Could not import Chroma integration package. Please install it with `pip install langchain-chroma`.\"\n            raise ImportError(msg) from e\n        # Chroma settings\n        chroma_settings = None\n        client = None\n        if self.chroma_server_host:\n            chroma_settings = Settings(\n                chroma_server_cors_allow_origins=self.chroma_server_cors_allow_origins or [],\n                chroma_server_host=self.chroma_server_host,\n                chroma_server_http_port=self.chroma_server_http_port or None,\n                chroma_server_grpc_port=self.chroma_server_grpc_port or None,\n                chroma_server_ssl_enabled=self.chroma_server_ssl_enabled,\n            )\n            client = Client(settings=chroma_settings)\n\n        # Check persist_directory and expand it if it is a relative path\n        persist_directory = self.resolve_path(self.persist_directory) if self.persist_directory is not None else None\n\n        chroma = Chroma(\n            persist_directory=persist_directory,\n            client=client,\n            embedding_function=self.embedding,\n            collection_name=self.collection_name,\n        )\n\n        self._add_documents_to_vector_store(chroma)\n        self.status = chroma_collection_to_data(chroma.get(limit=self.limit))\n        return chroma\n\n    def _add_documents_to_vector_store(self, vector_store: \"Chroma\") -> None:\n        \"\"\"\n        Adds documents to the Vector Store.\n        \"\"\"\n        if not self.ingest_data:\n            self.status = \"\"\n            return\n\n        _stored_documents_without_id = []\n        if self.allow_duplicates:\n            stored_data = []\n        else:\n            stored_data = chroma_collection_to_data(vector_store.get(limit=self.limit))\n            for value in deepcopy(stored_data):\n                del value.id\n                _stored_documents_without_id.append(value)\n\n        documents = []\n        for _input in self.ingest_data or []:\n            if isinstance(_input, Data):\n                if _input not in _stored_documents_without_id:\n                    documents.append(_input.to_lc_document())\n            else:\n                msg = \"Vector Store Inputs must be Data objects.\"\n                raise TypeError(msg)\n\n        if documents and self.embedding is not None:\n            logger.debug(f\"Adding {len(documents)} documents to the Vector Store.\")\n            vector_store.add_documents(documents)\n        else:\n            logger.debug(\"No documents to add to the Vector Store.\")\n",
                  "fileTypes": [],
                  "file_path": "",
                  "password": false,
                  "name": "code",
                  "advanced": true,
                  "dynamic": true,
                  "info": "",
                  "load_from_db": false,
                  "title_case": false
                },
                "collection_name": {
                  "trace_as_metadata": true,
                  "load_from_db": false,
                  "list": false,
                  "required": false,
                  "placeholder": "",
                  "show": true,
                  "name": "collection_name",
                  "value": "6670772A5",
                  "display_name": "Collection Name",
                  "advanced": false,
                  "dynamic": false,
                  "info": "",
                  "title_case": false,
                  "type": "str",
                  "_input_type": "StrInput"
                },
                "limit": {
                  "trace_as_metadata": true,
                  "list": false,
                  "required": false,
                  "placeholder": "",
                  "show": true,
                  "name": "limit",
                  "value": "",
                  "display_name": "Limit",
                  "advanced": true,
                  "dynamic": false,
                  "info": "Limit the number of records to compare when Allow Duplicates is False.",
                  "title_case": false,
                  "type": "int",
                  "_input_type": "IntInput"
                },
                "number_of_results": {
                  "trace_as_metadata": true,
                  "list": false,
                  "required": false,
                  "placeholder": "",
                  "show": true,
                  "name": "number_of_results",
                  "value": 10,
                  "display_name": "Number of Results",
                  "advanced": true,
                  "dynamic": false,
                  "info": "Number of results to return.",
                  "title_case": false,
                  "type": "int",
                  "_input_type": "IntInput"
                },
                "persist_directory": {
                  "trace_as_metadata": true,
                  "load_from_db": false,
                  "list": false,
                  "required": false,
                  "placeholder": "",
                  "show": true,
                  "name": "persist_directory",
                  "value": "Documents/GitHub/argobot/OIB",
                  "display_name": "Persist Directory",
                  "advanced": false,
                  "dynamic": false,
                  "info": "",
                  "title_case": false,
                  "type": "str",
                  "_input_type": "StrInput"
                },
                "search_query": {
                  "trace_as_input": true,
                  "multiline": true,
                  "trace_as_metadata": true,
                  "load_from_db": false,
                  "list": false,
                  "required": false,
                  "placeholder": "",
                  "show": true,
                  "name": "search_query",
                  "value": "prova",
                  "display_name": "Search Query",
                  "advanced": false,
                  "input_types": [
                    "Message"
                  ],
                  "dynamic": false,
                  "info": "",
                  "title_case": false,
                  "type": "str",
                  "_input_type": "MultilineInput"
                },
                "search_type": {
                  "trace_as_metadata": true,
                  "options": [
                    "Similarity",
                    "MMR"
                  ],
                  "combobox": false,
                  "required": false,
                  "placeholder": "",
                  "show": true,
                  "name": "search_type",
                  "value": "Similarity",
                  "display_name": "Search Type",
                  "advanced": true,
                  "dynamic": false,
                  "info": "",
                  "title_case": false,
                  "type": "str",
                  "_input_type": "DropdownInput"
                }
              },
              "description": "Chroma Vector Store with search capabilities",
              "icon": "Chroma",
              "base_classes": [
                "Data",
                "Retriever",
                "VectorStore"
              ],
              "display_name": "Chroma DB",
              "documentation": "https://python.langchain.com/docs/integrations/vectorstores/chroma",
              "custom_fields": {},
              "output_types": [],
              "pinned": false,
              "conditional_paths": [],
              "frozen": false,
              "outputs": [
                {
                  "types": [
                    "Retriever"
                  ],
                  "selected": "Retriever",
                  "name": "base_retriever",
                  "display_name": "Retriever",
                  "method": "build_base_retriever",
                  "value": "__UNDEFINED__",
                  "cache": true,
                  "required_inputs": []
                },
                {
                  "types": [
                    "Data"
                  ],
                  "selected": "Data",
                  "name": "search_results",
                  "display_name": "Search Results",
                  "method": "search_documents",
                  "value": "__UNDEFINED__",
                  "cache": true,
                  "required_inputs": [
                    "number_of_results",
                    "search_query",
                    "search_type"
                  ]
                },
                {
                  "types": [
                    "VectorStore"
                  ],
                  "selected": "VectorStore",
                  "name": "vector_store",
                  "display_name": "Vector Store",
                  "method": "cast_vector_store",
                  "value": "__UNDEFINED__",
                  "cache": true,
                  "required_inputs": []
                }
              ],
              "field_order": [
                "collection_name",
                "persist_directory",
                "search_query",
                "ingest_data",
                "embedding",
                "chroma_server_cors_allow_origins",
                "chroma_server_host",
                "chroma_server_http_port",
                "chroma_server_grpc_port",
                "chroma_server_ssl_enabled",
                "allow_duplicates",
                "search_type",
                "number_of_results",
                "limit"
              ],
              "beta": false,
              "edited": false,
              "metadata": {}
            },
            "id": "Chroma-tlfnm",
            "description": "Chroma Vector Store with search capabilities",
            "display_name": "Chroma DB"
          },
          "selected": false,
          "width": 384,
          "height": 637,
          "positionAbsolute": {
            "x": -3040.8232840137243,
            "y": -1782.315478764621
          },
          "dragging": false
        },
        {
          "id": "Prompt-JkmeG",
          "type": "genericNode",
          "position": {
            "x": -3040.661801882445,
            "y": -840.6863892111868
          },
          "data": {
            "type": "Prompt",
            "node": {
              "template": {
                "_type": "Component",
                "code": {
                  "type": "code",
                  "required": true,
                  "placeholder": "",
                  "list": false,
                  "show": true,
                  "multiline": true,
                  "value": "from axiestudio.base.prompts.api_utils import process_prompt_template\nfrom axiestudio.custom import Component\nfrom axiestudio.inputs.inputs import DefaultPromptField\nfrom axiestudio.io import Output, PromptInput\nfrom axiestudio.schema.message import Message\nfrom axiestudio.template.utils import update_template_values\n\n\nclass PromptComponent(Component):\n    display_name: str = \"Prompt\"\n    description: str = \"Create a prompt template with dynamic variables.\"\n    icon = \"prompts\"\n    trace_type = \"prompt\"\n    name = \"Prompt\"\n\n    inputs = [\n        PromptInput(name=\"template\", display_name=\"Template\"),\n    ]\n\n    outputs = [\n        Output(display_name=\"Prompt Message\", name=\"prompt\", method=\"build_prompt\"),\n    ]\n\n    async def build_prompt(\n        self,\n    ) -> Message:\n        prompt = await Message.from_template_and_variables(**self._attributes)\n        self.status = prompt.text\n        return prompt\n\n    def _update_template(self, frontend_node: dict):\n        prompt_template = frontend_node[\"template\"][\"template\"][\"value\"]\n        custom_fields = frontend_node[\"custom_fields\"]\n        frontend_node_template = frontend_node[\"template\"]\n        _ = process_prompt_template(\n            template=prompt_template,\n            name=\"template\",\n            custom_fields=custom_fields,\n            frontend_node_template=frontend_node_template,\n        )\n        return frontend_node\n\n    def post_code_processing(self, new_frontend_node: dict, current_frontend_node: dict):\n        \"\"\"\n        This function is called after the code validation is done.\n        \"\"\"\n        frontend_node = super().post_code_processing(new_frontend_node, current_frontend_node)\n        template = frontend_node[\"template\"][\"template\"][\"value\"]\n        # Kept it duplicated for backwards compatibility\n        _ = process_prompt_template(\n            template=template,\n            name=\"template\",\n            custom_fields=frontend_node[\"custom_fields\"],\n            frontend_node_template=frontend_node[\"template\"],\n        )\n        # Now that template is updated, we need to grab any values that were set in the current_frontend_node\n        # and update the frontend_node with those values\n        update_template_values(new_template=frontend_node, previous_template=current_frontend_node[\"template\"])\n        return frontend_node\n\n    def _get_fallback_input(self, **kwargs):\n        return DefaultPromptField(**kwargs)\n",
                  "fileTypes": [],
                  "file_path": "",
                  "password": false,
                  "name": "code",
                  "advanced": true,
                  "dynamic": true,
                  "info": "",
                  "load_from_db": false,
                  "title_case": false
                },
                "template": {
                  "trace_as_input": true,
                  "list": false,
                  "required": false,
                  "placeholder": "",
                  "show": true,
                  "name": "template",
                  "value": "CN - connector\nEC - electronic controller\nEH - heating element\nF - fuse\nK - relay\nM - electrical motor\nR - resistance\nRP - position sensor\nS - switch\nSG - accelerometer\nSL - level sensor\nSP - position sensor\nSQ - micro-switch\nSR - speed sensor\nST - temperature sensor\nXM - ground point\nXS - connector\nYV - solenoid valve",
                  "display_name": "Template",
                  "advanced": false,
                  "dynamic": false,
                  "info": "",
                  "title_case": false,
                  "type": "prompt",
                  "_input_type": "PromptInput"
                }
              },
              "description": "Create a prompt template with dynamic variables.",
              "icon": "prompts",
              "is_input": null,
              "is_output": null,
              "is_composition": null,
              "base_classes": [
                "Message"
              ],
              "name": "",
              "display_name": "Glossary",
              "documentation": "",
              "custom_fields": {
                "template": []
              },
              "output_types": [],
              "full_path": null,
              "pinned": false,
              "conditional_paths": [],
              "frozen": false,
              "outputs": [
                {
                  "types": [
                    "Message"
                  ],
                  "selected": "Message",
                  "name": "prompt",
                  "hidden": null,
                  "display_name": "Prompt Message",
                  "method": "build_prompt",
                  "value": "__UNDEFINED__",
                  "cache": true
                }
              ],
              "field_order": [
                "template"
              ],
              "beta": false,
              "error": null,
              "edited": false,
              "lf_version": "1.0.19"
            },
            "id": "Prompt-JkmeG"
          },
          "selected": false,
          "width": 384,
          "height": 305,
          "positionAbsolute": {
            "x": -3040.661801882445,
            "y": -840.6863892111868
          },
          "dragging": false
        },
        {
          "id": "CustomComponent-ShIul",
          "type": "genericNode",
          "position": {
            "x": -3440.7651390470974,
            "y": -840.5645718300633
          },
          "data": {
            "type": "TractorInfoParser",
            "node": {
              "template": {
                "_type": "Component",
                "code": {
                  "type": "code",
                  "required": true,
                  "placeholder": "",
                  "list": false,
                  "show": true,
                  "multiline": true,
                  "value": "from axiestudio.custom import Component\nfrom axiestudio.io import MessageInput, Output\nfrom typing import Dict, Any\nimport re\n\nclass TractorInfoParser(Component):\n    display_name = \"Tractor Info Parser\"\n    description = \"Extracts tractor information from the question and creates separate outputs.\"\n    icon = \"🚜\"\n    name = \"TractorInfoParser\"\n    inputs = [\n        MessageInput(\n            name=\"user_question\",\n            display_name=\"User Question\",\n            info=\"Enter a question containing tractor information\",\n        ),\n    ]\n    outputs = [\n        Output(name=\"tractor_model_code\", display_name=\"Tractor Model Code\", method=\"get_tractor_model_code\"),\n        Output(name=\"suspect_parameter_number\", display_name=\"Suspect Parameter Number\", method=\"get_suspect_parameter_number\"),\n        Output(name=\"failure_mode_identifier\", display_name=\"Failure Mode Identifier\", method=\"get_failure_mode_identifier\"),\n        Output(name=\"technical_bulletin_code\", display_name=\"Technical Bulletin Code\", method=\"get_technical_bulletin_code\"),\n        Output(name=\"service_campaign_code\", display_name=\"Service Campaign Code\", method=\"get_service_campaign_code\"),\n        Output(name=\"year\", display_name=\"Year\", method=\"get_year\"),\n    ]\n\n    def __init__(self, _code=None, _user_id=None, _parameters=None, _vertex=None, _tracing_service=None, **kwargs):\n        # Initialize the parent class and compile regex patterns for extraction\n        super().__init__(_code=_code, _user_id=_user_id, _parameters=_parameters, _vertex=_vertex, _tracing_service=_tracing_service, **kwargs)\n        self.patterns = self._initialize_patterns()\n        self.compiled_patterns = {key: re.compile(pattern) for key, pattern in self.patterns.items()}\n\n    def _initialize_patterns(self) -> Dict[str, str]:\n        \"\"\"Initializes regex patterns for extracting tractor information.\"\"\"\n        return {\n            'tractor_model_code': r'\\b(CP|CT|RP|RS|RT)[A-Z0-9]{2}\\b',\n            'suspect_parameter_number': r'\\b(?:[0-9A-F]{1,6}|[0-9A-F]{1,6}\\.[0-9]+)\\b',\n            'failure_mode_identifier': r'\\b(' + '|'.join(str(i) for i in range(32) if i not in [24, 26, 27]) + r')\\b',\n            'technical_bulletin_code': r'\\bSB_\\d{4}_\\d{2}\\b',\n            'service_campaign_code': r'\\bRP_\\d{4}_\\d{2}\\b',\n            'year': r'\\b(201[0-9]|202[0-5])\\b'\n        }\n\n    def extract_pattern(self, text: str, pattern_key: str) -> str:\n        \"\"\"Extracts the first matching pattern from the text.\"\"\"\n        if pattern_key not in self.compiled_patterns:\n            return \"Pattern not found\"\n        match = self.compiled_patterns[pattern_key].search(text)\n        return match.group() if match else \"Not found\"\n\n    def get_tractor_model_code(self) -> str:\n        \"\"\"Extracts the tractor model code from the question text.\"\"\"\n        return self._extract_info('tractor_model_code')\n\n    def get_suspect_parameter_number(self) -> str:\n        \"\"\"Extracts the suspect parameter number from the question text.\"\"\"\n        return self._extract_info('suspect_parameter_number')\n\n    def get_failure_mode_identifier(self) -> str:\n        \"\"\"Extracts the failure mode identifier from the question text.\"\"\"\n        return self._extract_info('failure_mode_identifier')\n    \n    def get_technical_bulletin_code(self) -> str:\n        \"\"\"Extracts the technical bulletin code from the question text.\"\"\"\n        return self._extract_info('technical_bulletin_code')\n\n    def get_service_campaign_code(self) -> str:\n        \"\"\"Extracts the service campaign code from the question text.\"\"\"\n        return self._extract_info('service_campaign_code')\n\n    def get_year(self) -> str:\n        \"\"\"Extracts the year from the question text.\"\"\"\n        return self._extract_info('year')\n\n    def _extract_info(self, pattern_key: str) -> str:\n        \"\"\"Helper method to extract information based on the provided pattern key.\"\"\"\n        if not hasattr(self, 'user_question') or not self.user_question.text:\n            return \"Question text is not available\"\n        return self.extract_pattern(self.user_question.text, pattern_key)",
                  "fileTypes": [],
                  "file_path": "",
                  "password": false,
                  "name": "code",
                  "advanced": true,
                  "dynamic": true,
                  "info": "",
                  "load_from_db": false,
                  "title_case": false
                },
                "user_question": {
                  "trace_as_input": true,
                  "trace_as_metadata": true,
                  "load_from_db": false,
                  "list": false,
                  "required": false,
                  "placeholder": "",
                  "show": true,
                  "name": "user_question",
                  "value": "",
                  "display_name": "User Question",
                  "advanced": false,
                  "input_types": [
                    "Message"
                  ],
                  "dynamic": false,
                  "info": "Enter a question containing tractor information",
                  "title_case": false,
                  "type": "str",
                  "_input_type": "MessageInput"
                }
              },
              "description": "Extracts tractor information from the question and creates separate outputs.",
              "icon": "🚜",
              "base_classes": [
                "Text"
              ],
              "display_name": "Tractor Info Parser",
              "documentation": "",
              "custom_fields": {},
              "output_types": [],
              "pinned": false,
              "conditional_paths": [],
              "frozen": false,
              "outputs": [
                {
                  "types": [
                    "Text"
                  ],
                  "selected": "Text",
                  "name": "tractor_model_code",
                  "display_name": "Tractor Model Code",
                  "method": "get_tractor_model_code",
                  "value": "__UNDEFINED__",
                  "cache": true
                },
                {
                  "types": [
                    "Text"
                  ],
                  "selected": "Text",
                  "name": "suspect_parameter_number",
                  "display_name": "Suspect Parameter Number",
                  "method": "get_suspect_parameter_number",
                  "value": "__UNDEFINED__",
                  "cache": true
                },
                {
                  "types": [
                    "Text"
                  ],
                  "selected": "Text",
                  "name": "failure_mode_identifier",
                  "display_name": "Failure Mode Identifier",
                  "method": "get_failure_mode_identifier",
                  "value": "__UNDEFINED__",
                  "cache": true
                },
                {
                  "types": [
                    "Text"
                  ],
                  "selected": "Text",
                  "name": "technical_bulletin_code",
                  "display_name": "Technical Bulletin Code",
                  "method": "get_technical_bulletin_code",
                  "value": "__UNDEFINED__",
                  "cache": true
                },
                {
                  "types": [
                    "Text"
                  ],
                  "selected": "Text",
                  "name": "service_campaign_code",
                  "display_name": "Service Campaign Code",
                  "method": "get_service_campaign_code",
                  "value": "__UNDEFINED__",
                  "cache": true
                },
                {
                  "types": [
                    "Text"
                  ],
                  "selected": "Text",
                  "name": "year",
                  "display_name": "Year",
                  "method": "get_year",
                  "value": "__UNDEFINED__",
                  "cache": true
                }
              ],
              "field_order": [
                "user_question"
              ],
              "beta": false,
              "edited": true,
              "metadata": {},
              "lf_version": "1.0.19"
            },
            "id": "CustomComponent-ShIul"
          },
          "selected": false,
          "width": 384,
          "height": 501,
          "dragging": false,
          "positionAbsolute": {
            "x": -3440.7651390470974,
            "y": -840.5645718300633
          }
        },
        {
          "id": "Prompt-NXY0w",
          "type": "genericNode",
          "position": {
            "x": -1040.3937084913155,
            "y": -840.4182814329793
          },
          "data": {
            "type": "Prompt",
            "node": {
              "template": {
                "_type": "Component",
                "code": {
                  "type": "code",
                  "required": true,
                  "placeholder": "",
                  "list": false,
                  "show": true,
                  "multiline": true,
                  "value": "from axiestudio.base.prompts.api_utils import process_prompt_template\nfrom axiestudio.custom import Component\nfrom axiestudio.inputs.inputs import DefaultPromptField\nfrom axiestudio.io import Output, PromptInput\nfrom axiestudio.schema.message import Message\nfrom axiestudio.template.utils import update_template_values\n\n\nclass PromptComponent(Component):\n    display_name: str = \"Prompt\"\n    description: str = \"Create a prompt template with dynamic variables.\"\n    icon = \"prompts\"\n    trace_type = \"prompt\"\n    name = \"Prompt\"\n\n    inputs = [\n        PromptInput(name=\"template\", display_name=\"Template\"),\n    ]\n\n    outputs = [\n        Output(display_name=\"Prompt Message\", name=\"prompt\", method=\"build_prompt\"),\n    ]\n\n    async def build_prompt(\n        self,\n    ) -> Message:\n        prompt = await Message.from_template_and_variables(**self._attributes)\n        self.status = prompt.text\n        return prompt\n\n    def _update_template(self, frontend_node: dict):\n        prompt_template = frontend_node[\"template\"][\"template\"][\"value\"]\n        custom_fields = frontend_node[\"custom_fields\"]\n        frontend_node_template = frontend_node[\"template\"]\n        _ = process_prompt_template(\n            template=prompt_template,\n            name=\"template\",\n            custom_fields=custom_fields,\n            frontend_node_template=frontend_node_template,\n        )\n        return frontend_node\n\n    def post_code_processing(self, new_frontend_node: dict, current_frontend_node: dict):\n        \"\"\"\n        This function is called after the code validation is done.\n        \"\"\"\n        frontend_node = super().post_code_processing(new_frontend_node, current_frontend_node)\n        template = frontend_node[\"template\"][\"template\"][\"value\"]\n        # Kept it duplicated for backwards compatibility\n        _ = process_prompt_template(\n            template=template,\n            name=\"template\",\n            custom_fields=frontend_node[\"custom_fields\"],\n            frontend_node_template=frontend_node[\"template\"],\n        )\n        # Now that template is updated, we need to grab any values that were set in the current_frontend_node\n        # and update the frontend_node with those values\n        update_template_values(new_template=frontend_node, previous_template=current_frontend_node[\"template\"])\n        return frontend_node\n\n    def _get_fallback_input(self, **kwargs):\n        return DefaultPromptField(**kwargs)\n",
                  "fileTypes": [],
                  "file_path": "",
                  "password": false,
                  "name": "code",
                  "advanced": true,
                  "dynamic": true,
                  "info": "",
                  "load_from_db": false,
                  "title_case": false
                },
                "template": {
                  "trace_as_input": true,
                  "list": false,
                  "required": false,
                  "placeholder": "",
                  "show": true,
                  "name": "template",
                  "value": "You are an AI assistant specializing in agricultural machinery, particularly in technical support for tractors. Your task is to answer user questions using the provided information sources and following specific guidelines.\n\nYou will be given the following inputs:\n\n<user_question>\n{user_question}\n</user_question>\n\n<glossary>\n{glossary}\n</glossary>\n\n<operator_manual>\n{OIB}\n</operator_manual>\n\n<workshop_manual>\n{WSM}\n</workshop_manual>\n\n<diagnostic_trouble_codes>\n{DTC}\n</diagnostic_trouble_codes>\n\n<technical_bulletins>\n{TBU}\n</technical_bulletins>\n\n<service_campaigns>\n{SCM}\n</service_campaigns>\n\nFollow these response guidelines:\n\n1. Answer in the Italian language.\n2. Use markdown formatting for structure.\n3. Tailor your response structure to the specific query, integrating relevant information from all sources as needed.\n4. Include only directly relevant information.\n5. Use clear, concise language suitable for both technical and non-technical users.\n6. Prioritize practical, actionable advice.\n7. If critical information is missing, briefly state this and its potential impact.\n\nFor error code queries:\n- Include ALL results from the diagnostic trouble codes.\n- Use this format for each code:\n  **Error Code:** [Code]\n  **Description:** [Brief description]\n  [Additional relevant details if space allows]\n\nFor technical bulletin queries:\n- Include ALL bulletins from the technical bulletins.\n- Use this format for each bulletin:\n  X. **Technical Bulletin - SB_XXXX_XX_XX**\n  **Description:** [Brief description]\n  [Additional details (Publication Date, Classification, Tractor Models, Campaign Code) if space allows]\n\nFor all other queries:\n- Create a logical structure that best addresses the specific question.\n- Integrate relevant information from available sources without explicitly mentioning them.\n\nYour goal is to provide a comprehensive, focused response that directly addresses the query, enabling efficient troubleshooting and resolution.\n\nRemember to think carefully about the query and use all relevant information from the provided sources to construct your answer.",
                  "display_name": "Template",
                  "advanced": false,
                  "dynamic": false,
                  "info": "",
                  "title_case": false,
                  "type": "prompt",
                  "_input_type": "PromptInput"
                },
                "glossary": {
                  "field_type": "str",
                  "required": false,
                  "placeholder": "",
                  "list": false,
                  "show": true,
                  "multiline": true,
                  "value": "",
                  "fileTypes": [],
                  "file_path": "",
                  "name": "glossary",
                  "display_name": "glossary",
                  "advanced": false,
                  "input_types": [
                    "Message",
                    "Text"
                  ],
                  "dynamic": false,
                  "info": "",
                  "load_from_db": false,
                  "title_case": false,
                  "type": "str"
                },
                "user_question": {
                  "field_type": "str",
                  "required": false,
                  "placeholder": "",
                  "list": false,
                  "show": true,
                  "multiline": true,
                  "value": "",
                  "fileTypes": [],
                  "file_path": "",
                  "name": "user_question",
                  "display_name": "user_question",
                  "advanced": false,
                  "input_types": [
                    "Message",
                    "Text"
                  ],
                  "dynamic": false,
                  "info": "",
                  "load_from_db": false,
                  "title_case": false,
                  "type": "str"
                },
                "OIB": {
                  "field_type": "str",
                  "required": false,
                  "placeholder": "",
                  "list": false,
                  "show": true,
                  "multiline": true,
                  "value": "",
                  "fileTypes": [],
                  "file_path": "",
                  "name": "OIB",
                  "display_name": "OIB",
                  "advanced": false,
                  "input_types": [
                    "Message",
                    "Text"
                  ],
                  "dynamic": false,
                  "info": "",
                  "load_from_db": false,
                  "title_case": false,
                  "type": "str"
                },
                "WSM": {
                  "field_type": "str",
                  "required": false,
                  "placeholder": "",
                  "list": false,
                  "show": true,
                  "multiline": true,
                  "value": "",
                  "fileTypes": [],
                  "file_path": "",
                  "name": "WSM",
                  "display_name": "WSM",
                  "advanced": false,
                  "input_types": [
                    "Message",
                    "Text"
                  ],
                  "dynamic": false,
                  "info": "",
                  "load_from_db": false,
                  "title_case": false,
                  "type": "str"
                },
                "DTC": {
                  "field_type": "str",
                  "required": false,
                  "placeholder": "",
                  "list": false,
                  "show": true,
                  "multiline": true,
                  "value": "",
                  "fileTypes": [],
                  "file_path": "",
                  "name": "DTC",
                  "display_name": "DTC",
                  "advanced": false,
                  "input_types": [
                    "Message",
                    "Text"
                  ],
                  "dynamic": false,
                  "info": "",
                  "load_from_db": false,
                  "title_case": false,
                  "type": "str"
                },
                "TBU": {
                  "field_type": "str",
                  "required": false,
                  "placeholder": "",
                  "list": false,
                  "show": true,
                  "multiline": true,
                  "value": "",
                  "fileTypes": [],
                  "file_path": "",
                  "name": "TBU",
                  "display_name": "TBU",
                  "advanced": false,
                  "input_types": [
                    "Message",
                    "Text"
                  ],
                  "dynamic": false,
                  "info": "",
                  "load_from_db": false,
                  "title_case": false,
                  "type": "str"
                },
                "SCM": {
                  "field_type": "str",
                  "required": false,
                  "placeholder": "",
                  "list": false,
                  "show": true,
                  "multiline": true,
                  "value": "",
                  "fileTypes": [],
                  "file_path": "",
                  "name": "SCM",
                  "display_name": "SCM",
                  "advanced": false,
                  "input_types": [
                    "Message",
                    "Text"
                  ],
                  "dynamic": false,
                  "info": "",
                  "load_from_db": false,
                  "title_case": false,
                  "type": "str"
                }
              },
              "description": "Create a prompt template with dynamic variables.",
              "icon": "prompts",
              "is_input": null,
              "is_output": null,
              "is_composition": null,
              "base_classes": [
                "Message"
              ],
              "name": "",
              "display_name": "Prompt",
              "documentation": "",
              "custom_fields": {
                "template": [
                  "user_question",
                  "glossary",
                  "OIB",
                  "WSM",
                  "DTC",
                  "TBU",
                  "SCM"
                ]
              },
              "output_types": [],
              "full_path": null,
              "pinned": false,
              "conditional_paths": [],
              "frozen": false,
              "outputs": [
                {
                  "types": [
                    "Message"
                  ],
                  "selected": "Message",
                  "name": "prompt",
                  "hidden": null,
                  "display_name": "Prompt Message",
                  "method": "build_prompt",
                  "value": "__UNDEFINED__",
                  "cache": true,
                  "required_inputs": null
                }
              ],
              "field_order": [
                "template"
              ],
              "beta": false,
              "error": null,
              "edited": false,
              "metadata": {},
              "lf_version": "1.0.19"
            },
            "id": "Prompt-NXY0w"
          },
          "selected": false,
          "width": 384,
          "height": 907,
          "positionAbsolute": {
            "x": -1040.3937084913155,
            "y": -840.4182814329793
          },
          "dragging": false
        },
        {
          "id": "ChatOutput-NFvya",
          "type": "genericNode",
          "position": {
            "x": -240.61463691085208,
            "y": -840.746261977535
          },
          "data": {
            "type": "ChatOutput",
            "node": {
              "template": {
                "_type": "Component",
                "code": {
                  "type": "code",
                  "required": true,
                  "placeholder": "",
                  "list": false,
                  "show": true,
                  "multiline": true,
                  "value": "from axiestudio.base.io.chat import ChatComponent\nfrom axiestudio.inputs import BoolInput\nfrom axiestudio.io import DropdownInput, MessageTextInput, Output\nfrom axiestudio.memory import store_message\nfrom axiestudio.schema.message import Message\nfrom axiestudio.utils.constants import MESSAGE_SENDER_AI, MESSAGE_SENDER_NAME_AI, MESSAGE_SENDER_USER\n\n\nclass ChatOutput(ChatComponent):\n    display_name = \"Chat Output\"\n    description = \"Display a chat message in the Playground.\"\n    icon = \"ChatOutput\"\n    name = \"ChatOutput\"\n\n    inputs = [\n        MessageTextInput(\n            name=\"input_value\",\n            display_name=\"Text\",\n            info=\"Message to be passed as output.\",\n        ),\n        BoolInput(\n            name=\"should_store_message\",\n            display_name=\"Store Messages\",\n            info=\"Store the message in the history.\",\n            value=True,\n            advanced=True,\n        ),\n        DropdownInput(\n            name=\"sender\",\n            display_name=\"Sender Type\",\n            options=[MESSAGE_SENDER_AI, MESSAGE_SENDER_USER],\n            value=MESSAGE_SENDER_AI,\n            advanced=True,\n            info=\"Type of sender.\",\n        ),\n        MessageTextInput(\n            name=\"sender_name\",\n            display_name=\"Sender Name\",\n            info=\"Name of the sender.\",\n            value=MESSAGE_SENDER_NAME_AI,\n            advanced=True,\n        ),\n        MessageTextInput(\n            name=\"session_id\",\n            display_name=\"Session ID\",\n            info=\"The session ID of the chat. If empty, the current session ID parameter will be used.\",\n            advanced=True,\n        ),\n        MessageTextInput(\n            name=\"data_template\",\n            display_name=\"Data Template\",\n            value=\"{text}\",\n            advanced=True,\n            info=\"Template to convert Data to Text. If left empty, it will be dynamically set to the Data's text key.\",\n        ),\n    ]\n    outputs = [\n        Output(display_name=\"Message\", name=\"message\", method=\"message_response\"),\n    ]\n\n    def message_response(self) -> Message:\n        message = Message(\n            text=self.input_value,\n            sender=self.sender,\n            sender_name=self.sender_name,\n            session_id=self.session_id,\n        )\n        if (\n            self.session_id\n            and isinstance(message, Message)\n            and isinstance(message.text, str)\n            and self.should_store_message\n        ):\n            store_message(\n                message,\n                flow_id=self.graph.flow_id,\n            )\n            self.message.value = message\n\n        self.status = message\n        return message\n",
                  "fileTypes": [],
                  "file_path": "",
                  "password": false,
                  "name": "code",
                  "advanced": true,
                  "dynamic": true,
                  "info": "",
                  "load_from_db": false,
                  "title_case": false
                },
                "data_template": {
                  "trace_as_input": true,
                  "trace_as_metadata": true,
                  "load_from_db": false,
                  "list": false,
                  "required": false,
                  "placeholder": "",
                  "show": true,
                  "name": "data_template",
                  "value": "{text}",
                  "display_name": "Data Template",
                  "advanced": true,
                  "input_types": [
                    "Message"
                  ],
                  "dynamic": false,
                  "info": "Template to convert Data to Text. If left empty, it will be dynamically set to the Data's text key.",
                  "title_case": false,
                  "type": "str",
                  "_input_type": "MessageTextInput"
                },
                "input_value": {
                  "trace_as_input": true,
                  "trace_as_metadata": true,
                  "load_from_db": false,
                  "list": false,
                  "required": false,
                  "placeholder": "",
                  "show": true,
                  "name": "input_value",
                  "value": "",
                  "display_name": "Text",
                  "advanced": false,
                  "input_types": [
                    "Message"
                  ],
                  "dynamic": false,
                  "info": "Message to be passed as output.",
                  "title_case": false,
                  "type": "str",
                  "_input_type": "MessageTextInput"
                },
                "sender": {
                  "trace_as_metadata": true,
                  "options": [
                    "Machine",
                    "User"
                  ],
                  "combobox": false,
                  "required": false,
                  "placeholder": "",
                  "show": true,
                  "name": "sender",
                  "value": "Machine",
                  "display_name": "Sender Type",
                  "advanced": true,
                  "dynamic": false,
                  "info": "Type of sender.",
                  "title_case": false,
                  "type": "str",
                  "_input_type": "DropdownInput"
                },
                "sender_name": {
                  "trace_as_input": true,
                  "trace_as_metadata": true,
                  "load_from_db": false,
                  "list": false,
                  "required": false,
                  "placeholder": "",
                  "show": true,
                  "name": "sender_name",
                  "value": "AI",
                  "display_name": "Sender Name",
                  "advanced": true,
                  "input_types": [
                    "Message"
                  ],
                  "dynamic": false,
                  "info": "Name of the sender.",
                  "title_case": false,
                  "type": "str",
                  "_input_type": "MessageTextInput"
                },
                "session_id": {
                  "trace_as_input": true,
                  "trace_as_metadata": true,
                  "load_from_db": false,
                  "list": false,
                  "required": false,
                  "placeholder": "",
                  "show": true,
                  "name": "session_id",
                  "value": "",
                  "display_name": "Session ID",
                  "advanced": true,
                  "input_types": [
                    "Message"
                  ],
                  "dynamic": false,
                  "info": "The session ID of the chat. If empty, the current session ID parameter will be used.",
                  "title_case": false,
                  "type": "str",
                  "_input_type": "MessageTextInput"
                },
                "should_store_message": {
                  "trace_as_metadata": true,
                  "list": false,
                  "required": false,
                  "placeholder": "",
                  "show": true,
                  "name": "should_store_message",
                  "value": true,
                  "display_name": "Store Messages",
                  "advanced": true,
                  "dynamic": false,
                  "info": "Store the message in the history.",
                  "title_case": false,
                  "type": "bool",
                  "_input_type": "BoolInput"
                }
              },
              "description": "Display a chat message in the Playground.",
              "icon": "ChatOutput",
              "base_classes": [
                "Message"
              ],
              "display_name": "Chat Output",
              "documentation": "",
              "custom_fields": {},
              "output_types": [],
              "pinned": false,
              "conditional_paths": [],
              "frozen": false,
              "outputs": [
                {
                  "types": [
                    "Message"
                  ],
                  "selected": "Message",
                  "name": "message",
                  "display_name": "Message",
                  "method": "message_response",
                  "value": "__UNDEFINED__",
                  "cache": true
                }
              ],
              "field_order": [
                "input_value",
                "should_store_message",
                "sender",
                "sender_name",
                "session_id",
                "data_template"
              ],
              "beta": false,
              "edited": false,
              "lf_version": "1.0.19"
            },
            "id": "ChatOutput-NFvya"
          },
          "selected": false,
          "width": 384,
          "height": 289,
          "positionAbsolute": {
            "x": -240.61463691085208,
            "y": -840.746261977535
          },
          "dragging": false
        },
        {
          "id": "OpenAIModel-zShEY",
          "type": "genericNode",
          "position": {
            "x": -640.4506506366041,
            "y": -840.430593505585
          },
          "data": {
            "type": "OpenAIModel",
            "node": {
              "template": {
                "_type": "Component",
                "output_parser": {
                  "trace_as_metadata": true,
                  "list": false,
                  "required": false,
                  "placeholder": "",
                  "show": true,
                  "name": "output_parser",
                  "value": "",
                  "display_name": "Output Parser",
                  "advanced": true,
                  "input_types": [
                    "OutputParser"
                  ],
                  "dynamic": false,
                  "info": "The parser to use to parse the output of the model",
                  "title_case": false,
                  "type": "other",
                  "_input_type": "HandleInput"
                },
                "api_key": {
                  "load_from_db": true,
                  "required": false,
                  "placeholder": "",
                  "show": true,
                  "name": "api_key",
                  "value": "",
                  "display_name": "OpenAI API Key",
                  "advanced": false,
                  "input_types": [
                    "Message"
                  ],
                  "dynamic": false,
                  "info": "The OpenAI API Key to use for the OpenAI model.",
                  "title_case": false,
                  "password": true,
                  "type": "str",
                  "_input_type": "SecretStrInput"
                },
                "code": {
                  "type": "code",
                  "required": true,
                  "placeholder": "",
                  "list": false,
                  "show": true,
                  "multiline": true,
                  "value": "import operator\nfrom functools import reduce\n\nfrom langchain_openai import ChatOpenAI\nfrom pydantic.v1 import SecretStr\n\nfrom axiestudio.base.models.model import LCModelComponent\nfrom axiestudio.base.models.openai_constants import OPENAI_MODEL_NAMES\nfrom axiestudio.field_typing import LanguageModel\nfrom axiestudio.field_typing.range_spec import RangeSpec\nfrom axiestudio.inputs import (\n    BoolInput,\n    DictInput,\n    DropdownInput,\n    FloatInput,\n    IntInput,\n    SecretStrInput,\n    StrInput,\n)\nfrom axiestudio.inputs.inputs import HandleInput\n\n\nclass OpenAIModelComponent(LCModelComponent):\n    display_name = \"OpenAI\"\n    description = \"Generates text using OpenAI LLMs.\"\n    icon = \"OpenAI\"\n    name = \"OpenAIModel\"\n\n    inputs = [\n        *LCModelComponent._base_inputs,\n        IntInput(\n            name=\"max_tokens\",\n            display_name=\"Max Tokens\",\n            advanced=True,\n            info=\"The maximum number of tokens to generate. Set to 0 for unlimited tokens.\",\n            range_spec=RangeSpec(min=0, max=128000),\n        ),\n        DictInput(name=\"model_kwargs\", display_name=\"Model Kwargs\", advanced=True),\n        BoolInput(\n            name=\"json_mode\",\n            display_name=\"JSON Mode\",\n            advanced=True,\n            info=\"If True, it will output JSON regardless of passing a schema.\",\n        ),\n        DictInput(\n            name=\"output_schema\",\n            is_list=True,\n            display_name=\"Schema\",\n            advanced=True,\n            info=\"The schema for the Output of the model. \"\n            \"You must pass the word JSON in the prompt. \"\n            \"If left blank, JSON mode will be disabled.\",\n        ),\n        DropdownInput(\n            name=\"model_name\",\n            display_name=\"Model Name\",\n            advanced=False,\n            options=OPENAI_MODEL_NAMES,\n            value=OPENAI_MODEL_NAMES[0],\n        ),\n        StrInput(\n            name=\"openai_api_base\",\n            display_name=\"OpenAI API Base\",\n            advanced=True,\n            info=\"The base URL of the OpenAI API. \"\n            \"Defaults to https://api.openai.com/v1. \"\n            \"You can change this to use other APIs like JinaChat, LocalAI and Prem.\",\n        ),\n        SecretStrInput(\n            name=\"api_key\",\n            display_name=\"OpenAI API Key\",\n            info=\"The OpenAI API Key to use for the OpenAI model.\",\n            advanced=False,\n            value=\"OPENAI_API_KEY\",\n        ),\n        FloatInput(name=\"temperature\", display_name=\"Temperature\", value=0.1),\n        IntInput(\n            name=\"seed\",\n            display_name=\"Seed\",\n            info=\"The seed controls the reproducibility of the job.\",\n            advanced=True,\n            value=1,\n        ),\n        HandleInput(\n            name=\"output_parser\",\n            display_name=\"Output Parser\",\n            info=\"The parser to use to parse the output of the model\",\n            advanced=True,\n            input_types=[\"OutputParser\"],\n        ),\n    ]\n\n    def build_model(self) -> LanguageModel:  # type: ignore[type-var]\n        # self.output_schema is a list of dictionaries\n        # let's convert it to a dictionary\n        output_schema_dict: dict[str, str] = reduce(operator.ior, self.output_schema or {}, {})\n        openai_api_key = self.api_key\n        temperature = self.temperature\n        model_name: str = self.model_name\n        max_tokens = self.max_tokens\n        model_kwargs = self.model_kwargs or {}\n        openai_api_base = self.openai_api_base or \"https://api.openai.com/v1\"\n        json_mode = bool(output_schema_dict) or self.json_mode\n        seed = self.seed\n\n        api_key = SecretStr(openai_api_key) if openai_api_key else None\n        output = ChatOpenAI(\n            max_tokens=max_tokens or None,\n            model_kwargs=model_kwargs,\n            model=model_name,\n            base_url=openai_api_base,\n            api_key=api_key,\n            temperature=temperature if temperature is not None else 0.1,\n            seed=seed,\n        )\n        if json_mode:\n            if output_schema_dict:\n                output = output.with_structured_output(schema=output_schema_dict, method=\"json_mode\")\n            else:\n                output = output.bind(response_format={\"type\": \"json_object\"})\n\n        return output\n\n    def _get_exception_message(self, e: Exception):\n        \"\"\"\n        Get a message from an OpenAI exception.\n\n        Args:\n            exception (Exception): The exception to get the message from.\n\n        Returns:\n            str: The message from the exception.\n        \"\"\"\n\n        try:\n            from openai import BadRequestError\n        except ImportError:\n            return None\n        if isinstance(e, BadRequestError):\n            message = e.body.get(\"message\")\n            if message:\n                return message\n        return None\n",
                  "fileTypes": [],
                  "file_path": "",
                  "password": false,
                  "name": "code",
                  "advanced": true,
                  "dynamic": true,
                  "info": "",
                  "load_from_db": false,
                  "title_case": false
                },
                "input_value": {
                  "trace_as_input": true,
                  "trace_as_metadata": true,
                  "load_from_db": false,
                  "list": false,
                  "required": false,
                  "placeholder": "",
                  "show": true,
                  "name": "input_value",
                  "value": "",
                  "display_name": "Input",
                  "advanced": false,
                  "input_types": [
                    "Message"
                  ],
                  "dynamic": false,
                  "info": "",
                  "title_case": false,
                  "type": "str",
                  "_input_type": "MessageInput"
                },
                "json_mode": {
                  "trace_as_metadata": true,
                  "list": false,
                  "required": false,
                  "placeholder": "",
                  "show": true,
                  "name": "json_mode",
                  "value": false,
                  "display_name": "JSON Mode",
                  "advanced": true,
                  "dynamic": false,
                  "info": "If True, it will output JSON regardless of passing a schema.",
                  "title_case": false,
                  "type": "bool",
                  "_input_type": "BoolInput"
                },
                "max_tokens": {
                  "trace_as_metadata": true,
                  "range_spec": {
                    "step_type": "float",
                    "min": 0,
                    "max": 128000,
                    "step": 0.1
                  },
                  "list": false,
                  "required": false,
                  "placeholder": "",
                  "show": true,
                  "name": "max_tokens",
                  "value": "",
                  "display_name": "Max Tokens",
                  "advanced": true,
                  "dynamic": false,
                  "info": "The maximum number of tokens to generate. Set to 0 for unlimited tokens.",
                  "title_case": false,
                  "type": "int",
                  "_input_type": "IntInput"
                },
                "model_kwargs": {
                  "trace_as_input": true,
                  "list": false,
                  "required": false,
                  "placeholder": "",
                  "show": true,
                  "name": "model_kwargs",
                  "value": {},
                  "display_name": "Model Kwargs",
                  "advanced": true,
                  "dynamic": false,
                  "info": "",
                  "title_case": false,
                  "type": "dict",
                  "_input_type": "DictInput"
                },
                "model_name": {
                  "trace_as_metadata": true,
                  "options": [
                    "gpt-4o-mini",
                    "gpt-4o",
                    "gpt-4-turbo",
                    "gpt-4-turbo-preview",
                    "gpt-4",
                    "gpt-3.5-turbo",
                    "gpt-3.5-turbo-0125"
                  ],
                  "combobox": false,
                  "required": false,
                  "placeholder": "",
                  "show": true,
                  "name": "model_name",
                  "value": "gpt-4o-mini",
                  "display_name": "Model Name",
                  "advanced": false,
                  "dynamic": false,
                  "info": "",
                  "title_case": false,
                  "type": "str",
                  "_input_type": "DropdownInput"
                },
                "openai_api_base": {
                  "trace_as_metadata": true,
                  "load_from_db": false,
                  "list": false,
                  "required": false,
                  "placeholder": "",
                  "show": true,
                  "name": "openai_api_base",
                  "value": "",
                  "display_name": "OpenAI API Base",
                  "advanced": true,
                  "dynamic": false,
                  "info": "The base URL of the OpenAI API. Defaults to https://api.openai.com/v1. You can change this to use other APIs like JinaChat, LocalAI and Prem.",
                  "title_case": false,
                  "type": "str",
                  "_input_type": "StrInput"
                },
                "output_schema": {
                  "trace_as_input": true,
                  "list": true,
                  "required": false,
                  "placeholder": "",
                  "show": true,
                  "name": "output_schema",
                  "value": {},
                  "display_name": "Schema",
                  "advanced": true,
                  "dynamic": false,
                  "info": "The schema for the Output of the model. You must pass the word JSON in the prompt. If left blank, JSON mode will be disabled.",
                  "title_case": false,
                  "type": "dict",
                  "_input_type": "DictInput"
                },
                "seed": {
                  "trace_as_metadata": true,
                  "list": false,
                  "required": false,
                  "placeholder": "",
                  "show": true,
                  "name": "seed",
                  "value": 1,
                  "display_name": "Seed",
                  "advanced": true,
                  "dynamic": false,
                  "info": "The seed controls the reproducibility of the job.",
                  "title_case": false,
                  "type": "int",
                  "_input_type": "IntInput"
                },
                "stream": {
                  "trace_as_metadata": true,
                  "list": false,
                  "required": false,
                  "placeholder": "",
                  "show": true,
                  "name": "stream",
                  "value": false,
                  "display_name": "Stream",
                  "advanced": true,
                  "dynamic": false,
                  "info": "Stream the response from the model. Streaming works only in Chat.",
                  "title_case": false,
                  "type": "bool",
                  "_input_type": "BoolInput"
                },
                "system_message": {
                  "trace_as_input": true,
                  "trace_as_metadata": true,
                  "load_from_db": false,
                  "list": false,
                  "required": false,
                  "placeholder": "",
                  "show": true,
                  "name": "system_message",
                  "value": "",
                  "display_name": "System Message",
                  "advanced": true,
                  "input_types": [
                    "Message"
                  ],
                  "dynamic": false,
                  "info": "System message to pass to the model.",
                  "title_case": false,
                  "type": "str",
                  "_input_type": "MessageTextInput"
                },
                "temperature": {
                  "trace_as_metadata": true,
                  "list": false,
                  "required": false,
                  "placeholder": "",
                  "show": true,
                  "name": "temperature",
                  "value": 0.1,
                  "display_name": "Temperature",
                  "advanced": false,
                  "dynamic": false,
                  "info": "",
                  "title_case": false,
                  "type": "float",
                  "_input_type": "FloatInput"
                }
              },
              "description": "Generates text using OpenAI LLMs.",
              "icon": "OpenAI",
              "base_classes": [
                "LanguageModel",
                "Message"
              ],
              "display_name": "OpenAI",
              "documentation": "",
              "custom_fields": {},
              "output_types": [],
              "pinned": false,
              "conditional_paths": [],
              "frozen": false,
              "outputs": [
                {
                  "types": [
                    "Message"
                  ],
                  "selected": "Message",
                  "name": "text_output",
                  "display_name": "Text",
                  "method": "text_response",
                  "value": "__UNDEFINED__",
                  "cache": true,
                  "required_inputs": [
                    "input_value",
                    "stream",
                    "system_message"
                  ]
                },
                {
                  "types": [
                    "LanguageModel"
                  ],
                  "selected": "LanguageModel",
                  "name": "model_output",
                  "display_name": "Language Model",
                  "method": "build_model",
                  "value": "__UNDEFINED__",
                  "cache": true,
                  "required_inputs": [
                    "api_key",
                    "json_mode",
                    "max_tokens",
                    "model_kwargs",
                    "model_name",
                    "openai_api_base",
                    "output_schema",
                    "seed",
                    "temperature"
                  ]
                }
              ],
              "field_order": [
                "input_value",
                "system_message",
                "stream",
                "max_tokens",
                "model_kwargs",
                "json_mode",
                "output_schema",
                "model_name",
                "openai_api_base",
                "api_key",
                "temperature",
                "seed",
                "output_parser"
              ],
              "beta": false,
              "edited": false,
              "metadata": {},
              "lf_version": "1.0.19"
            },
            "id": "OpenAIModel-zShEY"
          },
          "selected": false,
          "width": 384,
          "height": 587,
          "positionAbsolute": {
            "x": -640.4506506366041,
            "y": -840.430593505585
          },
          "dragging": false
        },
        {
          "data": {
            "id": "groupComponent-ob9nl",
            "type": "GroupNode",
            "node": {
              "display_name": "OIB Data Retriever",
              "documentation": "",
              "description": "",
              "template": {
                "ingest_data_Chroma-94Qh7": {
                  "trace_as_metadata": true,
                  "list": true,
                  "trace_as_input": true,
                  "required": false,
                  "placeholder": "",
                  "show": true,
                  "name": "ingest_data",
                  "value": "",
                  "display_name": "Ingest Data",
                  "advanced": true,
                  "input_types": [
                    "Data"
                  ],
                  "dynamic": false,
                  "info": "",
                  "title_case": false,
                  "type": "other",
                  "_input_type": "DataInput",
                  "proxy": {
                    "id": "Chroma-94Qh7",
                    "field": "ingest_data"
                  }
                },
                "allow_duplicates_Chroma-94Qh7": {
                  "trace_as_metadata": true,
                  "list": false,
                  "required": false,
                  "placeholder": "",
                  "show": true,
                  "name": "allow_duplicates",
                  "value": false,
                  "display_name": "Allow Duplicates",
                  "advanced": true,
                  "dynamic": false,
                  "info": "If false, will not add documents that are already in the Vector Store.",
                  "title_case": false,
                  "type": "bool",
                  "_input_type": "BoolInput",
                  "proxy": {
                    "id": "Chroma-94Qh7",
                    "field": "allow_duplicates"
                  }
                },
                "chroma_server_cors_allow_origins_Chroma-94Qh7": {
                  "trace_as_metadata": true,
                  "load_from_db": false,
                  "list": false,
                  "required": false,
                  "placeholder": "",
                  "show": true,
                  "name": "chroma_server_cors_allow_origins",
                  "value": "",
                  "display_name": "Server CORS Allow Origins",
                  "advanced": true,
                  "dynamic": false,
                  "info": "",
                  "title_case": false,
                  "type": "str",
                  "_input_type": "StrInput",
                  "proxy": {
                    "id": "Chroma-94Qh7",
                    "field": "chroma_server_cors_allow_origins"
                  }
                },
                "chroma_server_grpc_port_Chroma-94Qh7": {
                  "trace_as_metadata": true,
                  "list": false,
                  "required": false,
                  "placeholder": "",
                  "show": true,
                  "name": "chroma_server_grpc_port",
                  "value": "",
                  "display_name": "Server gRPC Port",
                  "advanced": true,
                  "dynamic": false,
                  "info": "",
                  "title_case": false,
                  "type": "int",
                  "_input_type": "IntInput",
                  "proxy": {
                    "id": "Chroma-94Qh7",
                    "field": "chroma_server_grpc_port"
                  }
                },
                "chroma_server_host_Chroma-94Qh7": {
                  "trace_as_metadata": true,
                  "load_from_db": false,
                  "list": false,
                  "required": false,
                  "placeholder": "",
                  "show": true,
                  "name": "chroma_server_host",
                  "value": "",
                  "display_name": "Server Host",
                  "advanced": true,
                  "dynamic": false,
                  "info": "",
                  "title_case": false,
                  "type": "str",
                  "_input_type": "StrInput",
                  "proxy": {
                    "id": "Chroma-94Qh7",
                    "field": "chroma_server_host"
                  }
                },
                "chroma_server_http_port_Chroma-94Qh7": {
                  "trace_as_metadata": true,
                  "list": false,
                  "required": false,
                  "placeholder": "",
                  "show": true,
                  "name": "chroma_server_http_port",
                  "value": "",
                  "display_name": "Server HTTP Port",
                  "advanced": true,
                  "dynamic": false,
                  "info": "",
                  "title_case": false,
                  "type": "int",
                  "_input_type": "IntInput",
                  "proxy": {
                    "id": "Chroma-94Qh7",
                    "field": "chroma_server_http_port"
                  }
                },
                "chroma_server_ssl_enabled_Chroma-94Qh7": {
                  "trace_as_metadata": true,
                  "list": false,
                  "required": false,
                  "placeholder": "",
                  "show": true,
                  "name": "chroma_server_ssl_enabled",
                  "value": false,
                  "display_name": "Server SSL Enabled",
                  "advanced": true,
                  "dynamic": false,
                  "info": "",
                  "title_case": false,
                  "type": "bool",
                  "_input_type": "BoolInput",
                  "proxy": {
                    "id": "Chroma-94Qh7",
                    "field": "chroma_server_ssl_enabled"
                  }
                },
                "code_Chroma-94Qh7": {
                  "type": "code",
                  "required": true,
                  "placeholder": "",
                  "list": false,
                  "show": true,
                  "multiline": true,
                  "value": "from copy import deepcopy\nfrom typing import TYPE_CHECKING\n\nfrom chromadb.config import Settings\nfrom langchain_chroma.vectorstores import Chroma\nfrom loguru import logger\n\nfrom axiestudio.base.vectorstores.model import LCVectorStoreComponent, check_cached_vector_store\nfrom axiestudio.base.vectorstores.utils import chroma_collection_to_data\nfrom axiestudio.io import BoolInput, DataInput, DropdownInput, HandleInput, IntInput, StrInput, MultilineInput\nfrom axiestudio.schema import Data\n\nif TYPE_CHECKING:\n    from langchain_chroma import Chroma\n\n\nclass ChromaVectorStoreComponent(LCVectorStoreComponent):\n    \"\"\"\n    Chroma Vector Store with search capabilities\n    \"\"\"\n\n    display_name: str = \"Chroma DB\"\n    description: str = \"Chroma Vector Store with search capabilities\"\n    documentation = \"https://python.langchain.com/docs/integrations/vectorstores/chroma\"\n    name = \"Chroma\"\n    icon = \"Chroma\"\n\n    inputs = [\n        MessageTextInput(\n            name=\"collection_name\",\n            display_name=\"Collection Name\",\n        ),\n        StrInput(\n            name=\"persist_directory\",\n            display_name=\"Persist Directory\",\n        ),\n        MultilineInput(\n            name=\"search_query\",\n            display_name=\"Search Query\",\n        ),\n        DataInput(\n            name=\"ingest_data\",\n            display_name=\"Ingest Data\",\n            is_list=True,\n        ),\n        HandleInput(name=\"embedding\", display_name=\"Embedding\", input_types=[\"Embeddings\"]),\n        StrInput(\n            name=\"chroma_server_cors_allow_origins\",\n            display_name=\"Server CORS Allow Origins\",\n            advanced=True,\n        ),\n        StrInput(\n            name=\"chroma_server_host\",\n            display_name=\"Server Host\",\n            advanced=True,\n        ),\n        IntInput(\n            name=\"chroma_server_http_port\",\n            display_name=\"Server HTTP Port\",\n            advanced=True,\n        ),\n        IntInput(\n            name=\"chroma_server_grpc_port\",\n            display_name=\"Server gRPC Port\",\n            advanced=True,\n        ),\n        BoolInput(\n            name=\"chroma_server_ssl_enabled\",\n            display_name=\"Server SSL Enabled\",\n            advanced=True,\n        ),\n        BoolInput(\n            name=\"allow_duplicates\",\n            display_name=\"Allow Duplicates\",\n            advanced=True,\n            info=\"If false, will not add documents that are already in the Vector Store.\",\n        ),\n        DropdownInput(\n            name=\"search_type\",\n            display_name=\"Search Type\",\n            options=[\"Similarity\", \"MMR\"],\n            value=\"Similarity\",\n            advanced=True,\n        ),\n        IntInput(\n            name=\"number_of_results\",\n            display_name=\"Number of Results\",\n            info=\"Number of results to return.\",\n            advanced=True,\n            value=5,\n        ),\n        IntInput(\n            name=\"limit\",\n            display_name=\"Limit\",\n            advanced=True,\n            info=\"Limit the number of records to compare when Allow Duplicates is False.\",\n        ),\n    ]\n\n    @check_cached_vector_store\n    def build_vector_store(self) -> Chroma:\n        \"\"\"\n        Builds the Chroma object.\n        \"\"\"\n        try:\n            from chromadb import Client\n            from langchain_chroma import Chroma\n        except ImportError:\n            raise ImportError(\n                \"Could not import Chroma integration package. \" \"Please install it with `pip install langchain-chroma`.\"\n            )\n        # Chroma settings\n        chroma_settings = None\n        client = None\n        if self.chroma_server_host:\n            chroma_settings = Settings(\n                chroma_server_cors_allow_origins=self.chroma_server_cors_allow_origins or [],\n                chroma_server_host=self.chroma_server_host,\n                chroma_server_http_port=self.chroma_server_http_port or None,\n                chroma_server_grpc_port=self.chroma_server_grpc_port or None,\n                chroma_server_ssl_enabled=self.chroma_server_ssl_enabled,\n            )\n            client = Client(settings=chroma_settings)\n\n        # Check persist_directory and expand it if it is a relative path\n        if self.persist_directory is not None:\n            persist_directory = self.resolve_path(self.persist_directory)\n        else:\n            persist_directory = None\n\n        chroma = Chroma(\n            persist_directory=persist_directory,\n            client=client,\n            embedding_function=self.embedding,\n            collection_name=self.collection_name,\n        )\n\n        self._add_documents_to_vector_store(chroma)\n        self.status = chroma_collection_to_data(chroma.get(limit=self.limit))\n        return chroma\n\n    def _add_documents_to_vector_store(self, vector_store: \"Chroma\") -> None:\n        \"\"\"\n        Adds documents to the Vector Store.\n        \"\"\"\n        if not self.ingest_data:\n            self.status = \"\"\n            return\n\n        _stored_documents_without_id = []\n        if self.allow_duplicates:\n            stored_data = []\n        else:\n            stored_data = chroma_collection_to_data(vector_store.get(limit=self.limit))\n            for value in deepcopy(stored_data):\n                del value.id\n                _stored_documents_without_id.append(value)\n\n        documents = []\n        for _input in self.ingest_data or []:\n            if isinstance(_input, Data):\n                if _input not in _stored_documents_without_id:\n                    documents.append(_input.to_lc_document())\n            else:\n                raise ValueError(\"Vector Store Inputs must be Data objects.\")\n\n        if documents and self.embedding is not None:\n            logger.debug(f\"Adding {len(documents)} documents to the Vector Store.\")\n            vector_store.add_documents(documents)\n        else:\n            logger.debug(\"No documents to add to the Vector Store.\")",
                  "fileTypes": [],
                  "file_path": "",
                  "password": false,
                  "name": "code",
                  "advanced": true,
                  "dynamic": true,
                  "info": "",
                  "load_from_db": false,
                  "title_case": false,
                  "display_name": "code",
                  "proxy": {
                    "id": "Chroma-94Qh7",
                    "field": "code"
                  }
                },
                "limit_Chroma-94Qh7": {
                  "trace_as_metadata": true,
                  "list": false,
                  "required": false,
                  "placeholder": "",
                  "show": true,
                  "name": "limit",
                  "value": "",
                  "display_name": "Limit",
                  "advanced": true,
                  "dynamic": false,
                  "info": "Limit the number of records to compare when Allow Duplicates is False.",
                  "title_case": false,
                  "type": "int",
                  "_input_type": "IntInput",
                  "proxy": {
                    "id": "Chroma-94Qh7",
                    "field": "limit"
                  }
                },
                "number_of_results_Chroma-94Qh7": {
                  "trace_as_metadata": true,
                  "list": false,
                  "required": false,
                  "placeholder": "",
                  "show": true,
                  "name": "number_of_results",
                  "value": 5,
                  "display_name": "Number of Results",
                  "advanced": true,
                  "dynamic": false,
                  "info": "Number of results to return.",
                  "title_case": false,
                  "type": "int",
                  "_input_type": "IntInput",
                  "proxy": {
                    "id": "Chroma-94Qh7",
                    "field": "number_of_results"
                  }
                },
                "persist_directory_Chroma-94Qh7": {
                  "trace_as_metadata": true,
                  "load_from_db": false,
                  "list": false,
                  "required": false,
                  "placeholder": "",
                  "show": true,
                  "name": "persist_directory",
                  "value": "Documents/GitHub/argobot/OIB",
                  "display_name": "Persist Directory",
                  "advanced": true,
                  "dynamic": false,
                  "info": "",
                  "title_case": false,
                  "type": "str",
                  "_input_type": "StrInput",
                  "proxy": {
                    "id": "Chroma-94Qh7",
                    "field": "persist_directory"
                  }
                },
                "search_query_Chroma-94Qh7": {
                  "trace_as_input": true,
                  "multiline": true,
                  "trace_as_metadata": true,
                  "load_from_db": false,
                  "list": false,
                  "required": false,
                  "placeholder": "",
                  "show": true,
                  "name": "search_query",
                  "value": "",
                  "display_name": "Search Query",
                  "advanced": false,
                  "input_types": [
                    "Message"
                  ],
                  "dynamic": false,
                  "info": "",
                  "title_case": false,
                  "type": "str",
                  "_input_type": "MultilineInput",
                  "proxy": {
                    "id": "Chroma-94Qh7",
                    "field": "search_query"
                  }
                },
                "search_type_Chroma-94Qh7": {
                  "trace_as_metadata": true,
                  "options": [
                    "Similarity",
                    "MMR"
                  ],
                  "combobox": false,
                  "required": false,
                  "placeholder": "",
                  "show": true,
                  "name": "search_type",
                  "value": "Similarity",
                  "display_name": "Search Type",
                  "advanced": true,
                  "dynamic": false,
                  "info": "",
                  "title_case": false,
                  "type": "str",
                  "_input_type": "DropdownInput",
                  "proxy": {
                    "id": "Chroma-94Qh7",
                    "field": "search_type"
                  }
                },
                "chunk_size_OpenAIEmbeddings-i3hOt": {
                  "trace_as_metadata": true,
                  "list": false,
                  "required": false,
                  "placeholder": "",
                  "show": true,
                  "name": "chunk_size",
                  "value": 1000,
                  "display_name": "Chunk Size",
                  "advanced": true,
                  "dynamic": false,
                  "info": "",
                  "title_case": false,
                  "type": "int",
                  "_input_type": "IntInput",
                  "proxy": {
                    "id": "OpenAIEmbeddings-i3hOt",
                    "field": "chunk_size"
                  }
                },
                "client_OpenAIEmbeddings-i3hOt": {
                  "trace_as_input": true,
                  "trace_as_metadata": true,
                  "load_from_db": false,
                  "list": false,
                  "required": false,
                  "placeholder": "",
                  "show": true,
                  "name": "client",
                  "value": "",
                  "display_name": "Client",
                  "advanced": true,
                  "input_types": [
                    "Message"
                  ],
                  "dynamic": false,
                  "info": "",
                  "title_case": false,
                  "type": "str",
                  "_input_type": "MessageTextInput",
                  "proxy": {
                    "id": "OpenAIEmbeddings-i3hOt",
                    "field": "client"
                  }
                },
                "code_OpenAIEmbeddings-i3hOt": {
                  "type": "code",
                  "required": true,
                  "placeholder": "",
                  "list": false,
                  "show": true,
                  "multiline": true,
                  "value": "from langchain_openai.embeddings.base import OpenAIEmbeddings\n\nfrom axiestudio.base.embeddings.model import LCEmbeddingsModel\nfrom axiestudio.base.models.openai_constants import OPENAI_EMBEDDING_MODEL_NAMES\nfrom axiestudio.field_typing import Embeddings\nfrom axiestudio.io import BoolInput, DictInput, DropdownInput, FloatInput, IntInput, MessageTextInput, SecretStrInput\n\n\nclass OpenAIEmbeddingsComponent(LCEmbeddingsModel):\n    display_name = \"OpenAI Embeddings\"\n    description = \"Generate embeddings using OpenAI models.\"\n    icon = \"OpenAI\"\n    name = \"OpenAIEmbeddings\"\n\n    inputs = [\n        DictInput(\n            name=\"default_headers\",\n            display_name=\"Default Headers\",\n            advanced=True,\n            info=\"Default headers to use for the API request.\",\n        ),\n        DictInput(\n            name=\"default_query\",\n            display_name=\"Default Query\",\n            advanced=True,\n            info=\"Default query parameters to use for the API request.\",\n        ),\n        IntInput(name=\"chunk_size\", display_name=\"Chunk Size\", advanced=True, value=1000),\n        MessageTextInput(name=\"client\", display_name=\"Client\", advanced=True),\n        MessageTextInput(name=\"deployment\", display_name=\"Deployment\", advanced=True),\n        IntInput(name=\"embedding_ctx_length\", display_name=\"Embedding Context Length\", advanced=True, value=1536),\n        IntInput(name=\"max_retries\", display_name=\"Max Retries\", value=3, advanced=True),\n        DropdownInput(\n            name=\"model\",\n            display_name=\"Model\",\n            advanced=False,\n            options=OPENAI_EMBEDDING_MODEL_NAMES,\n            value=\"text-embedding-3-small\",\n        ),\n        DictInput(name=\"model_kwargs\", display_name=\"Model Kwargs\", advanced=True),\n        SecretStrInput(name=\"openai_api_base\", display_name=\"OpenAI API Base\", advanced=True),\n        SecretStrInput(name=\"openai_api_key\", display_name=\"OpenAI API Key\", value=\"OPENAI_API_KEY\"),\n        SecretStrInput(name=\"openai_api_type\", display_name=\"OpenAI API Type\", advanced=True),\n        MessageTextInput(name=\"openai_api_version\", display_name=\"OpenAI API Version\", advanced=True),\n        MessageTextInput(\n            name=\"openai_organization\",\n            display_name=\"OpenAI Organization\",\n            advanced=True,\n        ),\n        MessageTextInput(name=\"openai_proxy\", display_name=\"OpenAI Proxy\", advanced=True),\n        FloatInput(name=\"request_timeout\", display_name=\"Request Timeout\", advanced=True),\n        BoolInput(name=\"show_progress_bar\", display_name=\"Show Progress Bar\", advanced=True),\n        BoolInput(name=\"skip_empty\", display_name=\"Skip Empty\", advanced=True),\n        MessageTextInput(\n            name=\"tiktoken_model_name\",\n            display_name=\"TikToken Model Name\",\n            advanced=True,\n        ),\n        BoolInput(\n            name=\"tiktoken_enable\",\n            display_name=\"TikToken Enable\",\n            advanced=True,\n            value=True,\n            info=\"If False, you must have transformers installed.\",\n        ),\n        IntInput(\n            name=\"dimensions\",\n            display_name=\"Dimensions\",\n            info=\"The number of dimensions the resulting output embeddings should have. \"\n            \"Only supported by certain models.\",\n            advanced=True,\n        ),\n    ]\n\n    def build_embeddings(self) -> Embeddings:\n        return OpenAIEmbeddings(\n            tiktoken_enabled=self.tiktoken_enable,\n            default_headers=self.default_headers,\n            default_query=self.default_query,\n            allowed_special=\"all\",\n            disallowed_special=\"all\",\n            chunk_size=self.chunk_size,\n            deployment=self.deployment,\n            embedding_ctx_length=self.embedding_ctx_length,\n            max_retries=self.max_retries,\n            model=self.model,\n            model_kwargs=self.model_kwargs,\n            base_url=self.openai_api_base,\n            api_key=self.openai_api_key,\n            openai_api_type=self.openai_api_type,\n            api_version=self.openai_api_version,\n            organization=self.openai_organization,\n            openai_proxy=self.openai_proxy,\n            timeout=self.request_timeout or None,\n            show_progress_bar=self.show_progress_bar,\n            skip_empty=self.skip_empty,\n            tiktoken_model_name=self.tiktoken_model_name,\n            dimensions=self.dimensions or None,\n        )\n",
                  "fileTypes": [],
                  "file_path": "",
                  "password": false,
                  "name": "code",
                  "advanced": true,
                  "dynamic": true,
                  "info": "",
                  "load_from_db": false,
                  "title_case": false,
                  "display_name": "code",
                  "proxy": {
                    "id": "OpenAIEmbeddings-i3hOt",
                    "field": "code"
                  }
                },
                "default_headers_OpenAIEmbeddings-i3hOt": {
                  "trace_as_input": true,
                  "list": false,
                  "required": false,
                  "placeholder": "",
                  "show": true,
                  "name": "default_headers",
                  "value": {},
                  "display_name": "Default Headers",
                  "advanced": true,
                  "dynamic": false,
                  "info": "Default headers to use for the API request.",
                  "title_case": false,
                  "type": "dict",
                  "_input_type": "DictInput",
                  "proxy": {
                    "id": "OpenAIEmbeddings-i3hOt",
                    "field": "default_headers"
                  }
                },
                "default_query_OpenAIEmbeddings-i3hOt": {
                  "trace_as_input": true,
                  "list": false,
                  "required": false,
                  "placeholder": "",
                  "show": true,
                  "name": "default_query",
                  "value": {},
                  "display_name": "Default Query",
                  "advanced": true,
                  "dynamic": false,
                  "info": "Default query parameters to use for the API request.",
                  "title_case": false,
                  "type": "dict",
                  "_input_type": "DictInput",
                  "proxy": {
                    "id": "OpenAIEmbeddings-i3hOt",
                    "field": "default_query"
                  }
                },
                "deployment_OpenAIEmbeddings-i3hOt": {
                  "trace_as_input": true,
                  "trace_as_metadata": true,
                  "load_from_db": false,
                  "list": false,
                  "required": false,
                  "placeholder": "",
                  "show": true,
                  "name": "deployment",
                  "value": "",
                  "display_name": "Deployment",
                  "advanced": true,
                  "input_types": [
                    "Message"
                  ],
                  "dynamic": false,
                  "info": "",
                  "title_case": false,
                  "type": "str",
                  "_input_type": "MessageTextInput",
                  "proxy": {
                    "id": "OpenAIEmbeddings-i3hOt",
                    "field": "deployment"
                  }
                },
                "dimensions_OpenAIEmbeddings-i3hOt": {
                  "trace_as_metadata": true,
                  "list": false,
                  "required": false,
                  "placeholder": "",
                  "show": true,
                  "name": "dimensions",
                  "value": "",
                  "display_name": "Dimensions",
                  "advanced": true,
                  "dynamic": false,
                  "info": "The number of dimensions the resulting output embeddings should have. Only supported by certain models.",
                  "title_case": false,
                  "type": "int",
                  "_input_type": "IntInput",
                  "proxy": {
                    "id": "OpenAIEmbeddings-i3hOt",
                    "field": "dimensions"
                  }
                },
                "embedding_ctx_length_OpenAIEmbeddings-i3hOt": {
                  "trace_as_metadata": true,
                  "list": false,
                  "required": false,
                  "placeholder": "",
                  "show": true,
                  "name": "embedding_ctx_length",
                  "value": 1536,
                  "display_name": "Embedding Context Length",
                  "advanced": true,
                  "dynamic": false,
                  "info": "",
                  "title_case": false,
                  "type": "int",
                  "_input_type": "IntInput",
                  "proxy": {
                    "id": "OpenAIEmbeddings-i3hOt",
                    "field": "embedding_ctx_length"
                  }
                },
                "max_retries_OpenAIEmbeddings-i3hOt": {
                  "trace_as_metadata": true,
                  "list": false,
                  "required": false,
                  "placeholder": "",
                  "show": true,
                  "name": "max_retries",
                  "value": 3,
                  "display_name": "Max Retries",
                  "advanced": true,
                  "dynamic": false,
                  "info": "",
                  "title_case": false,
                  "type": "int",
                  "_input_type": "IntInput",
                  "proxy": {
                    "id": "OpenAIEmbeddings-i3hOt",
                    "field": "max_retries"
                  }
                },
                "model_OpenAIEmbeddings-i3hOt": {
                  "trace_as_metadata": true,
                  "options": [
                    "text-embedding-3-small",
                    "text-embedding-3-large",
                    "text-embedding-ada-002"
                  ],
                  "combobox": false,
                  "required": false,
                  "placeholder": "",
                  "show": true,
                  "name": "model",
                  "value": "text-embedding-3-small",
                  "display_name": "Model",
                  "advanced": true,
                  "dynamic": false,
                  "info": "",
                  "title_case": false,
                  "type": "str",
                  "_input_type": "DropdownInput",
                  "proxy": {
                    "id": "OpenAIEmbeddings-i3hOt",
                    "field": "model"
                  }
                },
                "model_kwargs_OpenAIEmbeddings-i3hOt": {
                  "trace_as_input": true,
                  "list": false,
                  "required": false,
                  "placeholder": "",
                  "show": true,
                  "name": "model_kwargs",
                  "value": {},
                  "display_name": "Model Kwargs",
                  "advanced": true,
                  "dynamic": false,
                  "info": "",
                  "title_case": false,
                  "type": "dict",
                  "_input_type": "DictInput",
                  "proxy": {
                    "id": "OpenAIEmbeddings-i3hOt",
                    "field": "model_kwargs"
                  }
                },
                "openai_api_base_OpenAIEmbeddings-i3hOt": {
                  "load_from_db": false,
                  "required": false,
                  "placeholder": "",
                  "show": true,
                  "name": "openai_api_base",
                  "value": "",
                  "display_name": "OpenAI API Base",
                  "advanced": true,
                  "input_types": [
                    "Message"
                  ],
                  "dynamic": false,
                  "info": "",
                  "title_case": false,
                  "password": true,
                  "type": "str",
                  "_input_type": "SecretStrInput",
                  "proxy": {
                    "id": "OpenAIEmbeddings-i3hOt",
                    "field": "openai_api_base"
                  }
                },
                "openai_api_key_OpenAIEmbeddings-i3hOt": {
                  "load_from_db": true,
                  "required": false,
                  "placeholder": "",
                  "show": true,
                  "name": "openai_api_key",
                  "value": "",
                  "display_name": "OpenAI API Key",
                  "advanced": true,
                  "input_types": [
                    "Message"
                  ],
                  "dynamic": false,
                  "info": "",
                  "title_case": false,
                  "password": true,
                  "type": "str",
                  "_input_type": "SecretStrInput",
                  "proxy": {
                    "id": "OpenAIEmbeddings-i3hOt",
                    "field": "openai_api_key"
                  }
                },
                "openai_api_type_OpenAIEmbeddings-i3hOt": {
                  "load_from_db": false,
                  "required": false,
                  "placeholder": "",
                  "show": true,
                  "name": "openai_api_type",
                  "value": "",
                  "display_name": "OpenAI API Type",
                  "advanced": true,
                  "input_types": [
                    "Message"
                  ],
                  "dynamic": false,
                  "info": "",
                  "title_case": false,
                  "password": true,
                  "type": "str",
                  "_input_type": "SecretStrInput",
                  "proxy": {
                    "id": "OpenAIEmbeddings-i3hOt",
                    "field": "openai_api_type"
                  }
                },
                "openai_api_version_OpenAIEmbeddings-i3hOt": {
                  "trace_as_input": true,
                  "trace_as_metadata": true,
                  "load_from_db": false,
                  "list": false,
                  "required": false,
                  "placeholder": "",
                  "show": true,
                  "name": "openai_api_version",
                  "value": "",
                  "display_name": "OpenAI API Version",
                  "advanced": true,
                  "input_types": [
                    "Message"
                  ],
                  "dynamic": false,
                  "info": "",
                  "title_case": false,
                  "type": "str",
                  "_input_type": "MessageTextInput",
                  "proxy": {
                    "id": "OpenAIEmbeddings-i3hOt",
                    "field": "openai_api_version"
                  }
                },
                "openai_organization_OpenAIEmbeddings-i3hOt": {
                  "trace_as_input": true,
                  "trace_as_metadata": true,
                  "load_from_db": false,
                  "list": false,
                  "required": false,
                  "placeholder": "",
                  "show": true,
                  "name": "openai_organization",
                  "value": "",
                  "display_name": "OpenAI Organization",
                  "advanced": true,
                  "input_types": [
                    "Message"
                  ],
                  "dynamic": false,
                  "info": "",
                  "title_case": false,
                  "type": "str",
                  "_input_type": "MessageTextInput",
                  "proxy": {
                    "id": "OpenAIEmbeddings-i3hOt",
                    "field": "openai_organization"
                  }
                },
                "openai_proxy_OpenAIEmbeddings-i3hOt": {
                  "trace_as_input": true,
                  "trace_as_metadata": true,
                  "load_from_db": false,
                  "list": false,
                  "required": false,
                  "placeholder": "",
                  "show": true,
                  "name": "openai_proxy",
                  "value": "",
                  "display_name": "OpenAI Proxy",
                  "advanced": true,
                  "input_types": [
                    "Message"
                  ],
                  "dynamic": false,
                  "info": "",
                  "title_case": false,
                  "type": "str",
                  "_input_type": "MessageTextInput",
                  "proxy": {
                    "id": "OpenAIEmbeddings-i3hOt",
                    "field": "openai_proxy"
                  }
                },
                "request_timeout_OpenAIEmbeddings-i3hOt": {
                  "trace_as_metadata": true,
                  "list": false,
                  "required": false,
                  "placeholder": "",
                  "show": true,
                  "name": "request_timeout",
                  "value": "",
                  "display_name": "Request Timeout",
                  "advanced": true,
                  "dynamic": false,
                  "info": "",
                  "title_case": false,
                  "type": "float",
                  "_input_type": "FloatInput",
                  "proxy": {
                    "id": "OpenAIEmbeddings-i3hOt",
                    "field": "request_timeout"
                  }
                },
                "show_progress_bar_OpenAIEmbeddings-i3hOt": {
                  "trace_as_metadata": true,
                  "list": false,
                  "required": false,
                  "placeholder": "",
                  "show": true,
                  "name": "show_progress_bar",
                  "value": false,
                  "display_name": "Show Progress Bar",
                  "advanced": true,
                  "dynamic": false,
                  "info": "",
                  "title_case": false,
                  "type": "bool",
                  "_input_type": "BoolInput",
                  "proxy": {
                    "id": "OpenAIEmbeddings-i3hOt",
                    "field": "show_progress_bar"
                  }
                },
                "skip_empty_OpenAIEmbeddings-i3hOt": {
                  "trace_as_metadata": true,
                  "list": false,
                  "required": false,
                  "placeholder": "",
                  "show": true,
                  "name": "skip_empty",
                  "value": false,
                  "display_name": "Skip Empty",
                  "advanced": true,
                  "dynamic": false,
                  "info": "",
                  "title_case": false,
                  "type": "bool",
                  "_input_type": "BoolInput",
                  "proxy": {
                    "id": "OpenAIEmbeddings-i3hOt",
                    "field": "skip_empty"
                  }
                },
                "tiktoken_enable_OpenAIEmbeddings-i3hOt": {
                  "trace_as_metadata": true,
                  "list": false,
                  "required": false,
                  "placeholder": "",
                  "show": true,
                  "name": "tiktoken_enable",
                  "value": true,
                  "display_name": "TikToken Enable",
                  "advanced": true,
                  "dynamic": false,
                  "info": "If False, you must have transformers installed.",
                  "title_case": false,
                  "type": "bool",
                  "_input_type": "BoolInput",
                  "proxy": {
                    "id": "OpenAIEmbeddings-i3hOt",
                    "field": "tiktoken_enable"
                  }
                },
                "tiktoken_model_name_OpenAIEmbeddings-i3hOt": {
                  "trace_as_input": true,
                  "trace_as_metadata": true,
                  "load_from_db": false,
                  "list": false,
                  "required": false,
                  "placeholder": "",
                  "show": true,
                  "name": "tiktoken_model_name",
                  "value": "",
                  "display_name": "TikToken Model Name",
                  "advanced": true,
                  "input_types": [
                    "Message"
                  ],
                  "dynamic": false,
                  "info": "",
                  "title_case": false,
                  "type": "str",
                  "_input_type": "MessageTextInput",
                  "proxy": {
                    "id": "OpenAIEmbeddings-i3hOt",
                    "field": "tiktoken_model_name"
                  }
                },
                "code_ParseData-wVyYa": {
                  "type": "code",
                  "required": true,
                  "placeholder": "",
                  "list": false,
                  "show": true,
                  "multiline": true,
                  "value": "from axiestudio.custom import Component\nfrom axiestudio.helpers.data import data_to_text\nfrom axiestudio.io import DataInput, MultilineInput, Output, StrInput\nfrom axiestudio.schema.message import Message\n\n\nclass ParseDataComponent(Component):\n    display_name = \"Parse Data\"\n    description = \"Convert Data into plain text following a specified template.\"\n    icon = \"braces\"\n    name = \"ParseData\"\n\n    inputs = [\n        DataInput(name=\"data\", display_name=\"Data\", info=\"The data to convert to text.\"),\n        MultilineInput(\n            name=\"template\",\n            display_name=\"Template\",\n            info=\"The template to use for formatting the data. \"\n            \"It can contain the keys {text}, {data} or any other key in the Data.\",\n            value=\"{text}\",\n        ),\n        StrInput(name=\"sep\", display_name=\"Separator\", advanced=True, value=\"\\n\"),\n    ]\n\n    outputs = [\n        Output(display_name=\"Text\", name=\"text\", method=\"parse_data\"),\n    ]\n\n    def parse_data(self) -> Message:\n        data = self.data if isinstance(self.data, list) else [self.data]\n        template = self.template\n\n        result_string = data_to_text(template, data, sep=self.sep)\n        self.status = result_string\n        return Message(text=result_string)\n",
                  "fileTypes": [],
                  "file_path": "",
                  "password": false,
                  "name": "code",
                  "advanced": true,
                  "dynamic": true,
                  "info": "",
                  "load_from_db": false,
                  "title_case": false,
                  "display_name": "code",
                  "proxy": {
                    "id": "ParseData-wVyYa",
                    "field": "code"
                  }
                },
                "sep_ParseData-wVyYa": {
                  "trace_as_metadata": true,
                  "load_from_db": false,
                  "list": false,
                  "required": false,
                  "placeholder": "",
                  "show": true,
                  "name": "sep",
                  "value": "\n",
                  "display_name": "Separator",
                  "advanced": true,
                  "dynamic": false,
                  "info": "",
                  "title_case": false,
                  "type": "str",
                  "_input_type": "StrInput",
                  "proxy": {
                    "id": "ParseData-wVyYa",
                    "field": "sep"
                  }
                },
                "template_ParseData-wVyYa": {
                  "trace_as_input": true,
                  "multiline": true,
                  "trace_as_metadata": true,
                  "load_from_db": false,
                  "list": false,
                  "required": false,
                  "placeholder": "",
                  "show": true,
                  "name": "template",
                  "value": "<operator_manual_chunk>\n{text}\n</operator_manual_chunk>",
                  "display_name": "Template",
                  "advanced": true,
                  "input_types": [
                    "Message"
                  ],
                  "dynamic": false,
                  "info": "The template to use for formatting the data. It can contain the keys {text}, {data} or any other key in the Data.",
                  "title_case": false,
                  "type": "str",
                  "_input_type": "MultilineInput",
                  "proxy": {
                    "id": "ParseData-wVyYa",
                    "field": "template"
                  }
                },
                "code_Prompt-UWd7v": {
                  "type": "code",
                  "required": true,
                  "placeholder": "",
                  "list": false,
                  "show": true,
                  "multiline": true,
                  "value": "from axiestudio.base.prompts.api_utils import process_prompt_template\nfrom axiestudio.custom import Component\nfrom axiestudio.inputs.inputs import DefaultPromptField\nfrom axiestudio.io import Output, PromptInput\nfrom axiestudio.schema.message import Message\nfrom axiestudio.template.utils import update_template_values\n\n\nclass PromptComponent(Component):\n    display_name: str = \"Prompt\"\n    description: str = \"Create a prompt template with dynamic variables.\"\n    icon = \"prompts\"\n    trace_type = \"prompt\"\n    name = \"Prompt\"\n\n    inputs = [\n        PromptInput(name=\"template\", display_name=\"Template\"),\n    ]\n\n    outputs = [\n        Output(display_name=\"Prompt Message\", name=\"prompt\", method=\"build_prompt\"),\n    ]\n\n    async def build_prompt(\n        self,\n    ) -> Message:\n        prompt = await Message.from_template_and_variables(**self._attributes)\n        self.status = prompt.text\n        return prompt\n\n    def _update_template(self, frontend_node: dict):\n        prompt_template = frontend_node[\"template\"][\"template\"][\"value\"]\n        custom_fields = frontend_node[\"custom_fields\"]\n        frontend_node_template = frontend_node[\"template\"]\n        _ = process_prompt_template(\n            template=prompt_template,\n            name=\"template\",\n            custom_fields=custom_fields,\n            frontend_node_template=frontend_node_template,\n        )\n        return frontend_node\n\n    def post_code_processing(self, new_frontend_node: dict, current_frontend_node: dict):\n        \"\"\"\n        This function is called after the code validation is done.\n        \"\"\"\n        frontend_node = super().post_code_processing(new_frontend_node, current_frontend_node)\n        template = frontend_node[\"template\"][\"template\"][\"value\"]\n        # Kept it duplicated for backwards compatibility\n        _ = process_prompt_template(\n            template=template,\n            name=\"template\",\n            custom_fields=frontend_node[\"custom_fields\"],\n            frontend_node_template=frontend_node[\"template\"],\n        )\n        # Now that template is updated, we need to grab any values that were set in the current_frontend_node\n        # and update the frontend_node with those values\n        update_template_values(new_template=frontend_node, previous_template=current_frontend_node[\"template\"])\n        return frontend_node\n\n    def _get_fallback_input(self, **kwargs):\n        return DefaultPromptField(**kwargs)\n",
                  "fileTypes": [],
                  "file_path": "",
                  "password": false,
                  "name": "code",
                  "advanced": true,
                  "dynamic": true,
                  "info": "",
                  "load_from_db": false,
                  "title_case": false,
                  "display_name": "code",
                  "proxy": {
                    "id": "Prompt-UWd7v",
                    "field": "code"
                  }
                },
                "template_Prompt-UWd7v": {
                  "trace_as_input": true,
                  "list": false,
                  "required": false,
                  "placeholder": "",
                  "show": true,
                  "name": "template",
                  "value": "{TMC}",
                  "display_name": "Template",
                  "advanced": true,
                  "dynamic": false,
                  "info": "",
                  "title_case": false,
                  "type": "prompt",
                  "_input_type": "PromptInput",
                  "proxy": {
                    "id": "Prompt-UWd7v",
                    "field": "template"
                  }
                },
                "TMC_Prompt-UWd7v": {
                  "field_type": "str",
                  "required": false,
                  "placeholder": "",
                  "list": false,
                  "show": true,
                  "multiline": true,
                  "value": "6670772A5",
                  "fileTypes": [],
                  "file_path": "",
                  "name": "TMC",
                  "display_name": "TMC",
                  "advanced": false,
                  "input_types": [
                    "Message",
                    "Text"
                  ],
                  "dynamic": false,
                  "info": "",
                  "load_from_db": false,
                  "title_case": false,
                  "type": "str",
                  "proxy": {
                    "id": "Prompt-UWd7v",
                    "field": "TMC"
                  }
                }
              },
              "flow": {
                "data": {
                  "nodes": [
                    {
                      "id": "Chroma-94Qh7",
                      "type": "genericNode",
                      "position": {
                        "x": -2540.5184708933016,
                        "y": -940.6724481950387
                      },
                      "data": {
                        "type": "Chroma",
                        "node": {
                          "template": {
                            "_type": "Component",
                            "embedding": {
                              "trace_as_metadata": true,
                              "list": false,
                              "required": false,
                              "placeholder": "",
                              "show": true,
                              "name": "embedding",
                              "value": "",
                              "display_name": "Embedding",
                              "advanced": false,
                              "input_types": [
                                "Embeddings"
                              ],
                              "dynamic": false,
                              "info": "",
                              "title_case": false,
                              "type": "other",
                              "_input_type": "HandleInput"
                            },
                            "ingest_data": {
                              "trace_as_metadata": true,
                              "list": true,
                              "trace_as_input": true,
                              "required": false,
                              "placeholder": "",
                              "show": true,
                              "name": "ingest_data",
                              "value": "",
                              "display_name": "Ingest Data",
                              "advanced": false,
                              "input_types": [
                                "Data"
                              ],
                              "dynamic": false,
                              "info": "",
                              "title_case": false,
                              "type": "other",
                              "_input_type": "DataInput"
                            },
                            "allow_duplicates": {
                              "trace_as_metadata": true,
                              "list": false,
                              "required": false,
                              "placeholder": "",
                              "show": true,
                              "name": "allow_duplicates",
                              "value": false,
                              "display_name": "Allow Duplicates",
                              "advanced": true,
                              "dynamic": false,
                              "info": "If false, will not add documents that are already in the Vector Store.",
                              "title_case": false,
                              "type": "bool",
                              "_input_type": "BoolInput"
                            },
                            "chroma_server_cors_allow_origins": {
                              "trace_as_metadata": true,
                              "load_from_db": false,
                              "list": false,
                              "required": false,
                              "placeholder": "",
                              "show": true,
                              "name": "chroma_server_cors_allow_origins",
                              "value": "",
                              "display_name": "Server CORS Allow Origins",
                              "advanced": true,
                              "dynamic": false,
                              "info": "",
                              "title_case": false,
                              "type": "str",
                              "_input_type": "StrInput"
                            },
                            "chroma_server_grpc_port": {
                              "trace_as_metadata": true,
                              "list": false,
                              "required": false,
                              "placeholder": "",
                              "show": true,
                              "name": "chroma_server_grpc_port",
                              "value": "",
                              "display_name": "Server gRPC Port",
                              "advanced": true,
                              "dynamic": false,
                              "info": "",
                              "title_case": false,
                              "type": "int",
                              "_input_type": "IntInput"
                            },
                            "chroma_server_host": {
                              "trace_as_metadata": true,
                              "load_from_db": false,
                              "list": false,
                              "required": false,
                              "placeholder": "",
                              "show": true,
                              "name": "chroma_server_host",
                              "value": "",
                              "display_name": "Server Host",
                              "advanced": true,
                              "dynamic": false,
                              "info": "",
                              "title_case": false,
                              "type": "str",
                              "_input_type": "StrInput"
                            },
                            "chroma_server_http_port": {
                              "trace_as_metadata": true,
                              "list": false,
                              "required": false,
                              "placeholder": "",
                              "show": true,
                              "name": "chroma_server_http_port",
                              "value": "",
                              "display_name": "Server HTTP Port",
                              "advanced": true,
                              "dynamic": false,
                              "info": "",
                              "title_case": false,
                              "type": "int",
                              "_input_type": "IntInput"
                            },
                            "chroma_server_ssl_enabled": {
                              "trace_as_metadata": true,
                              "list": false,
                              "required": false,
                              "placeholder": "",
                              "show": true,
                              "name": "chroma_server_ssl_enabled",
                              "value": false,
                              "display_name": "Server SSL Enabled",
                              "advanced": true,
                              "dynamic": false,
                              "info": "",
                              "title_case": false,
                              "type": "bool",
                              "_input_type": "BoolInput"
                            },
                            "code": {
                              "type": "code",
                              "required": true,
                              "placeholder": "",
                              "list": false,
                              "show": true,
                              "multiline": true,
                              "value": "from copy import deepcopy\nfrom typing import TYPE_CHECKING\n\nfrom chromadb.config import Settings\nfrom langchain_chroma.vectorstores import Chroma\nfrom loguru import logger\n\nfrom axiestudio.base.vectorstores.model import LCVectorStoreComponent, check_cached_vector_store\nfrom axiestudio.base.vectorstores.utils import chroma_collection_to_data\nfrom axiestudio.io import BoolInput, DataInput, DropdownInput, HandleInput, IntInput, StrInput, MultilineInput\nfrom axiestudio.schema import Data\n\nif TYPE_CHECKING:\n    from langchain_chroma import Chroma\n\n\nclass ChromaVectorStoreComponent(LCVectorStoreComponent):\n    \"\"\"\n    Chroma Vector Store with search capabilities\n    \"\"\"\n\n    display_name: str = \"Chroma DB\"\n    description: str = \"Chroma Vector Store with search capabilities\"\n    documentation = \"https://python.langchain.com/docs/integrations/vectorstores/chroma\"\n    name = \"Chroma\"\n    icon = \"Chroma\"\n\n    inputs = [\n        MessageTextInput(\n            name=\"collection_name\",\n            display_name=\"Collection Name\",\n        ),\n        StrInput(\n            name=\"persist_directory\",\n            display_name=\"Persist Directory\",\n        ),\n        MultilineInput(\n            name=\"search_query\",\n            display_name=\"Search Query\",\n        ),\n        DataInput(\n            name=\"ingest_data\",\n            display_name=\"Ingest Data\",\n            is_list=True,\n        ),\n        HandleInput(name=\"embedding\", display_name=\"Embedding\", input_types=[\"Embeddings\"]),\n        StrInput(\n            name=\"chroma_server_cors_allow_origins\",\n            display_name=\"Server CORS Allow Origins\",\n            advanced=True,\n        ),\n        StrInput(\n            name=\"chroma_server_host\",\n            display_name=\"Server Host\",\n            advanced=True,\n        ),\n        IntInput(\n            name=\"chroma_server_http_port\",\n            display_name=\"Server HTTP Port\",\n            advanced=True,\n        ),\n        IntInput(\n            name=\"chroma_server_grpc_port\",\n            display_name=\"Server gRPC Port\",\n            advanced=True,\n        ),\n        BoolInput(\n            name=\"chroma_server_ssl_enabled\",\n            display_name=\"Server SSL Enabled\",\n            advanced=True,\n        ),\n        BoolInput(\n            name=\"allow_duplicates\",\n            display_name=\"Allow Duplicates\",\n            advanced=True,\n            info=\"If false, will not add documents that are already in the Vector Store.\",\n        ),\n        DropdownInput(\n            name=\"search_type\",\n            display_name=\"Search Type\",\n            options=[\"Similarity\", \"MMR\"],\n            value=\"Similarity\",\n            advanced=True,\n        ),\n        IntInput(\n            name=\"number_of_results\",\n            display_name=\"Number of Results\",\n            info=\"Number of results to return.\",\n            advanced=True,\n            value=5,\n        ),\n        IntInput(\n            name=\"limit\",\n            display_name=\"Limit\",\n            advanced=True,\n            info=\"Limit the number of records to compare when Allow Duplicates is False.\",\n        ),\n    ]\n\n    @check_cached_vector_store\n    def build_vector_store(self) -> Chroma:\n        \"\"\"\n        Builds the Chroma object.\n        \"\"\"\n        try:\n            from chromadb import Client\n            from langchain_chroma import Chroma\n        except ImportError:\n            raise ImportError(\n                \"Could not import Chroma integration package. \" \"Please install it with `pip install langchain-chroma`.\"\n            )\n        # Chroma settings\n        chroma_settings = None\n        client = None\n        if self.chroma_server_host:\n            chroma_settings = Settings(\n                chroma_server_cors_allow_origins=self.chroma_server_cors_allow_origins or [],\n                chroma_server_host=self.chroma_server_host,\n                chroma_server_http_port=self.chroma_server_http_port or None,\n                chroma_server_grpc_port=self.chroma_server_grpc_port or None,\n                chroma_server_ssl_enabled=self.chroma_server_ssl_enabled,\n            )\n            client = Client(settings=chroma_settings)\n\n        # Check persist_directory and expand it if it is a relative path\n        if self.persist_directory is not None:\n            persist_directory = self.resolve_path(self.persist_directory)\n        else:\n            persist_directory = None\n\n        chroma = Chroma(\n            persist_directory=persist_directory,\n            client=client,\n            embedding_function=self.embedding,\n            collection_name=self.collection_name,\n        )\n\n        self._add_documents_to_vector_store(chroma)\n        self.status = chroma_collection_to_data(chroma.get(limit=self.limit))\n        return chroma\n\n    def _add_documents_to_vector_store(self, vector_store: \"Chroma\") -> None:\n        \"\"\"\n        Adds documents to the Vector Store.\n        \"\"\"\n        if not self.ingest_data:\n            self.status = \"\"\n            return\n\n        _stored_documents_without_id = []\n        if self.allow_duplicates:\n            stored_data = []\n        else:\n            stored_data = chroma_collection_to_data(vector_store.get(limit=self.limit))\n            for value in deepcopy(stored_data):\n                del value.id\n                _stored_documents_without_id.append(value)\n\n        documents = []\n        for _input in self.ingest_data or []:\n            if isinstance(_input, Data):\n                if _input not in _stored_documents_without_id:\n                    documents.append(_input.to_lc_document())\n            else:\n                raise ValueError(\"Vector Store Inputs must be Data objects.\")\n\n        if documents and self.embedding is not None:\n            logger.debug(f\"Adding {len(documents)} documents to the Vector Store.\")\n            vector_store.add_documents(documents)\n        else:\n            logger.debug(\"No documents to add to the Vector Store.\")",
                              "fileTypes": [],
                              "file_path": "",
                              "password": false,
                              "name": "code",
                              "advanced": true,
                              "dynamic": true,
                              "info": "",
                              "load_from_db": false,
                              "title_case": false,
                              "display_name": "code"
                            },
                            "collection_name": {
                              "trace_as_input": true,
                              "trace_as_metadata": true,
                              "load_from_db": false,
                              "list": false,
                              "required": false,
                              "placeholder": "",
                              "show": true,
                              "name": "collection_name",
                              "value": "",
                              "display_name": "Collection Name",
                              "advanced": false,
                              "input_types": [
                                "Message"
                              ],
                              "dynamic": false,
                              "info": "",
                              "title_case": false,
                              "type": "str",
                              "_input_type": "MessageTextInput"
                            },
                            "limit": {
                              "trace_as_metadata": true,
                              "list": false,
                              "required": false,
                              "placeholder": "",
                              "show": true,
                              "name": "limit",
                              "value": "",
                              "display_name": "Limit",
                              "advanced": true,
                              "dynamic": false,
                              "info": "Limit the number of records to compare when Allow Duplicates is False.",
                              "title_case": false,
                              "type": "int",
                              "_input_type": "IntInput"
                            },
                            "number_of_results": {
                              "trace_as_metadata": true,
                              "list": false,
                              "required": false,
                              "placeholder": "",
                              "show": true,
                              "name": "number_of_results",
                              "value": 5,
                              "display_name": "Number of Results",
                              "advanced": true,
                              "dynamic": false,
                              "info": "Number of results to return.",
                              "title_case": false,
                              "type": "int",
                              "_input_type": "IntInput"
                            },
                            "persist_directory": {
                              "trace_as_metadata": true,
                              "load_from_db": false,
                              "list": false,
                              "required": false,
                              "placeholder": "",
                              "show": true,
                              "name": "persist_directory",
                              "value": "Documents/GitHub/argobot/OIB",
                              "display_name": "Persist Directory",
                              "advanced": false,
                              "dynamic": false,
                              "info": "",
                              "title_case": false,
                              "type": "str",
                              "_input_type": "StrInput"
                            },
                            "search_query": {
                              "trace_as_input": true,
                              "multiline": true,
                              "trace_as_metadata": true,
                              "load_from_db": false,
                              "list": false,
                              "required": false,
                              "placeholder": "",
                              "show": true,
                              "name": "search_query",
                              "value": "",
                              "display_name": "Search Query",
                              "advanced": false,
                              "input_types": [
                                "Message"
                              ],
                              "dynamic": false,
                              "info": "",
                              "title_case": false,
                              "type": "str",
                              "_input_type": "MultilineInput"
                            },
                            "search_type": {
                              "trace_as_metadata": true,
                              "options": [
                                "Similarity",
                                "MMR"
                              ],
                              "combobox": false,
                              "required": false,
                              "placeholder": "",
                              "show": true,
                              "name": "search_type",
                              "value": "Similarity",
                              "display_name": "Search Type",
                              "advanced": true,
                              "dynamic": false,
                              "info": "",
                              "title_case": false,
                              "type": "str",
                              "_input_type": "DropdownInput"
                            }
                          },
                          "description": "Chroma Vector Store with search capabilities",
                          "icon": "Chroma",
                          "base_classes": [
                            "Data",
                            "Retriever",
                            "VectorStore"
                          ],
                          "display_name": "Chroma DB",
                          "documentation": "https://python.langchain.com/docs/integrations/vectorstores/chroma",
                          "custom_fields": {},
                          "output_types": [],
                          "pinned": false,
                          "conditional_paths": [],
                          "frozen": false,
                          "outputs": [
                            {
                              "types": [
                                "Retriever"
                              ],
                              "selected": "Retriever",
                              "name": "base_retriever",
                              "display_name": "Retriever",
                              "method": "build_base_retriever",
                              "value": "__UNDEFINED__",
                              "cache": true,
                              "required_inputs": []
                            },
                            {
                              "types": [
                                "Data"
                              ],
                              "selected": "Data",
                              "name": "search_results",
                              "display_name": "Search Results",
                              "method": "search_documents",
                              "value": "__UNDEFINED__",
                              "cache": true,
                              "required_inputs": [
                                "number_of_results",
                                "search_query",
                                "search_type"
                              ]
                            },
                            {
                              "types": [
                                "VectorStore"
                              ],
                              "selected": "VectorStore",
                              "name": "vector_store",
                              "display_name": "Vector Store",
                              "method": "cast_vector_store",
                              "value": "__UNDEFINED__",
                              "cache": true,
                              "required_inputs": []
                            }
                          ],
                          "field_order": [
                            "collection_name",
                            "persist_directory",
                            "search_query",
                            "ingest_data",
                            "embedding",
                            "chroma_server_cors_allow_origins",
                            "chroma_server_host",
                            "chroma_server_http_port",
                            "chroma_server_grpc_port",
                            "chroma_server_ssl_enabled",
                            "allow_duplicates",
                            "search_type",
                            "number_of_results",
                            "limit"
                          ],
                          "beta": false,
                          "edited": true,
                          "metadata": {}
                        },
                        "id": "Chroma-94Qh7"
                      },
                      "selected": true,
                      "width": 384,
                      "height": 637,
                      "positionAbsolute": {
                        "x": -2540.5184708933016,
                        "y": -940.6724481950387
                      },
                      "dragging": false
                    },
                    {
                      "id": "OpenAIEmbeddings-i3hOt",
                      "type": "genericNode",
                      "position": {
                        "x": -2941.046432933903,
                        "y": -540.6386021914577
                      },
                      "data": {
                        "type": "OpenAIEmbeddings",
                        "node": {
                          "template": {
                            "_type": "Component",
                            "chunk_size": {
                              "trace_as_metadata": true,
                              "list": false,
                              "required": false,
                              "placeholder": "",
                              "show": true,
                              "name": "chunk_size",
                              "value": 1000,
                              "display_name": "Chunk Size",
                              "advanced": true,
                              "dynamic": false,
                              "info": "",
                              "title_case": false,
                              "type": "int",
                              "_input_type": "IntInput"
                            },
                            "client": {
                              "trace_as_input": true,
                              "trace_as_metadata": true,
                              "load_from_db": false,
                              "list": false,
                              "required": false,
                              "placeholder": "",
                              "show": true,
                              "name": "client",
                              "value": "",
                              "display_name": "Client",
                              "advanced": true,
                              "input_types": [
                                "Message"
                              ],
                              "dynamic": false,
                              "info": "",
                              "title_case": false,
                              "type": "str",
                              "_input_type": "MessageTextInput"
                            },
                            "code": {
                              "type": "code",
                              "required": true,
                              "placeholder": "",
                              "list": false,
                              "show": true,
                              "multiline": true,
                              "value": "from langchain_openai.embeddings.base import OpenAIEmbeddings\n\nfrom axiestudio.base.embeddings.model import LCEmbeddingsModel\nfrom axiestudio.base.models.openai_constants import OPENAI_EMBEDDING_MODEL_NAMES\nfrom axiestudio.field_typing import Embeddings\nfrom axiestudio.io import BoolInput, DictInput, DropdownInput, FloatInput, IntInput, MessageTextInput, SecretStrInput\n\n\nclass OpenAIEmbeddingsComponent(LCEmbeddingsModel):\n    display_name = \"OpenAI Embeddings\"\n    description = \"Generate embeddings using OpenAI models.\"\n    icon = \"OpenAI\"\n    name = \"OpenAIEmbeddings\"\n\n    inputs = [\n        DictInput(\n            name=\"default_headers\",\n            display_name=\"Default Headers\",\n            advanced=True,\n            info=\"Default headers to use for the API request.\",\n        ),\n        DictInput(\n            name=\"default_query\",\n            display_name=\"Default Query\",\n            advanced=True,\n            info=\"Default query parameters to use for the API request.\",\n        ),\n        IntInput(name=\"chunk_size\", display_name=\"Chunk Size\", advanced=True, value=1000),\n        MessageTextInput(name=\"client\", display_name=\"Client\", advanced=True),\n        MessageTextInput(name=\"deployment\", display_name=\"Deployment\", advanced=True),\n        IntInput(name=\"embedding_ctx_length\", display_name=\"Embedding Context Length\", advanced=True, value=1536),\n        IntInput(name=\"max_retries\", display_name=\"Max Retries\", value=3, advanced=True),\n        DropdownInput(\n            name=\"model\",\n            display_name=\"Model\",\n            advanced=False,\n            options=OPENAI_EMBEDDING_MODEL_NAMES,\n            value=\"text-embedding-3-small\",\n        ),\n        DictInput(name=\"model_kwargs\", display_name=\"Model Kwargs\", advanced=True),\n        SecretStrInput(name=\"openai_api_base\", display_name=\"OpenAI API Base\", advanced=True),\n        SecretStrInput(name=\"openai_api_key\", display_name=\"OpenAI API Key\", value=\"OPENAI_API_KEY\"),\n        SecretStrInput(name=\"openai_api_type\", display_name=\"OpenAI API Type\", advanced=True),\n        MessageTextInput(name=\"openai_api_version\", display_name=\"OpenAI API Version\", advanced=True),\n        MessageTextInput(\n            name=\"openai_organization\",\n            display_name=\"OpenAI Organization\",\n            advanced=True,\n        ),\n        MessageTextInput(name=\"openai_proxy\", display_name=\"OpenAI Proxy\", advanced=True),\n        FloatInput(name=\"request_timeout\", display_name=\"Request Timeout\", advanced=True),\n        BoolInput(name=\"show_progress_bar\", display_name=\"Show Progress Bar\", advanced=True),\n        BoolInput(name=\"skip_empty\", display_name=\"Skip Empty\", advanced=True),\n        MessageTextInput(\n            name=\"tiktoken_model_name\",\n            display_name=\"TikToken Model Name\",\n            advanced=True,\n        ),\n        BoolInput(\n            name=\"tiktoken_enable\",\n            display_name=\"TikToken Enable\",\n            advanced=True,\n            value=True,\n            info=\"If False, you must have transformers installed.\",\n        ),\n        IntInput(\n            name=\"dimensions\",\n            display_name=\"Dimensions\",\n            info=\"The number of dimensions the resulting output embeddings should have. \"\n            \"Only supported by certain models.\",\n            advanced=True,\n        ),\n    ]\n\n    def build_embeddings(self) -> Embeddings:\n        return OpenAIEmbeddings(\n            tiktoken_enabled=self.tiktoken_enable,\n            default_headers=self.default_headers,\n            default_query=self.default_query,\n            allowed_special=\"all\",\n            disallowed_special=\"all\",\n            chunk_size=self.chunk_size,\n            deployment=self.deployment,\n            embedding_ctx_length=self.embedding_ctx_length,\n            max_retries=self.max_retries,\n            model=self.model,\n            model_kwargs=self.model_kwargs,\n            base_url=self.openai_api_base,\n            api_key=self.openai_api_key,\n            openai_api_type=self.openai_api_type,\n            api_version=self.openai_api_version,\n            organization=self.openai_organization,\n            openai_proxy=self.openai_proxy,\n            timeout=self.request_timeout or None,\n            show_progress_bar=self.show_progress_bar,\n            skip_empty=self.skip_empty,\n            tiktoken_model_name=self.tiktoken_model_name,\n            dimensions=self.dimensions or None,\n        )\n",
                              "fileTypes": [],
                              "file_path": "",
                              "password": false,
                              "name": "code",
                              "advanced": true,
                              "dynamic": true,
                              "info": "",
                              "load_from_db": false,
                              "title_case": false,
                              "display_name": "code"
                            },
                            "default_headers": {
                              "trace_as_input": true,
                              "list": false,
                              "required": false,
                              "placeholder": "",
                              "show": true,
                              "name": "default_headers",
                              "value": {},
                              "display_name": "Default Headers",
                              "advanced": true,
                              "dynamic": false,
                              "info": "Default headers to use for the API request.",
                              "title_case": false,
                              "type": "dict",
                              "_input_type": "DictInput"
                            },
                            "default_query": {
                              "trace_as_input": true,
                              "list": false,
                              "required": false,
                              "placeholder": "",
                              "show": true,
                              "name": "default_query",
                              "value": {},
                              "display_name": "Default Query",
                              "advanced": true,
                              "dynamic": false,
                              "info": "Default query parameters to use for the API request.",
                              "title_case": false,
                              "type": "dict",
                              "_input_type": "DictInput"
                            },
                            "deployment": {
                              "trace_as_input": true,
                              "trace_as_metadata": true,
                              "load_from_db": false,
                              "list": false,
                              "required": false,
                              "placeholder": "",
                              "show": true,
                              "name": "deployment",
                              "value": "",
                              "display_name": "Deployment",
                              "advanced": true,
                              "input_types": [
                                "Message"
                              ],
                              "dynamic": false,
                              "info": "",
                              "title_case": false,
                              "type": "str",
                              "_input_type": "MessageTextInput"
                            },
                            "dimensions": {
                              "trace_as_metadata": true,
                              "list": false,
                              "required": false,
                              "placeholder": "",
                              "show": true,
                              "name": "dimensions",
                              "value": "",
                              "display_name": "Dimensions",
                              "advanced": true,
                              "dynamic": false,
                              "info": "The number of dimensions the resulting output embeddings should have. Only supported by certain models.",
                              "title_case": false,
                              "type": "int",
                              "_input_type": "IntInput"
                            },
                            "embedding_ctx_length": {
                              "trace_as_metadata": true,
                              "list": false,
                              "required": false,
                              "placeholder": "",
                              "show": true,
                              "name": "embedding_ctx_length",
                              "value": 1536,
                              "display_name": "Embedding Context Length",
                              "advanced": true,
                              "dynamic": false,
                              "info": "",
                              "title_case": false,
                              "type": "int",
                              "_input_type": "IntInput"
                            },
                            "max_retries": {
                              "trace_as_metadata": true,
                              "list": false,
                              "required": false,
                              "placeholder": "",
                              "show": true,
                              "name": "max_retries",
                              "value": 3,
                              "display_name": "Max Retries",
                              "advanced": true,
                              "dynamic": false,
                              "info": "",
                              "title_case": false,
                              "type": "int",
                              "_input_type": "IntInput"
                            },
                            "model": {
                              "trace_as_metadata": true,
                              "options": [
                                "text-embedding-3-small",
                                "text-embedding-3-large",
                                "text-embedding-ada-002"
                              ],
                              "combobox": false,
                              "required": false,
                              "placeholder": "",
                              "show": true,
                              "name": "model",
                              "value": "text-embedding-3-small",
                              "display_name": "Model",
                              "advanced": false,
                              "dynamic": false,
                              "info": "",
                              "title_case": false,
                              "type": "str",
                              "_input_type": "DropdownInput"
                            },
                            "model_kwargs": {
                              "trace_as_input": true,
                              "list": false,
                              "required": false,
                              "placeholder": "",
                              "show": true,
                              "name": "model_kwargs",
                              "value": {},
                              "display_name": "Model Kwargs",
                              "advanced": true,
                              "dynamic": false,
                              "info": "",
                              "title_case": false,
                              "type": "dict",
                              "_input_type": "DictInput"
                            },
                            "openai_api_base": {
                              "load_from_db": false,
                              "required": false,
                              "placeholder": "",
                              "show": true,
                              "name": "openai_api_base",
                              "value": "",
                              "display_name": "OpenAI API Base",
                              "advanced": true,
                              "input_types": [
                                "Message"
                              ],
                              "dynamic": false,
                              "info": "",
                              "title_case": false,
                              "password": true,
                              "type": "str",
                              "_input_type": "SecretStrInput"
                            },
                            "openai_api_key": {
                              "load_from_db": true,
                              "required": false,
                              "placeholder": "",
                              "show": true,
                              "name": "openai_api_key",
                              "value": "OPENAI_API_KEY",
                              "display_name": "OpenAI API Key",
                              "advanced": false,
                              "input_types": [
                                "Message"
                              ],
                              "dynamic": false,
                              "info": "",
                              "title_case": false,
                              "password": true,
                              "type": "str",
                              "_input_type": "SecretStrInput"
                            },
                            "openai_api_type": {
                              "load_from_db": false,
                              "required": false,
                              "placeholder": "",
                              "show": true,
                              "name": "openai_api_type",
                              "value": "",
                              "display_name": "OpenAI API Type",
                              "advanced": true,
                              "input_types": [
                                "Message"
                              ],
                              "dynamic": false,
                              "info": "",
                              "title_case": false,
                              "password": true,
                              "type": "str",
                              "_input_type": "SecretStrInput"
                            },
                            "openai_api_version": {
                              "trace_as_input": true,
                              "trace_as_metadata": true,
                              "load_from_db": false,
                              "list": false,
                              "required": false,
                              "placeholder": "",
                              "show": true,
                              "name": "openai_api_version",
                              "value": "",
                              "display_name": "OpenAI API Version",
                              "advanced": true,
                              "input_types": [
                                "Message"
                              ],
                              "dynamic": false,
                              "info": "",
                              "title_case": false,
                              "type": "str",
                              "_input_type": "MessageTextInput"
                            },
                            "openai_organization": {
                              "trace_as_input": true,
                              "trace_as_metadata": true,
                              "load_from_db": false,
                              "list": false,
                              "required": false,
                              "placeholder": "",
                              "show": true,
                              "name": "openai_organization",
                              "value": "",
                              "display_name": "OpenAI Organization",
                              "advanced": true,
                              "input_types": [
                                "Message"
                              ],
                              "dynamic": false,
                              "info": "",
                              "title_case": false,
                              "type": "str",
                              "_input_type": "MessageTextInput"
                            },
                            "openai_proxy": {
                              "trace_as_input": true,
                              "trace_as_metadata": true,
                              "load_from_db": false,
                              "list": false,
                              "required": false,
                              "placeholder": "",
                              "show": true,
                              "name": "openai_proxy",
                              "value": "",
                              "display_name": "OpenAI Proxy",
                              "advanced": true,
                              "input_types": [
                                "Message"
                              ],
                              "dynamic": false,
                              "info": "",
                              "title_case": false,
                              "type": "str",
                              "_input_type": "MessageTextInput"
                            },
                            "request_timeout": {
                              "trace_as_metadata": true,
                              "list": false,
                              "required": false,
                              "placeholder": "",
                              "show": true,
                              "name": "request_timeout",
                              "value": "",
                              "display_name": "Request Timeout",
                              "advanced": true,
                              "dynamic": false,
                              "info": "",
                              "title_case": false,
                              "type": "float",
                              "_input_type": "FloatInput"
                            },
                            "show_progress_bar": {
                              "trace_as_metadata": true,
                              "list": false,
                              "required": false,
                              "placeholder": "",
                              "show": true,
                              "name": "show_progress_bar",
                              "value": false,
                              "display_name": "Show Progress Bar",
                              "advanced": true,
                              "dynamic": false,
                              "info": "",
                              "title_case": false,
                              "type": "bool",
                              "_input_type": "BoolInput"
                            },
                            "skip_empty": {
                              "trace_as_metadata": true,
                              "list": false,
                              "required": false,
                              "placeholder": "",
                              "show": true,
                              "name": "skip_empty",
                              "value": false,
                              "display_name": "Skip Empty",
                              "advanced": true,
                              "dynamic": false,
                              "info": "",
                              "title_case": false,
                              "type": "bool",
                              "_input_type": "BoolInput"
                            },
                            "tiktoken_enable": {
                              "trace_as_metadata": true,
                              "list": false,
                              "required": false,
                              "placeholder": "",
                              "show": true,
                              "name": "tiktoken_enable",
                              "value": true,
                              "display_name": "TikToken Enable",
                              "advanced": true,
                              "dynamic": false,
                              "info": "If False, you must have transformers installed.",
                              "title_case": false,
                              "type": "bool",
                              "_input_type": "BoolInput"
                            },
                            "tiktoken_model_name": {
                              "trace_as_input": true,
                              "trace_as_metadata": true,
                              "load_from_db": false,
                              "list": false,
                              "required": false,
                              "placeholder": "",
                              "show": true,
                              "name": "tiktoken_model_name",
                              "value": "",
                              "display_name": "TikToken Model Name",
                              "advanced": true,
                              "input_types": [
                                "Message"
                              ],
                              "dynamic": false,
                              "info": "",
                              "title_case": false,
                              "type": "str",
                              "_input_type": "MessageTextInput"
                            }
                          },
                          "description": "Generate embeddings using OpenAI models.",
                          "icon": "OpenAI",
                          "base_classes": [
                            "Embeddings"
                          ],
                          "display_name": "OpenAI Embeddings",
                          "documentation": "",
                          "custom_fields": {},
                          "output_types": [],
                          "pinned": false,
                          "conditional_paths": [],
                          "frozen": false,
                          "outputs": [
                            {
                              "types": [
                                "Embeddings"
                              ],
                              "selected": "Embeddings",
                              "name": "embeddings",
                              "display_name": "Embeddings",
                              "method": "build_embeddings",
                              "value": "__UNDEFINED__",
                              "cache": true,
                              "required_inputs": [
                                "chunk_size",
                                "default_headers",
                                "default_query",
                                "deployment",
                                "dimensions",
                                "embedding_ctx_length",
                                "max_retries",
                                "model",
                                "model_kwargs",
                                "openai_api_base",
                                "openai_api_key",
                                "openai_api_type",
                                "openai_api_version",
                                "openai_organization",
                                "openai_proxy",
                                "request_timeout",
                                "show_progress_bar",
                                "skip_empty",
                                "tiktoken_enable",
                                "tiktoken_model_name"
                              ]
                            }
                          ],
                          "field_order": [
                            "default_headers",
                            "default_query",
                            "chunk_size",
                            "client",
                            "deployment",
                            "embedding_ctx_length",
                            "max_retries",
                            "model",
                            "model_kwargs",
                            "openai_api_base",
                            "openai_api_key",
                            "openai_api_type",
                            "openai_api_version",
                            "openai_organization",
                            "openai_proxy",
                            "request_timeout",
                            "show_progress_bar",
                            "skip_empty",
                            "tiktoken_model_name",
                            "tiktoken_enable",
                            "dimensions"
                          ],
                          "beta": false,
                          "edited": false,
                          "metadata": {}
                        },
                        "id": "OpenAIEmbeddings-i3hOt",
                        "description": "Generate embeddings using OpenAI models.",
                        "display_name": "OpenAI Embeddings"
                      },
                      "selected": true,
                      "width": 384,
                      "height": 375,
                      "positionAbsolute": {
                        "x": -2941.046432933903,
                        "y": -540.6386021914577
                      },
                      "dragging": false
                    },
                    {
                      "id": "ParseData-wVyYa",
                      "type": "genericNode",
                      "position": {
                        "x": -2140.6865868295176,
                        "y": -940.836027355424
                      },
                      "data": {
                        "type": "ParseData",
                        "node": {
                          "template": {
                            "_type": "Component",
                            "data": {
                              "trace_as_metadata": true,
                              "list": false,
                              "trace_as_input": true,
                              "required": false,
                              "placeholder": "",
                              "show": true,
                              "name": "data",
                              "value": "",
                              "display_name": "Data",
                              "advanced": false,
                              "input_types": [
                                "Data"
                              ],
                              "dynamic": false,
                              "info": "The data to convert to text.",
                              "title_case": false,
                              "type": "other",
                              "_input_type": "DataInput"
                            },
                            "code": {
                              "type": "code",
                              "required": true,
                              "placeholder": "",
                              "list": false,
                              "show": true,
                              "multiline": true,
                              "value": "from axiestudio.custom import Component\nfrom axiestudio.helpers.data import data_to_text\nfrom axiestudio.io import DataInput, MultilineInput, Output, StrInput\nfrom axiestudio.schema.message import Message\n\n\nclass ParseDataComponent(Component):\n    display_name = \"Parse Data\"\n    description = \"Convert Data into plain text following a specified template.\"\n    icon = \"braces\"\n    name = \"ParseData\"\n\n    inputs = [\n        DataInput(name=\"data\", display_name=\"Data\", info=\"The data to convert to text.\"),\n        MultilineInput(\n            name=\"template\",\n            display_name=\"Template\",\n            info=\"The template to use for formatting the data. \"\n            \"It can contain the keys {text}, {data} or any other key in the Data.\",\n            value=\"{text}\",\n        ),\n        StrInput(name=\"sep\", display_name=\"Separator\", advanced=True, value=\"\\n\"),\n    ]\n\n    outputs = [\n        Output(display_name=\"Text\", name=\"text\", method=\"parse_data\"),\n    ]\n\n    def parse_data(self) -> Message:\n        data = self.data if isinstance(self.data, list) else [self.data]\n        template = self.template\n\n        result_string = data_to_text(template, data, sep=self.sep)\n        self.status = result_string\n        return Message(text=result_string)\n",
                              "fileTypes": [],
                              "file_path": "",
                              "password": false,
                              "name": "code",
                              "advanced": true,
                              "dynamic": true,
                              "info": "",
                              "load_from_db": false,
                              "title_case": false,
                              "display_name": "code"
                            },
                            "sep": {
                              "trace_as_metadata": true,
                              "load_from_db": false,
                              "list": false,
                              "required": false,
                              "placeholder": "",
                              "show": true,
                              "name": "sep",
                              "value": "\n",
                              "display_name": "Separator",
                              "advanced": true,
                              "dynamic": false,
                              "info": "",
                              "title_case": false,
                              "type": "str",
                              "_input_type": "StrInput"
                            },
                            "template": {
                              "trace_as_input": true,
                              "multiline": true,
                              "trace_as_metadata": true,
                              "load_from_db": false,
                              "list": false,
                              "required": false,
                              "placeholder": "",
                              "show": true,
                              "name": "template",
                              "value": "{text}",
                              "display_name": "Template",
                              "advanced": false,
                              "input_types": [
                                "Message"
                              ],
                              "dynamic": false,
                              "info": "The template to use for formatting the data. It can contain the keys {text}, {data} or any other key in the Data.",
                              "title_case": false,
                              "type": "str",
                              "_input_type": "MultilineInput"
                            }
                          },
                          "description": "Convert Data into plain text following a specified template.",
                          "icon": "braces",
                          "base_classes": [
                            "Message"
                          ],
                          "display_name": "Parse Data",
                          "documentation": "",
                          "custom_fields": {},
                          "output_types": [],
                          "pinned": false,
                          "conditional_paths": [],
                          "frozen": false,
                          "outputs": [
                            {
                              "types": [
                                "Message"
                              ],
                              "selected": "Message",
                              "name": "text",
                              "display_name": "Text",
                              "method": "parse_data",
                              "value": "__UNDEFINED__",
                              "cache": true
                            }
                          ],
                          "field_order": [
                            "data",
                            "template",
                            "sep"
                          ],
                          "beta": false,
                          "edited": false,
                          "metadata": {}
                        },
                        "id": "ParseData-wVyYa",
                        "description": "Convert Data into plain text following a specified template.",
                        "display_name": "Parse Data"
                      },
                      "selected": true,
                      "width": 384,
                      "height": 353,
                      "dragging": false,
                      "positionAbsolute": {
                        "x": -2140.6865868295176,
                        "y": -940.836027355424
                      }
                    },
                    {
                      "id": "Prompt-UWd7v",
                      "type": "genericNode",
                      "position": {
                        "x": -2940.377147131932,
                        "y": -941.3554907792541
                      },
                      "data": {
                        "type": "Prompt",
                        "node": {
                          "template": {
                            "_type": "Component",
                            "code": {
                              "type": "code",
                              "required": true,
                              "placeholder": "",
                              "list": false,
                              "show": true,
                              "multiline": true,
                              "value": "from axiestudio.base.prompts.api_utils import process_prompt_template\nfrom axiestudio.custom import Component\nfrom axiestudio.inputs.inputs import DefaultPromptField\nfrom axiestudio.io import Output, PromptInput\nfrom axiestudio.schema.message import Message\nfrom axiestudio.template.utils import update_template_values\n\n\nclass PromptComponent(Component):\n    display_name: str = \"Prompt\"\n    description: str = \"Create a prompt template with dynamic variables.\"\n    icon = \"prompts\"\n    trace_type = \"prompt\"\n    name = \"Prompt\"\n\n    inputs = [\n        PromptInput(name=\"template\", display_name=\"Template\"),\n    ]\n\n    outputs = [\n        Output(display_name=\"Prompt Message\", name=\"prompt\", method=\"build_prompt\"),\n    ]\n\n    async def build_prompt(\n        self,\n    ) -> Message:\n        prompt = await Message.from_template_and_variables(**self._attributes)\n        self.status = prompt.text\n        return prompt\n\n    def _update_template(self, frontend_node: dict):\n        prompt_template = frontend_node[\"template\"][\"template\"][\"value\"]\n        custom_fields = frontend_node[\"custom_fields\"]\n        frontend_node_template = frontend_node[\"template\"]\n        _ = process_prompt_template(\n            template=prompt_template,\n            name=\"template\",\n            custom_fields=custom_fields,\n            frontend_node_template=frontend_node_template,\n        )\n        return frontend_node\n\n    def post_code_processing(self, new_frontend_node: dict, current_frontend_node: dict):\n        \"\"\"\n        This function is called after the code validation is done.\n        \"\"\"\n        frontend_node = super().post_code_processing(new_frontend_node, current_frontend_node)\n        template = frontend_node[\"template\"][\"template\"][\"value\"]\n        # Kept it duplicated for backwards compatibility\n        _ = process_prompt_template(\n            template=template,\n            name=\"template\",\n            custom_fields=frontend_node[\"custom_fields\"],\n            frontend_node_template=frontend_node[\"template\"],\n        )\n        # Now that template is updated, we need to grab any values that were set in the current_frontend_node\n        # and update the frontend_node with those values\n        update_template_values(new_template=frontend_node, previous_template=current_frontend_node[\"template\"])\n        return frontend_node\n\n    def _get_fallback_input(self, **kwargs):\n        return DefaultPromptField(**kwargs)\n",
                              "fileTypes": [],
                              "file_path": "",
                              "password": false,
                              "name": "code",
                              "advanced": true,
                              "dynamic": true,
                              "info": "",
                              "load_from_db": false,
                              "title_case": false,
                              "display_name": "code"
                            },
                            "template": {
                              "trace_as_input": true,
                              "list": false,
                              "required": false,
                              "placeholder": "",
                              "show": true,
                              "name": "template",
                              "value": "{TMC}",
                              "display_name": "Template",
                              "advanced": false,
                              "dynamic": false,
                              "info": "",
                              "title_case": false,
                              "type": "prompt",
                              "_input_type": "PromptInput"
                            },
                            "TMC": {
                              "field_type": "str",
                              "required": false,
                              "placeholder": "",
                              "list": false,
                              "show": true,
                              "multiline": true,
                              "value": "6670772A5",
                              "fileTypes": [],
                              "file_path": "",
                              "name": "TMC",
                              "display_name": "TMC",
                              "advanced": false,
                              "input_types": [
                                "Message",
                                "Text"
                              ],
                              "dynamic": false,
                              "info": "",
                              "load_from_db": false,
                              "title_case": false,
                              "type": "str"
                            }
                          },
                          "description": "Create a prompt template with dynamic variables.",
                          "icon": "prompts",
                          "is_input": null,
                          "is_output": null,
                          "is_composition": null,
                          "base_classes": [
                            "Message"
                          ],
                          "name": "",
                          "display_name": "Prompt",
                          "documentation": "",
                          "custom_fields": {
                            "template": [
                              "TMC"
                            ]
                          },
                          "output_types": [],
                          "full_path": null,
                          "pinned": false,
                          "conditional_paths": [],
                          "frozen": false,
                          "outputs": [
                            {
                              "types": [
                                "Message"
                              ],
                              "selected": "Message",
                              "name": "prompt",
                              "hidden": null,
                              "display_name": "Prompt Message",
                              "method": "build_prompt",
                              "value": "__UNDEFINED__",
                              "cache": true,
                              "required_inputs": null
                            }
                          ],
                          "field_order": [
                            "template"
                          ],
                          "beta": false,
                          "error": null,
                          "edited": false,
                          "metadata": {}
                        },
                        "id": "Prompt-UWd7v"
                      },
                      "selected": true,
                      "width": 384,
                      "height": 391,
                      "positionAbsolute": {
                        "x": -2940.377147131932,
                        "y": -941.3554907792541
                      },
                      "dragging": false
                    }
                  ],
                  "edges": [
                    {
                      "source": "OpenAIEmbeddings-i3hOt",
                      "sourceHandle": "{œdataTypeœ:œOpenAIEmbeddingsœ,œidœ:œOpenAIEmbeddings-i3hOtœ,œnameœ:œembeddingsœ,œoutput_typesœ:[œEmbeddingsœ]}",
                      "target": "Chroma-94Qh7",
                      "targetHandle": "{œfieldNameœ:œembeddingœ,œidœ:œChroma-94Qh7œ,œinputTypesœ:[œEmbeddingsœ],œtypeœ:œotherœ}",
                      "data": {
                        "targetHandle": {
                          "fieldName": "embedding",
                          "id": "Chroma-94Qh7",
                          "inputTypes": [
                            "Embeddings"
                          ],
                          "type": "other"
                        },
                        "sourceHandle": {
                          "dataType": "OpenAIEmbeddings",
                          "id": "OpenAIEmbeddings-i3hOt",
                          "name": "embeddings",
                          "output_types": [
                            "Embeddings"
                          ]
                        }
                      },
                      "id": "reactflow__edge-OpenAIEmbeddings-i3hOt{œdataTypeœ:œOpenAIEmbeddingsœ,œidœ:œOpenAIEmbeddings-i3hOtœ,œnameœ:œembeddingsœ,œoutput_typesœ:[œEmbeddingsœ]}-Chroma-94Qh7{œfieldNameœ:œembeddingœ,œidœ:œChroma-94Qh7œ,œinputTypesœ:[œEmbeddingsœ],œtypeœ:œotherœ}",
                      "selected": false
                    },
                    {
                      "source": "Chroma-94Qh7",
                      "sourceHandle": "{œdataTypeœ:œChromaœ,œidœ:œChroma-94Qh7œ,œnameœ:œsearch_resultsœ,œoutput_typesœ:[œDataœ]}",
                      "target": "ParseData-wVyYa",
                      "targetHandle": "{œfieldNameœ:œdataœ,œidœ:œParseData-wVyYaœ,œinputTypesœ:[œDataœ],œtypeœ:œotherœ}",
                      "data": {
                        "targetHandle": {
                          "fieldName": "data",
                          "id": "ParseData-wVyYa",
                          "inputTypes": [
                            "Data"
                          ],
                          "type": "other"
                        },
                        "sourceHandle": {
                          "dataType": "Chroma",
                          "id": "Chroma-94Qh7",
                          "name": "search_results",
                          "output_types": [
                            "Data"
                          ]
                        }
                      },
                      "id": "reactflow__edge-Chroma-94Qh7{œdataTypeœ:œChromaœ,œidœ:œChroma-94Qh7œ,œnameœ:œsearch_resultsœ,œoutput_typesœ:[œDataœ]}-ParseData-wVyYa{œfieldNameœ:œdataœ,œidœ:œParseData-wVyYaœ,œinputTypesœ:[œDataœ],œtypeœ:œotherœ}",
                      "selected": false
                    },
                    {
                      "source": "Prompt-UWd7v",
                      "sourceHandle": "{œdataTypeœ:œPromptœ,œidœ:œPrompt-UWd7vœ,œnameœ:œpromptœ,œoutput_typesœ:[œMessageœ]}",
                      "target": "Chroma-94Qh7",
                      "targetHandle": "{œfieldNameœ:œcollection_nameœ,œidœ:œChroma-94Qh7œ,œinputTypesœ:[œMessageœ],œtypeœ:œstrœ}",
                      "data": {
                        "targetHandle": {
                          "fieldName": "collection_name",
                          "id": "Chroma-94Qh7",
                          "inputTypes": [
                            "Message"
                          ],
                          "type": "str"
                        },
                        "sourceHandle": {
                          "dataType": "Prompt",
                          "id": "Prompt-UWd7v",
                          "name": "prompt",
                          "output_types": [
                            "Message"
                          ]
                        }
                      },
                      "id": "reactflow__edge-Prompt-UWd7v{œdataTypeœ:œPromptœ,œidœ:œPrompt-UWd7vœ,œnameœ:œpromptœ,œoutput_typesœ:[œMessageœ]}-Chroma-94Qh7{œfieldNameœ:œcollection_nameœ,œidœ:œChroma-94Qh7œ,œinputTypesœ:[œMessageœ],œtypeœ:œstrœ}",
                      "selected": false
                    }
                  ],
                  "viewport": {
                    "zoom": 1,
                    "x": 0,
                    "y": 0
                  }
                },
                "is_component": false,
                "name": "Friendly Volhard",
                "description": "",
                "id": "uaTXP"
              },
              "outputs": [
                {
                  "types": [
                    "Retriever"
                  ],
                  "selected": "Retriever",
                  "name": "Chroma-94Qh7_base_retriever",
                  "display_name": "Retriever",
                  "method": "build_base_retriever",
                  "value": "__UNDEFINED__",
                  "cache": true,
                  "required_inputs": [],
                  "proxy": {
                    "id": "Chroma-94Qh7",
                    "name": "base_retriever",
                    "nodeDisplayName": "Chroma DB"
                  }
                },
                {
                  "types": [
                    "VectorStore"
                  ],
                  "selected": "VectorStore",
                  "name": "Chroma-94Qh7_vector_store",
                  "display_name": "Vector Store",
                  "method": "cast_vector_store",
                  "value": "__UNDEFINED__",
                  "cache": true,
                  "required_inputs": [],
                  "proxy": {
                    "id": "Chroma-94Qh7",
                    "name": "vector_store",
                    "nodeDisplayName": "Chroma DB"
                  }
                },
                {
                  "types": [
                    "Message"
                  ],
                  "selected": "Message",
                  "name": "ParseData-wVyYa_text",
                  "display_name": "Text",
                  "method": "parse_data",
                  "value": "__UNDEFINED__",
                  "cache": true,
                  "proxy": {
                    "id": "ParseData-wVyYa",
                    "name": "text",
                    "nodeDisplayName": "Parse Data"
                  }
                }
              ],
              "lf_version": "1.0.19"
            }
          },
          "id": "groupComponent-ob9nl",
          "position": {
            "x": -2640.6571594471634,
            "y": -840.8756421302936
          },
          "type": "genericNode",
          "width": 384,
          "height": 455,
          "selected": false,
          "dragging": false
        },
        {
          "data": {
            "id": "groupComponent-fCN9N",
            "type": "GroupNode",
            "node": {
              "display_name": "WSM Data Retriever",
              "documentation": "",
              "description": "",
              "template": {
                "ingest_data_Chroma-3LJPk": {
                  "trace_as_metadata": true,
                  "list": true,
                  "trace_as_input": true,
                  "required": false,
                  "placeholder": "",
                  "show": true,
                  "name": "ingest_data",
                  "value": "",
                  "display_name": "Ingest Data",
                  "advanced": true,
                  "input_types": [
                    "Data"
                  ],
                  "dynamic": false,
                  "info": "",
                  "title_case": false,
                  "type": "other",
                  "_input_type": "DataInput",
                  "proxy": {
                    "id": "Chroma-3LJPk",
                    "field": "ingest_data"
                  }
                },
                "allow_duplicates_Chroma-3LJPk": {
                  "trace_as_metadata": true,
                  "list": false,
                  "required": false,
                  "placeholder": "",
                  "show": true,
                  "name": "allow_duplicates",
                  "value": false,
                  "display_name": "Allow Duplicates",
                  "advanced": true,
                  "dynamic": false,
                  "info": "If false, will not add documents that are already in the Vector Store.",
                  "title_case": false,
                  "type": "bool",
                  "_input_type": "BoolInput",
                  "proxy": {
                    "id": "Chroma-3LJPk",
                    "field": "allow_duplicates"
                  }
                },
                "chroma_server_cors_allow_origins_Chroma-3LJPk": {
                  "trace_as_metadata": true,
                  "load_from_db": false,
                  "list": false,
                  "required": false,
                  "placeholder": "",
                  "show": true,
                  "name": "chroma_server_cors_allow_origins",
                  "value": "",
                  "display_name": "Server CORS Allow Origins",
                  "advanced": true,
                  "dynamic": false,
                  "info": "",
                  "title_case": false,
                  "type": "str",
                  "_input_type": "StrInput",
                  "proxy": {
                    "id": "Chroma-3LJPk",
                    "field": "chroma_server_cors_allow_origins"
                  }
                },
                "chroma_server_grpc_port_Chroma-3LJPk": {
                  "trace_as_metadata": true,
                  "list": false,
                  "required": false,
                  "placeholder": "",
                  "show": true,
                  "name": "chroma_server_grpc_port",
                  "value": "",
                  "display_name": "Server gRPC Port",
                  "advanced": true,
                  "dynamic": false,
                  "info": "",
                  "title_case": false,
                  "type": "int",
                  "_input_type": "IntInput",
                  "proxy": {
                    "id": "Chroma-3LJPk",
                    "field": "chroma_server_grpc_port"
                  }
                },
                "chroma_server_host_Chroma-3LJPk": {
                  "trace_as_metadata": true,
                  "load_from_db": false,
                  "list": false,
                  "required": false,
                  "placeholder": "",
                  "show": true,
                  "name": "chroma_server_host",
                  "value": "",
                  "display_name": "Server Host",
                  "advanced": true,
                  "dynamic": false,
                  "info": "",
                  "title_case": false,
                  "type": "str",
                  "_input_type": "StrInput",
                  "proxy": {
                    "id": "Chroma-3LJPk",
                    "field": "chroma_server_host"
                  }
                },
                "chroma_server_http_port_Chroma-3LJPk": {
                  "trace_as_metadata": true,
                  "list": false,
                  "required": false,
                  "placeholder": "",
                  "show": true,
                  "name": "chroma_server_http_port",
                  "value": "",
                  "display_name": "Server HTTP Port",
                  "advanced": true,
                  "dynamic": false,
                  "info": "",
                  "title_case": false,
                  "type": "int",
                  "_input_type": "IntInput",
                  "proxy": {
                    "id": "Chroma-3LJPk",
                    "field": "chroma_server_http_port"
                  }
                },
                "chroma_server_ssl_enabled_Chroma-3LJPk": {
                  "trace_as_metadata": true,
                  "list": false,
                  "required": false,
                  "placeholder": "",
                  "show": true,
                  "name": "chroma_server_ssl_enabled",
                  "value": false,
                  "display_name": "Server SSL Enabled",
                  "advanced": true,
                  "dynamic": false,
                  "info": "",
                  "title_case": false,
                  "type": "bool",
                  "_input_type": "BoolInput",
                  "proxy": {
                    "id": "Chroma-3LJPk",
                    "field": "chroma_server_ssl_enabled"
                  }
                },
                "code_Chroma-3LJPk": {
                  "type": "code",
                  "required": true,
                  "placeholder": "",
                  "list": false,
                  "show": true,
                  "multiline": true,
                  "value": "from copy import deepcopy\nfrom typing import TYPE_CHECKING\n\nfrom chromadb.config import Settings\nfrom langchain_chroma.vectorstores import Chroma\nfrom loguru import logger\n\nfrom axiestudio.base.vectorstores.model import LCVectorStoreComponent, check_cached_vector_store\nfrom axiestudio.base.vectorstores.utils import chroma_collection_to_data\nfrom axiestudio.io import BoolInput, DataInput, DropdownInput, HandleInput, IntInput, StrInput, MultilineInput\nfrom axiestudio.schema import Data\n\nif TYPE_CHECKING:\n    from langchain_chroma import Chroma\n\n\nclass ChromaVectorStoreComponent(LCVectorStoreComponent):\n    \"\"\"\n    Chroma Vector Store with search capabilities\n    \"\"\"\n\n    display_name: str = \"Chroma DB\"\n    description: str = \"Chroma Vector Store with search capabilities\"\n    documentation = \"https://python.langchain.com/docs/integrations/vectorstores/chroma\"\n    name = \"Chroma\"\n    icon = \"Chroma\"\n\n    inputs = [\n        MessageTextInput(\n            name=\"collection_name\",\n            display_name=\"Collection Name\",\n        ),\n        StrInput(\n            name=\"persist_directory\",\n            display_name=\"Persist Directory\",\n        ),\n        MultilineInput(\n            name=\"search_query\",\n            display_name=\"Search Query\",\n        ),\n        DataInput(\n            name=\"ingest_data\",\n            display_name=\"Ingest Data\",\n            is_list=True,\n        ),\n        HandleInput(name=\"embedding\", display_name=\"Embedding\", input_types=[\"Embeddings\"]),\n        StrInput(\n            name=\"chroma_server_cors_allow_origins\",\n            display_name=\"Server CORS Allow Origins\",\n            advanced=True,\n        ),\n        StrInput(\n            name=\"chroma_server_host\",\n            display_name=\"Server Host\",\n            advanced=True,\n        ),\n        IntInput(\n            name=\"chroma_server_http_port\",\n            display_name=\"Server HTTP Port\",\n            advanced=True,\n        ),\n        IntInput(\n            name=\"chroma_server_grpc_port\",\n            display_name=\"Server gRPC Port\",\n            advanced=True,\n        ),\n        BoolInput(\n            name=\"chroma_server_ssl_enabled\",\n            display_name=\"Server SSL Enabled\",\n            advanced=True,\n        ),\n        BoolInput(\n            name=\"allow_duplicates\",\n            display_name=\"Allow Duplicates\",\n            advanced=True,\n            info=\"If false, will not add documents that are already in the Vector Store.\",\n        ),\n        DropdownInput(\n            name=\"search_type\",\n            display_name=\"Search Type\",\n            options=[\"Similarity\", \"MMR\"],\n            value=\"Similarity\",\n            advanced=True,\n        ),\n        IntInput(\n            name=\"number_of_results\",\n            display_name=\"Number of Results\",\n            info=\"Number of results to return.\",\n            advanced=True,\n            value=5,\n        ),\n        IntInput(\n            name=\"limit\",\n            display_name=\"Limit\",\n            advanced=True,\n            info=\"Limit the number of records to compare when Allow Duplicates is False.\",\n        ),\n    ]\n\n    @check_cached_vector_store\n    def build_vector_store(self) -> Chroma:\n        \"\"\"\n        Builds the Chroma object.\n        \"\"\"\n        try:\n            from chromadb import Client\n            from langchain_chroma import Chroma\n        except ImportError:\n            raise ImportError(\n                \"Could not import Chroma integration package. \" \"Please install it with `pip install langchain-chroma`.\"\n            )\n        # Chroma settings\n        chroma_settings = None\n        client = None\n        if self.chroma_server_host:\n            chroma_settings = Settings(\n                chroma_server_cors_allow_origins=self.chroma_server_cors_allow_origins or [],\n                chroma_server_host=self.chroma_server_host,\n                chroma_server_http_port=self.chroma_server_http_port or None,\n                chroma_server_grpc_port=self.chroma_server_grpc_port or None,\n                chroma_server_ssl_enabled=self.chroma_server_ssl_enabled,\n            )\n            client = Client(settings=chroma_settings)\n\n        # Check persist_directory and expand it if it is a relative path\n        if self.persist_directory is not None:\n            persist_directory = self.resolve_path(self.persist_directory)\n        else:\n            persist_directory = None\n\n        chroma = Chroma(\n            persist_directory=persist_directory,\n            client=client,\n            embedding_function=self.embedding,\n            collection_name=self.collection_name,\n        )\n\n        self._add_documents_to_vector_store(chroma)\n        self.status = chroma_collection_to_data(chroma.get(limit=self.limit))\n        return chroma\n\n    def _add_documents_to_vector_store(self, vector_store: \"Chroma\") -> None:\n        \"\"\"\n        Adds documents to the Vector Store.\n        \"\"\"\n        if not self.ingest_data:\n            self.status = \"\"\n            return\n\n        _stored_documents_without_id = []\n        if self.allow_duplicates:\n            stored_data = []\n        else:\n            stored_data = chroma_collection_to_data(vector_store.get(limit=self.limit))\n            for value in deepcopy(stored_data):\n                del value.id\n                _stored_documents_without_id.append(value)\n\n        documents = []\n        for _input in self.ingest_data or []:\n            if isinstance(_input, Data):\n                if _input not in _stored_documents_without_id:\n                    documents.append(_input.to_lc_document())\n            else:\n                raise ValueError(\"Vector Store Inputs must be Data objects.\")\n\n        if documents and self.embedding is not None:\n            logger.debug(f\"Adding {len(documents)} documents to the Vector Store.\")\n            vector_store.add_documents(documents)\n        else:\n            logger.debug(\"No documents to add to the Vector Store.\")",
                  "fileTypes": [],
                  "file_path": "",
                  "password": false,
                  "name": "code",
                  "advanced": true,
                  "dynamic": true,
                  "info": "",
                  "load_from_db": false,
                  "title_case": false,
                  "display_name": "code",
                  "proxy": {
                    "id": "Chroma-3LJPk",
                    "field": "code"
                  }
                },
                "limit_Chroma-3LJPk": {
                  "trace_as_metadata": true,
                  "list": false,
                  "required": false,
                  "placeholder": "",
                  "show": true,
                  "name": "limit",
                  "value": "",
                  "display_name": "Limit",
                  "advanced": true,
                  "dynamic": false,
                  "info": "Limit the number of records to compare when Allow Duplicates is False.",
                  "title_case": false,
                  "type": "int",
                  "_input_type": "IntInput",
                  "proxy": {
                    "id": "Chroma-3LJPk",
                    "field": "limit"
                  }
                },
                "number_of_results_Chroma-3LJPk": {
                  "trace_as_metadata": true,
                  "list": false,
                  "required": false,
                  "placeholder": "",
                  "show": true,
                  "name": "number_of_results",
                  "value": 5,
                  "display_name": "Number of Results",
                  "advanced": true,
                  "dynamic": false,
                  "info": "Number of results to return.",
                  "title_case": false,
                  "type": "int",
                  "_input_type": "IntInput",
                  "proxy": {
                    "id": "Chroma-3LJPk",
                    "field": "number_of_results"
                  }
                },
                "persist_directory_Chroma-3LJPk": {
                  "trace_as_metadata": true,
                  "load_from_db": false,
                  "list": false,
                  "required": false,
                  "placeholder": "",
                  "show": true,
                  "name": "persist_directory",
                  "value": "",
                  "display_name": "Persist Directory",
                  "advanced": true,
                  "dynamic": false,
                  "info": "",
                  "title_case": false,
                  "type": "str",
                  "_input_type": "StrInput",
                  "proxy": {
                    "id": "Chroma-3LJPk",
                    "field": "persist_directory"
                  }
                },
                "search_query_Chroma-3LJPk": {
                  "trace_as_input": true,
                  "multiline": true,
                  "trace_as_metadata": true,
                  "load_from_db": false,
                  "list": false,
                  "required": false,
                  "placeholder": "",
                  "show": true,
                  "name": "search_query",
                  "value": "",
                  "display_name": "Search Query",
                  "advanced": false,
                  "input_types": [
                    "Message"
                  ],
                  "dynamic": false,
                  "info": "",
                  "title_case": false,
                  "type": "str",
                  "_input_type": "MultilineInput",
                  "proxy": {
                    "id": "Chroma-3LJPk",
                    "field": "search_query"
                  }
                },
                "search_type_Chroma-3LJPk": {
                  "trace_as_metadata": true,
                  "options": [
                    "Similarity",
                    "MMR"
                  ],
                  "combobox": false,
                  "required": false,
                  "placeholder": "",
                  "show": true,
                  "name": "search_type",
                  "value": "Similarity",
                  "display_name": "Search Type",
                  "advanced": true,
                  "dynamic": false,
                  "info": "",
                  "title_case": false,
                  "type": "str",
                  "_input_type": "DropdownInput",
                  "proxy": {
                    "id": "Chroma-3LJPk",
                    "field": "search_type"
                  }
                },
                "chunk_size_OpenAIEmbeddings-UfXHC": {
                  "trace_as_metadata": true,
                  "list": false,
                  "required": false,
                  "placeholder": "",
                  "show": true,
                  "name": "chunk_size",
                  "value": 1000,
                  "display_name": "Chunk Size",
                  "advanced": true,
                  "dynamic": false,
                  "info": "",
                  "title_case": false,
                  "type": "int",
                  "_input_type": "IntInput",
                  "proxy": {
                    "id": "OpenAIEmbeddings-UfXHC",
                    "field": "chunk_size"
                  }
                },
                "client_OpenAIEmbeddings-UfXHC": {
                  "trace_as_input": true,
                  "trace_as_metadata": true,
                  "load_from_db": false,
                  "list": false,
                  "required": false,
                  "placeholder": "",
                  "show": true,
                  "name": "client",
                  "value": "",
                  "display_name": "Client",
                  "advanced": true,
                  "input_types": [
                    "Message"
                  ],
                  "dynamic": false,
                  "info": "",
                  "title_case": false,
                  "type": "str",
                  "_input_type": "MessageTextInput",
                  "proxy": {
                    "id": "OpenAIEmbeddings-UfXHC",
                    "field": "client"
                  }
                },
                "code_OpenAIEmbeddings-UfXHC": {
                  "type": "code",
                  "required": true,
                  "placeholder": "",
                  "list": false,
                  "show": true,
                  "multiline": true,
                  "value": "from langchain_openai.embeddings.base import OpenAIEmbeddings\n\nfrom axiestudio.base.embeddings.model import LCEmbeddingsModel\nfrom axiestudio.base.models.openai_constants import OPENAI_EMBEDDING_MODEL_NAMES\nfrom axiestudio.field_typing import Embeddings\nfrom axiestudio.io import BoolInput, DictInput, DropdownInput, FloatInput, IntInput, MessageTextInput, SecretStrInput\n\n\nclass OpenAIEmbeddingsComponent(LCEmbeddingsModel):\n    display_name = \"OpenAI Embeddings\"\n    description = \"Generate embeddings using OpenAI models.\"\n    icon = \"OpenAI\"\n    name = \"OpenAIEmbeddings\"\n\n    inputs = [\n        DictInput(\n            name=\"default_headers\",\n            display_name=\"Default Headers\",\n            advanced=True,\n            info=\"Default headers to use for the API request.\",\n        ),\n        DictInput(\n            name=\"default_query\",\n            display_name=\"Default Query\",\n            advanced=True,\n            info=\"Default query parameters to use for the API request.\",\n        ),\n        IntInput(name=\"chunk_size\", display_name=\"Chunk Size\", advanced=True, value=1000),\n        MessageTextInput(name=\"client\", display_name=\"Client\", advanced=True),\n        MessageTextInput(name=\"deployment\", display_name=\"Deployment\", advanced=True),\n        IntInput(name=\"embedding_ctx_length\", display_name=\"Embedding Context Length\", advanced=True, value=1536),\n        IntInput(name=\"max_retries\", display_name=\"Max Retries\", value=3, advanced=True),\n        DropdownInput(\n            name=\"model\",\n            display_name=\"Model\",\n            advanced=False,\n            options=OPENAI_EMBEDDING_MODEL_NAMES,\n            value=\"text-embedding-3-small\",\n        ),\n        DictInput(name=\"model_kwargs\", display_name=\"Model Kwargs\", advanced=True),\n        SecretStrInput(name=\"openai_api_base\", display_name=\"OpenAI API Base\", advanced=True),\n        SecretStrInput(name=\"openai_api_key\", display_name=\"OpenAI API Key\", value=\"OPENAI_API_KEY\"),\n        SecretStrInput(name=\"openai_api_type\", display_name=\"OpenAI API Type\", advanced=True),\n        MessageTextInput(name=\"openai_api_version\", display_name=\"OpenAI API Version\", advanced=True),\n        MessageTextInput(\n            name=\"openai_organization\",\n            display_name=\"OpenAI Organization\",\n            advanced=True,\n        ),\n        MessageTextInput(name=\"openai_proxy\", display_name=\"OpenAI Proxy\", advanced=True),\n        FloatInput(name=\"request_timeout\", display_name=\"Request Timeout\", advanced=True),\n        BoolInput(name=\"show_progress_bar\", display_name=\"Show Progress Bar\", advanced=True),\n        BoolInput(name=\"skip_empty\", display_name=\"Skip Empty\", advanced=True),\n        MessageTextInput(\n            name=\"tiktoken_model_name\",\n            display_name=\"TikToken Model Name\",\n            advanced=True,\n        ),\n        BoolInput(\n            name=\"tiktoken_enable\",\n            display_name=\"TikToken Enable\",\n            advanced=True,\n            value=True,\n            info=\"If False, you must have transformers installed.\",\n        ),\n        IntInput(\n            name=\"dimensions\",\n            display_name=\"Dimensions\",\n            info=\"The number of dimensions the resulting output embeddings should have. \"\n            \"Only supported by certain models.\",\n            advanced=True,\n        ),\n    ]\n\n    def build_embeddings(self) -> Embeddings:\n        return OpenAIEmbeddings(\n            tiktoken_enabled=self.tiktoken_enable,\n            default_headers=self.default_headers,\n            default_query=self.default_query,\n            allowed_special=\"all\",\n            disallowed_special=\"all\",\n            chunk_size=self.chunk_size,\n            deployment=self.deployment,\n            embedding_ctx_length=self.embedding_ctx_length,\n            max_retries=self.max_retries,\n            model=self.model,\n            model_kwargs=self.model_kwargs,\n            base_url=self.openai_api_base,\n            api_key=self.openai_api_key,\n            openai_api_type=self.openai_api_type,\n            api_version=self.openai_api_version,\n            organization=self.openai_organization,\n            openai_proxy=self.openai_proxy,\n            timeout=self.request_timeout or None,\n            show_progress_bar=self.show_progress_bar,\n            skip_empty=self.skip_empty,\n            tiktoken_model_name=self.tiktoken_model_name,\n            dimensions=self.dimensions or None,\n        )\n",
                  "fileTypes": [],
                  "file_path": "",
                  "password": false,
                  "name": "code",
                  "advanced": true,
                  "dynamic": true,
                  "info": "",
                  "load_from_db": false,
                  "title_case": false,
                  "display_name": "code",
                  "proxy": {
                    "id": "OpenAIEmbeddings-UfXHC",
                    "field": "code"
                  }
                },
                "default_headers_OpenAIEmbeddings-UfXHC": {
                  "trace_as_input": true,
                  "list": false,
                  "required": false,
                  "placeholder": "",
                  "show": true,
                  "name": "default_headers",
                  "value": {},
                  "display_name": "Default Headers",
                  "advanced": true,
                  "dynamic": false,
                  "info": "Default headers to use for the API request.",
                  "title_case": false,
                  "type": "dict",
                  "_input_type": "DictInput",
                  "proxy": {
                    "id": "OpenAIEmbeddings-UfXHC",
                    "field": "default_headers"
                  }
                },
                "default_query_OpenAIEmbeddings-UfXHC": {
                  "trace_as_input": true,
                  "list": false,
                  "required": false,
                  "placeholder": "",
                  "show": true,
                  "name": "default_query",
                  "value": {},
                  "display_name": "Default Query",
                  "advanced": true,
                  "dynamic": false,
                  "info": "Default query parameters to use for the API request.",
                  "title_case": false,
                  "type": "dict",
                  "_input_type": "DictInput",
                  "proxy": {
                    "id": "OpenAIEmbeddings-UfXHC",
                    "field": "default_query"
                  }
                },
                "deployment_OpenAIEmbeddings-UfXHC": {
                  "trace_as_input": true,
                  "trace_as_metadata": true,
                  "load_from_db": false,
                  "list": false,
                  "required": false,
                  "placeholder": "",
                  "show": true,
                  "name": "deployment",
                  "value": "",
                  "display_name": "Deployment",
                  "advanced": true,
                  "input_types": [
                    "Message"
                  ],
                  "dynamic": false,
                  "info": "",
                  "title_case": false,
                  "type": "str",
                  "_input_type": "MessageTextInput",
                  "proxy": {
                    "id": "OpenAIEmbeddings-UfXHC",
                    "field": "deployment"
                  }
                },
                "dimensions_OpenAIEmbeddings-UfXHC": {
                  "trace_as_metadata": true,
                  "list": false,
                  "required": false,
                  "placeholder": "",
                  "show": true,
                  "name": "dimensions",
                  "value": "",
                  "display_name": "Dimensions",
                  "advanced": true,
                  "dynamic": false,
                  "info": "The number of dimensions the resulting output embeddings should have. Only supported by certain models.",
                  "title_case": false,
                  "type": "int",
                  "_input_type": "IntInput",
                  "proxy": {
                    "id": "OpenAIEmbeddings-UfXHC",
                    "field": "dimensions"
                  }
                },
                "embedding_ctx_length_OpenAIEmbeddings-UfXHC": {
                  "trace_as_metadata": true,
                  "list": false,
                  "required": false,
                  "placeholder": "",
                  "show": true,
                  "name": "embedding_ctx_length",
                  "value": 1536,
                  "display_name": "Embedding Context Length",
                  "advanced": true,
                  "dynamic": false,
                  "info": "",
                  "title_case": false,
                  "type": "int",
                  "_input_type": "IntInput",
                  "proxy": {
                    "id": "OpenAIEmbeddings-UfXHC",
                    "field": "embedding_ctx_length"
                  }
                },
                "max_retries_OpenAIEmbeddings-UfXHC": {
                  "trace_as_metadata": true,
                  "list": false,
                  "required": false,
                  "placeholder": "",
                  "show": true,
                  "name": "max_retries",
                  "value": 3,
                  "display_name": "Max Retries",
                  "advanced": true,
                  "dynamic": false,
                  "info": "",
                  "title_case": false,
                  "type": "int",
                  "_input_type": "IntInput",
                  "proxy": {
                    "id": "OpenAIEmbeddings-UfXHC",
                    "field": "max_retries"
                  }
                },
                "model_OpenAIEmbeddings-UfXHC": {
                  "trace_as_metadata": true,
                  "options": [
                    "text-embedding-3-small",
                    "text-embedding-3-large",
                    "text-embedding-ada-002"
                  ],
                  "combobox": false,
                  "required": false,
                  "placeholder": "",
                  "show": true,
                  "name": "model",
                  "value": "text-embedding-3-small",
                  "display_name": "Model",
                  "advanced": true,
                  "dynamic": false,
                  "info": "",
                  "title_case": false,
                  "type": "str",
                  "_input_type": "DropdownInput",
                  "proxy": {
                    "id": "OpenAIEmbeddings-UfXHC",
                    "field": "model"
                  }
                },
                "model_kwargs_OpenAIEmbeddings-UfXHC": {
                  "trace_as_input": true,
                  "list": false,
                  "required": false,
                  "placeholder": "",
                  "show": true,
                  "name": "model_kwargs",
                  "value": {},
                  "display_name": "Model Kwargs",
                  "advanced": true,
                  "dynamic": false,
                  "info": "",
                  "title_case": false,
                  "type": "dict",
                  "_input_type": "DictInput",
                  "proxy": {
                    "id": "OpenAIEmbeddings-UfXHC",
                    "field": "model_kwargs"
                  }
                },
                "openai_api_base_OpenAIEmbeddings-UfXHC": {
                  "load_from_db": false,
                  "required": false,
                  "placeholder": "",
                  "show": true,
                  "name": "openai_api_base",
                  "value": "",
                  "display_name": "OpenAI API Base",
                  "advanced": true,
                  "input_types": [
                    "Message"
                  ],
                  "dynamic": false,
                  "info": "",
                  "title_case": false,
                  "password": true,
                  "type": "str",
                  "_input_type": "SecretStrInput",
                  "proxy": {
                    "id": "OpenAIEmbeddings-UfXHC",
                    "field": "openai_api_base"
                  }
                },
                "openai_api_key_OpenAIEmbeddings-UfXHC": {
                  "load_from_db": true,
                  "required": false,
                  "placeholder": "",
                  "show": true,
                  "name": "openai_api_key",
                  "value": "",
                  "display_name": "OpenAI API Key",
                  "advanced": true,
                  "input_types": [
                    "Message"
                  ],
                  "dynamic": false,
                  "info": "",
                  "title_case": false,
                  "password": true,
                  "type": "str",
                  "_input_type": "SecretStrInput",
                  "proxy": {
                    "id": "OpenAIEmbeddings-UfXHC",
                    "field": "openai_api_key"
                  }
                },
                "openai_api_type_OpenAIEmbeddings-UfXHC": {
                  "load_from_db": false,
                  "required": false,
                  "placeholder": "",
                  "show": true,
                  "name": "openai_api_type",
                  "value": "",
                  "display_name": "OpenAI API Type",
                  "advanced": true,
                  "input_types": [
                    "Message"
                  ],
                  "dynamic": false,
                  "info": "",
                  "title_case": false,
                  "password": true,
                  "type": "str",
                  "_input_type": "SecretStrInput",
                  "proxy": {
                    "id": "OpenAIEmbeddings-UfXHC",
                    "field": "openai_api_type"
                  }
                },
                "openai_api_version_OpenAIEmbeddings-UfXHC": {
                  "trace_as_input": true,
                  "trace_as_metadata": true,
                  "load_from_db": false,
                  "list": false,
                  "required": false,
                  "placeholder": "",
                  "show": true,
                  "name": "openai_api_version",
                  "value": "",
                  "display_name": "OpenAI API Version",
                  "advanced": true,
                  "input_types": [
                    "Message"
                  ],
                  "dynamic": false,
                  "info": "",
                  "title_case": false,
                  "type": "str",
                  "_input_type": "MessageTextInput",
                  "proxy": {
                    "id": "OpenAIEmbeddings-UfXHC",
                    "field": "openai_api_version"
                  }
                },
                "openai_organization_OpenAIEmbeddings-UfXHC": {
                  "trace_as_input": true,
                  "trace_as_metadata": true,
                  "load_from_db": false,
                  "list": false,
                  "required": false,
                  "placeholder": "",
                  "show": true,
                  "name": "openai_organization",
                  "value": "",
                  "display_name": "OpenAI Organization",
                  "advanced": true,
                  "input_types": [
                    "Message"
                  ],
                  "dynamic": false,
                  "info": "",
                  "title_case": false,
                  "type": "str",
                  "_input_type": "MessageTextInput",
                  "proxy": {
                    "id": "OpenAIEmbeddings-UfXHC",
                    "field": "openai_organization"
                  }
                },
                "openai_proxy_OpenAIEmbeddings-UfXHC": {
                  "trace_as_input": true,
                  "trace_as_metadata": true,
                  "load_from_db": false,
                  "list": false,
                  "required": false,
                  "placeholder": "",
                  "show": true,
                  "name": "openai_proxy",
                  "value": "",
                  "display_name": "OpenAI Proxy",
                  "advanced": true,
                  "input_types": [
                    "Message"
                  ],
                  "dynamic": false,
                  "info": "",
                  "title_case": false,
                  "type": "str",
                  "_input_type": "MessageTextInput",
                  "proxy": {
                    "id": "OpenAIEmbeddings-UfXHC",
                    "field": "openai_proxy"
                  }
                },
                "request_timeout_OpenAIEmbeddings-UfXHC": {
                  "trace_as_metadata": true,
                  "list": false,
                  "required": false,
                  "placeholder": "",
                  "show": true,
                  "name": "request_timeout",
                  "value": "",
                  "display_name": "Request Timeout",
                  "advanced": true,
                  "dynamic": false,
                  "info": "",
                  "title_case": false,
                  "type": "float",
                  "_input_type": "FloatInput",
                  "proxy": {
                    "id": "OpenAIEmbeddings-UfXHC",
                    "field": "request_timeout"
                  }
                },
                "show_progress_bar_OpenAIEmbeddings-UfXHC": {
                  "trace_as_metadata": true,
                  "list": false,
                  "required": false,
                  "placeholder": "",
                  "show": true,
                  "name": "show_progress_bar",
                  "value": false,
                  "display_name": "Show Progress Bar",
                  "advanced": true,
                  "dynamic": false,
                  "info": "",
                  "title_case": false,
                  "type": "bool",
                  "_input_type": "BoolInput",
                  "proxy": {
                    "id": "OpenAIEmbeddings-UfXHC",
                    "field": "show_progress_bar"
                  }
                },
                "skip_empty_OpenAIEmbeddings-UfXHC": {
                  "trace_as_metadata": true,
                  "list": false,
                  "required": false,
                  "placeholder": "",
                  "show": true,
                  "name": "skip_empty",
                  "value": false,
                  "display_name": "Skip Empty",
                  "advanced": true,
                  "dynamic": false,
                  "info": "",
                  "title_case": false,
                  "type": "bool",
                  "_input_type": "BoolInput",
                  "proxy": {
                    "id": "OpenAIEmbeddings-UfXHC",
                    "field": "skip_empty"
                  }
                },
                "tiktoken_enable_OpenAIEmbeddings-UfXHC": {
                  "trace_as_metadata": true,
                  "list": false,
                  "required": false,
                  "placeholder": "",
                  "show": true,
                  "name": "tiktoken_enable",
                  "value": true,
                  "display_name": "TikToken Enable",
                  "advanced": true,
                  "dynamic": false,
                  "info": "If False, you must have transformers installed.",
                  "title_case": false,
                  "type": "bool",
                  "_input_type": "BoolInput",
                  "proxy": {
                    "id": "OpenAIEmbeddings-UfXHC",
                    "field": "tiktoken_enable"
                  }
                },
                "tiktoken_model_name_OpenAIEmbeddings-UfXHC": {
                  "trace_as_input": true,
                  "trace_as_metadata": true,
                  "load_from_db": false,
                  "list": false,
                  "required": false,
                  "placeholder": "",
                  "show": true,
                  "name": "tiktoken_model_name",
                  "value": "",
                  "display_name": "TikToken Model Name",
                  "advanced": true,
                  "input_types": [
                    "Message"
                  ],
                  "dynamic": false,
                  "info": "",
                  "title_case": false,
                  "type": "str",
                  "_input_type": "MessageTextInput",
                  "proxy": {
                    "id": "OpenAIEmbeddings-UfXHC",
                    "field": "tiktoken_model_name"
                  }
                },
                "code_ParseData-kl9yv": {
                  "type": "code",
                  "required": true,
                  "placeholder": "",
                  "list": false,
                  "show": true,
                  "multiline": true,
                  "value": "from axiestudio.custom import Component\nfrom axiestudio.helpers.data import data_to_text\nfrom axiestudio.io import DataInput, MultilineInput, Output, StrInput\nfrom axiestudio.schema.message import Message\n\n\nclass ParseDataComponent(Component):\n    display_name = \"Parse Data\"\n    description = \"Convert Data into plain text following a specified template.\"\n    icon = \"braces\"\n    name = \"ParseData\"\n\n    inputs = [\n        DataInput(name=\"data\", display_name=\"Data\", info=\"The data to convert to text.\"),\n        MultilineInput(\n            name=\"template\",\n            display_name=\"Template\",\n            info=\"The template to use for formatting the data. \"\n            \"It can contain the keys {text}, {data} or any other key in the Data.\",\n            value=\"{text}\",\n        ),\n        StrInput(name=\"sep\", display_name=\"Separator\", advanced=True, value=\"\\n\"),\n    ]\n\n    outputs = [\n        Output(display_name=\"Text\", name=\"text\", method=\"parse_data\"),\n    ]\n\n    def parse_data(self) -> Message:\n        data = self.data if isinstance(self.data, list) else [self.data]\n        template = self.template\n\n        result_string = data_to_text(template, data, sep=self.sep)\n        self.status = result_string\n        return Message(text=result_string)\n",
                  "fileTypes": [],
                  "file_path": "",
                  "password": false,
                  "name": "code",
                  "advanced": true,
                  "dynamic": true,
                  "info": "",
                  "load_from_db": false,
                  "title_case": false,
                  "display_name": "code",
                  "proxy": {
                    "id": "ParseData-kl9yv",
                    "field": "code"
                  }
                },
                "sep_ParseData-kl9yv": {
                  "trace_as_metadata": true,
                  "load_from_db": false,
                  "list": false,
                  "required": false,
                  "placeholder": "",
                  "show": true,
                  "name": "sep",
                  "value": "\n",
                  "display_name": "Separator",
                  "advanced": true,
                  "dynamic": false,
                  "info": "",
                  "title_case": false,
                  "type": "str",
                  "_input_type": "StrInput",
                  "proxy": {
                    "id": "ParseData-kl9yv",
                    "field": "sep"
                  }
                },
                "template_ParseData-kl9yv": {
                  "trace_as_input": true,
                  "multiline": true,
                  "trace_as_metadata": true,
                  "load_from_db": false,
                  "list": false,
                  "required": false,
                  "placeholder": "",
                  "show": true,
                  "name": "template",
                  "value": "<workshop_manual_chunk>\n{text}\n</workshop_manual_chunk>",
                  "display_name": "Template",
                  "advanced": true,
                  "input_types": [
                    "Message"
                  ],
                  "dynamic": false,
                  "info": "The template to use for formatting the data. It can contain the keys {text}, {data} or any other key in the Data.",
                  "title_case": false,
                  "type": "str",
                  "_input_type": "MultilineInput",
                  "proxy": {
                    "id": "ParseData-kl9yv",
                    "field": "template"
                  }
                },
                "code_Prompt-uvWe5": {
                  "type": "code",
                  "required": true,
                  "placeholder": "",
                  "list": false,
                  "show": true,
                  "multiline": true,
                  "value": "from axiestudio.base.prompts.api_utils import process_prompt_template\nfrom axiestudio.custom import Component\nfrom axiestudio.inputs.inputs import DefaultPromptField\nfrom axiestudio.io import Output, PromptInput\nfrom axiestudio.schema.message import Message\nfrom axiestudio.template.utils import update_template_values\n\n\nclass PromptComponent(Component):\n    display_name: str = \"Prompt\"\n    description: str = \"Create a prompt template with dynamic variables.\"\n    icon = \"prompts\"\n    trace_type = \"prompt\"\n    name = \"Prompt\"\n\n    inputs = [\n        PromptInput(name=\"template\", display_name=\"Template\"),\n    ]\n\n    outputs = [\n        Output(display_name=\"Prompt Message\", name=\"prompt\", method=\"build_prompt\"),\n    ]\n\n    async def build_prompt(\n        self,\n    ) -> Message:\n        prompt = await Message.from_template_and_variables(**self._attributes)\n        self.status = prompt.text\n        return prompt\n\n    def _update_template(self, frontend_node: dict):\n        prompt_template = frontend_node[\"template\"][\"template\"][\"value\"]\n        custom_fields = frontend_node[\"custom_fields\"]\n        frontend_node_template = frontend_node[\"template\"]\n        _ = process_prompt_template(\n            template=prompt_template,\n            name=\"template\",\n            custom_fields=custom_fields,\n            frontend_node_template=frontend_node_template,\n        )\n        return frontend_node\n\n    def post_code_processing(self, new_frontend_node: dict, current_frontend_node: dict):\n        \"\"\"\n        This function is called after the code validation is done.\n        \"\"\"\n        frontend_node = super().post_code_processing(new_frontend_node, current_frontend_node)\n        template = frontend_node[\"template\"][\"template\"][\"value\"]\n        # Kept it duplicated for backwards compatibility\n        _ = process_prompt_template(\n            template=template,\n            name=\"template\",\n            custom_fields=frontend_node[\"custom_fields\"],\n            frontend_node_template=frontend_node[\"template\"],\n        )\n        # Now that template is updated, we need to grab any values that were set in the current_frontend_node\n        # and update the frontend_node with those values\n        update_template_values(new_template=frontend_node, previous_template=current_frontend_node[\"template\"])\n        return frontend_node\n\n    def _get_fallback_input(self, **kwargs):\n        return DefaultPromptField(**kwargs)\n",
                  "fileTypes": [],
                  "file_path": "",
                  "password": false,
                  "name": "code",
                  "advanced": true,
                  "dynamic": true,
                  "info": "",
                  "load_from_db": false,
                  "title_case": false,
                  "display_name": "code",
                  "proxy": {
                    "id": "Prompt-uvWe5",
                    "field": "code"
                  }
                },
                "template_Prompt-uvWe5": {
                  "trace_as_input": true,
                  "list": false,
                  "required": false,
                  "placeholder": "",
                  "show": true,
                  "name": "template",
                  "value": "{TMC}",
                  "display_name": "Template",
                  "advanced": true,
                  "dynamic": false,
                  "info": "",
                  "title_case": false,
                  "type": "prompt",
                  "_input_type": "PromptInput",
                  "proxy": {
                    "id": "Prompt-uvWe5",
                    "field": "template"
                  }
                },
                "TMC_Prompt-uvWe5": {
                  "field_type": "str",
                  "required": false,
                  "placeholder": "",
                  "list": false,
                  "show": true,
                  "multiline": true,
                  "value": "",
                  "fileTypes": [],
                  "file_path": "",
                  "name": "TMC",
                  "display_name": "TMC",
                  "advanced": false,
                  "input_types": [
                    "Message",
                    "Text"
                  ],
                  "dynamic": false,
                  "info": "",
                  "load_from_db": false,
                  "title_case": false,
                  "type": "str",
                  "proxy": {
                    "id": "Prompt-uvWe5",
                    "field": "TMC"
                  }
                }
              },
              "flow": {
                "data": {
                  "nodes": [
                    {
                      "id": "Chroma-3LJPk",
                      "type": "genericNode",
                      "position": {
                        "x": -2141.44988672774,
                        "y": -940.3844078990951
                      },
                      "data": {
                        "type": "Chroma",
                        "node": {
                          "template": {
                            "_type": "Component",
                            "embedding": {
                              "trace_as_metadata": true,
                              "list": false,
                              "required": false,
                              "placeholder": "",
                              "show": true,
                              "name": "embedding",
                              "value": "",
                              "display_name": "Embedding",
                              "advanced": false,
                              "input_types": [
                                "Embeddings"
                              ],
                              "dynamic": false,
                              "info": "",
                              "title_case": false,
                              "type": "other",
                              "_input_type": "HandleInput"
                            },
                            "ingest_data": {
                              "trace_as_metadata": true,
                              "list": true,
                              "trace_as_input": true,
                              "required": false,
                              "placeholder": "",
                              "show": true,
                              "name": "ingest_data",
                              "value": "",
                              "display_name": "Ingest Data",
                              "advanced": false,
                              "input_types": [
                                "Data"
                              ],
                              "dynamic": false,
                              "info": "",
                              "title_case": false,
                              "type": "other",
                              "_input_type": "DataInput"
                            },
                            "allow_duplicates": {
                              "trace_as_metadata": true,
                              "list": false,
                              "required": false,
                              "placeholder": "",
                              "show": true,
                              "name": "allow_duplicates",
                              "value": false,
                              "display_name": "Allow Duplicates",
                              "advanced": true,
                              "dynamic": false,
                              "info": "If false, will not add documents that are already in the Vector Store.",
                              "title_case": false,
                              "type": "bool",
                              "_input_type": "BoolInput"
                            },
                            "chroma_server_cors_allow_origins": {
                              "trace_as_metadata": true,
                              "load_from_db": false,
                              "list": false,
                              "required": false,
                              "placeholder": "",
                              "show": true,
                              "name": "chroma_server_cors_allow_origins",
                              "value": "",
                              "display_name": "Server CORS Allow Origins",
                              "advanced": true,
                              "dynamic": false,
                              "info": "",
                              "title_case": false,
                              "type": "str",
                              "_input_type": "StrInput"
                            },
                            "chroma_server_grpc_port": {
                              "trace_as_metadata": true,
                              "list": false,
                              "required": false,
                              "placeholder": "",
                              "show": true,
                              "name": "chroma_server_grpc_port",
                              "value": "",
                              "display_name": "Server gRPC Port",
                              "advanced": true,
                              "dynamic": false,
                              "info": "",
                              "title_case": false,
                              "type": "int",
                              "_input_type": "IntInput"
                            },
                            "chroma_server_host": {
                              "trace_as_metadata": true,
                              "load_from_db": false,
                              "list": false,
                              "required": false,
                              "placeholder": "",
                              "show": true,
                              "name": "chroma_server_host",
                              "value": "",
                              "display_name": "Server Host",
                              "advanced": true,
                              "dynamic": false,
                              "info": "",
                              "title_case": false,
                              "type": "str",
                              "_input_type": "StrInput"
                            },
                            "chroma_server_http_port": {
                              "trace_as_metadata": true,
                              "list": false,
                              "required": false,
                              "placeholder": "",
                              "show": true,
                              "name": "chroma_server_http_port",
                              "value": "",
                              "display_name": "Server HTTP Port",
                              "advanced": true,
                              "dynamic": false,
                              "info": "",
                              "title_case": false,
                              "type": "int",
                              "_input_type": "IntInput"
                            },
                            "chroma_server_ssl_enabled": {
                              "trace_as_metadata": true,
                              "list": false,
                              "required": false,
                              "placeholder": "",
                              "show": true,
                              "name": "chroma_server_ssl_enabled",
                              "value": false,
                              "display_name": "Server SSL Enabled",
                              "advanced": true,
                              "dynamic": false,
                              "info": "",
                              "title_case": false,
                              "type": "bool",
                              "_input_type": "BoolInput"
                            },
                            "code": {
                              "type": "code",
                              "required": true,
                              "placeholder": "",
                              "list": false,
                              "show": true,
                              "multiline": true,
                              "value": "from copy import deepcopy\nfrom typing import TYPE_CHECKING\n\nfrom chromadb.config import Settings\nfrom langchain_chroma.vectorstores import Chroma\nfrom loguru import logger\n\nfrom axiestudio.base.vectorstores.model import LCVectorStoreComponent, check_cached_vector_store\nfrom axiestudio.base.vectorstores.utils import chroma_collection_to_data\nfrom axiestudio.io import BoolInput, DataInput, DropdownInput, HandleInput, IntInput, StrInput, MultilineInput\nfrom axiestudio.schema import Data\n\nif TYPE_CHECKING:\n    from langchain_chroma import Chroma\n\n\nclass ChromaVectorStoreComponent(LCVectorStoreComponent):\n    \"\"\"\n    Chroma Vector Store with search capabilities\n    \"\"\"\n\n    display_name: str = \"Chroma DB\"\n    description: str = \"Chroma Vector Store with search capabilities\"\n    documentation = \"https://python.langchain.com/docs/integrations/vectorstores/chroma\"\n    name = \"Chroma\"\n    icon = \"Chroma\"\n\n    inputs = [\n        MessageTextInput(\n            name=\"collection_name\",\n            display_name=\"Collection Name\",\n        ),\n        StrInput(\n            name=\"persist_directory\",\n            display_name=\"Persist Directory\",\n        ),\n        MultilineInput(\n            name=\"search_query\",\n            display_name=\"Search Query\",\n        ),\n        DataInput(\n            name=\"ingest_data\",\n            display_name=\"Ingest Data\",\n            is_list=True,\n        ),\n        HandleInput(name=\"embedding\", display_name=\"Embedding\", input_types=[\"Embeddings\"]),\n        StrInput(\n            name=\"chroma_server_cors_allow_origins\",\n            display_name=\"Server CORS Allow Origins\",\n            advanced=True,\n        ),\n        StrInput(\n            name=\"chroma_server_host\",\n            display_name=\"Server Host\",\n            advanced=True,\n        ),\n        IntInput(\n            name=\"chroma_server_http_port\",\n            display_name=\"Server HTTP Port\",\n            advanced=True,\n        ),\n        IntInput(\n            name=\"chroma_server_grpc_port\",\n            display_name=\"Server gRPC Port\",\n            advanced=True,\n        ),\n        BoolInput(\n            name=\"chroma_server_ssl_enabled\",\n            display_name=\"Server SSL Enabled\",\n            advanced=True,\n        ),\n        BoolInput(\n            name=\"allow_duplicates\",\n            display_name=\"Allow Duplicates\",\n            advanced=True,\n            info=\"If false, will not add documents that are already in the Vector Store.\",\n        ),\n        DropdownInput(\n            name=\"search_type\",\n            display_name=\"Search Type\",\n            options=[\"Similarity\", \"MMR\"],\n            value=\"Similarity\",\n            advanced=True,\n        ),\n        IntInput(\n            name=\"number_of_results\",\n            display_name=\"Number of Results\",\n            info=\"Number of results to return.\",\n            advanced=True,\n            value=5,\n        ),\n        IntInput(\n            name=\"limit\",\n            display_name=\"Limit\",\n            advanced=True,\n            info=\"Limit the number of records to compare when Allow Duplicates is False.\",\n        ),\n    ]\n\n    @check_cached_vector_store\n    def build_vector_store(self) -> Chroma:\n        \"\"\"\n        Builds the Chroma object.\n        \"\"\"\n        try:\n            from chromadb import Client\n            from langchain_chroma import Chroma\n        except ImportError:\n            raise ImportError(\n                \"Could not import Chroma integration package. \" \"Please install it with `pip install langchain-chroma`.\"\n            )\n        # Chroma settings\n        chroma_settings = None\n        client = None\n        if self.chroma_server_host:\n            chroma_settings = Settings(\n                chroma_server_cors_allow_origins=self.chroma_server_cors_allow_origins or [],\n                chroma_server_host=self.chroma_server_host,\n                chroma_server_http_port=self.chroma_server_http_port or None,\n                chroma_server_grpc_port=self.chroma_server_grpc_port or None,\n                chroma_server_ssl_enabled=self.chroma_server_ssl_enabled,\n            )\n            client = Client(settings=chroma_settings)\n\n        # Check persist_directory and expand it if it is a relative path\n        if self.persist_directory is not None:\n            persist_directory = self.resolve_path(self.persist_directory)\n        else:\n            persist_directory = None\n\n        chroma = Chroma(\n            persist_directory=persist_directory,\n            client=client,\n            embedding_function=self.embedding,\n            collection_name=self.collection_name,\n        )\n\n        self._add_documents_to_vector_store(chroma)\n        self.status = chroma_collection_to_data(chroma.get(limit=self.limit))\n        return chroma\n\n    def _add_documents_to_vector_store(self, vector_store: \"Chroma\") -> None:\n        \"\"\"\n        Adds documents to the Vector Store.\n        \"\"\"\n        if not self.ingest_data:\n            self.status = \"\"\n            return\n\n        _stored_documents_without_id = []\n        if self.allow_duplicates:\n            stored_data = []\n        else:\n            stored_data = chroma_collection_to_data(vector_store.get(limit=self.limit))\n            for value in deepcopy(stored_data):\n                del value.id\n                _stored_documents_without_id.append(value)\n\n        documents = []\n        for _input in self.ingest_data or []:\n            if isinstance(_input, Data):\n                if _input not in _stored_documents_without_id:\n                    documents.append(_input.to_lc_document())\n            else:\n                raise ValueError(\"Vector Store Inputs must be Data objects.\")\n\n        if documents and self.embedding is not None:\n            logger.debug(f\"Adding {len(documents)} documents to the Vector Store.\")\n            vector_store.add_documents(documents)\n        else:\n            logger.debug(\"No documents to add to the Vector Store.\")",
                              "fileTypes": [],
                              "file_path": "",
                              "password": false,
                              "name": "code",
                              "advanced": true,
                              "dynamic": true,
                              "info": "",
                              "load_from_db": false,
                              "title_case": false,
                              "display_name": "code"
                            },
                            "collection_name": {
                              "trace_as_input": true,
                              "trace_as_metadata": true,
                              "load_from_db": false,
                              "list": false,
                              "required": false,
                              "placeholder": "",
                              "show": true,
                              "name": "collection_name",
                              "value": "",
                              "display_name": "Collection Name",
                              "advanced": false,
                              "input_types": [
                                "Message"
                              ],
                              "dynamic": false,
                              "info": "",
                              "title_case": false,
                              "type": "str",
                              "_input_type": "MessageTextInput"
                            },
                            "limit": {
                              "trace_as_metadata": true,
                              "list": false,
                              "required": false,
                              "placeholder": "",
                              "show": true,
                              "name": "limit",
                              "value": "",
                              "display_name": "Limit",
                              "advanced": true,
                              "dynamic": false,
                              "info": "Limit the number of records to compare when Allow Duplicates is False.",
                              "title_case": false,
                              "type": "int",
                              "_input_type": "IntInput"
                            },
                            "number_of_results": {
                              "trace_as_metadata": true,
                              "list": false,
                              "required": false,
                              "placeholder": "",
                              "show": true,
                              "name": "number_of_results",
                              "value": 5,
                              "display_name": "Number of Results",
                              "advanced": true,
                              "dynamic": false,
                              "info": "Number of results to return.",
                              "title_case": false,
                              "type": "int",
                              "_input_type": "IntInput"
                            },
                            "persist_directory": {
                              "trace_as_metadata": true,
                              "load_from_db": false,
                              "list": false,
                              "required": false,
                              "placeholder": "",
                              "show": true,
                              "name": "persist_directory",
                              "value": "",
                              "display_name": "Persist Directory",
                              "advanced": false,
                              "dynamic": false,
                              "info": "",
                              "title_case": false,
                              "type": "str",
                              "_input_type": "StrInput"
                            },
                            "search_query": {
                              "trace_as_input": true,
                              "multiline": true,
                              "trace_as_metadata": true,
                              "load_from_db": false,
                              "list": false,
                              "required": false,
                              "placeholder": "",
                              "show": true,
                              "name": "search_query",
                              "value": "",
                              "display_name": "Search Query",
                              "advanced": false,
                              "input_types": [
                                "Message"
                              ],
                              "dynamic": false,
                              "info": "",
                              "title_case": false,
                              "type": "str",
                              "_input_type": "MultilineInput"
                            },
                            "search_type": {
                              "trace_as_metadata": true,
                              "options": [
                                "Similarity",
                                "MMR"
                              ],
                              "combobox": false,
                              "required": false,
                              "placeholder": "",
                              "show": true,
                              "name": "search_type",
                              "value": "Similarity",
                              "display_name": "Search Type",
                              "advanced": true,
                              "dynamic": false,
                              "info": "",
                              "title_case": false,
                              "type": "str",
                              "_input_type": "DropdownInput"
                            }
                          },
                          "description": "Chroma Vector Store with search capabilities",
                          "icon": "Chroma",
                          "base_classes": [
                            "Data",
                            "Retriever",
                            "VectorStore"
                          ],
                          "display_name": "Chroma DB",
                          "documentation": "https://python.langchain.com/docs/integrations/vectorstores/chroma",
                          "custom_fields": {},
                          "output_types": [],
                          "pinned": false,
                          "conditional_paths": [],
                          "frozen": false,
                          "outputs": [
                            {
                              "types": [
                                "Retriever"
                              ],
                              "selected": "Retriever",
                              "name": "base_retriever",
                              "display_name": "Retriever",
                              "method": "build_base_retriever",
                              "value": "__UNDEFINED__",
                              "cache": true,
                              "required_inputs": []
                            },
                            {
                              "types": [
                                "Data"
                              ],
                              "selected": "Data",
                              "name": "search_results",
                              "display_name": "Search Results",
                              "method": "search_documents",
                              "value": "__UNDEFINED__",
                              "cache": true,
                              "required_inputs": [
                                "number_of_results",
                                "search_query",
                                "search_type"
                              ]
                            },
                            {
                              "types": [
                                "VectorStore"
                              ],
                              "selected": "VectorStore",
                              "name": "vector_store",
                              "display_name": "Vector Store",
                              "method": "cast_vector_store",
                              "value": "__UNDEFINED__",
                              "cache": true,
                              "required_inputs": []
                            }
                          ],
                          "field_order": [
                            "collection_name",
                            "persist_directory",
                            "search_query",
                            "ingest_data",
                            "embedding",
                            "chroma_server_cors_allow_origins",
                            "chroma_server_host",
                            "chroma_server_http_port",
                            "chroma_server_grpc_port",
                            "chroma_server_ssl_enabled",
                            "allow_duplicates",
                            "search_type",
                            "number_of_results",
                            "limit"
                          ],
                          "beta": false,
                          "edited": true,
                          "metadata": {}
                        },
                        "id": "Chroma-3LJPk"
                      },
                      "selected": true,
                      "width": 384,
                      "height": 637,
                      "positionAbsolute": {
                        "x": -2141.44988672774,
                        "y": -940.3844078990951
                      },
                      "dragging": false
                    },
                    {
                      "id": "OpenAIEmbeddings-UfXHC",
                      "type": "genericNode",
                      "position": {
                        "x": -2541.977848768341,
                        "y": -540.3505618955141
                      },
                      "data": {
                        "type": "OpenAIEmbeddings",
                        "node": {
                          "template": {
                            "_type": "Component",
                            "chunk_size": {
                              "trace_as_metadata": true,
                              "list": false,
                              "required": false,
                              "placeholder": "",
                              "show": true,
                              "name": "chunk_size",
                              "value": 1000,
                              "display_name": "Chunk Size",
                              "advanced": true,
                              "dynamic": false,
                              "info": "",
                              "title_case": false,
                              "type": "int",
                              "_input_type": "IntInput"
                            },
                            "client": {
                              "trace_as_input": true,
                              "trace_as_metadata": true,
                              "load_from_db": false,
                              "list": false,
                              "required": false,
                              "placeholder": "",
                              "show": true,
                              "name": "client",
                              "value": "",
                              "display_name": "Client",
                              "advanced": true,
                              "input_types": [
                                "Message"
                              ],
                              "dynamic": false,
                              "info": "",
                              "title_case": false,
                              "type": "str",
                              "_input_type": "MessageTextInput"
                            },
                            "code": {
                              "type": "code",
                              "required": true,
                              "placeholder": "",
                              "list": false,
                              "show": true,
                              "multiline": true,
                              "value": "from langchain_openai.embeddings.base import OpenAIEmbeddings\n\nfrom axiestudio.base.embeddings.model import LCEmbeddingsModel\nfrom axiestudio.base.models.openai_constants import OPENAI_EMBEDDING_MODEL_NAMES\nfrom axiestudio.field_typing import Embeddings\nfrom axiestudio.io import BoolInput, DictInput, DropdownInput, FloatInput, IntInput, MessageTextInput, SecretStrInput\n\n\nclass OpenAIEmbeddingsComponent(LCEmbeddingsModel):\n    display_name = \"OpenAI Embeddings\"\n    description = \"Generate embeddings using OpenAI models.\"\n    icon = \"OpenAI\"\n    name = \"OpenAIEmbeddings\"\n\n    inputs = [\n        DictInput(\n            name=\"default_headers\",\n            display_name=\"Default Headers\",\n            advanced=True,\n            info=\"Default headers to use for the API request.\",\n        ),\n        DictInput(\n            name=\"default_query\",\n            display_name=\"Default Query\",\n            advanced=True,\n            info=\"Default query parameters to use for the API request.\",\n        ),\n        IntInput(name=\"chunk_size\", display_name=\"Chunk Size\", advanced=True, value=1000),\n        MessageTextInput(name=\"client\", display_name=\"Client\", advanced=True),\n        MessageTextInput(name=\"deployment\", display_name=\"Deployment\", advanced=True),\n        IntInput(name=\"embedding_ctx_length\", display_name=\"Embedding Context Length\", advanced=True, value=1536),\n        IntInput(name=\"max_retries\", display_name=\"Max Retries\", value=3, advanced=True),\n        DropdownInput(\n            name=\"model\",\n            display_name=\"Model\",\n            advanced=False,\n            options=OPENAI_EMBEDDING_MODEL_NAMES,\n            value=\"text-embedding-3-small\",\n        ),\n        DictInput(name=\"model_kwargs\", display_name=\"Model Kwargs\", advanced=True),\n        SecretStrInput(name=\"openai_api_base\", display_name=\"OpenAI API Base\", advanced=True),\n        SecretStrInput(name=\"openai_api_key\", display_name=\"OpenAI API Key\", value=\"OPENAI_API_KEY\"),\n        SecretStrInput(name=\"openai_api_type\", display_name=\"OpenAI API Type\", advanced=True),\n        MessageTextInput(name=\"openai_api_version\", display_name=\"OpenAI API Version\", advanced=True),\n        MessageTextInput(\n            name=\"openai_organization\",\n            display_name=\"OpenAI Organization\",\n            advanced=True,\n        ),\n        MessageTextInput(name=\"openai_proxy\", display_name=\"OpenAI Proxy\", advanced=True),\n        FloatInput(name=\"request_timeout\", display_name=\"Request Timeout\", advanced=True),\n        BoolInput(name=\"show_progress_bar\", display_name=\"Show Progress Bar\", advanced=True),\n        BoolInput(name=\"skip_empty\", display_name=\"Skip Empty\", advanced=True),\n        MessageTextInput(\n            name=\"tiktoken_model_name\",\n            display_name=\"TikToken Model Name\",\n            advanced=True,\n        ),\n        BoolInput(\n            name=\"tiktoken_enable\",\n            display_name=\"TikToken Enable\",\n            advanced=True,\n            value=True,\n            info=\"If False, you must have transformers installed.\",\n        ),\n        IntInput(\n            name=\"dimensions\",\n            display_name=\"Dimensions\",\n            info=\"The number of dimensions the resulting output embeddings should have. \"\n            \"Only supported by certain models.\",\n            advanced=True,\n        ),\n    ]\n\n    def build_embeddings(self) -> Embeddings:\n        return OpenAIEmbeddings(\n            tiktoken_enabled=self.tiktoken_enable,\n            default_headers=self.default_headers,\n            default_query=self.default_query,\n            allowed_special=\"all\",\n            disallowed_special=\"all\",\n            chunk_size=self.chunk_size,\n            deployment=self.deployment,\n            embedding_ctx_length=self.embedding_ctx_length,\n            max_retries=self.max_retries,\n            model=self.model,\n            model_kwargs=self.model_kwargs,\n            base_url=self.openai_api_base,\n            api_key=self.openai_api_key,\n            openai_api_type=self.openai_api_type,\n            api_version=self.openai_api_version,\n            organization=self.openai_organization,\n            openai_proxy=self.openai_proxy,\n            timeout=self.request_timeout or None,\n            show_progress_bar=self.show_progress_bar,\n            skip_empty=self.skip_empty,\n            tiktoken_model_name=self.tiktoken_model_name,\n            dimensions=self.dimensions or None,\n        )\n",
                              "fileTypes": [],
                              "file_path": "",
                              "password": false,
                              "name": "code",
                              "advanced": true,
                              "dynamic": true,
                              "info": "",
                              "load_from_db": false,
                              "title_case": false,
                              "display_name": "code"
                            },
                            "default_headers": {
                              "trace_as_input": true,
                              "list": false,
                              "required": false,
                              "placeholder": "",
                              "show": true,
                              "name": "default_headers",
                              "value": {},
                              "display_name": "Default Headers",
                              "advanced": true,
                              "dynamic": false,
                              "info": "Default headers to use for the API request.",
                              "title_case": false,
                              "type": "dict",
                              "_input_type": "DictInput"
                            },
                            "default_query": {
                              "trace_as_input": true,
                              "list": false,
                              "required": false,
                              "placeholder": "",
                              "show": true,
                              "name": "default_query",
                              "value": {},
                              "display_name": "Default Query",
                              "advanced": true,
                              "dynamic": false,
                              "info": "Default query parameters to use for the API request.",
                              "title_case": false,
                              "type": "dict",
                              "_input_type": "DictInput"
                            },
                            "deployment": {
                              "trace_as_input": true,
                              "trace_as_metadata": true,
                              "load_from_db": false,
                              "list": false,
                              "required": false,
                              "placeholder": "",
                              "show": true,
                              "name": "deployment",
                              "value": "",
                              "display_name": "Deployment",
                              "advanced": true,
                              "input_types": [
                                "Message"
                              ],
                              "dynamic": false,
                              "info": "",
                              "title_case": false,
                              "type": "str",
                              "_input_type": "MessageTextInput"
                            },
                            "dimensions": {
                              "trace_as_metadata": true,
                              "list": false,
                              "required": false,
                              "placeholder": "",
                              "show": true,
                              "name": "dimensions",
                              "value": "",
                              "display_name": "Dimensions",
                              "advanced": true,
                              "dynamic": false,
                              "info": "The number of dimensions the resulting output embeddings should have. Only supported by certain models.",
                              "title_case": false,
                              "type": "int",
                              "_input_type": "IntInput"
                            },
                            "embedding_ctx_length": {
                              "trace_as_metadata": true,
                              "list": false,
                              "required": false,
                              "placeholder": "",
                              "show": true,
                              "name": "embedding_ctx_length",
                              "value": 1536,
                              "display_name": "Embedding Context Length",
                              "advanced": true,
                              "dynamic": false,
                              "info": "",
                              "title_case": false,
                              "type": "int",
                              "_input_type": "IntInput"
                            },
                            "max_retries": {
                              "trace_as_metadata": true,
                              "list": false,
                              "required": false,
                              "placeholder": "",
                              "show": true,
                              "name": "max_retries",
                              "value": 3,
                              "display_name": "Max Retries",
                              "advanced": true,
                              "dynamic": false,
                              "info": "",
                              "title_case": false,
                              "type": "int",
                              "_input_type": "IntInput"
                            },
                            "model": {
                              "trace_as_metadata": true,
                              "options": [
                                "text-embedding-3-small",
                                "text-embedding-3-large",
                                "text-embedding-ada-002"
                              ],
                              "combobox": false,
                              "required": false,
                              "placeholder": "",
                              "show": true,
                              "name": "model",
                              "value": "text-embedding-3-small",
                              "display_name": "Model",
                              "advanced": false,
                              "dynamic": false,
                              "info": "",
                              "title_case": false,
                              "type": "str",
                              "_input_type": "DropdownInput"
                            },
                            "model_kwargs": {
                              "trace_as_input": true,
                              "list": false,
                              "required": false,
                              "placeholder": "",
                              "show": true,
                              "name": "model_kwargs",
                              "value": {},
                              "display_name": "Model Kwargs",
                              "advanced": true,
                              "dynamic": false,
                              "info": "",
                              "title_case": false,
                              "type": "dict",
                              "_input_type": "DictInput"
                            },
                            "openai_api_base": {
                              "load_from_db": false,
                              "required": false,
                              "placeholder": "",
                              "show": true,
                              "name": "openai_api_base",
                              "value": "",
                              "display_name": "OpenAI API Base",
                              "advanced": true,
                              "input_types": [
                                "Message"
                              ],
                              "dynamic": false,
                              "info": "",
                              "title_case": false,
                              "password": true,
                              "type": "str",
                              "_input_type": "SecretStrInput"
                            },
                            "openai_api_key": {
                              "load_from_db": true,
                              "required": false,
                              "placeholder": "",
                              "show": true,
                              "name": "openai_api_key",
                              "value": "OPENAI_API_KEY",
                              "display_name": "OpenAI API Key",
                              "advanced": false,
                              "input_types": [
                                "Message"
                              ],
                              "dynamic": false,
                              "info": "",
                              "title_case": false,
                              "password": true,
                              "type": "str",
                              "_input_type": "SecretStrInput"
                            },
                            "openai_api_type": {
                              "load_from_db": false,
                              "required": false,
                              "placeholder": "",
                              "show": true,
                              "name": "openai_api_type",
                              "value": "",
                              "display_name": "OpenAI API Type",
                              "advanced": true,
                              "input_types": [
                                "Message"
                              ],
                              "dynamic": false,
                              "info": "",
                              "title_case": false,
                              "password": true,
                              "type": "str",
                              "_input_type": "SecretStrInput"
                            },
                            "openai_api_version": {
                              "trace_as_input": true,
                              "trace_as_metadata": true,
                              "load_from_db": false,
                              "list": false,
                              "required": false,
                              "placeholder": "",
                              "show": true,
                              "name": "openai_api_version",
                              "value": "",
                              "display_name": "OpenAI API Version",
                              "advanced": true,
                              "input_types": [
                                "Message"
                              ],
                              "dynamic": false,
                              "info": "",
                              "title_case": false,
                              "type": "str",
                              "_input_type": "MessageTextInput"
                            },
                            "openai_organization": {
                              "trace_as_input": true,
                              "trace_as_metadata": true,
                              "load_from_db": false,
                              "list": false,
                              "required": false,
                              "placeholder": "",
                              "show": true,
                              "name": "openai_organization",
                              "value": "",
                              "display_name": "OpenAI Organization",
                              "advanced": true,
                              "input_types": [
                                "Message"
                              ],
                              "dynamic": false,
                              "info": "",
                              "title_case": false,
                              "type": "str",
                              "_input_type": "MessageTextInput"
                            },
                            "openai_proxy": {
                              "trace_as_input": true,
                              "trace_as_metadata": true,
                              "load_from_db": false,
                              "list": false,
                              "required": false,
                              "placeholder": "",
                              "show": true,
                              "name": "openai_proxy",
                              "value": "",
                              "display_name": "OpenAI Proxy",
                              "advanced": true,
                              "input_types": [
                                "Message"
                              ],
                              "dynamic": false,
                              "info": "",
                              "title_case": false,
                              "type": "str",
                              "_input_type": "MessageTextInput"
                            },
                            "request_timeout": {
                              "trace_as_metadata": true,
                              "list": false,
                              "required": false,
                              "placeholder": "",
                              "show": true,
                              "name": "request_timeout",
                              "value": "",
                              "display_name": "Request Timeout",
                              "advanced": true,
                              "dynamic": false,
                              "info": "",
                              "title_case": false,
                              "type": "float",
                              "_input_type": "FloatInput"
                            },
                            "show_progress_bar": {
                              "trace_as_metadata": true,
                              "list": false,
                              "required": false,
                              "placeholder": "",
                              "show": true,
                              "name": "show_progress_bar",
                              "value": false,
                              "display_name": "Show Progress Bar",
                              "advanced": true,
                              "dynamic": false,
                              "info": "",
                              "title_case": false,
                              "type": "bool",
                              "_input_type": "BoolInput"
                            },
                            "skip_empty": {
                              "trace_as_metadata": true,
                              "list": false,
                              "required": false,
                              "placeholder": "",
                              "show": true,
                              "name": "skip_empty",
                              "value": false,
                              "display_name": "Skip Empty",
                              "advanced": true,
                              "dynamic": false,
                              "info": "",
                              "title_case": false,
                              "type": "bool",
                              "_input_type": "BoolInput"
                            },
                            "tiktoken_enable": {
                              "trace_as_metadata": true,
                              "list": false,
                              "required": false,
                              "placeholder": "",
                              "show": true,
                              "name": "tiktoken_enable",
                              "value": true,
                              "display_name": "TikToken Enable",
                              "advanced": true,
                              "dynamic": false,
                              "info": "If False, you must have transformers installed.",
                              "title_case": false,
                              "type": "bool",
                              "_input_type": "BoolInput"
                            },
                            "tiktoken_model_name": {
                              "trace_as_input": true,
                              "trace_as_metadata": true,
                              "load_from_db": false,
                              "list": false,
                              "required": false,
                              "placeholder": "",
                              "show": true,
                              "name": "tiktoken_model_name",
                              "value": "",
                              "display_name": "TikToken Model Name",
                              "advanced": true,
                              "input_types": [
                                "Message"
                              ],
                              "dynamic": false,
                              "info": "",
                              "title_case": false,
                              "type": "str",
                              "_input_type": "MessageTextInput"
                            }
                          },
                          "description": "Generate embeddings using OpenAI models.",
                          "icon": "OpenAI",
                          "base_classes": [
                            "Embeddings"
                          ],
                          "display_name": "OpenAI Embeddings",
                          "documentation": "",
                          "custom_fields": {},
                          "output_types": [],
                          "pinned": false,
                          "conditional_paths": [],
                          "frozen": false,
                          "outputs": [
                            {
                              "types": [
                                "Embeddings"
                              ],
                              "selected": "Embeddings",
                              "name": "embeddings",
                              "display_name": "Embeddings",
                              "method": "build_embeddings",
                              "value": "__UNDEFINED__",
                              "cache": true,
                              "required_inputs": [
                                "chunk_size",
                                "default_headers",
                                "default_query",
                                "deployment",
                                "dimensions",
                                "embedding_ctx_length",
                                "max_retries",
                                "model",
                                "model_kwargs",
                                "openai_api_base",
                                "openai_api_key",
                                "openai_api_type",
                                "openai_api_version",
                                "openai_organization",
                                "openai_proxy",
                                "request_timeout",
                                "show_progress_bar",
                                "skip_empty",
                                "tiktoken_enable",
                                "tiktoken_model_name"
                              ]
                            }
                          ],
                          "field_order": [
                            "default_headers",
                            "default_query",
                            "chunk_size",
                            "client",
                            "deployment",
                            "embedding_ctx_length",
                            "max_retries",
                            "model",
                            "model_kwargs",
                            "openai_api_base",
                            "openai_api_key",
                            "openai_api_type",
                            "openai_api_version",
                            "openai_organization",
                            "openai_proxy",
                            "request_timeout",
                            "show_progress_bar",
                            "skip_empty",
                            "tiktoken_model_name",
                            "tiktoken_enable",
                            "dimensions"
                          ],
                          "beta": false,
                          "edited": false,
                          "metadata": {}
                        },
                        "id": "OpenAIEmbeddings-UfXHC",
                        "description": "Generate embeddings using OpenAI models.",
                        "display_name": "OpenAI Embeddings"
                      },
                      "selected": true,
                      "width": 384,
                      "height": 375,
                      "positionAbsolute": {
                        "x": -2541.977848768341,
                        "y": -540.3505618955141
                      },
                      "dragging": false
                    },
                    {
                      "id": "ParseData-kl9yv",
                      "type": "genericNode",
                      "position": {
                        "x": -1741.6180026639558,
                        "y": -940.5479870594804
                      },
                      "data": {
                        "type": "ParseData",
                        "node": {
                          "template": {
                            "_type": "Component",
                            "data": {
                              "trace_as_metadata": true,
                              "list": false,
                              "trace_as_input": true,
                              "required": false,
                              "placeholder": "",
                              "show": true,
                              "name": "data",
                              "value": "",
                              "display_name": "Data",
                              "advanced": false,
                              "input_types": [
                                "Data"
                              ],
                              "dynamic": false,
                              "info": "The data to convert to text.",
                              "title_case": false,
                              "type": "other",
                              "_input_type": "DataInput"
                            },
                            "code": {
                              "type": "code",
                              "required": true,
                              "placeholder": "",
                              "list": false,
                              "show": true,
                              "multiline": true,
                              "value": "from axiestudio.custom import Component\nfrom axiestudio.helpers.data import data_to_text\nfrom axiestudio.io import DataInput, MultilineInput, Output, StrInput\nfrom axiestudio.schema.message import Message\n\n\nclass ParseDataComponent(Component):\n    display_name = \"Parse Data\"\n    description = \"Convert Data into plain text following a specified template.\"\n    icon = \"braces\"\n    name = \"ParseData\"\n\n    inputs = [\n        DataInput(name=\"data\", display_name=\"Data\", info=\"The data to convert to text.\"),\n        MultilineInput(\n            name=\"template\",\n            display_name=\"Template\",\n            info=\"The template to use for formatting the data. \"\n            \"It can contain the keys {text}, {data} or any other key in the Data.\",\n            value=\"{text}\",\n        ),\n        StrInput(name=\"sep\", display_name=\"Separator\", advanced=True, value=\"\\n\"),\n    ]\n\n    outputs = [\n        Output(display_name=\"Text\", name=\"text\", method=\"parse_data\"),\n    ]\n\n    def parse_data(self) -> Message:\n        data = self.data if isinstance(self.data, list) else [self.data]\n        template = self.template\n\n        result_string = data_to_text(template, data, sep=self.sep)\n        self.status = result_string\n        return Message(text=result_string)\n",
                              "fileTypes": [],
                              "file_path": "",
                              "password": false,
                              "name": "code",
                              "advanced": true,
                              "dynamic": true,
                              "info": "",
                              "load_from_db": false,
                              "title_case": false,
                              "display_name": "code"
                            },
                            "sep": {
                              "trace_as_metadata": true,
                              "load_from_db": false,
                              "list": false,
                              "required": false,
                              "placeholder": "",
                              "show": true,
                              "name": "sep",
                              "value": "\n",
                              "display_name": "Separator",
                              "advanced": true,
                              "dynamic": false,
                              "info": "",
                              "title_case": false,
                              "type": "str",
                              "_input_type": "StrInput"
                            },
                            "template": {
                              "trace_as_input": true,
                              "multiline": true,
                              "trace_as_metadata": true,
                              "load_from_db": false,
                              "list": false,
                              "required": false,
                              "placeholder": "",
                              "show": true,
                              "name": "template",
                              "value": "<{text}>",
                              "display_name": "Template",
                              "advanced": false,
                              "input_types": [
                                "Message"
                              ],
                              "dynamic": false,
                              "info": "The template to use for formatting the data. It can contain the keys {text}, {data} or any other key in the Data.",
                              "title_case": false,
                              "type": "str",
                              "_input_type": "MultilineInput"
                            }
                          },
                          "description": "Convert Data into plain text following a specified template.",
                          "icon": "braces",
                          "base_classes": [
                            "Message"
                          ],
                          "display_name": "Parse Data",
                          "documentation": "",
                          "custom_fields": {},
                          "output_types": [],
                          "pinned": false,
                          "conditional_paths": [],
                          "frozen": false,
                          "outputs": [
                            {
                              "types": [
                                "Message"
                              ],
                              "selected": "Message",
                              "name": "text",
                              "display_name": "Text",
                              "method": "parse_data",
                              "value": "__UNDEFINED__",
                              "cache": true
                            }
                          ],
                          "field_order": [
                            "data",
                            "template",
                            "sep"
                          ],
                          "beta": false,
                          "edited": false,
                          "metadata": {}
                        },
                        "id": "ParseData-kl9yv",
                        "description": "Convert Data into plain text following a specified template.",
                        "display_name": "Parse Data"
                      },
                      "selected": true,
                      "width": 384,
                      "height": 353,
                      "dragging": false,
                      "positionAbsolute": {
                        "x": -1741.6180026639558,
                        "y": -940.5479870594804
                      }
                    },
                    {
                      "id": "Prompt-uvWe5",
                      "type": "genericNode",
                      "position": {
                        "x": -2541.30856296637,
                        "y": -941.0674504833105
                      },
                      "data": {
                        "type": "Prompt",
                        "node": {
                          "template": {
                            "_type": "Component",
                            "code": {
                              "type": "code",
                              "required": true,
                              "placeholder": "",
                              "list": false,
                              "show": true,
                              "multiline": true,
                              "value": "from axiestudio.base.prompts.api_utils import process_prompt_template\nfrom axiestudio.custom import Component\nfrom axiestudio.inputs.inputs import DefaultPromptField\nfrom axiestudio.io import Output, PromptInput\nfrom axiestudio.schema.message import Message\nfrom axiestudio.template.utils import update_template_values\n\n\nclass PromptComponent(Component):\n    display_name: str = \"Prompt\"\n    description: str = \"Create a prompt template with dynamic variables.\"\n    icon = \"prompts\"\n    trace_type = \"prompt\"\n    name = \"Prompt\"\n\n    inputs = [\n        PromptInput(name=\"template\", display_name=\"Template\"),\n    ]\n\n    outputs = [\n        Output(display_name=\"Prompt Message\", name=\"prompt\", method=\"build_prompt\"),\n    ]\n\n    async def build_prompt(\n        self,\n    ) -> Message:\n        prompt = await Message.from_template_and_variables(**self._attributes)\n        self.status = prompt.text\n        return prompt\n\n    def _update_template(self, frontend_node: dict):\n        prompt_template = frontend_node[\"template\"][\"template\"][\"value\"]\n        custom_fields = frontend_node[\"custom_fields\"]\n        frontend_node_template = frontend_node[\"template\"]\n        _ = process_prompt_template(\n            template=prompt_template,\n            name=\"template\",\n            custom_fields=custom_fields,\n            frontend_node_template=frontend_node_template,\n        )\n        return frontend_node\n\n    def post_code_processing(self, new_frontend_node: dict, current_frontend_node: dict):\n        \"\"\"\n        This function is called after the code validation is done.\n        \"\"\"\n        frontend_node = super().post_code_processing(new_frontend_node, current_frontend_node)\n        template = frontend_node[\"template\"][\"template\"][\"value\"]\n        # Kept it duplicated for backwards compatibility\n        _ = process_prompt_template(\n            template=template,\n            name=\"template\",\n            custom_fields=frontend_node[\"custom_fields\"],\n            frontend_node_template=frontend_node[\"template\"],\n        )\n        # Now that template is updated, we need to grab any values that were set in the current_frontend_node\n        # and update the frontend_node with those values\n        update_template_values(new_template=frontend_node, previous_template=current_frontend_node[\"template\"])\n        return frontend_node\n\n    def _get_fallback_input(self, **kwargs):\n        return DefaultPromptField(**kwargs)\n",
                              "fileTypes": [],
                              "file_path": "",
                              "password": false,
                              "name": "code",
                              "advanced": true,
                              "dynamic": true,
                              "info": "",
                              "load_from_db": false,
                              "title_case": false,
                              "display_name": "code"
                            },
                            "template": {
                              "trace_as_input": true,
                              "list": false,
                              "required": false,
                              "placeholder": "",
                              "show": true,
                              "name": "template",
                              "value": "{TMC}",
                              "display_name": "Template",
                              "advanced": false,
                              "dynamic": false,
                              "info": "",
                              "title_case": false,
                              "type": "prompt",
                              "_input_type": "PromptInput"
                            },
                            "TMC": {
                              "field_type": "str",
                              "required": false,
                              "placeholder": "",
                              "list": false,
                              "show": true,
                              "multiline": true,
                              "value": "",
                              "fileTypes": [],
                              "file_path": "",
                              "name": "TMC",
                              "display_name": "TMC",
                              "advanced": false,
                              "input_types": [
                                "Message",
                                "Text"
                              ],
                              "dynamic": false,
                              "info": "",
                              "load_from_db": false,
                              "title_case": false,
                              "type": "str"
                            }
                          },
                          "description": "Create a prompt template with dynamic variables.",
                          "icon": "prompts",
                          "is_input": null,
                          "is_output": null,
                          "is_composition": null,
                          "base_classes": [
                            "Message"
                          ],
                          "name": "",
                          "display_name": "Prompt",
                          "documentation": "",
                          "custom_fields": {
                            "template": [
                              "TMC"
                            ]
                          },
                          "output_types": [],
                          "full_path": null,
                          "pinned": false,
                          "conditional_paths": [],
                          "frozen": false,
                          "outputs": [
                            {
                              "types": [
                                "Message"
                              ],
                              "selected": "Message",
                              "name": "prompt",
                              "hidden": null,
                              "display_name": "Prompt Message",
                              "method": "build_prompt",
                              "value": "__UNDEFINED__",
                              "cache": true,
                              "required_inputs": null
                            }
                          ],
                          "field_order": [
                            "template"
                          ],
                          "beta": false,
                          "error": null,
                          "edited": false,
                          "metadata": {}
                        },
                        "id": "Prompt-uvWe5"
                      },
                      "selected": true,
                      "width": 384,
                      "height": 391,
                      "positionAbsolute": {
                        "x": -2541.30856296637,
                        "y": -941.0674504833105
                      },
                      "dragging": false
                    }
                  ],
                  "edges": [
                    {
                      "source": "OpenAIEmbeddings-UfXHC",
                      "sourceHandle": "{œdataTypeœ:œOpenAIEmbeddingsœ,œidœ:œOpenAIEmbeddings-UfXHCœ,œnameœ:œembeddingsœ,œoutput_typesœ:[œEmbeddingsœ]}",
                      "target": "Chroma-3LJPk",
                      "targetHandle": "{œfieldNameœ:œembeddingœ,œidœ:œChroma-3LJPkœ,œinputTypesœ:[œEmbeddingsœ],œtypeœ:œotherœ}",
                      "data": {
                        "targetHandle": {
                          "fieldName": "embedding",
                          "id": "Chroma-3LJPk",
                          "inputTypes": [
                            "Embeddings"
                          ],
                          "type": "other"
                        },
                        "sourceHandle": {
                          "dataType": "OpenAIEmbeddings",
                          "id": "OpenAIEmbeddings-UfXHC",
                          "name": "embeddings",
                          "output_types": [
                            "Embeddings"
                          ]
                        }
                      },
                      "id": "reactflow__edge-OpenAIEmbeddings-UfXHC{œdataTypeœ:œOpenAIEmbeddingsœ,œidœ:œOpenAIEmbeddings-UfXHCœ,œnameœ:œembeddingsœ,œoutput_typesœ:[œEmbeddingsœ]}-Chroma-3LJPk{œfieldNameœ:œembeddingœ,œidœ:œChroma-3LJPkœ,œinputTypesœ:[œEmbeddingsœ],œtypeœ:œotherœ}",
                      "selected": false
                    },
                    {
                      "source": "Chroma-3LJPk",
                      "sourceHandle": "{œdataTypeœ:œChromaœ,œidœ:œChroma-3LJPkœ,œnameœ:œsearch_resultsœ,œoutput_typesœ:[œDataœ]}",
                      "target": "ParseData-kl9yv",
                      "targetHandle": "{œfieldNameœ:œdataœ,œidœ:œParseData-kl9yvœ,œinputTypesœ:[œDataœ],œtypeœ:œotherœ}",
                      "data": {
                        "targetHandle": {
                          "fieldName": "data",
                          "id": "ParseData-kl9yv",
                          "inputTypes": [
                            "Data"
                          ],
                          "type": "other"
                        },
                        "sourceHandle": {
                          "dataType": "Chroma",
                          "id": "Chroma-3LJPk",
                          "name": "search_results",
                          "output_types": [
                            "Data"
                          ]
                        }
                      },
                      "id": "reactflow__edge-Chroma-3LJPk{œdataTypeœ:œChromaœ,œidœ:œChroma-3LJPkœ,œnameœ:œsearch_resultsœ,œoutput_typesœ:[œDataœ]}-ParseData-kl9yv{œfieldNameœ:œdataœ,œidœ:œParseData-kl9yvœ,œinputTypesœ:[œDataœ],œtypeœ:œotherœ}",
                      "selected": false
                    },
                    {
                      "source": "Prompt-uvWe5",
                      "sourceHandle": "{œdataTypeœ:œPromptœ,œidœ:œPrompt-uvWe5œ,œnameœ:œpromptœ,œoutput_typesœ:[œMessageœ]}",
                      "target": "Chroma-3LJPk",
                      "targetHandle": "{œfieldNameœ:œcollection_nameœ,œidœ:œChroma-3LJPkœ,œinputTypesœ:[œMessageœ],œtypeœ:œstrœ}",
                      "data": {
                        "targetHandle": {
                          "fieldName": "collection_name",
                          "id": "Chroma-3LJPk",
                          "inputTypes": [
                            "Message"
                          ],
                          "type": "str"
                        },
                        "sourceHandle": {
                          "dataType": "Prompt",
                          "id": "Prompt-uvWe5",
                          "name": "prompt",
                          "output_types": [
                            "Message"
                          ]
                        }
                      },
                      "id": "reactflow__edge-Prompt-uvWe5{œdataTypeœ:œPromptœ,œidœ:œPrompt-uvWe5œ,œnameœ:œpromptœ,œoutput_typesœ:[œMessageœ]}-Chroma-3LJPk{œfieldNameœ:œcollection_nameœ,œidœ:œChroma-3LJPkœ,œinputTypesœ:[œMessageœ],œtypeœ:œstrœ}",
                      "selected": false
                    }
                  ],
                  "viewport": {
                    "zoom": 1,
                    "x": 0,
                    "y": 0
                  }
                },
                "is_component": false,
                "name": "Hilarious Pike",
                "description": "",
                "id": "hQztU"
              },
              "outputs": [
                {
                  "types": [
                    "Retriever"
                  ],
                  "selected": "Retriever",
                  "name": "Chroma-3LJPk_base_retriever",
                  "display_name": "Retriever",
                  "method": "build_base_retriever",
                  "value": "__UNDEFINED__",
                  "cache": true,
                  "required_inputs": [],
                  "proxy": {
                    "id": "Chroma-3LJPk",
                    "name": "base_retriever",
                    "nodeDisplayName": "Chroma DB"
                  }
                },
                {
                  "types": [
                    "VectorStore"
                  ],
                  "selected": "VectorStore",
                  "name": "Chroma-3LJPk_vector_store",
                  "display_name": "Vector Store",
                  "method": "cast_vector_store",
                  "value": "__UNDEFINED__",
                  "cache": true,
                  "required_inputs": [],
                  "proxy": {
                    "id": "Chroma-3LJPk",
                    "name": "vector_store",
                    "nodeDisplayName": "Chroma DB"
                  }
                },
                {
                  "types": [
                    "Message"
                  ],
                  "selected": "Message",
                  "name": "ParseData-kl9yv_text",
                  "display_name": "Text",
                  "method": "parse_data",
                  "value": "__UNDEFINED__",
                  "cache": true,
                  "proxy": {
                    "id": "ParseData-kl9yv",
                    "name": "text",
                    "nodeDisplayName": "Parse Data"
                  }
                }
              ],
              "lf_version": "1.0.19"
            }
          },
          "id": "groupComponent-fCN9N",
          "position": {
            "x": -2241.588575281602,
            "y": -840.58760183435
          },
          "type": "genericNode",
          "width": 384,
          "height": 455,
          "selected": false,
          "dragging": false
        },
        {
          "data": {
            "id": "groupComponent-Jcwnj",
            "type": "GroupNode",
            "node": {
              "display_name": "DTC Data Retriever",
              "documentation": "",
              "description": "",
              "template": {
                "code_SQLiteQueryTool-MNWYz": {
                  "type": "code",
                  "required": true,
                  "placeholder": "",
                  "list": false,
                  "show": true,
                  "multiline": true,
                  "value": "from axiestudio.base.langchain_utilities.model import LCToolComponent\nfrom axiestudio.field_typing import Tool\nfrom axiestudio.inputs import MessageTextInput, MultilineInput\nfrom axiestudio.schema import Data\nfrom sqlalchemy import create_engine, text\nfrom sqlalchemy.exc import SQLAlchemyError\nfrom typing import Union, List, Tuple\n\nclass SQLiteQueryTool(LCToolComponent):\n    display_name = \"SQLite Query Executor\"\n    description = \"Executes a given SQL query on a specified SQLite database using a URI.\"\n    icon = \"🔎\"\n    name = \"SQLiteQueryTool\"\n    inputs = [\n        MessageTextInput(\n            name=\"database_uri\",\n            display_name=\"Database URI\",\n            info=\"URI of the SQLite database (e.g., sqlite:///path/to/database.db).\",\n            required=True\n        ),\n        MultilineInput(\n            name=\"query\",\n            display_name=\"SQL Query\",\n            info=\"SQL query to be executed on the database.\",\n            required=True\n        )\n    ]\n\n    def run_model(self) -> Union[Data, List[Data]]:\n        \"\"\"Executes the SQL query and returns the results.\"\"\"\n        database_uri = self.database_uri\n        query = self.query\n\n        # Connect to the SQLite database using SQLAlchemy with the provided URI\n        engine = create_engine(database_uri)\n        try:\n            result_data = self._execute_query(engine, query)\n            return self._format_results(result_data)\n        except SQLAlchemyError as error:\n            return self._handle_error(error)\n\n    def _execute_query(self, engine, query: str) -> Tuple[List[tuple], List[str]]:\n        \"\"\"Executes the SQL query and returns the raw results and column keys.\"\"\"\n        with engine.connect() as connection:\n            result = connection.execute(text(query))\n            rows = result.fetchall()\n            keys = result.keys()\n            return rows, keys\n\n    def _format_results(self, result_data: Tuple[List[tuple], List[str]]) -> List[Data]:\n        \"\"\"Formats the raw results into a list of Data objects.\"\"\"\n        rows, keys = result_data\n        if not rows:\n            return []\n\n        # Create a list of dictionaries mapping keys to row values\n        formatted_results = [dict(zip(keys, row)) for row in rows]\n        return [Data(data=row, text=str(row)) for row in formatted_results]\n\n    def _handle_error(self, error: SQLAlchemyError) -> List[Data]:\n        \"\"\"Handles errors during query execution.\"\"\"\n        error_message = f\"Error executing query: {str(error)}\"\n        self.status = error_message\n        return [Data(data={\"error\": error_message})]\n\n    def build_tool(self) -> Tool:\n        \"\"\"Builds the tool with the execution function.\"\"\"\n        return Tool(\n            name=\"sqlite_query_tool\",\n            description=self.description,\n            func=self.run_model,\n        )",
                  "fileTypes": [],
                  "file_path": "",
                  "password": false,
                  "name": "code",
                  "advanced": true,
                  "dynamic": true,
                  "info": "",
                  "load_from_db": false,
                  "title_case": false,
                  "display_name": "code",
                  "proxy": {
                    "id": "SQLiteQueryTool-MNWYz",
                    "field": "code"
                  }
                },
                "database_uri_SQLiteQueryTool-MNWYz": {
                  "trace_as_input": true,
                  "trace_as_metadata": true,
                  "load_from_db": false,
                  "list": false,
                  "required": true,
                  "placeholder": "",
                  "show": true,
                  "name": "database_uri",
                  "value": "sqlite://///Users/michelepastorello/Desktop/ArgoBot/codici_errore.sqlite3",
                  "display_name": "Database URI",
                  "advanced": false,
                  "input_types": [
                    "Message"
                  ],
                  "dynamic": false,
                  "info": "URI of the SQLite database (e.g., sqlite:///path/to/database.db).",
                  "title_case": false,
                  "type": "str",
                  "_input_type": "MessageTextInput",
                  "proxy": {
                    "id": "SQLiteQueryTool-MNWYz",
                    "field": "database_uri"
                  }
                },
                "code_ParseData-4I2Zh": {
                  "type": "code",
                  "required": true,
                  "placeholder": "",
                  "list": false,
                  "show": true,
                  "multiline": true,
                  "value": "from axiestudio.custom import Component\nfrom axiestudio.helpers.data import data_to_text\nfrom axiestudio.io import DataInput, MultilineInput, Output, StrInput\nfrom axiestudio.schema.message import Message\n\n\nclass ParseDataComponent(Component):\n    display_name = \"Parse Data\"\n    description = \"Convert Data into plain text following a specified template.\"\n    icon = \"braces\"\n    name = \"ParseData\"\n\n    inputs = [\n        DataInput(name=\"data\", display_name=\"Data\", info=\"The data to convert to text.\"),\n        MultilineInput(\n            name=\"template\",\n            display_name=\"Template\",\n            info=\"The template to use for formatting the data. It can contain the keys {text}, {data} or any other key in the Data.\",\n            value=\"{text}\",\n        ),\n        StrInput(name=\"sep\", display_name=\"Separator\", advanced=True, value=\"\\n\"),\n    ]\n\n    outputs = [\n        Output(display_name=\"Text\", name=\"text\", method=\"parse_data\"),\n    ]\n\n    def parse_data(self) -> Message:\n        data = self.data if isinstance(self.data, list) else [self.data]\n        template = self.template\n\n        # Ensure 'text' key exists in each data item\n        for item in data:\n            if not hasattr(item, 'text'):\n                item.text = ''  # or set a default value using a method\n\n        result_string = data_to_text(template, data, sep=self.sep)\n        self.status = result_string\n        return Message(text=result_string)",
                  "fileTypes": [],
                  "file_path": "",
                  "password": false,
                  "name": "code",
                  "advanced": true,
                  "dynamic": true,
                  "info": "",
                  "load_from_db": false,
                  "title_case": false,
                  "display_name": "code",
                  "proxy": {
                    "id": "ParseData-4I2Zh",
                    "field": "code"
                  }
                },
                "sep_ParseData-4I2Zh": {
                  "trace_as_metadata": true,
                  "load_from_db": false,
                  "list": false,
                  "required": false,
                  "placeholder": "",
                  "show": true,
                  "name": "sep",
                  "value": "\n",
                  "display_name": "Separator",
                  "advanced": true,
                  "dynamic": false,
                  "info": "",
                  "title_case": false,
                  "type": "str",
                  "_input_type": "StrInput",
                  "proxy": {
                    "id": "ParseData-4I2Zh",
                    "field": "sep"
                  }
                },
                "template_ParseData-4I2Zh": {
                  "trace_as_input": true,
                  "multiline": true,
                  "trace_as_metadata": true,
                  "load_from_db": false,
                  "list": false,
                  "required": false,
                  "placeholder": "",
                  "show": true,
                  "name": "template",
                  "value": "<diagnostic_throuble_code>\n{text}\n</diagnostic_throuble_code>",
                  "display_name": "Template",
                  "advanced": true,
                  "input_types": [
                    "Message"
                  ],
                  "dynamic": false,
                  "info": "The template to use for formatting the data. It can contain the keys {text}, {data} or any other key in the Data.",
                  "title_case": false,
                  "type": "str",
                  "_input_type": "MultilineInput",
                  "proxy": {
                    "id": "ParseData-4I2Zh",
                    "field": "template"
                  }
                },
                "code_Prompt-ekcNX": {
                  "type": "code",
                  "required": true,
                  "placeholder": "",
                  "list": false,
                  "show": true,
                  "multiline": true,
                  "value": "from axiestudio.base.prompts.api_utils import process_prompt_template\nfrom axiestudio.custom import Component\nfrom axiestudio.inputs.inputs import DefaultPromptField\nfrom axiestudio.io import Output, PromptInput\nfrom axiestudio.schema.message import Message\nfrom axiestudio.template.utils import update_template_values\n\n\nclass PromptComponent(Component):\n    display_name: str = \"Prompt\"\n    description: str = \"Create a prompt template with dynamic variables.\"\n    icon = \"prompts\"\n    trace_type = \"prompt\"\n    name = \"Prompt\"\n\n    inputs = [\n        PromptInput(name=\"template\", display_name=\"Template\"),\n    ]\n\n    outputs = [\n        Output(display_name=\"Prompt Message\", name=\"prompt\", method=\"build_prompt\"),\n    ]\n\n    async def build_prompt(\n        self,\n    ) -> Message:\n        prompt = await Message.from_template_and_variables(**self._attributes)\n        self.status = prompt.text\n        return prompt\n\n    def _update_template(self, frontend_node: dict):\n        prompt_template = frontend_node[\"template\"][\"template\"][\"value\"]\n        custom_fields = frontend_node[\"custom_fields\"]\n        frontend_node_template = frontend_node[\"template\"]\n        _ = process_prompt_template(\n            template=prompt_template,\n            name=\"template\",\n            custom_fields=custom_fields,\n            frontend_node_template=frontend_node_template,\n        )\n        return frontend_node\n\n    def post_code_processing(self, new_frontend_node: dict, current_frontend_node: dict):\n        \"\"\"\n        This function is called after the code validation is done.\n        \"\"\"\n        frontend_node = super().post_code_processing(new_frontend_node, current_frontend_node)\n        template = frontend_node[\"template\"][\"template\"][\"value\"]\n        # Kept it duplicated for backwards compatibility\n        _ = process_prompt_template(\n            template=template,\n            name=\"template\",\n            custom_fields=frontend_node[\"custom_fields\"],\n            frontend_node_template=frontend_node[\"template\"],\n        )\n        # Now that template is updated, we need to grab any values that were set in the current_frontend_node\n        # and update the frontend_node with those values\n        update_template_values(new_template=frontend_node, previous_template=current_frontend_node[\"template\"])\n        return frontend_node\n\n    def _get_fallback_input(self, **kwargs):\n        return DefaultPromptField(**kwargs)\n",
                  "fileTypes": [],
                  "file_path": "",
                  "password": false,
                  "name": "code",
                  "advanced": true,
                  "dynamic": true,
                  "info": "",
                  "load_from_db": false,
                  "title_case": false,
                  "display_name": "code",
                  "proxy": {
                    "id": "Prompt-ekcNX",
                    "field": "code"
                  }
                },
                "template_Prompt-ekcNX": {
                  "trace_as_input": true,
                  "list": false,
                  "required": false,
                  "placeholder": "",
                  "show": true,
                  "name": "template",
                  "value": "SELECT * FROM {table} WHERE \"Tractor Model Code\" like '%{TMC}%' AND \"Suspect Parameter Number\" = '{SPN}' AND \"Failure Mode Identifier\" = '{FMI}';",
                  "display_name": "Template",
                  "advanced": true,
                  "dynamic": false,
                  "info": "",
                  "title_case": false,
                  "type": "prompt",
                  "_input_type": "PromptInput",
                  "proxy": {
                    "id": "Prompt-ekcNX",
                    "field": "template"
                  }
                },
                "table_Prompt-ekcNX": {
                  "field_type": "str",
                  "required": false,
                  "placeholder": "",
                  "list": false,
                  "show": true,
                  "multiline": true,
                  "value": "codici_errore",
                  "fileTypes": [],
                  "file_path": "",
                  "name": "table",
                  "display_name": "table",
                  "advanced": false,
                  "input_types": [
                    "Message",
                    "Text"
                  ],
                  "dynamic": false,
                  "info": "",
                  "load_from_db": false,
                  "title_case": false,
                  "type": "str",
                  "proxy": {
                    "id": "Prompt-ekcNX",
                    "field": "table"
                  }
                },
                "SPN_Prompt-ekcNX": {
                  "field_type": "str",
                  "required": false,
                  "placeholder": "",
                  "list": false,
                  "show": true,
                  "multiline": true,
                  "value": "",
                  "fileTypes": [],
                  "file_path": "",
                  "name": "SPN",
                  "display_name": "SPN",
                  "advanced": false,
                  "input_types": [
                    "Message",
                    "Text"
                  ],
                  "dynamic": false,
                  "info": "",
                  "load_from_db": false,
                  "title_case": false,
                  "type": "str",
                  "proxy": {
                    "id": "Prompt-ekcNX",
                    "field": "SPN"
                  }
                },
                "FMI_Prompt-ekcNX": {
                  "field_type": "str",
                  "required": false,
                  "placeholder": "",
                  "list": false,
                  "show": true,
                  "multiline": true,
                  "value": "",
                  "fileTypes": [],
                  "file_path": "",
                  "name": "FMI",
                  "display_name": "FMI",
                  "advanced": false,
                  "input_types": [
                    "Message",
                    "Text"
                  ],
                  "dynamic": false,
                  "info": "",
                  "load_from_db": false,
                  "title_case": false,
                  "type": "str",
                  "proxy": {
                    "id": "Prompt-ekcNX",
                    "field": "FMI"
                  }
                },
                "TMC_Prompt-ekcNX": {
                  "field_type": "str",
                  "required": false,
                  "placeholder": "",
                  "list": false,
                  "show": true,
                  "multiline": true,
                  "value": "",
                  "fileTypes": [],
                  "file_path": "",
                  "name": "TMC",
                  "display_name": "TMC",
                  "advanced": false,
                  "input_types": [
                    "Message",
                    "Text"
                  ],
                  "dynamic": false,
                  "info": "",
                  "load_from_db": false,
                  "title_case": false,
                  "type": "str",
                  "proxy": {
                    "id": "Prompt-ekcNX",
                    "field": "TMC"
                  }
                },
                "code_SQLCleaner-d38L0": {
                  "type": "code",
                  "required": true,
                  "placeholder": "",
                  "list": false,
                  "show": true,
                  "multiline": true,
                  "value": "from axiestudio.custom import Component\nfrom axiestudio.io import MessageTextInput, Output\nfrom axiestudio.schema.message import Message\n\nclass SQLCleanerComponent(Component):\n    display_name = \"SQL Cleaner\"\n    description = \"Cleans SQL queries by removing conditions with 'Not found' values.\"\n    icon = \"🧹\"\n    name = \"SQLCleaner\"\n    inputs = [\n        MessageTextInput(\n            name=\"sql_query\",\n            display_name=\"SQL Query\",\n            info=\"The SQL query to clean.\",\n            required=True\n        ),\n    ]\n    outputs = [\n        Output(display_name=\"Cleaned SQL\", name=\"cleaned_sql\", method=\"clean_sql\"),\n    ]\n    def clean_sql(self) -> Message:\n        sql_query = self.sql_query\n        # Replace 'Not found' with '@' if the query is invalid\n        if self._is_query_invalid(sql_query):\n            sql_query = sql_query.replace('Not found', '@')\n        \n        # Normalize 'LIKE' conditions to '=' for consistency\n        sql_query = self._normalize_like_conditions(sql_query)\n\n        # Clean the SQL query by removing unwanted conditions\n        cleaned_sql = self._remove_unwanted_conditions(sql_query)\n\n        self.status = cleaned_sql\n        return Message(text=cleaned_sql)\n\n    def _is_query_invalid(self, sql_query: str) -> bool:\n        \"\"\"Check if the SQL query contains conditions that should result in no output.\"\"\"\n        return '\"Suspect Parameter Number\" = \\'Not found\\'' in sql_query\n\n    def _normalize_like_conditions(self, sql_query: str) -> str:\n        \"\"\"Convert 'LIKE %Not found%' conditions to '=' for consistency.\"\"\"\n        return sql_query.replace('\"Tractor Model Code\" like \\'%Not found%\\'', '\"Tractor Model Code\" = \\'Not found\\'')\n\n    def _remove_unwanted_conditions(self, sql_query: str) -> str:\n        \"\"\"Remove conditions with 'Not found' from the SQL query.\"\"\"\n        if \"WHERE\" in sql_query.upper():\n            select_part, where_part = sql_query.split(\"WHERE\", 1)\n            conditions = where_part.split(\"AND\")\n            cleaned_conditions = [cond for cond in conditions if \"'Not found'\" not in cond]\n\n            # Reconstruct the cleaned SQL query\n            return f\"{select_part.strip()} WHERE {' AND '.join(cleaned_conditions).strip()}\" if cleaned_conditions else select_part.strip()\n        \n        return sql_query",
                  "fileTypes": [],
                  "file_path": "",
                  "password": false,
                  "name": "code",
                  "advanced": true,
                  "dynamic": true,
                  "info": "",
                  "load_from_db": false,
                  "title_case": false,
                  "display_name": "code",
                  "proxy": {
                    "id": "SQLCleaner-d38L0",
                    "field": "code"
                  }
                }
              },
              "flow": {
                "data": {
                  "nodes": [
                    {
                      "id": "SQLiteQueryTool-MNWYz",
                      "type": "genericNode",
                      "position": {
                        "x": -1640.3491933693738,
                        "y": -840.3635073922449
                      },
                      "data": {
                        "type": "SQLiteQueryTool",
                        "node": {
                          "template": {
                            "_type": "Component",
                            "code": {
                              "type": "code",
                              "required": true,
                              "placeholder": "",
                              "list": false,
                              "show": true,
                              "multiline": true,
                              "value": "from axiestudio.base.langchain_utilities.model import LCToolComponent\nfrom axiestudio.field_typing import Tool\nfrom axiestudio.inputs import MessageTextInput, MultilineInput\nfrom axiestudio.schema import Data\nfrom sqlalchemy import create_engine, text\nfrom sqlalchemy.exc import SQLAlchemyError\nfrom typing import Union, List, Tuple\n\nclass SQLiteQueryTool(LCToolComponent):\n    display_name = \"SQLite Query Executor\"\n    description = \"Executes a given SQL query on a specified SQLite database using a URI.\"\n    icon = \"🔎\"\n    name = \"SQLiteQueryTool\"\n    inputs = [\n        MessageTextInput(\n            name=\"database_uri\",\n            display_name=\"Database URI\",\n            info=\"URI of the SQLite database (e.g., sqlite:///path/to/database.db).\",\n            required=True\n        ),\n        MultilineInput(\n            name=\"query\",\n            display_name=\"SQL Query\",\n            info=\"SQL query to be executed on the database.\",\n            required=True\n        )\n    ]\n\n    def run_model(self) -> Union[Data, List[Data]]:\n        \"\"\"Executes the SQL query and returns the results.\"\"\"\n        database_uri = self.database_uri\n        query = self.query\n\n        # Connect to the SQLite database using SQLAlchemy with the provided URI\n        engine = create_engine(database_uri)\n        try:\n            result_data = self._execute_query(engine, query)\n            return self._format_results(result_data)\n        except SQLAlchemyError as error:\n            return self._handle_error(error)\n\n    def _execute_query(self, engine, query: str) -> Tuple[List[tuple], List[str]]:\n        \"\"\"Executes the SQL query and returns the raw results and column keys.\"\"\"\n        with engine.connect() as connection:\n            result = connection.execute(text(query))\n            rows = result.fetchall()\n            keys = result.keys()\n            return rows, keys\n\n    def _format_results(self, result_data: Tuple[List[tuple], List[str]]) -> List[Data]:\n        \"\"\"Formats the raw results into a list of Data objects.\"\"\"\n        rows, keys = result_data\n        if not rows:\n            return []\n\n        # Create a list of dictionaries mapping keys to row values\n        formatted_results = [dict(zip(keys, row)) for row in rows]\n        return [Data(data=row, text=str(row)) for row in formatted_results]\n\n    def _handle_error(self, error: SQLAlchemyError) -> List[Data]:\n        \"\"\"Handles errors during query execution.\"\"\"\n        error_message = f\"Error executing query: {str(error)}\"\n        self.status = error_message\n        return [Data(data={\"error\": error_message})]\n\n    def build_tool(self) -> Tool:\n        \"\"\"Builds the tool with the execution function.\"\"\"\n        return Tool(\n            name=\"sqlite_query_tool\",\n            description=self.description,\n            func=self.run_model,\n        )",
                              "fileTypes": [],
                              "file_path": "",
                              "password": false,
                              "name": "code",
                              "advanced": true,
                              "dynamic": true,
                              "info": "",
                              "load_from_db": false,
                              "title_case": false,
                              "display_name": "code"
                            },
                            "database_uri": {
                              "trace_as_input": true,
                              "trace_as_metadata": true,
                              "load_from_db": false,
                              "list": false,
                              "required": true,
                              "placeholder": "",
                              "show": true,
                              "name": "database_uri",
                              "value": "sqlite://///Users/michelepastorello/Desktop/ArgoBot/codici_errore.sqlite3",
                              "display_name": "Database URI",
                              "advanced": false,
                              "input_types": [
                                "Message"
                              ],
                              "dynamic": false,
                              "info": "URI of the SQLite database (e.g., sqlite:///path/to/database.db).",
                              "title_case": false,
                              "type": "str",
                              "_input_type": "MessageTextInput"
                            },
                            "query": {
                              "trace_as_input": true,
                              "multiline": true,
                              "trace_as_metadata": true,
                              "load_from_db": false,
                              "list": false,
                              "required": true,
                              "placeholder": "",
                              "show": true,
                              "name": "query",
                              "value": "",
                              "display_name": "SQL Query",
                              "advanced": false,
                              "input_types": [
                                "Message"
                              ],
                              "dynamic": false,
                              "info": "SQL query to be executed on the database.",
                              "title_case": false,
                              "type": "str",
                              "_input_type": "MultilineInput"
                            }
                          },
                          "description": "Executes a given SQL query on a specified SQLite database using a URI.",
                          "icon": "🔎",
                          "base_classes": [
                            "Data",
                            "Tool"
                          ],
                          "display_name": "DTC Data Retriever",
                          "documentation": "",
                          "custom_fields": {},
                          "output_types": [],
                          "pinned": false,
                          "conditional_paths": [],
                          "frozen": false,
                          "outputs": [
                            {
                              "types": [
                                "Data"
                              ],
                              "selected": "Data",
                              "name": "api_run_model",
                              "display_name": "Data",
                              "method": "run_model",
                              "value": "__UNDEFINED__",
                              "cache": true,
                              "required_inputs": [
                                "database_uri",
                                "query"
                              ]
                            },
                            {
                              "types": [
                                "Tool"
                              ],
                              "selected": "Tool",
                              "name": "api_build_tool",
                              "display_name": "Tool",
                              "method": "build_tool",
                              "value": "__UNDEFINED__",
                              "cache": true,
                              "required_inputs": [
                                "database_uri",
                                "query"
                              ]
                            }
                          ],
                          "field_order": [
                            "database_uri",
                            "query"
                          ],
                          "beta": false,
                          "edited": true,
                          "metadata": {},
                          "lf_version": "1.0.19"
                        },
                        "id": "SQLiteQueryTool-MNWYz"
                      },
                      "selected": true,
                      "width": 384,
                      "height": 427,
                      "positionAbsolute": {
                        "x": -1640.3491933693738,
                        "y": -840.3635073922449
                      },
                      "dragging": false
                    },
                    {
                      "id": "ParseData-4I2Zh",
                      "type": "genericNode",
                      "position": {
                        "x": -1240.8520817352141,
                        "y": -840.6603505316414
                      },
                      "data": {
                        "type": "ParseData",
                        "node": {
                          "template": {
                            "_type": "Component",
                            "data": {
                              "trace_as_metadata": true,
                              "list": false,
                              "trace_as_input": true,
                              "required": false,
                              "placeholder": "",
                              "show": true,
                              "name": "data",
                              "value": "",
                              "display_name": "Data",
                              "advanced": false,
                              "input_types": [
                                "Data"
                              ],
                              "dynamic": false,
                              "info": "The data to convert to text.",
                              "title_case": false,
                              "type": "other",
                              "_input_type": "DataInput"
                            },
                            "code": {
                              "type": "code",
                              "required": true,
                              "placeholder": "",
                              "list": false,
                              "show": true,
                              "multiline": true,
                              "value": "from axiestudio.custom import Component\nfrom axiestudio.helpers.data import data_to_text\nfrom axiestudio.io import DataInput, MultilineInput, Output, StrInput\nfrom axiestudio.schema.message import Message\n\n\nclass ParseDataComponent(Component):\n    display_name = \"Parse Data\"\n    description = \"Convert Data into plain text following a specified template.\"\n    icon = \"braces\"\n    name = \"ParseData\"\n\n    inputs = [\n        DataInput(name=\"data\", display_name=\"Data\", info=\"The data to convert to text.\"),\n        MultilineInput(\n            name=\"template\",\n            display_name=\"Template\",\n            info=\"The template to use for formatting the data. It can contain the keys {text}, {data} or any other key in the Data.\",\n            value=\"{text}\",\n        ),\n        StrInput(name=\"sep\", display_name=\"Separator\", advanced=True, value=\"\\n\"),\n    ]\n\n    outputs = [\n        Output(display_name=\"Text\", name=\"text\", method=\"parse_data\"),\n    ]\n\n    def parse_data(self) -> Message:\n        data = self.data if isinstance(self.data, list) else [self.data]\n        template = self.template\n\n        # Ensure 'text' key exists in each data item\n        for item in data:\n            if not hasattr(item, 'text'):\n                item.text = ''  # or set a default value using a method\n\n        result_string = data_to_text(template, data, sep=self.sep)\n        self.status = result_string\n        return Message(text=result_string)",
                              "fileTypes": [],
                              "file_path": "",
                              "password": false,
                              "name": "code",
                              "advanced": true,
                              "dynamic": true,
                              "info": "",
                              "load_from_db": false,
                              "title_case": false,
                              "display_name": "code"
                            },
                            "sep": {
                              "trace_as_metadata": true,
                              "load_from_db": false,
                              "list": false,
                              "required": false,
                              "placeholder": "",
                              "show": true,
                              "name": "sep",
                              "value": "\n",
                              "display_name": "Separator",
                              "advanced": true,
                              "dynamic": false,
                              "info": "",
                              "title_case": false,
                              "type": "str",
                              "_input_type": "StrInput"
                            },
                            "template": {
                              "trace_as_input": true,
                              "multiline": true,
                              "trace_as_metadata": true,
                              "load_from_db": false,
                              "list": false,
                              "required": false,
                              "placeholder": "",
                              "show": true,
                              "name": "template",
                              "value": "<{text}>",
                              "display_name": "Template",
                              "advanced": false,
                              "input_types": [
                                "Message"
                              ],
                              "dynamic": false,
                              "info": "The template to use for formatting the data. It can contain the keys {text}, {data} or any other key in the Data.",
                              "title_case": false,
                              "type": "str",
                              "_input_type": "MultilineInput"
                            }
                          },
                          "description": "Convert Data into plain text following a specified template.",
                          "icon": "braces",
                          "base_classes": [
                            "Message"
                          ],
                          "display_name": "DTC Data Parser",
                          "documentation": "",
                          "custom_fields": {},
                          "output_types": [],
                          "pinned": false,
                          "conditional_paths": [],
                          "frozen": false,
                          "outputs": [
                            {
                              "types": [
                                "Message"
                              ],
                              "selected": "Message",
                              "name": "text",
                              "display_name": "Text",
                              "method": "parse_data",
                              "value": "__UNDEFINED__",
                              "cache": true
                            }
                          ],
                          "field_order": [
                            "data",
                            "template",
                            "sep"
                          ],
                          "beta": false,
                          "edited": true,
                          "lf_version": "1.0.19"
                        },
                        "id": "ParseData-4I2Zh"
                      },
                      "selected": true,
                      "width": 384,
                      "height": 353,
                      "dragging": false,
                      "positionAbsolute": {
                        "x": -1240.8520817352141,
                        "y": -840.6603505316414
                      }
                    },
                    {
                      "id": "Prompt-ekcNX",
                      "type": "genericNode",
                      "position": {
                        "x": -2440.8619359726167,
                        "y": -841.2099164952785
                      },
                      "data": {
                        "type": "Prompt",
                        "node": {
                          "template": {
                            "_type": "Component",
                            "code": {
                              "type": "code",
                              "required": true,
                              "placeholder": "",
                              "list": false,
                              "show": true,
                              "multiline": true,
                              "value": "from axiestudio.base.prompts.api_utils import process_prompt_template\nfrom axiestudio.custom import Component\nfrom axiestudio.inputs.inputs import DefaultPromptField\nfrom axiestudio.io import Output, PromptInput\nfrom axiestudio.schema.message import Message\nfrom axiestudio.template.utils import update_template_values\n\n\nclass PromptComponent(Component):\n    display_name: str = \"Prompt\"\n    description: str = \"Create a prompt template with dynamic variables.\"\n    icon = \"prompts\"\n    trace_type = \"prompt\"\n    name = \"Prompt\"\n\n    inputs = [\n        PromptInput(name=\"template\", display_name=\"Template\"),\n    ]\n\n    outputs = [\n        Output(display_name=\"Prompt Message\", name=\"prompt\", method=\"build_prompt\"),\n    ]\n\n    async def build_prompt(\n        self,\n    ) -> Message:\n        prompt = await Message.from_template_and_variables(**self._attributes)\n        self.status = prompt.text\n        return prompt\n\n    def _update_template(self, frontend_node: dict):\n        prompt_template = frontend_node[\"template\"][\"template\"][\"value\"]\n        custom_fields = frontend_node[\"custom_fields\"]\n        frontend_node_template = frontend_node[\"template\"]\n        _ = process_prompt_template(\n            template=prompt_template,\n            name=\"template\",\n            custom_fields=custom_fields,\n            frontend_node_template=frontend_node_template,\n        )\n        return frontend_node\n\n    def post_code_processing(self, new_frontend_node: dict, current_frontend_node: dict):\n        \"\"\"\n        This function is called after the code validation is done.\n        \"\"\"\n        frontend_node = super().post_code_processing(new_frontend_node, current_frontend_node)\n        template = frontend_node[\"template\"][\"template\"][\"value\"]\n        # Kept it duplicated for backwards compatibility\n        _ = process_prompt_template(\n            template=template,\n            name=\"template\",\n            custom_fields=frontend_node[\"custom_fields\"],\n            frontend_node_template=frontend_node[\"template\"],\n        )\n        # Now that template is updated, we need to grab any values that were set in the current_frontend_node\n        # and update the frontend_node with those values\n        update_template_values(new_template=frontend_node, previous_template=current_frontend_node[\"template\"])\n        return frontend_node\n\n    def _get_fallback_input(self, **kwargs):\n        return DefaultPromptField(**kwargs)\n",
                              "fileTypes": [],
                              "file_path": "",
                              "password": false,
                              "name": "code",
                              "advanced": true,
                              "dynamic": true,
                              "info": "",
                              "load_from_db": false,
                              "title_case": false,
                              "display_name": "code"
                            },
                            "template": {
                              "trace_as_input": true,
                              "list": false,
                              "required": false,
                              "placeholder": "",
                              "show": true,
                              "name": "template",
                              "value": "SELECT * FROM {table} WHERE \"Tractor Model Code\" like '%{TMC}%' AND \"Suspect Parameter Number\" = '{SPN}' AND \"Failure Mode Identifier\" = '{FMI}';",
                              "display_name": "Template",
                              "advanced": false,
                              "dynamic": false,
                              "info": "",
                              "title_case": false,
                              "type": "prompt",
                              "_input_type": "PromptInput"
                            },
                            "table": {
                              "field_type": "str",
                              "required": false,
                              "placeholder": "",
                              "list": false,
                              "show": true,
                              "multiline": true,
                              "value": "codici_errore",
                              "fileTypes": [],
                              "file_path": "",
                              "name": "table",
                              "display_name": "table",
                              "advanced": false,
                              "input_types": [
                                "Message",
                                "Text"
                              ],
                              "dynamic": false,
                              "info": "",
                              "load_from_db": false,
                              "title_case": false,
                              "type": "str"
                            },
                            "SPN": {
                              "field_type": "str",
                              "required": false,
                              "placeholder": "",
                              "list": false,
                              "show": true,
                              "multiline": true,
                              "value": "",
                              "fileTypes": [],
                              "file_path": "",
                              "name": "SPN",
                              "display_name": "SPN",
                              "advanced": false,
                              "input_types": [
                                "Message",
                                "Text"
                              ],
                              "dynamic": false,
                              "info": "",
                              "load_from_db": false,
                              "title_case": false,
                              "type": "str"
                            },
                            "FMI": {
                              "field_type": "str",
                              "required": false,
                              "placeholder": "",
                              "list": false,
                              "show": true,
                              "multiline": true,
                              "value": "",
                              "fileTypes": [],
                              "file_path": "",
                              "name": "FMI",
                              "display_name": "FMI",
                              "advanced": false,
                              "input_types": [
                                "Message",
                                "Text"
                              ],
                              "dynamic": false,
                              "info": "",
                              "load_from_db": false,
                              "title_case": false,
                              "type": "str"
                            },
                            "TMC": {
                              "field_type": "str",
                              "required": false,
                              "placeholder": "",
                              "list": false,
                              "show": true,
                              "multiline": true,
                              "value": "",
                              "fileTypes": [],
                              "file_path": "",
                              "name": "TMC",
                              "display_name": "TMC",
                              "advanced": false,
                              "input_types": [
                                "Message",
                                "Text"
                              ],
                              "dynamic": false,
                              "info": "",
                              "load_from_db": false,
                              "title_case": false,
                              "type": "str"
                            }
                          },
                          "description": "Create a prompt template with dynamic variables.",
                          "icon": "prompts",
                          "is_input": null,
                          "is_output": null,
                          "is_composition": null,
                          "base_classes": [
                            "Message"
                          ],
                          "name": "",
                          "display_name": "DTC Query Builder",
                          "documentation": "",
                          "custom_fields": {
                            "template": [
                              "table",
                              "TMC",
                              "SPN",
                              "FMI"
                            ]
                          },
                          "output_types": [],
                          "full_path": null,
                          "pinned": false,
                          "conditional_paths": [],
                          "frozen": false,
                          "outputs": [
                            {
                              "types": [
                                "Message"
                              ],
                              "selected": "Message",
                              "name": "prompt",
                              "hidden": null,
                              "display_name": "Prompt Message",
                              "method": "build_prompt",
                              "value": "__UNDEFINED__",
                              "cache": true,
                              "required_inputs": null
                            }
                          ],
                          "field_order": [
                            "template"
                          ],
                          "beta": false,
                          "error": null,
                          "edited": false,
                          "metadata": {},
                          "lf_version": "1.0.19"
                        },
                        "id": "Prompt-ekcNX"
                      },
                      "selected": true,
                      "width": 384,
                      "height": 649,
                      "dragging": false,
                      "positionAbsolute": {
                        "x": -2440.8619359726167,
                        "y": -841.2099164952785
                      }
                    },
                    {
                      "id": "SQLCleaner-d38L0",
                      "type": "genericNode",
                      "position": {
                        "x": -2041.1339656996165,
                        "y": -840.2959332945509
                      },
                      "data": {
                        "type": "SQLCleaner",
                        "node": {
                          "template": {
                            "_type": "Component",
                            "code": {
                              "type": "code",
                              "required": true,
                              "placeholder": "",
                              "list": false,
                              "show": true,
                              "multiline": true,
                              "value": "from axiestudio.custom import Component\nfrom axiestudio.io import MessageTextInput, Output\nfrom axiestudio.schema.message import Message\n\nclass SQLCleanerComponent(Component):\n    display_name = \"SQL Cleaner\"\n    description = \"Cleans SQL queries by removing conditions with 'Not found' values.\"\n    icon = \"🧹\"\n    name = \"SQLCleaner\"\n    inputs = [\n        MessageTextInput(\n            name=\"sql_query\",\n            display_name=\"SQL Query\",\n            info=\"The SQL query to clean.\",\n            required=True\n        ),\n    ]\n    outputs = [\n        Output(display_name=\"Cleaned SQL\", name=\"cleaned_sql\", method=\"clean_sql\"),\n    ]\n    def clean_sql(self) -> Message:\n        sql_query = self.sql_query\n        # Replace 'Not found' with '@' if the query is invalid\n        if self._is_query_invalid(sql_query):\n            sql_query = sql_query.replace('Not found', '@')\n        \n        # Normalize 'LIKE' conditions to '=' for consistency\n        sql_query = self._normalize_like_conditions(sql_query)\n\n        # Clean the SQL query by removing unwanted conditions\n        cleaned_sql = self._remove_unwanted_conditions(sql_query)\n\n        self.status = cleaned_sql\n        return Message(text=cleaned_sql)\n\n    def _is_query_invalid(self, sql_query: str) -> bool:\n        \"\"\"Check if the SQL query contains conditions that should result in no output.\"\"\"\n        return '\"Suspect Parameter Number\" = \\'Not found\\'' in sql_query\n\n    def _normalize_like_conditions(self, sql_query: str) -> str:\n        \"\"\"Convert 'LIKE %Not found%' conditions to '=' for consistency.\"\"\"\n        return sql_query.replace('\"Tractor Model Code\" like \\'%Not found%\\'', '\"Tractor Model Code\" = \\'Not found\\'')\n\n    def _remove_unwanted_conditions(self, sql_query: str) -> str:\n        \"\"\"Remove conditions with 'Not found' from the SQL query.\"\"\"\n        if \"WHERE\" in sql_query.upper():\n            select_part, where_part = sql_query.split(\"WHERE\", 1)\n            conditions = where_part.split(\"AND\")\n            cleaned_conditions = [cond for cond in conditions if \"'Not found'\" not in cond]\n\n            # Reconstruct the cleaned SQL query\n            return f\"{select_part.strip()} WHERE {' AND '.join(cleaned_conditions).strip()}\" if cleaned_conditions else select_part.strip()\n        \n        return sql_query",
                              "fileTypes": [],
                              "file_path": "",
                              "password": false,
                              "name": "code",
                              "advanced": true,
                              "dynamic": true,
                              "info": "",
                              "load_from_db": false,
                              "title_case": false,
                              "display_name": "code"
                            },
                            "sql_query": {
                              "trace_as_input": true,
                              "trace_as_metadata": true,
                              "load_from_db": false,
                              "list": false,
                              "required": true,
                              "placeholder": "",
                              "show": true,
                              "name": "sql_query",
                              "value": "",
                              "display_name": "SQL Query",
                              "advanced": false,
                              "input_types": [
                                "Message"
                              ],
                              "dynamic": false,
                              "info": "The SQL query to clean.",
                              "title_case": false,
                              "type": "str",
                              "_input_type": "MessageTextInput"
                            }
                          },
                          "description": "Cleans SQL queries by removing conditions with 'Not found' values.",
                          "icon": "🧹",
                          "base_classes": [
                            "Message"
                          ],
                          "display_name": "DTC Query Cleaner",
                          "documentation": "",
                          "custom_fields": {},
                          "output_types": [],
                          "pinned": false,
                          "conditional_paths": [],
                          "frozen": false,
                          "outputs": [
                            {
                              "types": [
                                "Message"
                              ],
                              "selected": "Message",
                              "name": "cleaned_sql",
                              "display_name": "Cleaned SQL",
                              "method": "clean_sql",
                              "value": "__UNDEFINED__",
                              "cache": true
                            }
                          ],
                          "field_order": [
                            "sql_query"
                          ],
                          "beta": false,
                          "edited": true,
                          "metadata": {},
                          "lf_version": "1.0.19"
                        },
                        "id": "SQLCleaner-d38L0"
                      },
                      "selected": true,
                      "width": 384,
                      "height": 301,
                      "dragging": false,
                      "positionAbsolute": {
                        "x": -2041.1339656996165,
                        "y": -840.2959332945509
                      }
                    }
                  ],
                  "edges": [
                    {
                      "source": "SQLiteQueryTool-MNWYz",
                      "sourceHandle": "{œdataTypeœ:œSQLiteQueryToolœ,œidœ:œSQLiteQueryTool-MNWYzœ,œnameœ:œapi_run_modelœ,œoutput_typesœ:[œDataœ]}",
                      "target": "ParseData-4I2Zh",
                      "targetHandle": "{œfieldNameœ:œdataœ,œidœ:œParseData-4I2Zhœ,œinputTypesœ:[œDataœ],œtypeœ:œotherœ}",
                      "data": {
                        "targetHandle": {
                          "fieldName": "data",
                          "id": "ParseData-4I2Zh",
                          "inputTypes": [
                            "Data"
                          ],
                          "type": "other"
                        },
                        "sourceHandle": {
                          "dataType": "SQLiteQueryTool",
                          "id": "SQLiteQueryTool-MNWYz",
                          "name": "api_run_model",
                          "output_types": [
                            "Data"
                          ]
                        }
                      },
                      "id": "reactflow__edge-SQLiteQueryTool-MNWYz{œdataTypeœ:œSQLiteQueryToolœ,œidœ:œSQLiteQueryTool-MNWYzœ,œnameœ:œapi_run_modelœ,œoutput_typesœ:[œDataœ]}-ParseData-4I2Zh{œfieldNameœ:œdataœ,œidœ:œParseData-4I2Zhœ,œinputTypesœ:[œDataœ],œtypeœ:œotherœ}",
                      "className": "",
                      "selected": false,
                      "animated": false
                    },
                    {
                      "source": "Prompt-ekcNX",
                      "sourceHandle": "{œdataTypeœ:œPromptœ,œidœ:œPrompt-ekcNXœ,œnameœ:œpromptœ,œoutput_typesœ:[œMessageœ]}",
                      "target": "SQLCleaner-d38L0",
                      "targetHandle": "{œfieldNameœ:œsql_queryœ,œidœ:œSQLCleaner-d38L0œ,œinputTypesœ:[œMessageœ],œtypeœ:œstrœ}",
                      "data": {
                        "targetHandle": {
                          "fieldName": "sql_query",
                          "id": "SQLCleaner-d38L0",
                          "inputTypes": [
                            "Message"
                          ],
                          "type": "str"
                        },
                        "sourceHandle": {
                          "dataType": "Prompt",
                          "id": "Prompt-ekcNX",
                          "name": "prompt",
                          "output_types": [
                            "Message"
                          ]
                        }
                      },
                      "id": "reactflow__edge-Prompt-ekcNX{œdataTypeœ:œPromptœ,œidœ:œPrompt-ekcNXœ,œnameœ:œpromptœ,œoutput_typesœ:[œMessageœ]}-SQLCleaner-d38L0{œfieldNameœ:œsql_queryœ,œidœ:œSQLCleaner-d38L0œ,œinputTypesœ:[œMessageœ],œtypeœ:œstrœ}",
                      "selected": false,
                      "className": "",
                      "animated": false
                    },
                    {
                      "source": "SQLCleaner-d38L0",
                      "sourceHandle": "{œdataTypeœ:œSQLCleanerœ,œidœ:œSQLCleaner-d38L0œ,œnameœ:œcleaned_sqlœ,œoutput_typesœ:[œMessageœ]}",
                      "target": "SQLiteQueryTool-MNWYz",
                      "targetHandle": "{œfieldNameœ:œqueryœ,œidœ:œSQLiteQueryTool-MNWYzœ,œinputTypesœ:[œMessageœ],œtypeœ:œstrœ}",
                      "data": {
                        "targetHandle": {
                          "fieldName": "query",
                          "id": "SQLiteQueryTool-MNWYz",
                          "inputTypes": [
                            "Message"
                          ],
                          "type": "str"
                        },
                        "sourceHandle": {
                          "dataType": "SQLCleaner",
                          "id": "SQLCleaner-d38L0",
                          "name": "cleaned_sql",
                          "output_types": [
                            "Message"
                          ]
                        }
                      },
                      "id": "reactflow__edge-SQLCleaner-d38L0{œdataTypeœ:œSQLCleanerœ,œidœ:œSQLCleaner-d38L0œ,œnameœ:œcleaned_sqlœ,œoutput_typesœ:[œMessageœ]}-SQLiteQueryTool-MNWYz{œfieldNameœ:œqueryœ,œidœ:œSQLiteQueryTool-MNWYzœ,œinputTypesœ:[œMessageœ],œtypeœ:œstrœ}",
                      "className": "",
                      "selected": false,
                      "animated": false
                    }
                  ],
                  "viewport": {
                    "zoom": 1,
                    "x": 0,
                    "y": 0
                  }
                },
                "is_component": false,
                "name": "Gigantic Bassi",
                "description": "",
                "id": "477Rx"
              },
              "outputs": [
                {
                  "types": [
                    "Tool"
                  ],
                  "selected": "Tool",
                  "name": "SQLiteQueryTool-MNWYz_api_build_tool",
                  "display_name": "Tool",
                  "method": "build_tool",
                  "value": "__UNDEFINED__",
                  "cache": true,
                  "required_inputs": [
                    "database_uri",
                    "query"
                  ],
                  "proxy": {
                    "id": "SQLiteQueryTool-MNWYz",
                    "name": "api_build_tool",
                    "nodeDisplayName": "DTC Data Retriever"
                  }
                },
                {
                  "types": [
                    "Message"
                  ],
                  "selected": "Message",
                  "name": "ParseData-4I2Zh_text",
                  "display_name": "Text",
                  "method": "parse_data",
                  "value": "__UNDEFINED__",
                  "cache": true,
                  "proxy": {
                    "id": "ParseData-4I2Zh",
                    "name": "text",
                    "nodeDisplayName": "DTC Data Parser"
                  }
                }
              ],
              "lf_version": "1.0.19"
            }
          },
          "id": "groupComponent-Jcwnj",
          "position": {
            "x": -1840.7992941942052,
            "y": -840.6324269284289
          },
          "type": "genericNode",
          "width": 384,
          "height": 673,
          "selected": false,
          "dragging": false
        },
        {
          "data": {
            "id": "groupComponent-Ar7df",
            "type": "GroupNode",
            "node": {
              "display_name": "TBU Data Retriever",
              "documentation": "",
              "description": "",
              "template": {
                "code_SQLiteQueryTool-tALad": {
                  "type": "code",
                  "required": true,
                  "placeholder": "",
                  "list": false,
                  "show": true,
                  "multiline": true,
                  "value": "from axiestudio.base.langchain_utilities.model import LCToolComponent\nfrom axiestudio.field_typing import Tool\nfrom axiestudio.inputs import MessageTextInput, MultilineInput\nfrom axiestudio.schema import Data\nfrom sqlalchemy import create_engine, text\nfrom sqlalchemy.exc import SQLAlchemyError\nfrom typing import Union, List, Tuple\n\nclass SQLiteQueryTool(LCToolComponent):\n    display_name = \"SQLite Query Executor\"\n    description = \"Executes a given SQL query on a specified SQLite database using a URI.\"\n    icon = \"🔎\"\n    name = \"SQLiteQueryTool\"\n    inputs = [\n        MessageTextInput(\n            name=\"database_uri\",\n            display_name=\"Database URI\",\n            info=\"URI of the SQLite database (e.g., sqlite:///path/to/database.db).\",\n            required=True\n        ),\n        MultilineInput(\n            name=\"query\",\n            display_name=\"SQL Query\",\n            info=\"SQL query to be executed on the database.\",\n            required=True\n        )\n    ]\n\n    def run_model(self) -> Union[Data, List[Data]]:\n        \"\"\"Executes the SQL query and returns the results.\"\"\"\n        database_uri = self.database_uri\n        query = self.query\n\n        # Connect to the SQLite database using SQLAlchemy with the provided URI\n        engine = create_engine(database_uri)\n        try:\n            result_data = self._execute_query(engine, query)\n            return self._format_results(result_data)\n        except SQLAlchemyError as error:\n            return self._handle_error(error)\n\n    def _execute_query(self, engine, query: str) -> Tuple[List[tuple], List[str]]:\n        \"\"\"Executes the SQL query and returns the raw results and column keys.\"\"\"\n        with engine.connect() as connection:\n            result = connection.execute(text(query))\n            rows = result.fetchall()\n            keys = result.keys()\n            return rows, keys\n\n    def _format_results(self, result_data: Tuple[List[tuple], List[str]]) -> List[Data]:\n        \"\"\"Formats the raw results into a list of Data objects.\"\"\"\n        rows, keys = result_data\n        if not rows:\n            return []\n\n        # Create a list of dictionaries mapping keys to row values\n        formatted_results = [dict(zip(keys, row)) for row in rows]\n        return [Data(data=row, text=str(row)) for row in formatted_results]\n\n    def _handle_error(self, error: SQLAlchemyError) -> List[Data]:\n        \"\"\"Handles errors during query execution.\"\"\"\n        error_message = f\"Error executing query: {str(error)}\"\n        self.status = error_message\n        return [Data(data={\"error\": error_message})]\n\n    def build_tool(self) -> Tool:\n        \"\"\"Builds the tool with the execution function.\"\"\"\n        return Tool(\n            name=\"sqlite_query_tool\",\n            description=self.description,\n            func=self.run_model,\n        )",
                  "fileTypes": [],
                  "file_path": "",
                  "password": false,
                  "name": "code",
                  "advanced": true,
                  "dynamic": true,
                  "info": "",
                  "load_from_db": false,
                  "title_case": false,
                  "display_name": "code",
                  "proxy": {
                    "id": "SQLiteQueryTool-tALad",
                    "field": "code"
                  }
                },
                "database_uri_SQLiteQueryTool-tALad": {
                  "trace_as_input": true,
                  "trace_as_metadata": true,
                  "load_from_db": false,
                  "list": false,
                  "required": true,
                  "placeholder": "",
                  "show": true,
                  "name": "database_uri",
                  "value": "sqlite://///Users/michelepastorello/Desktop/ArgoBot/TBU.sqlite3",
                  "display_name": "Database URI",
                  "advanced": false,
                  "input_types": [
                    "Message"
                  ],
                  "dynamic": false,
                  "info": "URI of the SQLite database (e.g., sqlite:///path/to/database.db).",
                  "title_case": false,
                  "type": "str",
                  "_input_type": "MessageTextInput",
                  "proxy": {
                    "id": "SQLiteQueryTool-tALad",
                    "field": "database_uri"
                  }
                },
                "code_ParseData-Y56oH": {
                  "type": "code",
                  "required": true,
                  "placeholder": "",
                  "list": false,
                  "show": true,
                  "multiline": true,
                  "value": "from axiestudio.custom import Component\nfrom axiestudio.helpers.data import data_to_text\nfrom axiestudio.io import DataInput, MultilineInput, Output, StrInput\nfrom axiestudio.schema.message import Message\n\n\nclass ParseDataComponent(Component):\n    display_name = \"Parse Data\"\n    description = \"Convert Data into plain text following a specified template.\"\n    icon = \"braces\"\n    name = \"ParseData\"\n\n    inputs = [\n        DataInput(name=\"data\", display_name=\"Data\", info=\"The data to convert to text.\"),\n        MultilineInput(\n            name=\"template\",\n            display_name=\"Template\",\n            info=\"The template to use for formatting the data. It can contain the keys {text}, {data} or any other key in the Data.\",\n            value=\"{text}\",\n        ),\n        StrInput(name=\"sep\", display_name=\"Separator\", advanced=True, value=\"\\n\"),\n    ]\n\n    outputs = [\n        Output(display_name=\"Text\", name=\"text\", method=\"parse_data\"),\n    ]\n\n    def parse_data(self) -> Message:\n        data = self.data if isinstance(self.data, list) else [self.data]\n        template = self.template\n\n        # Ensure 'text' key exists in each data item\n        for item in data:\n            if not hasattr(item, 'text'):\n                item.text = ''  # or set a default value using a method\n\n        result_string = data_to_text(template, data, sep=self.sep)\n        self.status = result_string\n        return Message(text=result_string)",
                  "fileTypes": [],
                  "file_path": "",
                  "password": false,
                  "name": "code",
                  "advanced": true,
                  "dynamic": true,
                  "info": "",
                  "load_from_db": false,
                  "title_case": false,
                  "display_name": "code",
                  "proxy": {
                    "id": "ParseData-Y56oH",
                    "field": "code"
                  }
                },
                "sep_ParseData-Y56oH": {
                  "trace_as_metadata": true,
                  "load_from_db": false,
                  "list": false,
                  "required": false,
                  "placeholder": "",
                  "show": true,
                  "name": "sep",
                  "value": "\n",
                  "display_name": "Separator",
                  "advanced": true,
                  "dynamic": false,
                  "info": "",
                  "title_case": false,
                  "type": "str",
                  "_input_type": "StrInput",
                  "proxy": {
                    "id": "ParseData-Y56oH",
                    "field": "sep"
                  }
                },
                "template_ParseData-Y56oH": {
                  "trace_as_input": true,
                  "multiline": true,
                  "trace_as_metadata": true,
                  "load_from_db": false,
                  "list": false,
                  "required": false,
                  "placeholder": "",
                  "show": true,
                  "name": "template",
                  "value": "<technical_bulletin>\n[{bulletin_code}]\n[{publication_year}]\n[{tractor_models}]\n[{text}]\n</technical_bulletin>",
                  "display_name": "Template",
                  "advanced": true,
                  "input_types": [
                    "Message"
                  ],
                  "dynamic": false,
                  "info": "The template to use for formatting the data. It can contain the keys {text}, {data} or any other key in the Data.",
                  "title_case": false,
                  "type": "str",
                  "_input_type": "MultilineInput",
                  "proxy": {
                    "id": "ParseData-Y56oH",
                    "field": "template"
                  }
                },
                "code_Prompt-vkXht": {
                  "type": "code",
                  "required": true,
                  "placeholder": "",
                  "list": false,
                  "show": true,
                  "multiline": true,
                  "value": "from axiestudio.base.prompts.api_utils import process_prompt_template\nfrom axiestudio.custom import Component\nfrom axiestudio.inputs.inputs import DefaultPromptField\nfrom axiestudio.io import Output, PromptInput\nfrom axiestudio.schema.message import Message\nfrom axiestudio.template.utils import update_template_values\n\n\nclass PromptComponent(Component):\n    display_name: str = \"Prompt\"\n    description: str = \"Create a prompt template with dynamic variables.\"\n    icon = \"prompts\"\n    trace_type = \"prompt\"\n    name = \"Prompt\"\n\n    inputs = [\n        PromptInput(name=\"template\", display_name=\"Template\"),\n    ]\n\n    outputs = [\n        Output(display_name=\"Prompt Message\", name=\"prompt\", method=\"build_prompt\"),\n    ]\n\n    async def build_prompt(\n        self,\n    ) -> Message:\n        prompt = await Message.from_template_and_variables(**self._attributes)\n        self.status = prompt.text\n        return prompt\n\n    def _update_template(self, frontend_node: dict):\n        prompt_template = frontend_node[\"template\"][\"template\"][\"value\"]\n        custom_fields = frontend_node[\"custom_fields\"]\n        frontend_node_template = frontend_node[\"template\"]\n        _ = process_prompt_template(\n            template=prompt_template,\n            name=\"template\",\n            custom_fields=custom_fields,\n            frontend_node_template=frontend_node_template,\n        )\n        return frontend_node\n\n    def post_code_processing(self, new_frontend_node: dict, current_frontend_node: dict):\n        \"\"\"\n        This function is called after the code validation is done.\n        \"\"\"\n        frontend_node = super().post_code_processing(new_frontend_node, current_frontend_node)\n        template = frontend_node[\"template\"][\"template\"][\"value\"]\n        # Kept it duplicated for backwards compatibility\n        _ = process_prompt_template(\n            template=template,\n            name=\"template\",\n            custom_fields=frontend_node[\"custom_fields\"],\n            frontend_node_template=frontend_node[\"template\"],\n        )\n        # Now that template is updated, we need to grab any values that were set in the current_frontend_node\n        # and update the frontend_node with those values\n        update_template_values(new_template=frontend_node, previous_template=current_frontend_node[\"template\"])\n        return frontend_node\n\n    def _get_fallback_input(self, **kwargs):\n        return DefaultPromptField(**kwargs)\n",
                  "fileTypes": [],
                  "file_path": "",
                  "password": false,
                  "name": "code",
                  "advanced": true,
                  "dynamic": true,
                  "info": "",
                  "load_from_db": false,
                  "title_case": false,
                  "display_name": "code",
                  "proxy": {
                    "id": "Prompt-vkXht",
                    "field": "code"
                  }
                },
                "template_Prompt-vkXht": {
                  "trace_as_input": true,
                  "list": false,
                  "required": false,
                  "placeholder": "",
                  "show": true,
                  "name": "template",
                  "value": "SELECT * FROM {table} WHERE \"bulletin_code\" = '{TBC}' AND \"publication_year\" = '{year}' AND \"tractor_models\" like '%{TMC}%';",
                  "display_name": "Template",
                  "advanced": true,
                  "dynamic": false,
                  "info": "",
                  "title_case": false,
                  "type": "prompt",
                  "_input_type": "PromptInput",
                  "proxy": {
                    "id": "Prompt-vkXht",
                    "field": "template"
                  }
                },
                "table_Prompt-vkXht": {
                  "field_type": "str",
                  "required": false,
                  "placeholder": "",
                  "list": false,
                  "show": true,
                  "multiline": true,
                  "value": "TBU",
                  "fileTypes": [],
                  "file_path": "",
                  "name": "table",
                  "display_name": "table",
                  "advanced": false,
                  "input_types": [
                    "Message",
                    "Text"
                  ],
                  "dynamic": false,
                  "info": "",
                  "load_from_db": false,
                  "title_case": false,
                  "type": "str",
                  "proxy": {
                    "id": "Prompt-vkXht",
                    "field": "table"
                  }
                },
                "TMC_Prompt-vkXht": {
                  "field_type": "str",
                  "required": false,
                  "placeholder": "",
                  "list": false,
                  "show": true,
                  "multiline": true,
                  "value": "",
                  "fileTypes": [],
                  "file_path": "",
                  "name": "TMC",
                  "display_name": "TMC",
                  "advanced": false,
                  "input_types": [
                    "Message",
                    "Text"
                  ],
                  "dynamic": false,
                  "info": "",
                  "load_from_db": false,
                  "title_case": false,
                  "type": "str",
                  "proxy": {
                    "id": "Prompt-vkXht",
                    "field": "TMC"
                  }
                },
                "year_Prompt-vkXht": {
                  "field_type": "str",
                  "required": false,
                  "placeholder": "",
                  "list": false,
                  "show": true,
                  "multiline": true,
                  "value": "",
                  "fileTypes": [],
                  "file_path": "",
                  "name": "year",
                  "display_name": "year",
                  "advanced": false,
                  "input_types": [
                    "Message",
                    "Text"
                  ],
                  "dynamic": false,
                  "info": "",
                  "load_from_db": false,
                  "title_case": false,
                  "type": "str",
                  "proxy": {
                    "id": "Prompt-vkXht",
                    "field": "year"
                  }
                },
                "TBC_Prompt-vkXht": {
                  "field_type": "str",
                  "required": false,
                  "placeholder": "",
                  "list": false,
                  "show": true,
                  "multiline": true,
                  "value": "",
                  "fileTypes": [],
                  "file_path": "",
                  "name": "TBC",
                  "display_name": "TBC",
                  "advanced": false,
                  "input_types": [
                    "Message",
                    "Text"
                  ],
                  "dynamic": false,
                  "info": "",
                  "load_from_db": false,
                  "title_case": false,
                  "type": "str",
                  "proxy": {
                    "id": "Prompt-vkXht",
                    "field": "TBC"
                  }
                },
                "code_SQLCleaner-y0UyV": {
                  "type": "code",
                  "required": true,
                  "placeholder": "",
                  "list": false,
                  "show": true,
                  "multiline": true,
                  "value": "from axiestudio.custom import Component\nfrom axiestudio.io import MessageTextInput, Output\nfrom axiestudio.schema.message import Message\n\nclass SQLCleanerComponent(Component):\n    display_name = \"SQL Cleaner\"\n    description = \"Cleans SQL queries by removing conditions with 'Not found' values.\"\n    icon = \"🧹\"\n    name = \"SQLCleaner\"\n    inputs = [\n        MessageTextInput(\n            name=\"sql_query\",\n            display_name=\"SQL Query\",\n            info=\"The SQL query to clean.\",\n            required=True\n        ),\n    ]\n    outputs = [\n        Output(display_name=\"Cleaned SQL\", name=\"cleaned_sql\", method=\"clean_sql\"),\n    ]\n    def clean_sql(self) -> Message:\n        sql_query = self.sql_query\n        # Replace 'Not found' with '@' if the query is invalid\n        if self._is_query_invalid(sql_query):\n            sql_query = sql_query.replace('Not found', '@')\n        \n        # Normalize 'LIKE' conditions to '=' for consistency\n        sql_query = self._normalize_like_conditions(sql_query)\n\n        # Clean the SQL query by removing unwanted conditions\n        cleaned_sql = self._remove_unwanted_conditions(sql_query)\n\n        self.status = cleaned_sql\n        return Message(text=cleaned_sql)\n\n    def _is_query_invalid(self, sql_query: str) -> bool:\n        \"\"\"Check if the SQL query contains conditions that should result in no output.\"\"\"\n        return (\n            \"SELECT * FROM TBU\" in sql_query and\n            \"WHERE\" in sql_query.upper() and\n            '\"bulletin_code\" = \\'Not found\\'' in sql_query and\n            '\"publication_year\" = \\'Not found\\'' in sql_query and\n            '\"tractor_models\" like \\'%Not found%\\'' in sql_query\n        )\n\n    def _normalize_like_conditions(self, sql_query: str) -> str:\n        \"\"\"Convert 'LIKE %Not found%' conditions to '=' for consistency.\"\"\"\n        return sql_query.replace('\"tractor_models\" like \\'%Not found%\\'', '\"tractor_models\" = \\'Not found\\'')\n\n    def _remove_unwanted_conditions(self, sql_query: str) -> str:\n        \"\"\"Remove conditions with 'Not found' from the SQL query.\"\"\"\n        if \"WHERE\" in sql_query.upper():\n            select_part, where_part = sql_query.split(\"WHERE\", 1)\n            conditions = where_part.split(\"AND\")\n            cleaned_conditions = [cond for cond in conditions if \"'Not found'\" not in cond]\n\n            # Reconstruct the cleaned SQL query\n            return f\"{select_part.strip()} WHERE {' AND '.join(cleaned_conditions).strip()}\" if cleaned_conditions else select_part.strip()\n        \n        return sql_query",
                  "fileTypes": [],
                  "file_path": "",
                  "password": false,
                  "name": "code",
                  "advanced": true,
                  "dynamic": true,
                  "info": "",
                  "load_from_db": false,
                  "title_case": false,
                  "display_name": "code",
                  "proxy": {
                    "id": "SQLCleaner-y0UyV",
                    "field": "code"
                  }
                }
              },
              "flow": {
                "data": {
                  "nodes": [
                    {
                      "id": "SQLiteQueryTool-tALad",
                      "type": "genericNode",
                      "position": {
                        "x": -1240.2021346988672,
                        "y": -840.3202810435371
                      },
                      "data": {
                        "type": "SQLiteQueryTool",
                        "node": {
                          "template": {
                            "_type": "Component",
                            "code": {
                              "type": "code",
                              "required": true,
                              "placeholder": "",
                              "list": false,
                              "show": true,
                              "multiline": true,
                              "value": "from axiestudio.base.langchain_utilities.model import LCToolComponent\nfrom axiestudio.field_typing import Tool\nfrom axiestudio.inputs import MessageTextInput, MultilineInput\nfrom axiestudio.schema import Data\nfrom sqlalchemy import create_engine, text\nfrom sqlalchemy.exc import SQLAlchemyError\nfrom typing import Union, List, Tuple\n\nclass SQLiteQueryTool(LCToolComponent):\n    display_name = \"SQLite Query Executor\"\n    description = \"Executes a given SQL query on a specified SQLite database using a URI.\"\n    icon = \"🔎\"\n    name = \"SQLiteQueryTool\"\n    inputs = [\n        MessageTextInput(\n            name=\"database_uri\",\n            display_name=\"Database URI\",\n            info=\"URI of the SQLite database (e.g., sqlite:///path/to/database.db).\",\n            required=True\n        ),\n        MultilineInput(\n            name=\"query\",\n            display_name=\"SQL Query\",\n            info=\"SQL query to be executed on the database.\",\n            required=True\n        )\n    ]\n\n    def run_model(self) -> Union[Data, List[Data]]:\n        \"\"\"Executes the SQL query and returns the results.\"\"\"\n        database_uri = self.database_uri\n        query = self.query\n\n        # Connect to the SQLite database using SQLAlchemy with the provided URI\n        engine = create_engine(database_uri)\n        try:\n            result_data = self._execute_query(engine, query)\n            return self._format_results(result_data)\n        except SQLAlchemyError as error:\n            return self._handle_error(error)\n\n    def _execute_query(self, engine, query: str) -> Tuple[List[tuple], List[str]]:\n        \"\"\"Executes the SQL query and returns the raw results and column keys.\"\"\"\n        with engine.connect() as connection:\n            result = connection.execute(text(query))\n            rows = result.fetchall()\n            keys = result.keys()\n            return rows, keys\n\n    def _format_results(self, result_data: Tuple[List[tuple], List[str]]) -> List[Data]:\n        \"\"\"Formats the raw results into a list of Data objects.\"\"\"\n        rows, keys = result_data\n        if not rows:\n            return []\n\n        # Create a list of dictionaries mapping keys to row values\n        formatted_results = [dict(zip(keys, row)) for row in rows]\n        return [Data(data=row, text=str(row)) for row in formatted_results]\n\n    def _handle_error(self, error: SQLAlchemyError) -> List[Data]:\n        \"\"\"Handles errors during query execution.\"\"\"\n        error_message = f\"Error executing query: {str(error)}\"\n        self.status = error_message\n        return [Data(data={\"error\": error_message})]\n\n    def build_tool(self) -> Tool:\n        \"\"\"Builds the tool with the execution function.\"\"\"\n        return Tool(\n            name=\"sqlite_query_tool\",\n            description=self.description,\n            func=self.run_model,\n        )",
                              "fileTypes": [],
                              "file_path": "",
                              "password": false,
                              "name": "code",
                              "advanced": true,
                              "dynamic": true,
                              "info": "",
                              "load_from_db": false,
                              "title_case": false,
                              "display_name": "code"
                            },
                            "database_uri": {
                              "trace_as_input": true,
                              "trace_as_metadata": true,
                              "load_from_db": false,
                              "list": false,
                              "required": true,
                              "placeholder": "",
                              "show": true,
                              "name": "database_uri",
                              "value": "sqlite://///Users/michelepastorello/Desktop/ArgoBot/TBU.sqlite3",
                              "display_name": "Database URI",
                              "advanced": false,
                              "input_types": [
                                "Message"
                              ],
                              "dynamic": false,
                              "info": "URI of the SQLite database (e.g., sqlite:///path/to/database.db).",
                              "title_case": false,
                              "type": "str",
                              "_input_type": "MessageTextInput"
                            },
                            "query": {
                              "trace_as_input": true,
                              "multiline": true,
                              "trace_as_metadata": true,
                              "load_from_db": false,
                              "list": false,
                              "required": true,
                              "placeholder": "",
                              "show": true,
                              "name": "query",
                              "value": "",
                              "display_name": "SQL Query",
                              "advanced": false,
                              "input_types": [
                                "Message"
                              ],
                              "dynamic": false,
                              "info": "SQL query to be executed on the database.",
                              "title_case": false,
                              "type": "str",
                              "_input_type": "MultilineInput"
                            }
                          },
                          "description": "Executes a given SQL query on a specified SQLite database using a URI.",
                          "icon": "🔎",
                          "base_classes": [
                            "Data",
                            "Tool"
                          ],
                          "display_name": "TBU Data Retriever",
                          "documentation": "",
                          "custom_fields": {},
                          "output_types": [],
                          "pinned": false,
                          "conditional_paths": [],
                          "frozen": false,
                          "outputs": [
                            {
                              "types": [
                                "Data"
                              ],
                              "selected": "Data",
                              "name": "api_run_model",
                              "display_name": "Data",
                              "method": "run_model",
                              "value": "__UNDEFINED__",
                              "cache": true,
                              "required_inputs": [
                                "database_uri",
                                "query"
                              ]
                            },
                            {
                              "types": [
                                "Tool"
                              ],
                              "selected": "Tool",
                              "name": "api_build_tool",
                              "display_name": "Tool",
                              "method": "build_tool",
                              "value": "__UNDEFINED__",
                              "cache": true,
                              "required_inputs": [
                                "database_uri",
                                "query"
                              ]
                            }
                          ],
                          "field_order": [
                            "database_uri",
                            "query"
                          ],
                          "beta": false,
                          "edited": true,
                          "metadata": {}
                        },
                        "id": "SQLiteQueryTool-tALad"
                      },
                      "selected": true,
                      "width": 384,
                      "height": 427,
                      "positionAbsolute": {
                        "x": -1240.2021346988672,
                        "y": -840.3202810435371
                      },
                      "dragging": false
                    },
                    {
                      "id": "ParseData-Y56oH",
                      "type": "genericNode",
                      "position": {
                        "x": -840.7050230647075,
                        "y": -840.6171241829331
                      },
                      "data": {
                        "type": "ParseData",
                        "node": {
                          "template": {
                            "_type": "Component",
                            "data": {
                              "trace_as_metadata": true,
                              "list": false,
                              "trace_as_input": true,
                              "required": false,
                              "placeholder": "",
                              "show": true,
                              "name": "data",
                              "value": "",
                              "display_name": "Data",
                              "advanced": false,
                              "input_types": [
                                "Data"
                              ],
                              "dynamic": false,
                              "info": "The data to convert to text.",
                              "title_case": false,
                              "type": "other",
                              "_input_type": "DataInput"
                            },
                            "code": {
                              "type": "code",
                              "required": true,
                              "placeholder": "",
                              "list": false,
                              "show": true,
                              "multiline": true,
                              "value": "from axiestudio.custom import Component\nfrom axiestudio.helpers.data import data_to_text\nfrom axiestudio.io import DataInput, MultilineInput, Output, StrInput\nfrom axiestudio.schema.message import Message\n\n\nclass ParseDataComponent(Component):\n    display_name = \"Parse Data\"\n    description = \"Convert Data into plain text following a specified template.\"\n    icon = \"braces\"\n    name = \"ParseData\"\n\n    inputs = [\n        DataInput(name=\"data\", display_name=\"Data\", info=\"The data to convert to text.\"),\n        MultilineInput(\n            name=\"template\",\n            display_name=\"Template\",\n            info=\"The template to use for formatting the data. It can contain the keys {text}, {data} or any other key in the Data.\",\n            value=\"{text}\",\n        ),\n        StrInput(name=\"sep\", display_name=\"Separator\", advanced=True, value=\"\\n\"),\n    ]\n\n    outputs = [\n        Output(display_name=\"Text\", name=\"text\", method=\"parse_data\"),\n    ]\n\n    def parse_data(self) -> Message:\n        data = self.data if isinstance(self.data, list) else [self.data]\n        template = self.template\n\n        # Ensure 'text' key exists in each data item\n        for item in data:\n            if not hasattr(item, 'text'):\n                item.text = ''  # or set a default value using a method\n\n        result_string = data_to_text(template, data, sep=self.sep)\n        self.status = result_string\n        return Message(text=result_string)",
                              "fileTypes": [],
                              "file_path": "",
                              "password": false,
                              "name": "code",
                              "advanced": true,
                              "dynamic": true,
                              "info": "",
                              "load_from_db": false,
                              "title_case": false,
                              "display_name": "code"
                            },
                            "sep": {
                              "trace_as_metadata": true,
                              "load_from_db": false,
                              "list": false,
                              "required": false,
                              "placeholder": "",
                              "show": true,
                              "name": "sep",
                              "value": "\n",
                              "display_name": "Separator",
                              "advanced": true,
                              "dynamic": false,
                              "info": "",
                              "title_case": false,
                              "type": "str",
                              "_input_type": "StrInput"
                            },
                            "template": {
                              "trace_as_input": true,
                              "multiline": true,
                              "trace_as_metadata": true,
                              "load_from_db": false,
                              "list": false,
                              "required": false,
                              "placeholder": "",
                              "show": true,
                              "name": "template",
                              "value": "<technical_bulletin>\n[{bulletin_code}]\n[{publication_year}]\n[{tractor_models}]\n[{text}]\n</technical_bulletin>",
                              "display_name": "Template",
                              "advanced": false,
                              "input_types": [
                                "Message"
                              ],
                              "dynamic": false,
                              "info": "The template to use for formatting the data. It can contain the keys {text}, {data} or any other key in the Data.",
                              "title_case": false,
                              "type": "str",
                              "_input_type": "MultilineInput"
                            }
                          },
                          "description": "Convert Data into plain text following a specified template.",
                          "icon": "braces",
                          "base_classes": [
                            "Message"
                          ],
                          "display_name": "TBU Data Parser",
                          "documentation": "",
                          "custom_fields": {},
                          "output_types": [],
                          "pinned": false,
                          "conditional_paths": [],
                          "frozen": false,
                          "outputs": [
                            {
                              "types": [
                                "Message"
                              ],
                              "selected": "Message",
                              "name": "text",
                              "display_name": "Text",
                              "method": "parse_data",
                              "value": "__UNDEFINED__",
                              "cache": true
                            }
                          ],
                          "field_order": [
                            "data",
                            "template",
                            "sep"
                          ],
                          "beta": false,
                          "edited": true,
                          "lf_version": "1.0.19"
                        },
                        "id": "ParseData-Y56oH"
                      },
                      "selected": true,
                      "width": 384,
                      "height": 353,
                      "dragging": false,
                      "positionAbsolute": {
                        "x": -840.7050230647075,
                        "y": -840.6171241829331
                      }
                    },
                    {
                      "id": "Prompt-vkXht",
                      "type": "genericNode",
                      "position": {
                        "x": -2040.71487730211,
                        "y": -841.1666901465708
                      },
                      "data": {
                        "type": "Prompt",
                        "node": {
                          "template": {
                            "_type": "Component",
                            "code": {
                              "type": "code",
                              "required": true,
                              "placeholder": "",
                              "list": false,
                              "show": true,
                              "multiline": true,
                              "value": "from axiestudio.base.prompts.api_utils import process_prompt_template\nfrom axiestudio.custom import Component\nfrom axiestudio.inputs.inputs import DefaultPromptField\nfrom axiestudio.io import Output, PromptInput\nfrom axiestudio.schema.message import Message\nfrom axiestudio.template.utils import update_template_values\n\n\nclass PromptComponent(Component):\n    display_name: str = \"Prompt\"\n    description: str = \"Create a prompt template with dynamic variables.\"\n    icon = \"prompts\"\n    trace_type = \"prompt\"\n    name = \"Prompt\"\n\n    inputs = [\n        PromptInput(name=\"template\", display_name=\"Template\"),\n    ]\n\n    outputs = [\n        Output(display_name=\"Prompt Message\", name=\"prompt\", method=\"build_prompt\"),\n    ]\n\n    async def build_prompt(\n        self,\n    ) -> Message:\n        prompt = await Message.from_template_and_variables(**self._attributes)\n        self.status = prompt.text\n        return prompt\n\n    def _update_template(self, frontend_node: dict):\n        prompt_template = frontend_node[\"template\"][\"template\"][\"value\"]\n        custom_fields = frontend_node[\"custom_fields\"]\n        frontend_node_template = frontend_node[\"template\"]\n        _ = process_prompt_template(\n            template=prompt_template,\n            name=\"template\",\n            custom_fields=custom_fields,\n            frontend_node_template=frontend_node_template,\n        )\n        return frontend_node\n\n    def post_code_processing(self, new_frontend_node: dict, current_frontend_node: dict):\n        \"\"\"\n        This function is called after the code validation is done.\n        \"\"\"\n        frontend_node = super().post_code_processing(new_frontend_node, current_frontend_node)\n        template = frontend_node[\"template\"][\"template\"][\"value\"]\n        # Kept it duplicated for backwards compatibility\n        _ = process_prompt_template(\n            template=template,\n            name=\"template\",\n            custom_fields=frontend_node[\"custom_fields\"],\n            frontend_node_template=frontend_node[\"template\"],\n        )\n        # Now that template is updated, we need to grab any values that were set in the current_frontend_node\n        # and update the frontend_node with those values\n        update_template_values(new_template=frontend_node, previous_template=current_frontend_node[\"template\"])\n        return frontend_node\n\n    def _get_fallback_input(self, **kwargs):\n        return DefaultPromptField(**kwargs)\n",
                              "fileTypes": [],
                              "file_path": "",
                              "password": false,
                              "name": "code",
                              "advanced": true,
                              "dynamic": true,
                              "info": "",
                              "load_from_db": false,
                              "title_case": false,
                              "display_name": "code"
                            },
                            "template": {
                              "trace_as_input": true,
                              "list": false,
                              "required": false,
                              "placeholder": "",
                              "show": true,
                              "name": "template",
                              "value": "SELECT * FROM {table} WHERE \"bulletin_code\" = '{TBC}' AND \"publication_year\" = '{year}' AND \"tractor_models\" like '%{TMC}%';",
                              "display_name": "Template",
                              "advanced": false,
                              "dynamic": false,
                              "info": "",
                              "title_case": false,
                              "type": "prompt",
                              "_input_type": "PromptInput"
                            },
                            "table": {
                              "field_type": "str",
                              "required": false,
                              "placeholder": "",
                              "list": false,
                              "show": true,
                              "multiline": true,
                              "value": "TBU",
                              "fileTypes": [],
                              "file_path": "",
                              "name": "table",
                              "display_name": "table",
                              "advanced": false,
                              "input_types": [
                                "Message",
                                "Text"
                              ],
                              "dynamic": false,
                              "info": "",
                              "load_from_db": false,
                              "title_case": false,
                              "type": "str"
                            },
                            "TMC": {
                              "field_type": "str",
                              "required": false,
                              "placeholder": "",
                              "list": false,
                              "show": true,
                              "multiline": true,
                              "value": "",
                              "fileTypes": [],
                              "file_path": "",
                              "name": "TMC",
                              "display_name": "TMC",
                              "advanced": false,
                              "input_types": [
                                "Message",
                                "Text"
                              ],
                              "dynamic": false,
                              "info": "",
                              "load_from_db": false,
                              "title_case": false,
                              "type": "str"
                            },
                            "year": {
                              "field_type": "str",
                              "required": false,
                              "placeholder": "",
                              "list": false,
                              "show": true,
                              "multiline": true,
                              "value": "",
                              "fileTypes": [],
                              "file_path": "",
                              "name": "year",
                              "display_name": "year",
                              "advanced": false,
                              "input_types": [
                                "Message",
                                "Text"
                              ],
                              "dynamic": false,
                              "info": "",
                              "load_from_db": false,
                              "title_case": false,
                              "type": "str"
                            },
                            "TBC": {
                              "field_type": "str",
                              "required": false,
                              "placeholder": "",
                              "list": false,
                              "show": true,
                              "multiline": true,
                              "value": "",
                              "fileTypes": [],
                              "file_path": "",
                              "name": "TBC",
                              "display_name": "TBC",
                              "advanced": false,
                              "input_types": [
                                "Message",
                                "Text"
                              ],
                              "dynamic": false,
                              "info": "",
                              "load_from_db": false,
                              "title_case": false,
                              "type": "str"
                            }
                          },
                          "description": "Create a prompt template with dynamic variables.",
                          "icon": "prompts",
                          "is_input": null,
                          "is_output": null,
                          "is_composition": null,
                          "base_classes": [
                            "Message"
                          ],
                          "name": "",
                          "display_name": "TBU Query Builder",
                          "documentation": "",
                          "custom_fields": {
                            "template": [
                              "table",
                              "TBC",
                              "year",
                              "TMC"
                            ]
                          },
                          "output_types": [],
                          "full_path": null,
                          "pinned": false,
                          "conditional_paths": [],
                          "frozen": false,
                          "outputs": [
                            {
                              "types": [
                                "Message"
                              ],
                              "selected": "Message",
                              "name": "prompt",
                              "hidden": null,
                              "display_name": "Prompt Message",
                              "method": "build_prompt",
                              "value": "__UNDEFINED__",
                              "cache": true,
                              "required_inputs": null
                            }
                          ],
                          "field_order": [
                            "template"
                          ],
                          "beta": false,
                          "error": null,
                          "edited": false,
                          "metadata": {}
                        },
                        "id": "Prompt-vkXht"
                      },
                      "selected": true,
                      "width": 384,
                      "height": 649,
                      "dragging": false,
                      "positionAbsolute": {
                        "x": -2040.71487730211,
                        "y": -841.1666901465708
                      }
                    },
                    {
                      "id": "SQLCleaner-y0UyV",
                      "type": "genericNode",
                      "position": {
                        "x": -1640.9869070291097,
                        "y": -840.2527069458431
                      },
                      "data": {
                        "type": "SQLCleaner",
                        "node": {
                          "template": {
                            "_type": "Component",
                            "code": {
                              "type": "code",
                              "required": true,
                              "placeholder": "",
                              "list": false,
                              "show": true,
                              "multiline": true,
                              "value": "from axiestudio.custom import Component\nfrom axiestudio.io import MessageTextInput, Output\nfrom axiestudio.schema.message import Message\n\nclass SQLCleanerComponent(Component):\n    display_name = \"SQL Cleaner\"\n    description = \"Cleans SQL queries by removing conditions with 'Not found' values.\"\n    icon = \"🧹\"\n    name = \"SQLCleaner\"\n    inputs = [\n        MessageTextInput(\n            name=\"sql_query\",\n            display_name=\"SQL Query\",\n            info=\"The SQL query to clean.\",\n            required=True\n        ),\n    ]\n    outputs = [\n        Output(display_name=\"Cleaned SQL\", name=\"cleaned_sql\", method=\"clean_sql\"),\n    ]\n    def clean_sql(self) -> Message:\n        sql_query = self.sql_query\n        # Replace 'Not found' with '@' if the query is invalid\n        if self._is_query_invalid(sql_query):\n            sql_query = sql_query.replace('Not found', '@')\n        \n        # Normalize 'LIKE' conditions to '=' for consistency\n        sql_query = self._normalize_like_conditions(sql_query)\n\n        # Clean the SQL query by removing unwanted conditions\n        cleaned_sql = self._remove_unwanted_conditions(sql_query)\n\n        self.status = cleaned_sql\n        return Message(text=cleaned_sql)\n\n    def _is_query_invalid(self, sql_query: str) -> bool:\n        \"\"\"Check if the SQL query contains conditions that should result in no output.\"\"\"\n        return (\n            \"SELECT * FROM TBU\" in sql_query and\n            \"WHERE\" in sql_query.upper() and\n            '\"bulletin_code\" = \\'Not found\\'' in sql_query and\n            '\"publication_year\" = \\'Not found\\'' in sql_query and\n            '\"tractor_models\" like \\'%Not found%\\'' in sql_query\n        )\n\n    def _normalize_like_conditions(self, sql_query: str) -> str:\n        \"\"\"Convert 'LIKE %Not found%' conditions to '=' for consistency.\"\"\"\n        return sql_query.replace('\"tractor_models\" like \\'%Not found%\\'', '\"tractor_models\" = \\'Not found\\'')\n\n    def _remove_unwanted_conditions(self, sql_query: str) -> str:\n        \"\"\"Remove conditions with 'Not found' from the SQL query.\"\"\"\n        if \"WHERE\" in sql_query.upper():\n            select_part, where_part = sql_query.split(\"WHERE\", 1)\n            conditions = where_part.split(\"AND\")\n            cleaned_conditions = [cond for cond in conditions if \"'Not found'\" not in cond]\n\n            # Reconstruct the cleaned SQL query\n            return f\"{select_part.strip()} WHERE {' AND '.join(cleaned_conditions).strip()}\" if cleaned_conditions else select_part.strip()\n        \n        return sql_query",
                              "fileTypes": [],
                              "file_path": "",
                              "password": false,
                              "name": "code",
                              "advanced": true,
                              "dynamic": true,
                              "info": "",
                              "load_from_db": false,
                              "title_case": false,
                              "display_name": "code"
                            },
                            "sql_query": {
                              "trace_as_input": true,
                              "trace_as_metadata": true,
                              "load_from_db": false,
                              "list": false,
                              "required": true,
                              "placeholder": "",
                              "show": true,
                              "name": "sql_query",
                              "value": "",
                              "display_name": "SQL Query",
                              "advanced": false,
                              "input_types": [
                                "Message"
                              ],
                              "dynamic": false,
                              "info": "The SQL query to clean.",
                              "title_case": false,
                              "type": "str",
                              "_input_type": "MessageTextInput"
                            }
                          },
                          "description": "Cleans SQL queries by removing conditions with 'Not found' values.",
                          "icon": "🧹",
                          "base_classes": [
                            "Message"
                          ],
                          "display_name": "TBU Query Cleaner",
                          "documentation": "",
                          "custom_fields": {},
                          "output_types": [],
                          "pinned": false,
                          "conditional_paths": [],
                          "frozen": false,
                          "outputs": [
                            {
                              "types": [
                                "Message"
                              ],
                              "selected": "Message",
                              "name": "cleaned_sql",
                              "display_name": "Cleaned SQL",
                              "method": "clean_sql",
                              "value": "__UNDEFINED__",
                              "cache": true
                            }
                          ],
                          "field_order": [
                            "sql_query"
                          ],
                          "beta": false,
                          "edited": true,
                          "metadata": {}
                        },
                        "id": "SQLCleaner-y0UyV"
                      },
                      "selected": true,
                      "width": 384,
                      "height": 301,
                      "dragging": false,
                      "positionAbsolute": {
                        "x": -1640.9869070291097,
                        "y": -840.2527069458431
                      }
                    }
                  ],
                  "edges": [
                    {
                      "source": "SQLiteQueryTool-tALad",
                      "sourceHandle": "{œdataTypeœ:œSQLiteQueryToolœ,œidœ:œSQLiteQueryTool-tALadœ,œnameœ:œapi_run_modelœ,œoutput_typesœ:[œDataœ]}",
                      "target": "ParseData-Y56oH",
                      "targetHandle": "{œfieldNameœ:œdataœ,œidœ:œParseData-Y56oHœ,œinputTypesœ:[œDataœ],œtypeœ:œotherœ}",
                      "data": {
                        "targetHandle": {
                          "fieldName": "data",
                          "id": "ParseData-Y56oH",
                          "inputTypes": [
                            "Data"
                          ],
                          "type": "other"
                        },
                        "sourceHandle": {
                          "dataType": "SQLiteQueryTool",
                          "id": "SQLiteQueryTool-tALad",
                          "name": "api_run_model",
                          "output_types": [
                            "Data"
                          ]
                        }
                      },
                      "id": "reactflow__edge-SQLiteQueryTool-tALad{œdataTypeœ:œSQLiteQueryToolœ,œidœ:œSQLiteQueryTool-tALadœ,œnameœ:œapi_run_modelœ,œoutput_typesœ:[œDataœ]}-ParseData-Y56oH{œfieldNameœ:œdataœ,œidœ:œParseData-Y56oHœ,œinputTypesœ:[œDataœ],œtypeœ:œotherœ}",
                      "className": "",
                      "selected": false,
                      "animated": false
                    },
                    {
                      "source": "Prompt-vkXht",
                      "sourceHandle": "{œdataTypeœ:œPromptœ,œidœ:œPrompt-vkXhtœ,œnameœ:œpromptœ,œoutput_typesœ:[œMessageœ]}",
                      "target": "SQLCleaner-y0UyV",
                      "targetHandle": "{œfieldNameœ:œsql_queryœ,œidœ:œSQLCleaner-y0UyVœ,œinputTypesœ:[œMessageœ],œtypeœ:œstrœ}",
                      "data": {
                        "targetHandle": {
                          "fieldName": "sql_query",
                          "id": "SQLCleaner-y0UyV",
                          "inputTypes": [
                            "Message"
                          ],
                          "type": "str"
                        },
                        "sourceHandle": {
                          "dataType": "Prompt",
                          "id": "Prompt-vkXht",
                          "name": "prompt",
                          "output_types": [
                            "Message"
                          ]
                        }
                      },
                      "id": "reactflow__edge-Prompt-vkXht{œdataTypeœ:œPromptœ,œidœ:œPrompt-vkXhtœ,œnameœ:œpromptœ,œoutput_typesœ:[œMessageœ]}-SQLCleaner-y0UyV{œfieldNameœ:œsql_queryœ,œidœ:œSQLCleaner-y0UyVœ,œinputTypesœ:[œMessageœ],œtypeœ:œstrœ}",
                      "selected": false,
                      "className": "",
                      "animated": false
                    },
                    {
                      "source": "SQLCleaner-y0UyV",
                      "sourceHandle": "{œdataTypeœ:œSQLCleanerœ,œidœ:œSQLCleaner-y0UyVœ,œnameœ:œcleaned_sqlœ,œoutput_typesœ:[œMessageœ]}",
                      "target": "SQLiteQueryTool-tALad",
                      "targetHandle": "{œfieldNameœ:œqueryœ,œidœ:œSQLiteQueryTool-tALadœ,œinputTypesœ:[œMessageœ],œtypeœ:œstrœ}",
                      "data": {
                        "targetHandle": {
                          "fieldName": "query",
                          "id": "SQLiteQueryTool-tALad",
                          "inputTypes": [
                            "Message"
                          ],
                          "type": "str"
                        },
                        "sourceHandle": {
                          "dataType": "SQLCleaner",
                          "id": "SQLCleaner-y0UyV",
                          "name": "cleaned_sql",
                          "output_types": [
                            "Message"
                          ]
                        }
                      },
                      "id": "reactflow__edge-SQLCleaner-y0UyV{œdataTypeœ:œSQLCleanerœ,œidœ:œSQLCleaner-y0UyVœ,œnameœ:œcleaned_sqlœ,œoutput_typesœ:[œMessageœ]}-SQLiteQueryTool-tALad{œfieldNameœ:œqueryœ,œidœ:œSQLiteQueryTool-tALadœ,œinputTypesœ:[œMessageœ],œtypeœ:œstrœ}",
                      "className": "",
                      "selected": false,
                      "animated": false
                    }
                  ],
                  "viewport": {
                    "zoom": 1,
                    "x": 0,
                    "y": 0
                  }
                },
                "is_component": false,
                "name": "Fluffy Sammet",
                "description": "",
                "id": "SsHSv"
              },
              "outputs": [
                {
                  "types": [
                    "Tool"
                  ],
                  "selected": "Tool",
                  "name": "SQLiteQueryTool-tALad_api_build_tool",
                  "display_name": "Tool",
                  "method": "build_tool",
                  "value": "__UNDEFINED__",
                  "cache": true,
                  "required_inputs": [
                    "database_uri",
                    "query"
                  ],
                  "proxy": {
                    "id": "SQLiteQueryTool-tALad",
                    "name": "api_build_tool",
                    "nodeDisplayName": "TBU Data Retriever"
                  }
                },
                {
                  "types": [
                    "Message"
                  ],
                  "selected": "Message",
                  "name": "ParseData-Y56oH_text",
                  "display_name": "Text",
                  "method": "parse_data",
                  "value": "__UNDEFINED__",
                  "cache": true,
                  "proxy": {
                    "id": "ParseData-Y56oH",
                    "name": "text",
                    "nodeDisplayName": "TBU Data Parser"
                  }
                }
              ],
              "lf_version": "1.0.19"
            }
          },
          "id": "groupComponent-Ar7df",
          "position": {
            "x": -1440.6522355236984,
            "y": -840.5892005797209
          },
          "type": "genericNode",
          "width": 384,
          "height": 673,
          "selected": false,
          "dragging": false
        },
        {
          "id": "OpenAIEmbeddings-alQyE",
          "type": "genericNode",
          "position": {
            "x": -3440.1952059806063,
            "y": -1240.1088525226264
          },
          "data": {
            "type": "OpenAIEmbeddings",
            "node": {
              "template": {
                "_type": "Component",
                "chunk_size": {
                  "trace_as_metadata": true,
                  "list": false,
                  "required": false,
                  "placeholder": "",
                  "show": true,
                  "name": "chunk_size",
                  "value": 1000,
                  "display_name": "Chunk Size",
                  "advanced": true,
                  "dynamic": false,
                  "info": "",
                  "title_case": false,
                  "type": "int",
                  "_input_type": "IntInput"
                },
                "client": {
                  "trace_as_input": true,
                  "trace_as_metadata": true,
                  "load_from_db": false,
                  "list": false,
                  "required": false,
                  "placeholder": "",
                  "show": true,
                  "name": "client",
                  "value": "",
                  "display_name": "Client",
                  "advanced": true,
                  "input_types": [
                    "Message"
                  ],
                  "dynamic": false,
                  "info": "",
                  "title_case": false,
                  "type": "str",
                  "_input_type": "MessageTextInput"
                },
                "code": {
                  "type": "code",
                  "required": true,
                  "placeholder": "",
                  "list": false,
                  "show": true,
                  "multiline": true,
                  "value": "from langchain_openai.embeddings.base import OpenAIEmbeddings\n\nfrom axiestudio.base.embeddings.model import LCEmbeddingsModel\nfrom axiestudio.base.models.openai_constants import OPENAI_EMBEDDING_MODEL_NAMES\nfrom axiestudio.field_typing import Embeddings\nfrom axiestudio.io import BoolInput, DictInput, DropdownInput, FloatInput, IntInput, MessageTextInput, SecretStrInput\n\n\nclass OpenAIEmbeddingsComponent(LCEmbeddingsModel):\n    display_name = \"OpenAI Embeddings\"\n    description = \"Generate embeddings using OpenAI models.\"\n    icon = \"OpenAI\"\n    name = \"OpenAIEmbeddings\"\n\n    inputs = [\n        DictInput(\n            name=\"default_headers\",\n            display_name=\"Default Headers\",\n            advanced=True,\n            info=\"Default headers to use for the API request.\",\n        ),\n        DictInput(\n            name=\"default_query\",\n            display_name=\"Default Query\",\n            advanced=True,\n            info=\"Default query parameters to use for the API request.\",\n        ),\n        IntInput(name=\"chunk_size\", display_name=\"Chunk Size\", advanced=True, value=1000),\n        MessageTextInput(name=\"client\", display_name=\"Client\", advanced=True),\n        MessageTextInput(name=\"deployment\", display_name=\"Deployment\", advanced=True),\n        IntInput(name=\"embedding_ctx_length\", display_name=\"Embedding Context Length\", advanced=True, value=1536),\n        IntInput(name=\"max_retries\", display_name=\"Max Retries\", value=3, advanced=True),\n        DropdownInput(\n            name=\"model\",\n            display_name=\"Model\",\n            advanced=False,\n            options=OPENAI_EMBEDDING_MODEL_NAMES,\n            value=\"text-embedding-3-small\",\n        ),\n        DictInput(name=\"model_kwargs\", display_name=\"Model Kwargs\", advanced=True),\n        SecretStrInput(name=\"openai_api_base\", display_name=\"OpenAI API Base\", advanced=True),\n        SecretStrInput(name=\"openai_api_key\", display_name=\"OpenAI API Key\", value=\"OPENAI_API_KEY\"),\n        SecretStrInput(name=\"openai_api_type\", display_name=\"OpenAI API Type\", advanced=True),\n        MessageTextInput(name=\"openai_api_version\", display_name=\"OpenAI API Version\", advanced=True),\n        MessageTextInput(\n            name=\"openai_organization\",\n            display_name=\"OpenAI Organization\",\n            advanced=True,\n        ),\n        MessageTextInput(name=\"openai_proxy\", display_name=\"OpenAI Proxy\", advanced=True),\n        FloatInput(name=\"request_timeout\", display_name=\"Request Timeout\", advanced=True),\n        BoolInput(name=\"show_progress_bar\", display_name=\"Show Progress Bar\", advanced=True),\n        BoolInput(name=\"skip_empty\", display_name=\"Skip Empty\", advanced=True),\n        MessageTextInput(\n            name=\"tiktoken_model_name\",\n            display_name=\"TikToken Model Name\",\n            advanced=True,\n        ),\n        BoolInput(\n            name=\"tiktoken_enable\",\n            display_name=\"TikToken Enable\",\n            advanced=True,\n            value=True,\n            info=\"If False, you must have transformers installed.\",\n        ),\n        IntInput(\n            name=\"dimensions\",\n            display_name=\"Dimensions\",\n            info=\"The number of dimensions the resulting output embeddings should have. \"\n            \"Only supported by certain models.\",\n            advanced=True,\n        ),\n    ]\n\n    def build_embeddings(self) -> Embeddings:\n        return OpenAIEmbeddings(\n            tiktoken_enabled=self.tiktoken_enable,\n            default_headers=self.default_headers,\n            default_query=self.default_query,\n            allowed_special=\"all\",\n            disallowed_special=\"all\",\n            chunk_size=self.chunk_size,\n            deployment=self.deployment,\n            embedding_ctx_length=self.embedding_ctx_length,\n            max_retries=self.max_retries,\n            model=self.model,\n            model_kwargs=self.model_kwargs,\n            base_url=self.openai_api_base,\n            api_key=self.openai_api_key,\n            openai_api_type=self.openai_api_type,\n            api_version=self.openai_api_version,\n            organization=self.openai_organization,\n            openai_proxy=self.openai_proxy,\n            timeout=self.request_timeout or None,\n            show_progress_bar=self.show_progress_bar,\n            skip_empty=self.skip_empty,\n            tiktoken_model_name=self.tiktoken_model_name,\n            dimensions=self.dimensions or None,\n        )\n",
                  "fileTypes": [],
                  "file_path": "",
                  "password": false,
                  "name": "code",
                  "advanced": true,
                  "dynamic": true,
                  "info": "",
                  "load_from_db": false,
                  "title_case": false
                },
                "default_headers": {
                  "trace_as_input": true,
                  "list": false,
                  "required": false,
                  "placeholder": "",
                  "show": true,
                  "name": "default_headers",
                  "value": {},
                  "display_name": "Default Headers",
                  "advanced": true,
                  "dynamic": false,
                  "info": "Default headers to use for the API request.",
                  "title_case": false,
                  "type": "dict",
                  "_input_type": "DictInput"
                },
                "default_query": {
                  "trace_as_input": true,
                  "list": false,
                  "required": false,
                  "placeholder": "",
                  "show": true,
                  "name": "default_query",
                  "value": {},
                  "display_name": "Default Query",
                  "advanced": true,
                  "dynamic": false,
                  "info": "Default query parameters to use for the API request.",
                  "title_case": false,
                  "type": "dict",
                  "_input_type": "DictInput"
                },
                "deployment": {
                  "trace_as_input": true,
                  "trace_as_metadata": true,
                  "load_from_db": false,
                  "list": false,
                  "required": false,
                  "placeholder": "",
                  "show": true,
                  "name": "deployment",
                  "value": "",
                  "display_name": "Deployment",
                  "advanced": true,
                  "input_types": [
                    "Message"
                  ],
                  "dynamic": false,
                  "info": "",
                  "title_case": false,
                  "type": "str",
                  "_input_type": "MessageTextInput"
                },
                "dimensions": {
                  "trace_as_metadata": true,
                  "list": false,
                  "required": false,
                  "placeholder": "",
                  "show": true,
                  "name": "dimensions",
                  "value": "",
                  "display_name": "Dimensions",
                  "advanced": true,
                  "dynamic": false,
                  "info": "The number of dimensions the resulting output embeddings should have. Only supported by certain models.",
                  "title_case": false,
                  "type": "int",
                  "_input_type": "IntInput"
                },
                "embedding_ctx_length": {
                  "trace_as_metadata": true,
                  "list": false,
                  "required": false,
                  "placeholder": "",
                  "show": true,
                  "name": "embedding_ctx_length",
                  "value": 1536,
                  "display_name": "Embedding Context Length",
                  "advanced": true,
                  "dynamic": false,
                  "info": "",
                  "title_case": false,
                  "type": "int",
                  "_input_type": "IntInput"
                },
                "max_retries": {
                  "trace_as_metadata": true,
                  "list": false,
                  "required": false,
                  "placeholder": "",
                  "show": true,
                  "name": "max_retries",
                  "value": 3,
                  "display_name": "Max Retries",
                  "advanced": true,
                  "dynamic": false,
                  "info": "",
                  "title_case": false,
                  "type": "int",
                  "_input_type": "IntInput"
                },
                "model": {
                  "trace_as_metadata": true,
                  "options": [
                    "text-embedding-3-small",
                    "text-embedding-3-large",
                    "text-embedding-ada-002"
                  ],
                  "combobox": false,
                  "required": false,
                  "placeholder": "",
                  "show": true,
                  "name": "model",
                  "value": "text-embedding-3-small",
                  "display_name": "Model",
                  "advanced": false,
                  "dynamic": false,
                  "info": "",
                  "title_case": false,
                  "type": "str",
                  "_input_type": "DropdownInput"
                },
                "model_kwargs": {
                  "trace_as_input": true,
                  "list": false,
                  "required": false,
                  "placeholder": "",
                  "show": true,
                  "name": "model_kwargs",
                  "value": {},
                  "display_name": "Model Kwargs",
                  "advanced": true,
                  "dynamic": false,
                  "info": "",
                  "title_case": false,
                  "type": "dict",
                  "_input_type": "DictInput"
                },
                "openai_api_base": {
                  "load_from_db": false,
                  "required": false,
                  "placeholder": "",
                  "show": true,
                  "name": "openai_api_base",
                  "value": "",
                  "display_name": "OpenAI API Base",
                  "advanced": true,
                  "input_types": [
                    "Message"
                  ],
                  "dynamic": false,
                  "info": "",
                  "title_case": false,
                  "password": true,
                  "type": "str",
                  "_input_type": "SecretStrInput"
                },
                "openai_api_key": {
                  "load_from_db": true,
                  "required": false,
                  "placeholder": "",
                  "show": true,
                  "name": "openai_api_key",
                  "value": "",
                  "display_name": "OpenAI API Key",
                  "advanced": false,
                  "input_types": [
                    "Message"
                  ],
                  "dynamic": false,
                  "info": "",
                  "title_case": false,
                  "password": true,
                  "type": "str",
                  "_input_type": "SecretStrInput"
                },
                "openai_api_type": {
                  "load_from_db": false,
                  "required": false,
                  "placeholder": "",
                  "show": true,
                  "name": "openai_api_type",
                  "value": "",
                  "display_name": "OpenAI API Type",
                  "advanced": true,
                  "input_types": [
                    "Message"
                  ],
                  "dynamic": false,
                  "info": "",
                  "title_case": false,
                  "password": true,
                  "type": "str",
                  "_input_type": "SecretStrInput"
                },
                "openai_api_version": {
                  "trace_as_input": true,
                  "trace_as_metadata": true,
                  "load_from_db": false,
                  "list": false,
                  "required": false,
                  "placeholder": "",
                  "show": true,
                  "name": "openai_api_version",
                  "value": "",
                  "display_name": "OpenAI API Version",
                  "advanced": true,
                  "input_types": [
                    "Message"
                  ],
                  "dynamic": false,
                  "info": "",
                  "title_case": false,
                  "type": "str",
                  "_input_type": "MessageTextInput"
                },
                "openai_organization": {
                  "trace_as_input": true,
                  "trace_as_metadata": true,
                  "load_from_db": false,
                  "list": false,
                  "required": false,
                  "placeholder": "",
                  "show": true,
                  "name": "openai_organization",
                  "value": "",
                  "display_name": "OpenAI Organization",
                  "advanced": true,
                  "input_types": [
                    "Message"
                  ],
                  "dynamic": false,
                  "info": "",
                  "title_case": false,
                  "type": "str",
                  "_input_type": "MessageTextInput"
                },
                "openai_proxy": {
                  "trace_as_input": true,
                  "trace_as_metadata": true,
                  "load_from_db": false,
                  "list": false,
                  "required": false,
                  "placeholder": "",
                  "show": true,
                  "name": "openai_proxy",
                  "value": "",
                  "display_name": "OpenAI Proxy",
                  "advanced": true,
                  "input_types": [
                    "Message"
                  ],
                  "dynamic": false,
                  "info": "",
                  "title_case": false,
                  "type": "str",
                  "_input_type": "MessageTextInput"
                },
                "request_timeout": {
                  "trace_as_metadata": true,
                  "list": false,
                  "required": false,
                  "placeholder": "",
                  "show": true,
                  "name": "request_timeout",
                  "value": "",
                  "display_name": "Request Timeout",
                  "advanced": true,
                  "dynamic": false,
                  "info": "",
                  "title_case": false,
                  "type": "float",
                  "_input_type": "FloatInput"
                },
                "show_progress_bar": {
                  "trace_as_metadata": true,
                  "list": false,
                  "required": false,
                  "placeholder": "",
                  "show": true,
                  "name": "show_progress_bar",
                  "value": false,
                  "display_name": "Show Progress Bar",
                  "advanced": true,
                  "dynamic": false,
                  "info": "",
                  "title_case": false,
                  "type": "bool",
                  "_input_type": "BoolInput"
                },
                "skip_empty": {
                  "trace_as_metadata": true,
                  "list": false,
                  "required": false,
                  "placeholder": "",
                  "show": true,
                  "name": "skip_empty",
                  "value": false,
                  "display_name": "Skip Empty",
                  "advanced": true,
                  "dynamic": false,
                  "info": "",
                  "title_case": false,
                  "type": "bool",
                  "_input_type": "BoolInput"
                },
                "tiktoken_enable": {
                  "trace_as_metadata": true,
                  "list": false,
                  "required": false,
                  "placeholder": "",
                  "show": true,
                  "name": "tiktoken_enable",
                  "value": true,
                  "display_name": "TikToken Enable",
                  "advanced": true,
                  "dynamic": false,
                  "info": "If False, you must have transformers installed.",
                  "title_case": false,
                  "type": "bool",
                  "_input_type": "BoolInput"
                },
                "tiktoken_model_name": {
                  "trace_as_input": true,
                  "trace_as_metadata": true,
                  "load_from_db": false,
                  "list": false,
                  "required": false,
                  "placeholder": "",
                  "show": true,
                  "name": "tiktoken_model_name",
                  "value": "",
                  "display_name": "TikToken Model Name",
                  "advanced": true,
                  "input_types": [
                    "Message"
                  ],
                  "dynamic": false,
                  "info": "",
                  "title_case": false,
                  "type": "str",
                  "_input_type": "MessageTextInput"
                }
              },
              "description": "Generate embeddings using OpenAI models.",
              "icon": "OpenAI",
              "base_classes": [
                "Embeddings"
              ],
              "display_name": "OpenAI Embeddings",
              "documentation": "",
              "custom_fields": {},
              "output_types": [],
              "pinned": false,
              "conditional_paths": [],
              "frozen": false,
              "outputs": [
                {
                  "types": [
                    "Embeddings"
                  ],
                  "selected": "Embeddings",
                  "name": "embeddings",
                  "display_name": "Embeddings",
                  "method": "build_embeddings",
                  "value": "__UNDEFINED__",
                  "cache": true,
                  "required_inputs": [
                    "chunk_size",
                    "default_headers",
                    "default_query",
                    "deployment",
                    "dimensions",
                    "embedding_ctx_length",
                    "max_retries",
                    "model",
                    "model_kwargs",
                    "openai_api_base",
                    "openai_api_key",
                    "openai_api_type",
                    "openai_api_version",
                    "openai_organization",
                    "openai_proxy",
                    "request_timeout",
                    "show_progress_bar",
                    "skip_empty",
                    "tiktoken_enable",
                    "tiktoken_model_name"
                  ]
                }
              ],
              "field_order": [
                "default_headers",
                "default_query",
                "chunk_size",
                "client",
                "deployment",
                "embedding_ctx_length",
                "max_retries",
                "model",
                "model_kwargs",
                "openai_api_base",
                "openai_api_key",
                "openai_api_type",
                "openai_api_version",
                "openai_organization",
                "openai_proxy",
                "request_timeout",
                "show_progress_bar",
                "skip_empty",
                "tiktoken_model_name",
                "tiktoken_enable",
                "dimensions"
              ],
              "beta": false,
              "edited": false,
              "metadata": {}
            },
            "id": "OpenAIEmbeddings-alQyE"
          },
          "selected": false,
          "width": 384,
          "height": 375,
          "positionAbsolute": {
            "x": -3440.1952059806063,
            "y": -1240.1088525226264
          },
          "dragging": false
        }
      ],
      "edges": [
        {
          "source": "Prompt-NXY0w",
          "sourceHandle": "{œdataTypeœ:œPromptœ,œidœ:œPrompt-NXY0wœ,œnameœ:œpromptœ,œoutput_typesœ:[œMessageœ]}",
          "target": "OpenAIModel-zShEY",
          "targetHandle": "{œfieldNameœ:œinput_valueœ,œidœ:œOpenAIModel-zShEYœ,œinputTypesœ:[œMessageœ],œtypeœ:œstrœ}",
          "data": {
            "targetHandle": {
              "fieldName": "input_value",
              "id": "OpenAIModel-zShEY",
              "inputTypes": [
                "Message"
              ],
              "type": "str"
            },
            "sourceHandle": {
              "dataType": "Prompt",
              "id": "Prompt-NXY0w",
              "name": "prompt",
              "output_types": [
                "Message"
              ]
            }
          },
          "id": "reactflow__edge-Prompt-NXY0w{œdataTypeœ:œPromptœ,œidœ:œPrompt-NXY0wœ,œnameœ:œpromptœ,œoutput_typesœ:[œMessageœ]}-OpenAIModel-zShEY{œfieldNameœ:œinput_valueœ,œidœ:œOpenAIModel-zShEYœ,œinputTypesœ:[œMessageœ],œtypeœ:œstrœ}",
          "animated": false,
          "className": ""
        },
        {
          "source": "OpenAIModel-zShEY",
          "sourceHandle": "{œdataTypeœ:œOpenAIModelœ,œidœ:œOpenAIModel-zShEYœ,œnameœ:œtext_outputœ,œoutput_typesœ:[œMessageœ]}",
          "target": "ChatOutput-NFvya",
          "targetHandle": "{œfieldNameœ:œinput_valueœ,œidœ:œChatOutput-NFvyaœ,œinputTypesœ:[œMessageœ],œtypeœ:œstrœ}",
          "data": {
            "targetHandle": {
              "fieldName": "input_value",
              "id": "ChatOutput-NFvya",
              "inputTypes": [
                "Message"
              ],
              "type": "str"
            },
            "sourceHandle": {
              "dataType": "OpenAIModel",
              "id": "OpenAIModel-zShEY",
              "name": "text_output",
              "output_types": [
                "Message"
              ]
            }
          },
          "id": "reactflow__edge-OpenAIModel-zShEY{œdataTypeœ:œOpenAIModelœ,œidœ:œOpenAIModel-zShEYœ,œnameœ:œtext_outputœ,œoutput_typesœ:[œMessageœ]}-ChatOutput-NFvya{œfieldNameœ:œinput_valueœ,œidœ:œChatOutput-NFvyaœ,œinputTypesœ:[œMessageœ],œtypeœ:œstrœ}",
          "animated": false,
          "className": ""
        },
        {
          "source": "ChatInput-m8BPn",
          "sourceHandle": "{œdataTypeœ:œChatInputœ,œidœ:œChatInput-m8BPnœ,œnameœ:œmessageœ,œoutput_typesœ:[œMessageœ]}",
          "target": "groupComponent-ob9nl",
          "targetHandle": "{œfieldNameœ:œsearch_query_Chroma-94Qh7œ,œidœ:œgroupComponent-ob9nlœ,œinputTypesœ:[œMessageœ],œproxyœ:{œfieldœ:œsearch_queryœ,œidœ:œChroma-94Qh7œ},œtypeœ:œstrœ}",
          "data": {
            "targetHandle": {
              "fieldName": "search_query_Chroma-94Qh7",
              "id": "groupComponent-ob9nl",
              "inputTypes": [
                "Message"
              ],
              "proxy": {
                "field": "search_query",
                "id": "Chroma-94Qh7"
              },
              "type": "str"
            },
            "sourceHandle": {
              "dataType": "ChatInput",
              "id": "ChatInput-m8BPn",
              "name": "message",
              "output_types": [
                "Message"
              ]
            }
          },
          "id": "reactflow__edge-ChatInput-m8BPn{œdataTypeœ:œChatInputœ,œidœ:œChatInput-m8BPnœ,œnameœ:œmessageœ,œoutput_typesœ:[œMessageœ]}-groupComponent-ob9nl{œfieldNameœ:œsearch_query_Chroma-94Qh7œ,œidœ:œgroupComponent-ob9nlœ,œinputTypesœ:[œMessageœ],œproxyœ:{œfieldœ:œsearch_queryœ,œidœ:œChroma-94Qh7œ},œtypeœ:œstrœ}",
          "animated": false,
          "className": ""
        },
        {
          "source": "Prompt-JkmeG",
          "sourceHandle": "{œdataTypeœ:œPromptœ,œidœ:œPrompt-JkmeGœ,œnameœ:œpromptœ,œoutput_typesœ:[œMessageœ]}",
          "target": "Prompt-NXY0w",
          "targetHandle": "{œfieldNameœ:œglossaryœ,œidœ:œPrompt-NXY0wœ,œinputTypesœ:[œMessageœ,œTextœ],œtypeœ:œstrœ}",
          "data": {
            "targetHandle": {
              "fieldName": "glossary",
              "id": "Prompt-NXY0w",
              "inputTypes": [
                "Message",
                "Text"
              ],
              "type": "str"
            },
            "sourceHandle": {
              "dataType": "Prompt",
              "id": "Prompt-JkmeG",
              "name": "prompt",
              "output_types": [
                "Message"
              ]
            }
          },
          "id": "reactflow__edge-Prompt-JkmeG{œdataTypeœ:œPromptœ,œidœ:œPrompt-JkmeGœ,œnameœ:œpromptœ,œoutput_typesœ:[œMessageœ]}-Prompt-NXY0w{œfieldNameœ:œglossaryœ,œidœ:œPrompt-NXY0wœ,œinputTypesœ:[œMessageœ,œTextœ],œtypeœ:œstrœ}",
          "animated": false,
          "className": ""
        },
        {
          "source": "groupComponent-Jcwnj",
          "sourceHandle": "{œdataTypeœ:œGroupNodeœ,œidœ:œgroupComponent-Jcwnjœ,œnameœ:œParseData-4I2Zh_textœ,œoutput_typesœ:[œMessageœ]}",
          "target": "Prompt-NXY0w",
          "targetHandle": "{œfieldNameœ:œDTCœ,œidœ:œPrompt-NXY0wœ,œinputTypesœ:[œMessageœ,œTextœ],œtypeœ:œstrœ}",
          "data": {
            "targetHandle": {
              "fieldName": "DTC",
              "id": "Prompt-NXY0w",
              "inputTypes": [
                "Message",
                "Text"
              ],
              "type": "str"
            },
            "sourceHandle": {
              "dataType": "GroupNode",
              "id": "groupComponent-Jcwnj",
              "name": "ParseData-4I2Zh_text",
              "output_types": [
                "Message"
              ]
            }
          },
          "id": "reactflow__edge-groupComponent-Jcwnj{œdataTypeœ:œGroupNodeœ,œidœ:œgroupComponent-Jcwnjœ,œnameœ:œParseData-4I2Zh_textœ,œoutput_typesœ:[œMessageœ]}-Prompt-NXY0w{œfieldNameœ:œDTCœ,œidœ:œPrompt-NXY0wœ,œinputTypesœ:[œMessageœ,œTextœ],œtypeœ:œstrœ}",
          "animated": false,
          "className": ""
        },
        {
          "source": "groupComponent-ob9nl",
          "sourceHandle": "{œdataTypeœ:œGroupNodeœ,œidœ:œgroupComponent-ob9nlœ,œnameœ:œParseData-wVyYa_textœ,œoutput_typesœ:[œMessageœ]}",
          "target": "Prompt-NXY0w",
          "targetHandle": "{œfieldNameœ:œOIBœ,œidœ:œPrompt-NXY0wœ,œinputTypesœ:[œMessageœ,œTextœ],œtypeœ:œstrœ}",
          "data": {
            "targetHandle": {
              "fieldName": "OIB",
              "id": "Prompt-NXY0w",
              "inputTypes": [
                "Message",
                "Text"
              ],
              "type": "str"
            },
            "sourceHandle": {
              "dataType": "GroupNode",
              "id": "groupComponent-ob9nl",
              "name": "ParseData-wVyYa_text",
              "output_types": [
                "Message"
              ]
            }
          },
          "id": "reactflow__edge-groupComponent-ob9nl{œdataTypeœ:œGroupNodeœ,œidœ:œgroupComponent-ob9nlœ,œnameœ:œParseData-wVyYa_textœ,œoutput_typesœ:[œMessageœ]}-Prompt-NXY0w{œfieldNameœ:œOIBœ,œidœ:œPrompt-NXY0wœ,œinputTypesœ:[œMessageœ,œTextœ],œtypeœ:œstrœ}",
          "animated": false,
          "className": ""
        },
        {
          "source": "ChatInput-m8BPn",
          "sourceHandle": "{œdataTypeœ:œChatInputœ,œidœ:œChatInput-m8BPnœ,œnameœ:œmessageœ,œoutput_typesœ:[œMessageœ]}",
          "target": "Prompt-NXY0w",
          "targetHandle": "{œfieldNameœ:œuser_questionœ,œidœ:œPrompt-NXY0wœ,œinputTypesœ:[œMessageœ,œTextœ],œtypeœ:œstrœ}",
          "data": {
            "targetHandle": {
              "fieldName": "user_question",
              "id": "Prompt-NXY0w",
              "inputTypes": [
                "Message",
                "Text"
              ],
              "type": "str"
            },
            "sourceHandle": {
              "dataType": "ChatInput",
              "id": "ChatInput-m8BPn",
              "name": "message",
              "output_types": [
                "Message"
              ]
            }
          },
          "id": "reactflow__edge-ChatInput-m8BPn{œdataTypeœ:œChatInputœ,œidœ:œChatInput-m8BPnœ,œnameœ:œmessageœ,œoutput_typesœ:[œMessageœ]}-Prompt-NXY0w{œfieldNameœ:œuser_questionœ,œidœ:œPrompt-NXY0wœ,œinputTypesœ:[œMessageœ,œTextœ],œtypeœ:œstrœ}",
          "animated": false,
          "className": ""
        },
        {
          "source": "groupComponent-Ar7df",
          "sourceHandle": "{œdataTypeœ:œGroupNodeœ,œidœ:œgroupComponent-Ar7dfœ,œnameœ:œParseData-Y56oH_textœ,œoutput_typesœ:[œMessageœ]}",
          "target": "Prompt-NXY0w",
          "targetHandle": "{œfieldNameœ:œTBUœ,œidœ:œPrompt-NXY0wœ,œinputTypesœ:[œMessageœ,œTextœ],œtypeœ:œstrœ}",
          "data": {
            "targetHandle": {
              "fieldName": "TBU",
              "id": "Prompt-NXY0w",
              "inputTypes": [
                "Message",
                "Text"
              ],
              "type": "str"
            },
            "sourceHandle": {
              "dataType": "GroupNode",
              "id": "groupComponent-Ar7df",
              "name": "ParseData-Y56oH_text",
              "output_types": [
                "Message"
              ]
            }
          },
          "id": "reactflow__edge-groupComponent-Ar7df{œdataTypeœ:œGroupNodeœ,œidœ:œgroupComponent-Ar7dfœ,œnameœ:œParseData-Y56oH_textœ,œoutput_typesœ:[œMessageœ]}-Prompt-NXY0w{œfieldNameœ:œTBUœ,œidœ:œPrompt-NXY0wœ,œinputTypesœ:[œMessageœ,œTextœ],œtypeœ:œstrœ}",
          "animated": false,
          "className": ""
        },
        {
          "source": "ChatInput-m8BPn",
          "sourceHandle": "{œdataTypeœ:œChatInputœ,œidœ:œChatInput-m8BPnœ,œnameœ:œmessageœ,œoutput_typesœ:[œMessageœ]}",
          "target": "CustomComponent-ShIul",
          "targetHandle": "{œfieldNameœ:œuser_questionœ,œidœ:œCustomComponent-ShIulœ,œinputTypesœ:[œMessageœ],œtypeœ:œstrœ}",
          "data": {
            "targetHandle": {
              "fieldName": "user_question",
              "id": "CustomComponent-ShIul",
              "inputTypes": [
                "Message"
              ],
              "type": "str"
            },
            "sourceHandle": {
              "dataType": "ChatInput",
              "id": "ChatInput-m8BPn",
              "name": "message",
              "output_types": [
                "Message"
              ]
            }
          },
          "id": "reactflow__edge-ChatInput-m8BPn{œdataTypeœ:œChatInputœ,œidœ:œChatInput-m8BPnœ,œnameœ:œmessageœ,œoutput_typesœ:[œMessageœ]}-CustomComponent-ShIul{œfieldNameœ:œuser_questionœ,œidœ:œCustomComponent-ShIulœ,œinputTypesœ:[œMessageœ],œtypeœ:œstrœ}",
          "animated": false,
          "className": ""
        },
        {
          "source": "CustomComponent-ShIul",
          "sourceHandle": "{œdataTypeœ:œTractorInfoParserœ,œidœ:œCustomComponent-ShIulœ,œnameœ:œsuspect_parameter_numberœ,œoutput_typesœ:[œTextœ]}",
          "target": "groupComponent-Jcwnj",
          "targetHandle": "{œfieldNameœ:œSPN_Prompt-ekcNXœ,œidœ:œgroupComponent-Jcwnjœ,œinputTypesœ:[œMessageœ,œTextœ],œproxyœ:{œfieldœ:œSPNœ,œidœ:œPrompt-ekcNXœ},œtypeœ:œstrœ}",
          "data": {
            "targetHandle": {
              "fieldName": "SPN_Prompt-ekcNX",
              "id": "groupComponent-Jcwnj",
              "inputTypes": [
                "Message",
                "Text"
              ],
              "proxy": {
                "field": "SPN",
                "id": "Prompt-ekcNX"
              },
              "type": "str"
            },
            "sourceHandle": {
              "dataType": "TractorInfoParser",
              "id": "CustomComponent-ShIul",
              "name": "suspect_parameter_number",
              "output_types": [
                "Text"
              ]
            }
          },
          "id": "reactflow__edge-CustomComponent-ShIul{œdataTypeœ:œTractorInfoParserœ,œidœ:œCustomComponent-ShIulœ,œnameœ:œsuspect_parameter_numberœ,œoutput_typesœ:[œTextœ]}-groupComponent-Jcwnj{œfieldNameœ:œSPN_Prompt-ekcNXœ,œidœ:œgroupComponent-Jcwnjœ,œinputTypesœ:[œMessageœ,œTextœ],œproxyœ:{œfieldœ:œSPNœ,œidœ:œPrompt-ekcNXœ},œtypeœ:œstrœ}",
          "animated": false,
          "className": ""
        },
        {
          "source": "CustomComponent-ShIul",
          "sourceHandle": "{œdataTypeœ:œTractorInfoParserœ,œidœ:œCustomComponent-ShIulœ,œnameœ:œfailure_mode_identifierœ,œoutput_typesœ:[œTextœ]}",
          "target": "groupComponent-Jcwnj",
          "targetHandle": "{œfieldNameœ:œFMI_Prompt-ekcNXœ,œidœ:œgroupComponent-Jcwnjœ,œinputTypesœ:[œMessageœ,œTextœ],œproxyœ:{œfieldœ:œFMIœ,œidœ:œPrompt-ekcNXœ},œtypeœ:œstrœ}",
          "data": {
            "targetHandle": {
              "fieldName": "FMI_Prompt-ekcNX",
              "id": "groupComponent-Jcwnj",
              "inputTypes": [
                "Message",
                "Text"
              ],
              "proxy": {
                "field": "FMI",
                "id": "Prompt-ekcNX"
              },
              "type": "str"
            },
            "sourceHandle": {
              "dataType": "TractorInfoParser",
              "id": "CustomComponent-ShIul",
              "name": "failure_mode_identifier",
              "output_types": [
                "Text"
              ]
            }
          },
          "id": "reactflow__edge-CustomComponent-ShIul{œdataTypeœ:œTractorInfoParserœ,œidœ:œCustomComponent-ShIulœ,œnameœ:œfailure_mode_identifierœ,œoutput_typesœ:[œTextœ]}-groupComponent-Jcwnj{œfieldNameœ:œFMI_Prompt-ekcNXœ,œidœ:œgroupComponent-Jcwnjœ,œinputTypesœ:[œMessageœ,œTextœ],œproxyœ:{œfieldœ:œFMIœ,œidœ:œPrompt-ekcNXœ},œtypeœ:œstrœ}",
          "animated": false,
          "className": ""
        },
        {
          "source": "CustomComponent-ShIul",
          "sourceHandle": "{œdataTypeœ:œTractorInfoParserœ,œidœ:œCustomComponent-ShIulœ,œnameœ:œtechnical_bulletin_codeœ,œoutput_typesœ:[œTextœ]}",
          "target": "groupComponent-Ar7df",
          "targetHandle": "{œfieldNameœ:œTBC_Prompt-vkXhtœ,œidœ:œgroupComponent-Ar7dfœ,œinputTypesœ:[œMessageœ,œTextœ],œproxyœ:{œfieldœ:œTBCœ,œidœ:œPrompt-vkXhtœ},œtypeœ:œstrœ}",
          "data": {
            "targetHandle": {
              "fieldName": "TBC_Prompt-vkXht",
              "id": "groupComponent-Ar7df",
              "inputTypes": [
                "Message",
                "Text"
              ],
              "proxy": {
                "field": "TBC",
                "id": "Prompt-vkXht"
              },
              "type": "str"
            },
            "sourceHandle": {
              "dataType": "TractorInfoParser",
              "id": "CustomComponent-ShIul",
              "name": "technical_bulletin_code",
              "output_types": [
                "Text"
              ]
            }
          },
          "id": "reactflow__edge-CustomComponent-ShIul{œdataTypeœ:œTractorInfoParserœ,œidœ:œCustomComponent-ShIulœ,œnameœ:œtechnical_bulletin_codeœ,œoutput_typesœ:[œTextœ]}-groupComponent-Ar7df{œfieldNameœ:œTBC_Prompt-vkXhtœ,œidœ:œgroupComponent-Ar7dfœ,œinputTypesœ:[œMessageœ,œTextœ],œproxyœ:{œfieldœ:œTBCœ,œidœ:œPrompt-vkXhtœ},œtypeœ:œstrœ}",
          "animated": false,
          "className": ""
        },
        {
          "source": "CustomComponent-ShIul",
          "sourceHandle": "{œdataTypeœ:œTractorInfoParserœ,œidœ:œCustomComponent-ShIulœ,œnameœ:œyearœ,œoutput_typesœ:[œTextœ]}",
          "target": "groupComponent-Ar7df",
          "targetHandle": "{œfieldNameœ:œyear_Prompt-vkXhtœ,œidœ:œgroupComponent-Ar7dfœ,œinputTypesœ:[œMessageœ,œTextœ],œproxyœ:{œfieldœ:œyearœ,œidœ:œPrompt-vkXhtœ},œtypeœ:œstrœ}",
          "data": {
            "targetHandle": {
              "fieldName": "year_Prompt-vkXht",
              "id": "groupComponent-Ar7df",
              "inputTypes": [
                "Message",
                "Text"
              ],
              "proxy": {
                "field": "year",
                "id": "Prompt-vkXht"
              },
              "type": "str"
            },
            "sourceHandle": {
              "dataType": "TractorInfoParser",
              "id": "CustomComponent-ShIul",
              "name": "year",
              "output_types": [
                "Text"
              ]
            }
          },
          "id": "reactflow__edge-CustomComponent-ShIul{œdataTypeœ:œTractorInfoParserœ,œidœ:œCustomComponent-ShIulœ,œnameœ:œyearœ,œoutput_typesœ:[œTextœ]}-groupComponent-Ar7df{œfieldNameœ:œyear_Prompt-vkXhtœ,œidœ:œgroupComponent-Ar7dfœ,œinputTypesœ:[œMessageœ,œTextœ],œproxyœ:{œfieldœ:œyearœ,œidœ:œPrompt-vkXhtœ},œtypeœ:œstrœ}",
          "animated": false,
          "className": ""
        },
        {
          "source": "CustomComponent-ShIul",
          "sourceHandle": "{œdataTypeœ:œTractorInfoParserœ,œidœ:œCustomComponent-ShIulœ,œnameœ:œtractor_model_codeœ,œoutput_typesœ:[œTextœ]}",
          "target": "groupComponent-fCN9N",
          "targetHandle": "{œfieldNameœ:œTMC_Prompt-uvWe5œ,œidœ:œgroupComponent-fCN9Nœ,œinputTypesœ:[œMessageœ,œTextœ],œproxyœ:{œfieldœ:œTMCœ,œidœ:œPrompt-uvWe5œ},œtypeœ:œstrœ}",
          "data": {
            "targetHandle": {
              "fieldName": "TMC_Prompt-uvWe5",
              "id": "groupComponent-fCN9N",
              "inputTypes": [
                "Message",
                "Text"
              ],
              "proxy": {
                "field": "TMC",
                "id": "Prompt-uvWe5"
              },
              "type": "str"
            },
            "sourceHandle": {
              "dataType": "TractorInfoParser",
              "id": "CustomComponent-ShIul",
              "name": "tractor_model_code",
              "output_types": [
                "Text"
              ]
            }
          },
          "id": "reactflow__edge-CustomComponent-ShIul{œdataTypeœ:œTractorInfoParserœ,œidœ:œCustomComponent-ShIulœ,œnameœ:œtractor_model_codeœ,œoutput_typesœ:[œTextœ]}-groupComponent-fCN9N{œfieldNameœ:œTMC_Prompt-uvWe5œ,œidœ:œgroupComponent-fCN9Nœ,œinputTypesœ:[œMessageœ,œTextœ],œproxyœ:{œfieldœ:œTMCœ,œidœ:œPrompt-uvWe5œ},œtypeœ:œstrœ}",
          "animated": false,
          "className": ""
        },
        {
          "source": "CustomComponent-ShIul",
          "sourceHandle": "{œdataTypeœ:œTractorInfoParserœ,œidœ:œCustomComponent-ShIulœ,œnameœ:œtractor_model_codeœ,œoutput_typesœ:[œTextœ]}",
          "target": "groupComponent-Jcwnj",
          "targetHandle": "{œfieldNameœ:œTMC_Prompt-ekcNXœ,œidœ:œgroupComponent-Jcwnjœ,œinputTypesœ:[œMessageœ,œTextœ],œproxyœ:{œfieldœ:œTMCœ,œidœ:œPrompt-ekcNXœ},œtypeœ:œstrœ}",
          "data": {
            "targetHandle": {
              "fieldName": "TMC_Prompt-ekcNX",
              "id": "groupComponent-Jcwnj",
              "inputTypes": [
                "Message",
                "Text"
              ],
              "proxy": {
                "field": "TMC",
                "id": "Prompt-ekcNX"
              },
              "type": "str"
            },
            "sourceHandle": {
              "dataType": "TractorInfoParser",
              "id": "CustomComponent-ShIul",
              "name": "tractor_model_code",
              "output_types": [
                "Text"
              ]
            }
          },
          "id": "reactflow__edge-CustomComponent-ShIul{œdataTypeœ:œTractorInfoParserœ,œidœ:œCustomComponent-ShIulœ,œnameœ:œtractor_model_codeœ,œoutput_typesœ:[œTextœ]}-groupComponent-Jcwnj{œfieldNameœ:œTMC_Prompt-ekcNXœ,œidœ:œgroupComponent-Jcwnjœ,œinputTypesœ:[œMessageœ,œTextœ],œproxyœ:{œfieldœ:œTMCœ,œidœ:œPrompt-ekcNXœ},œtypeœ:œstrœ}",
          "animated": false,
          "className": ""
        },
        {
          "source": "CustomComponent-ShIul",
          "sourceHandle": "{œdataTypeœ:œTractorInfoParserœ,œidœ:œCustomComponent-ShIulœ,œnameœ:œtractor_model_codeœ,œoutput_typesœ:[œTextœ]}",
          "target": "groupComponent-Ar7df",
          "targetHandle": "{œfieldNameœ:œTMC_Prompt-vkXhtœ,œidœ:œgroupComponent-Ar7dfœ,œinputTypesœ:[œMessageœ,œTextœ],œproxyœ:{œfieldœ:œTMCœ,œidœ:œPrompt-vkXhtœ},œtypeœ:œstrœ}",
          "data": {
            "targetHandle": {
              "fieldName": "TMC_Prompt-vkXht",
              "id": "groupComponent-Ar7df",
              "inputTypes": [
                "Message",
                "Text"
              ],
              "proxy": {
                "field": "TMC",
                "id": "Prompt-vkXht"
              },
              "type": "str"
            },
            "sourceHandle": {
              "dataType": "TractorInfoParser",
              "id": "CustomComponent-ShIul",
              "name": "tractor_model_code",
              "output_types": [
                "Text"
              ]
            }
          },
          "id": "reactflow__edge-CustomComponent-ShIul{œdataTypeœ:œTractorInfoParserœ,œidœ:œCustomComponent-ShIulœ,œnameœ:œtractor_model_codeœ,œoutput_typesœ:[œTextœ]}-groupComponent-Ar7df{œfieldNameœ:œTMC_Prompt-vkXhtœ,œidœ:œgroupComponent-Ar7dfœ,œinputTypesœ:[œMessageœ,œTextœ],œproxyœ:{œfieldœ:œTMCœ,œidœ:œPrompt-vkXhtœ},œtypeœ:œstrœ}",
          "animated": false,
          "className": ""
        },
        {
          "source": "File-fuRv5",
          "sourceHandle": "{œdataTypeœ:œFileœ,œidœ:œFile-fuRv5œ,œnameœ:œdataœ,œoutput_typesœ:[œDataœ]}",
          "target": "SplitText-EeRBo",
          "targetHandle": "{œfieldNameœ:œdata_inputsœ,œidœ:œSplitText-EeRBoœ,œinputTypesœ:[œDataœ],œtypeœ:œotherœ}",
          "data": {
            "targetHandle": {
              "fieldName": "data_inputs",
              "id": "SplitText-EeRBo",
              "inputTypes": [
                "Data"
              ],
              "type": "other"
            },
            "sourceHandle": {
              "dataType": "File",
              "id": "File-fuRv5",
              "name": "data",
              "output_types": [
                "Data"
              ]
            }
          },
          "id": "reactflow__edge-File-fuRv5{œdataTypeœ:œFileœ,œidœ:œFile-fuRv5œ,œnameœ:œdataœ,œoutput_typesœ:[œDataœ]}-SplitText-EeRBo{œfieldNameœ:œdata_inputsœ,œidœ:œSplitText-EeRBoœ,œinputTypesœ:[œDataœ],œtypeœ:œotherœ}",
          "className": ""
        },
        {
          "source": "SplitText-EeRBo",
          "sourceHandle": "{œdataTypeœ:œSplitTextœ,œidœ:œSplitText-EeRBoœ,œnameœ:œchunksœ,œoutput_typesœ:[œDataœ]}",
          "target": "Chroma-tlfnm",
          "targetHandle": "{œfieldNameœ:œingest_dataœ,œidœ:œChroma-tlfnmœ,œinputTypesœ:[œDataœ],œtypeœ:œotherœ}",
          "data": {
            "targetHandle": {
              "fieldName": "ingest_data",
              "id": "Chroma-tlfnm",
              "inputTypes": [
                "Data"
              ],
              "type": "other"
            },
            "sourceHandle": {
              "dataType": "SplitText",
              "id": "SplitText-EeRBo",
              "name": "chunks",
              "output_types": [
                "Data"
              ]
            }
          },
          "id": "reactflow__edge-SplitText-EeRBo{œdataTypeœ:œSplitTextœ,œidœ:œSplitText-EeRBoœ,œnameœ:œchunksœ,œoutput_typesœ:[œDataœ]}-Chroma-tlfnm{œfieldNameœ:œingest_dataœ,œidœ:œChroma-tlfnmœ,œinputTypesœ:[œDataœ],œtypeœ:œotherœ}",
          "className": ""
        },
        {
          "source": "OpenAIEmbeddings-alQyE",
          "sourceHandle": "{œdataTypeœ:œOpenAIEmbeddingsœ,œidœ:œOpenAIEmbeddings-alQyEœ,œnameœ:œembeddingsœ,œoutput_typesœ:[œEmbeddingsœ]}",
          "target": "Chroma-tlfnm",
          "targetHandle": "{œfieldNameœ:œembeddingœ,œidœ:œChroma-tlfnmœ,œinputTypesœ:[œEmbeddingsœ],œtypeœ:œotherœ}",
          "data": {
            "targetHandle": {
              "fieldName": "embedding",
              "id": "Chroma-tlfnm",
              "inputTypes": [
                "Embeddings"
              ],
              "type": "other"
            },
            "sourceHandle": {
              "dataType": "OpenAIEmbeddings",
              "id": "OpenAIEmbeddings-alQyE",
              "name": "embeddings",
              "output_types": [
                "Embeddings"
              ]
            }
          },
          "id": "reactflow__edge-OpenAIEmbeddings-alQyE{œdataTypeœ:œOpenAIEmbeddingsœ,œidœ:œOpenAIEmbeddings-alQyEœ,œnameœ:œembeddingsœ,œoutput_typesœ:[œEmbeddingsœ]}-Chroma-tlfnm{œfieldNameœ:œembeddingœ,œidœ:œChroma-tlfnmœ,œinputTypesœ:[œEmbeddingsœ],œtypeœ:œotherœ}"
        }
      ],
      "viewport": {
        "x": 4007.7428099723857,
        "y": 1641.3767302184704,
        "zoom": 1.0847474013930776
      }
    },
    "date_created": "2024-11-05T09:51:55.789Z",
    "date_updated": "2024-11-05T09:51:56.874Z",
    "status": "Public",
    "sort": null,
    "user_updated": "1ccd9106-4dc3-4c07-a3ce-4e2e1c4aad76",
    "user_created": {
      "username": "michelepastorello",
      "first_name": "Michele",
      "last_name": "Pastorello",
      "id": "1ccd9106-4dc3-4c07-a3ce-4e2e1c4aad76"
    },
    "tags": []
  },
  "conversion": {
    "converted_at": "2025-08-19T18:09:01.920Z",
    "converted_from": "langflow",
    "converted_to": "axiestudio",
    "conversions_made": 380,
    "converter_version": "1.0.0"
  }
}