{
  "id": "359cc14d-eb13-4cdb-91c0-4db52c3968cd",
  "name": "Youtube Subclips Generator",
  "description": "Generates clips from a YouTube video based on the subtopics in the video (Converted from Langflow Store for AxieStudio compatibility)",
  "type": "FLOW",
  "is_component": false,
  "author": {
    "username": "misbah",
    "first_name": "Menlo Park Lab",
    "last_name": "Lab",
    "id": "8ca3c638-244a-4d41-ae61-bc145776bd63",
    "full_name": "Menlo Park Lab Lab"
  },
  "store_url": "https://www.langflow.store/store/component/359cc14d-eb13-4cdb-91c0-4db52c3968cd",
  "stats": {
    "downloads": 0,
    "likes": 0
  },
  "dates": {
    "created": "2024-06-07T13:49:19.914Z",
    "updated": "2024-06-07T13:49:20.011Z",
    "downloaded": "2025-08-19T17:50:05.405Z"
  },
  "tags": [],
  "technical": {
    "last_tested_version": "1.0.0a35",
    "private": false,
    "status": "Public"
  },
  "data": {
    "nodes": [
      {
        "id": "CustomComponent-urGgg",
        "type": "genericNode",
        "position": {
          "x": -37.48310457307707,
          "y": 62.4921875
        },
        "data": {
          "type": "CustomComponent",
          "node": {
            "template": {
              "code": {
                "type": "code",
                "required": true,
                "placeholder": "",
                "list": false,
                "show": true,
                "multiline": true,
                "value": "# from axiestudio.field_typing import Data\nfrom axiestudio.schema import Record\nfrom axiestudio.custom import CustomComponent\nfrom pytube import YouTube\nfrom youtube_transcript_api import YouTubeTranscriptApi\nimport os\n\nclass YouTubeDownloader(CustomComponent):\n    display_name = \"YouTube Downloader and Transcript Getter\"\n    description = \"Downloads a YouTube video and gets its transcript\"\n    icon=\"📹\"\n\n    def build_config(self):\n        return {\n            \"youtube_url\": {\n                \"type\": \"text\",\n                \"label\": \"YouTube URL\",\n                \"placeholder\": \"Enter the URL of the YouTube video\",\n            }\n        }\n\n    def build(self, youtube_url: str) -> Record:\n        # Download the video\n        yt = YouTube(youtube_url)\n        video = yt.streams.filter(file_extension='mp4').first()\n        safe_title = yt.title.replace(' ', '_')\n        filename = f\"downloaded_video/{safe_title}.mp4\"\n        \n        # Ensure the 'downloaded_video' directory exists\n        os.makedirs('downloaded_video', exist_ok=True)\n        \n        video.download(filename=filename)\n\n        # Get the transcript\n        video_id = yt.video_id\n        transcript = YouTubeTranscriptApi.get_transcript(video_id)\n        \n        # Return the Record with video path and transcript\n        return Record(video_path=filename, transcript=transcript, video_title=safe_title)\n\n",
                "fileTypes": [],
                "file_path": "",
                "password": false,
                "name": "code",
                "advanced": true,
                "dynamic": true,
                "info": "",
                "load_from_db": false,
                "title_case": false
              },
              "youtube_url": {
                "type": "str",
                "required": true,
                "placeholder": "Enter the URL of the YouTube video",
                "list": false,
                "show": true,
                "multiline": false,
                "fileTypes": [],
                "file_path": "",
                "password": false,
                "name": "youtube_url",
                "advanced": false,
                "dynamic": false,
                "info": "",
                "load_from_db": false,
                "title_case": false,
                "input_types": [
                  "Text"
                ],
                "value": "https://www.youtube.com/watch?v=4WO5kJChg3w"
              },
              "_type": "CustomComponent"
            },
            "description": "Downloads a YouTube video and gets its transcript",
            "icon": "📹",
            "base_classes": [
              "Record"
            ],
            "display_name": "YT Download",
            "documentation": "",
            "custom_fields": {
              "youtube_url": null
            },
            "output_types": [
              "Record"
            ],
            "field_formatters": {},
            "frozen": false,
            "field_order": [],
            "beta": false
          },
          "id": "CustomComponent-urGgg",
          "description": "Downloads a YouTube video and gets its transcript",
          "display_name": "YT Download"
        },
        "selected": true,
        "width": 384,
        "height": 285,
        "dragging": false,
        "positionAbsolute": {
          "x": -37.48310457307707,
          "y": 62.4921875
        }
      },
      {
        "id": "CustomComponent-ziIEd",
        "type": "genericNode",
        "position": {
          "x": 572.5507038804574,
          "y": 296.06443938462627
        },
        "data": {
          "type": "CustomComponent",
          "node": {
            "template": {
              "record": {
                "type": "Record",
                "required": true,
                "placeholder": "Provide the Record with the transcript and video path",
                "list": false,
                "show": true,
                "multiline": false,
                "fileTypes": [],
                "file_path": "",
                "password": false,
                "name": "record",
                "advanced": false,
                "dynamic": false,
                "info": "",
                "load_from_db": false,
                "title_case": false
              },
              "api_key": {
                "type": "str",
                "required": true,
                "placeholder": "Enter your OpenAI API key",
                "list": false,
                "show": true,
                "multiline": false,
                "fileTypes": [],
                "file_path": "",
                "password": false,
                "name": "api_key",
                "advanced": false,
                "dynamic": false,
                "info": "",
                "load_from_db": false,
                "title_case": false,
                "input_types": [
                  "Text"
                ],
                "value": ""
              },
              "code": {
                "type": "code",
                "required": true,
                "placeholder": "",
                "list": false,
                "show": true,
                "multiline": true,
                "value": "from axiestudio.custom import CustomComponent\nfrom axiestudio.schema import Record\nfrom typing import List\nfrom langchain_core.pydantic_v1 import BaseModel, Field\nfrom langchain_openai import ChatOpenAI\n\n\nclass TranscriptAnalyzer(CustomComponent):\n    display_name = \"Transcript Analyzer\"\n    description = \"Analyzes the transcript and identifies sub-topics\"\n    icon=\"📝\"\n\n    def build_config(self):\n        return {\n            \"record\": {\n                \"type\": \"record\",\n                \"label\": \"Input Record\",\n                \"placeholder\": \"Provide the Record with the transcript and video path\",\n            },\n            \"api_key\": {\n                \"type\": \"text\",\n                \"label\": \"OpenAI API Key\",\n                \"placeholder\": \"Enter your OpenAI API key\",\n            }\n        }\n\n    def build(self, record: Record, api_key: str) -> Record:\n        # Initialize the LLM\n        llm = ChatOpenAI(\n            model=\"gpt-4o\",\n            temperature=0.7,\n            max_tokens=None,\n            timeout=None,\n            max_retries=2,\n            api_key=api_key\n        )\n\n        # Analyze the transcript\n        prompt = f\"Provided to you is a transcript of a video. Please identify all segments that can be extracted as subtopics from the video based on the transcript. Make sure each segment is between 30 - 500 seconds in duration. Make Sure you provide extremely accurate timestamps and respond only in the format provided  \\n Here is the Transcription:\\n{record.transcript}\"\n        messages = [\n            {\"role\": \"system\", \"content\": \"You are a Viral Content Producer. You are master at reading youtube transcripts and identifying the most intriguing content. You have extrordinary skills to extract every subtopic that can be repurposed as a separate video\"},\n            {\"role\": \"user\", \"content\": prompt}\n        ]\n        class Segment(BaseModel):\n            \"\"\"Represents a segment of a video.\"\"\"\n        \n            start_time: float = Field(..., description=\"The start time of the segment in seconds.\")\n            end_time: float = Field(..., description=\"The end time of the segment in seconds.\")\n            yt_title: str = Field(..., description=\"The youtube title to make this segment as a viral sub-topic\")\n            description: str = Field(..., description=\"The detailed youtube description to make this segment viral\")\n            duration: int = Field(..., description=\"The duration of the segment in seconds.\")\n        \n        class VideoTranscript(BaseModel):\n            \"\"\"Represents the transcript of a video with identified viral segments.\"\"\"\n            segments: List[Segment] = Field(..., description=\"A list of viral segments in the video.\")\n\n        structured_llm = llm.with_structured_output(VideoTranscript)\n        ai_msg = structured_llm.invoke(messages)\n        # print(ai_msg)\n        parsed_content = ai_msg.dict()[\"segments\"]\n        # Add the segment data to the Record\n        record.segments = parsed_content\n        return record",
                "fileTypes": [],
                "file_path": "",
                "password": false,
                "name": "code",
                "advanced": true,
                "dynamic": true,
                "info": "",
                "load_from_db": false,
                "title_case": false
              },
              "_type": "CustomComponent"
            },
            "description": "Analyzes the transcript and identifies sub-topics",
            "icon": "📝",
            "base_classes": [
              "Record"
            ],
            "display_name": "Analyze Transcript",
            "documentation": "",
            "custom_fields": {
              "record": null,
              "api_key": null
            },
            "output_types": [
              "Record"
            ],
            "field_formatters": {},
            "frozen": false,
            "field_order": [],
            "beta": false
          },
          "id": "CustomComponent-ziIEd",
          "description": "Analyzes the transcript and identifies sub-topics",
          "display_name": "Analyze Transcript"
        },
        "selected": false,
        "width": 384,
        "height": 333,
        "positionAbsolute": {
          "x": 572.5507038804574,
          "y": 296.06443938462627
        },
        "dragging": false
      },
      {
        "id": "CustomComponent-fTLxN",
        "type": "genericNode",
        "position": {
          "x": 1247.077848589308,
          "y": 571.1315992095689
        },
        "data": {
          "type": "CustomComponent",
          "node": {
            "template": {
              "record": {
                "type": "Record",
                "required": true,
                "placeholder": "Provide the Record with the transcript, video path, and segments",
                "list": false,
                "show": true,
                "multiline": false,
                "fileTypes": [],
                "file_path": "",
                "password": false,
                "name": "record",
                "advanced": false,
                "dynamic": false,
                "info": "",
                "load_from_db": false,
                "title_case": false
              },
              "code": {
                "type": "code",
                "required": true,
                "placeholder": "",
                "list": false,
                "show": true,
                "multiline": true,
                "value": "import subprocess\nimport json\nfrom axiestudio.custom import CustomComponent\nfrom axiestudio.schema import Record\nimport os\n\nclass VideoSegmenter(CustomComponent):\n    display_name = \"Video Segmenter and Data Saver\"\n    description = \"Segments the video and saves the segment data to disk\"\n\n    def build_config(self):\n        return {\n            \"record\": {\n                \"type\": \"record\",\n                \"label\": \"Input Record\",\n                \"placeholder\": \"Provide the Record with the transcript, video path, and segments\",\n            }\n        }\n\n    def build(self, record: Record) -> Record:\n        # Ensure the 'generated_clips' directory exists\n        os.makedirs('generated_clips', exist_ok=True)\n\n        # Segment the video and prepare segment labels\n        segment_labels = []\n        video_title = record.video_title\n        for i, segment in enumerate(record.segments):\n            start_time = segment['start_time']\n            end_time = segment['end_time']\n            yt_title = segment['yt_title'] #.replace(' ', '_')  # Replace spaces with underscores\n            description = segment['description']\n            duration = segment['duration']\n\n            output_file = f\"generated_clips/{video_title}_{str(i).zfill(3)}.mp4\"\n            # command = f\"ffmpeg -i {record.video_path} -ss {start_time} -to {end_time} -c copy {output_file}\"\n            command = f\"ffmpeg -i {record.video_path} -ss {start_time} -to {end_time} -c:v libx264 -c:a aac -strict experimental -b:a 192k {output_file}\"\n            subprocess.call(command, shell=True)\n\n            # Add segment label\n            segment_labels.append(f\"Sub-Topic {i+1}: {yt_title}, Duration: {duration}s\\nDescription: {description}\\n\")\n\n        # Save the segment labels to a text file\n        with open('generated_clips/segment_labels.txt', 'w') as f:\n            for label in segment_labels:\n                f.write(label + \"\\n\")\n\n        # Save the segment data to a JSON file\n        with open('generated_clips/segments.json', 'w') as f:\n            json.dump(record.segments, f, indent=4)\n\n        # Add the filename to the record\n        record.filename = record.video_path.split('/')[-1]\n\n        return record",
                "fileTypes": [],
                "file_path": "",
                "password": false,
                "name": "code",
                "advanced": true,
                "dynamic": true,
                "info": "",
                "load_from_db": false,
                "title_case": false
              },
              "_type": "CustomComponent"
            },
            "description": "Segments the video and saves the segment data to disk",
            "base_classes": [
              "Record"
            ],
            "display_name": "Video Segmenter",
            "documentation": "",
            "custom_fields": {
              "record": null
            },
            "output_types": [
              "Record"
            ],
            "field_formatters": {},
            "frozen": false,
            "field_order": [],
            "beta": false
          },
          "id": "CustomComponent-fTLxN",
          "description": "Segments the video and saves the segment data to disk",
          "display_name": "Video Segmenter"
        },
        "selected": false,
        "width": 384,
        "height": 263,
        "positionAbsolute": {
          "x": 1247.077848589308,
          "y": 571.1315992095689
        },
        "dragging": false
      }
    ],
    "edges": [
      {
        "source": "CustomComponent-urGgg",
        "sourceHandle": "{œbaseClassesœ:[œRecordœ],œdataTypeœ:œCustomComponentœ,œidœ:œCustomComponent-urGggœ}",
        "target": "CustomComponent-ziIEd",
        "targetHandle": "{œfieldNameœ:œrecordœ,œidœ:œCustomComponent-ziIEdœ,œinputTypesœ:null,œtypeœ:œRecordœ}",
        "data": {
          "targetHandle": {
            "fieldName": "record",
            "id": "CustomComponent-ziIEd",
            "inputTypes": null,
            "type": "Record"
          },
          "sourceHandle": {
            "baseClasses": [
              "Record"
            ],
            "dataType": "CustomComponent",
            "id": "CustomComponent-urGgg"
          }
        },
        "style": {
          "stroke": "#555"
        },
        "className": "stroke-gray-900 stroke-connection",
        "id": "reactflow__edge-CustomComponent-urGgg{œbaseClassesœ:[œRecordœ],œdataTypeœ:œCustomComponentœ,œidœ:œCustomComponent-urGggœ}-CustomComponent-ziIEd{œfieldNameœ:œrecordœ,œidœ:œCustomComponent-ziIEdœ,œinputTypesœ:null,œtypeœ:œRecordœ}"
      },
      {
        "source": "CustomComponent-ziIEd",
        "sourceHandle": "{œbaseClassesœ:[œRecordœ],œdataTypeœ:œCustomComponentœ,œidœ:œCustomComponent-ziIEdœ}",
        "target": "CustomComponent-fTLxN",
        "targetHandle": "{œfieldNameœ:œrecordœ,œidœ:œCustomComponent-fTLxNœ,œinputTypesœ:null,œtypeœ:œRecordœ}",
        "data": {
          "targetHandle": {
            "fieldName": "record",
            "id": "CustomComponent-fTLxN",
            "inputTypes": null,
            "type": "Record"
          },
          "sourceHandle": {
            "baseClasses": [
              "Record"
            ],
            "dataType": "CustomComponent",
            "id": "CustomComponent-ziIEd"
          }
        },
        "style": {
          "stroke": "#555"
        },
        "className": "stroke-gray-900 stroke-connection",
        "id": "reactflow__edge-CustomComponent-ziIEd{œbaseClassesœ:[œRecordœ],œdataTypeœ:œCustomComponentœ,œidœ:œCustomComponent-ziIEdœ}-CustomComponent-fTLxN{œfieldNameœ:œrecordœ,œidœ:œCustomComponent-fTLxNœ,œinputTypesœ:null,œtypeœ:œRecordœ}"
      }
    ],
    "viewport": {
      "x": 91.7857859045788,
      "y": 78.07201969644728,
      "zoom": 0.5904001670105266
    }
  },
  "metadata": {
    "CustomComponent": {
      "count": 3
    },
    "total": 3
  },
  "original": {
    "id": "359cc14d-eb13-4cdb-91c0-4db52c3968cd",
    "name": "Youtube Subclips Generator",
    "description": "Generates clips from a YouTube video based on the subtopics in the video",
    "is_component": false,
    "liked_by_count": "22",
    "downloads_count": "137",
    "metadata": {
      "CustomComponent": {
        "count": 3
      },
      "total": 3
    },
    "last_tested_version": "1.0.0a35",
    "private": false,
    "data": {
      "nodes": [
        {
          "id": "CustomComponent-urGgg",
          "type": "genericNode",
          "position": {
            "x": -37.48310457307707,
            "y": 62.4921875
          },
          "data": {
            "type": "CustomComponent",
            "node": {
              "template": {
                "code": {
                  "type": "code",
                  "required": true,
                  "placeholder": "",
                  "list": false,
                  "show": true,
                  "multiline": true,
                  "value": "# from axiestudio.field_typing import Data\nfrom axiestudio.schema import Record\nfrom axiestudio.custom import CustomComponent\nfrom pytube import YouTube\nfrom youtube_transcript_api import YouTubeTranscriptApi\nimport os\n\nclass YouTubeDownloader(CustomComponent):\n    display_name = \"YouTube Downloader and Transcript Getter\"\n    description = \"Downloads a YouTube video and gets its transcript\"\n    icon=\"📹\"\n\n    def build_config(self):\n        return {\n            \"youtube_url\": {\n                \"type\": \"text\",\n                \"label\": \"YouTube URL\",\n                \"placeholder\": \"Enter the URL of the YouTube video\",\n            }\n        }\n\n    def build(self, youtube_url: str) -> Record:\n        # Download the video\n        yt = YouTube(youtube_url)\n        video = yt.streams.filter(file_extension='mp4').first()\n        safe_title = yt.title.replace(' ', '_')\n        filename = f\"downloaded_video/{safe_title}.mp4\"\n        \n        # Ensure the 'downloaded_video' directory exists\n        os.makedirs('downloaded_video', exist_ok=True)\n        \n        video.download(filename=filename)\n\n        # Get the transcript\n        video_id = yt.video_id\n        transcript = YouTubeTranscriptApi.get_transcript(video_id)\n        \n        # Return the Record with video path and transcript\n        return Record(video_path=filename, transcript=transcript, video_title=safe_title)\n\n",
                  "fileTypes": [],
                  "file_path": "",
                  "password": false,
                  "name": "code",
                  "advanced": true,
                  "dynamic": true,
                  "info": "",
                  "load_from_db": false,
                  "title_case": false
                },
                "youtube_url": {
                  "type": "str",
                  "required": true,
                  "placeholder": "Enter the URL of the YouTube video",
                  "list": false,
                  "show": true,
                  "multiline": false,
                  "fileTypes": [],
                  "file_path": "",
                  "password": false,
                  "name": "youtube_url",
                  "advanced": false,
                  "dynamic": false,
                  "info": "",
                  "load_from_db": false,
                  "title_case": false,
                  "input_types": [
                    "Text"
                  ],
                  "value": "https://www.youtube.com/watch?v=4WO5kJChg3w"
                },
                "_type": "CustomComponent"
              },
              "description": "Downloads a YouTube video and gets its transcript",
              "icon": "📹",
              "base_classes": [
                "Record"
              ],
              "display_name": "YT Download",
              "documentation": "",
              "custom_fields": {
                "youtube_url": null
              },
              "output_types": [
                "Record"
              ],
              "field_formatters": {},
              "frozen": false,
              "field_order": [],
              "beta": false
            },
            "id": "CustomComponent-urGgg",
            "description": "Downloads a YouTube video and gets its transcript",
            "display_name": "YT Download"
          },
          "selected": true,
          "width": 384,
          "height": 285,
          "dragging": false,
          "positionAbsolute": {
            "x": -37.48310457307707,
            "y": 62.4921875
          }
        },
        {
          "id": "CustomComponent-ziIEd",
          "type": "genericNode",
          "position": {
            "x": 572.5507038804574,
            "y": 296.06443938462627
          },
          "data": {
            "type": "CustomComponent",
            "node": {
              "template": {
                "record": {
                  "type": "Record",
                  "required": true,
                  "placeholder": "Provide the Record with the transcript and video path",
                  "list": false,
                  "show": true,
                  "multiline": false,
                  "fileTypes": [],
                  "file_path": "",
                  "password": false,
                  "name": "record",
                  "advanced": false,
                  "dynamic": false,
                  "info": "",
                  "load_from_db": false,
                  "title_case": false
                },
                "api_key": {
                  "type": "str",
                  "required": true,
                  "placeholder": "Enter your OpenAI API key",
                  "list": false,
                  "show": true,
                  "multiline": false,
                  "fileTypes": [],
                  "file_path": "",
                  "password": false,
                  "name": "api_key",
                  "advanced": false,
                  "dynamic": false,
                  "info": "",
                  "load_from_db": false,
                  "title_case": false,
                  "input_types": [
                    "Text"
                  ],
                  "value": ""
                },
                "code": {
                  "type": "code",
                  "required": true,
                  "placeholder": "",
                  "list": false,
                  "show": true,
                  "multiline": true,
                  "value": "from axiestudio.custom import CustomComponent\nfrom axiestudio.schema import Record\nfrom typing import List\nfrom langchain_core.pydantic_v1 import BaseModel, Field\nfrom langchain_openai import ChatOpenAI\n\n\nclass TranscriptAnalyzer(CustomComponent):\n    display_name = \"Transcript Analyzer\"\n    description = \"Analyzes the transcript and identifies sub-topics\"\n    icon=\"📝\"\n\n    def build_config(self):\n        return {\n            \"record\": {\n                \"type\": \"record\",\n                \"label\": \"Input Record\",\n                \"placeholder\": \"Provide the Record with the transcript and video path\",\n            },\n            \"api_key\": {\n                \"type\": \"text\",\n                \"label\": \"OpenAI API Key\",\n                \"placeholder\": \"Enter your OpenAI API key\",\n            }\n        }\n\n    def build(self, record: Record, api_key: str) -> Record:\n        # Initialize the LLM\n        llm = ChatOpenAI(\n            model=\"gpt-4o\",\n            temperature=0.7,\n            max_tokens=None,\n            timeout=None,\n            max_retries=2,\n            api_key=api_key\n        )\n\n        # Analyze the transcript\n        prompt = f\"Provided to you is a transcript of a video. Please identify all segments that can be extracted as subtopics from the video based on the transcript. Make sure each segment is between 30 - 500 seconds in duration. Make Sure you provide extremely accurate timestamps and respond only in the format provided  \\n Here is the Transcription:\\n{record.transcript}\"\n        messages = [\n            {\"role\": \"system\", \"content\": \"You are a Viral Content Producer. You are master at reading youtube transcripts and identifying the most intriguing content. You have extrordinary skills to extract every subtopic that can be repurposed as a separate video\"},\n            {\"role\": \"user\", \"content\": prompt}\n        ]\n        class Segment(BaseModel):\n            \"\"\"Represents a segment of a video.\"\"\"\n        \n            start_time: float = Field(..., description=\"The start time of the segment in seconds.\")\n            end_time: float = Field(..., description=\"The end time of the segment in seconds.\")\n            yt_title: str = Field(..., description=\"The youtube title to make this segment as a viral sub-topic\")\n            description: str = Field(..., description=\"The detailed youtube description to make this segment viral\")\n            duration: int = Field(..., description=\"The duration of the segment in seconds.\")\n        \n        class VideoTranscript(BaseModel):\n            \"\"\"Represents the transcript of a video with identified viral segments.\"\"\"\n            segments: List[Segment] = Field(..., description=\"A list of viral segments in the video.\")\n\n        structured_llm = llm.with_structured_output(VideoTranscript)\n        ai_msg = structured_llm.invoke(messages)\n        # print(ai_msg)\n        parsed_content = ai_msg.dict()[\"segments\"]\n        # Add the segment data to the Record\n        record.segments = parsed_content\n        return record",
                  "fileTypes": [],
                  "file_path": "",
                  "password": false,
                  "name": "code",
                  "advanced": true,
                  "dynamic": true,
                  "info": "",
                  "load_from_db": false,
                  "title_case": false
                },
                "_type": "CustomComponent"
              },
              "description": "Analyzes the transcript and identifies sub-topics",
              "icon": "📝",
              "base_classes": [
                "Record"
              ],
              "display_name": "Analyze Transcript",
              "documentation": "",
              "custom_fields": {
                "record": null,
                "api_key": null
              },
              "output_types": [
                "Record"
              ],
              "field_formatters": {},
              "frozen": false,
              "field_order": [],
              "beta": false
            },
            "id": "CustomComponent-ziIEd",
            "description": "Analyzes the transcript and identifies sub-topics",
            "display_name": "Analyze Transcript"
          },
          "selected": false,
          "width": 384,
          "height": 333,
          "positionAbsolute": {
            "x": 572.5507038804574,
            "y": 296.06443938462627
          },
          "dragging": false
        },
        {
          "id": "CustomComponent-fTLxN",
          "type": "genericNode",
          "position": {
            "x": 1247.077848589308,
            "y": 571.1315992095689
          },
          "data": {
            "type": "CustomComponent",
            "node": {
              "template": {
                "record": {
                  "type": "Record",
                  "required": true,
                  "placeholder": "Provide the Record with the transcript, video path, and segments",
                  "list": false,
                  "show": true,
                  "multiline": false,
                  "fileTypes": [],
                  "file_path": "",
                  "password": false,
                  "name": "record",
                  "advanced": false,
                  "dynamic": false,
                  "info": "",
                  "load_from_db": false,
                  "title_case": false
                },
                "code": {
                  "type": "code",
                  "required": true,
                  "placeholder": "",
                  "list": false,
                  "show": true,
                  "multiline": true,
                  "value": "import subprocess\nimport json\nfrom axiestudio.custom import CustomComponent\nfrom axiestudio.schema import Record\nimport os\n\nclass VideoSegmenter(CustomComponent):\n    display_name = \"Video Segmenter and Data Saver\"\n    description = \"Segments the video and saves the segment data to disk\"\n\n    def build_config(self):\n        return {\n            \"record\": {\n                \"type\": \"record\",\n                \"label\": \"Input Record\",\n                \"placeholder\": \"Provide the Record with the transcript, video path, and segments\",\n            }\n        }\n\n    def build(self, record: Record) -> Record:\n        # Ensure the 'generated_clips' directory exists\n        os.makedirs('generated_clips', exist_ok=True)\n\n        # Segment the video and prepare segment labels\n        segment_labels = []\n        video_title = record.video_title\n        for i, segment in enumerate(record.segments):\n            start_time = segment['start_time']\n            end_time = segment['end_time']\n            yt_title = segment['yt_title'] #.replace(' ', '_')  # Replace spaces with underscores\n            description = segment['description']\n            duration = segment['duration']\n\n            output_file = f\"generated_clips/{video_title}_{str(i).zfill(3)}.mp4\"\n            # command = f\"ffmpeg -i {record.video_path} -ss {start_time} -to {end_time} -c copy {output_file}\"\n            command = f\"ffmpeg -i {record.video_path} -ss {start_time} -to {end_time} -c:v libx264 -c:a aac -strict experimental -b:a 192k {output_file}\"\n            subprocess.call(command, shell=True)\n\n            # Add segment label\n            segment_labels.append(f\"Sub-Topic {i+1}: {yt_title}, Duration: {duration}s\\nDescription: {description}\\n\")\n\n        # Save the segment labels to a text file\n        with open('generated_clips/segment_labels.txt', 'w') as f:\n            for label in segment_labels:\n                f.write(label + \"\\n\")\n\n        # Save the segment data to a JSON file\n        with open('generated_clips/segments.json', 'w') as f:\n            json.dump(record.segments, f, indent=4)\n\n        # Add the filename to the record\n        record.filename = record.video_path.split('/')[-1]\n\n        return record",
                  "fileTypes": [],
                  "file_path": "",
                  "password": false,
                  "name": "code",
                  "advanced": true,
                  "dynamic": true,
                  "info": "",
                  "load_from_db": false,
                  "title_case": false
                },
                "_type": "CustomComponent"
              },
              "description": "Segments the video and saves the segment data to disk",
              "base_classes": [
                "Record"
              ],
              "display_name": "Video Segmenter",
              "documentation": "",
              "custom_fields": {
                "record": null
              },
              "output_types": [
                "Record"
              ],
              "field_formatters": {},
              "frozen": false,
              "field_order": [],
              "beta": false
            },
            "id": "CustomComponent-fTLxN",
            "description": "Segments the video and saves the segment data to disk",
            "display_name": "Video Segmenter"
          },
          "selected": false,
          "width": 384,
          "height": 263,
          "positionAbsolute": {
            "x": 1247.077848589308,
            "y": 571.1315992095689
          },
          "dragging": false
        }
      ],
      "edges": [
        {
          "source": "CustomComponent-urGgg",
          "sourceHandle": "{œbaseClassesœ:[œRecordœ],œdataTypeœ:œCustomComponentœ,œidœ:œCustomComponent-urGggœ}",
          "target": "CustomComponent-ziIEd",
          "targetHandle": "{œfieldNameœ:œrecordœ,œidœ:œCustomComponent-ziIEdœ,œinputTypesœ:null,œtypeœ:œRecordœ}",
          "data": {
            "targetHandle": {
              "fieldName": "record",
              "id": "CustomComponent-ziIEd",
              "inputTypes": null,
              "type": "Record"
            },
            "sourceHandle": {
              "baseClasses": [
                "Record"
              ],
              "dataType": "CustomComponent",
              "id": "CustomComponent-urGgg"
            }
          },
          "style": {
            "stroke": "#555"
          },
          "className": "stroke-gray-900 stroke-connection",
          "id": "reactflow__edge-CustomComponent-urGgg{œbaseClassesœ:[œRecordœ],œdataTypeœ:œCustomComponentœ,œidœ:œCustomComponent-urGggœ}-CustomComponent-ziIEd{œfieldNameœ:œrecordœ,œidœ:œCustomComponent-ziIEdœ,œinputTypesœ:null,œtypeœ:œRecordœ}"
        },
        {
          "source": "CustomComponent-ziIEd",
          "sourceHandle": "{œbaseClassesœ:[œRecordœ],œdataTypeœ:œCustomComponentœ,œidœ:œCustomComponent-ziIEdœ}",
          "target": "CustomComponent-fTLxN",
          "targetHandle": "{œfieldNameœ:œrecordœ,œidœ:œCustomComponent-fTLxNœ,œinputTypesœ:null,œtypeœ:œRecordœ}",
          "data": {
            "targetHandle": {
              "fieldName": "record",
              "id": "CustomComponent-fTLxN",
              "inputTypes": null,
              "type": "Record"
            },
            "sourceHandle": {
              "baseClasses": [
                "Record"
              ],
              "dataType": "CustomComponent",
              "id": "CustomComponent-ziIEd"
            }
          },
          "style": {
            "stroke": "#555"
          },
          "className": "stroke-gray-900 stroke-connection",
          "id": "reactflow__edge-CustomComponent-ziIEd{œbaseClassesœ:[œRecordœ],œdataTypeœ:œCustomComponentœ,œidœ:œCustomComponent-ziIEdœ}-CustomComponent-fTLxN{œfieldNameœ:œrecordœ,œidœ:œCustomComponent-fTLxNœ,œinputTypesœ:null,œtypeœ:œRecordœ}"
        }
      ],
      "viewport": {
        "x": 91.7857859045788,
        "y": 78.07201969644728,
        "zoom": 0.5904001670105266
      }
    },
    "date_created": "2024-06-07T13:49:19.914Z",
    "date_updated": "2024-06-07T13:49:20.011Z",
    "status": "Public",
    "sort": null,
    "user_updated": "8ca3c638-244a-4d41-ae61-bc145776bd63",
    "user_created": {
      "username": "misbah",
      "first_name": "Menlo Park Lab",
      "last_name": "Lab",
      "id": "8ca3c638-244a-4d41-ae61-bc145776bd63"
    },
    "tags": []
  },
  "conversion": {
    "converted_at": "2025-08-19T18:08:56.188Z",
    "converted_from": "langflow",
    "converted_to": "axiestudio",
    "conversions_made": 14,
    "converter_version": "1.0.0"
  }
}